
SCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bafc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c14  0801bd9c  0801bd9c  0002bd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f9b0  0801f9b0  0002f9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f9b8  0801f9b8  0002f9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f9bc  0801f9bc  0002f9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0801f9c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0801fa5c  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0801fabc  000300fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  2400015c  0801fb1c  0003015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000be40  2400192c  080212ec  0003192c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400d76c  080212ec  0003d76c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003192c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006df19  00000000  00000000  0003195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b2d3  00000000  00000000  0009f873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c30  00000000  00000000  000aab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a20  00000000  00000000  000ad778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004c967  00000000  00000000  000b0198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048429  00000000  00000000  000fcaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018c913  00000000  00000000  00144f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002d183b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bfe0  00000000  00000000  002d1890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400192c 	.word	0x2400192c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bd84 	.word	0x0801bd84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001930 	.word	0x24001930
 80002dc:	0801bd84 	.word	0x0801bd84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	24001948 	.word	0x24001948
 80006c0:	240019fc 	.word	0x240019fc

080006c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(unitDataEncTask, UnitDataEncTask, osPriorityHigh, 0, 2048);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_FREERTOS_Init+0x30>)
 80006cc:	1d3c      	adds	r4, r7, #4
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(unitDataEncTask), NULL);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 f920 	bl	8008926 <osThreadCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <MX_FREERTOS_Init+0x34>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	0801bdac 	.word	0x0801bdac
 80006f8:	24009f00 	.word	0x24009f00

080006fc <UnitDataEncTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void UnitDataEncTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint16_t port;
  ip_addr_t *addr;
  uint8_t* payload, send_payload;

  /* init code for LWIP */
  MX_LWIP_Init();
 8000704:	f007 fc12 	bl	8007f2c <MX_LWIP_Init>

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_UDP); //new udp netconn
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2020      	movs	r0, #32
 800070e:	f00b f90b 	bl	800b928 <netconn_new_with_proto_and_callback>
 8000712:	6278      	str	r0, [r7, #36]	; 0x24

  if (conn != NULL)
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d044      	beq.n	80007a4 <UnitDataEncTask+0xa8>
  {
	  err = netconn_bind(conn, NULL, 1500); // bind to port
 800071a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800071e:	2100      	movs	r1, #0
 8000720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000722:	f00b f9bb 	bl	800ba9c <netconn_bind>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  if (err == ERR_OK)
 800072c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000730:	2b00      	cmp	r3, #0
 8000732:	d13a      	bne.n	80007aa <UnitDataEncTask+0xae>
	  {
		  while(1)
		  {

			while(netconn_recv(conn, &buf) != ERR_OK);
 8000734:	bf00      	nop
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800073e:	f00b fb61 	bl	800be04 <netconn_recv>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f6      	bne.n	8000736 <UnitDataEncTask+0x3a>

			addr = netbuf_fromaddr(buf);
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	3308      	adds	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
			port = netbuf_fromport(buf);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	837b      	strh	r3, [r7, #26]

			len = buf->p->len;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	895b      	ldrh	r3, [r3, #10]
 800075a:	833b      	strh	r3, [r7, #24]
			payload = buf->p->payload;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	617b      	str	r3, [r7, #20]

			send_buf = netbuf_new();
 8000764:	f00c fea2 	bl	800d4ac <netbuf_new>
 8000768:	6138      	str	r0, [r7, #16]
			send_payload = netbuf_alloc(send_buf, len);
 800076a:	8b3b      	ldrh	r3, [r7, #24]
 800076c:	4619      	mov	r1, r3
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	f00c fed0 	bl	800d514 <netbuf_alloc>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
			memcpy(send_payload, payload, len);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4618      	mov	r0, r3
 800077c:	8b3b      	ldrh	r3, [r7, #24]
 800077e:	461a      	mov	r2, r3
 8000780:	6979      	ldr	r1, [r7, #20]
 8000782:	f01a fb5c 	bl	801ae3e <memcpy>

			netconn_sendto(conn, send_buf, addr, 1501); // Send packet
 8000786:	f240 53dd 	movw	r3, #1501	; 0x5dd
 800078a:	69fa      	ldr	r2, [r7, #28]
 800078c:	6939      	ldr	r1, [r7, #16]
 800078e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000790:	f00b fbb2 	bl	800bef8 <netconn_sendto>

			netbuf_delete(send_buf);
 8000794:	6938      	ldr	r0, [r7, #16]
 8000796:	f00c fe9d 	bl	800d4d4 <netbuf_delete>
			netbuf_delete(buf);
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4618      	mov	r0, r3
 800079e:	f00c fe99 	bl	800d4d4 <netbuf_delete>
		  {
 80007a2:	e7c7      	b.n	8000734 <UnitDataEncTask+0x38>
		  }
	  }
  }
  else
  {
	  netconn_delete(conn);
 80007a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007a6:	f00b f95d 	bl	800ba64 <netconn_delete>
  }

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b50      	ldr	r3, [pc, #320]	; (800090c <MX_GPIO_Init+0x158>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a4e      	ldr	r2, [pc, #312]	; (800090c <MX_GPIO_Init+0x158>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <MX_GPIO_Init+0x158>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_GPIO_Init+0x158>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	4a47      	ldr	r2, [pc, #284]	; (800090c <MX_GPIO_Init+0x158>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x158>)
 80007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_GPIO_Init+0x158>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a3f      	ldr	r2, [pc, #252]	; (800090c <MX_GPIO_Init+0x158>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <MX_GPIO_Init+0x158>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_GPIO_Init+0x158>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <MX_GPIO_Init+0x158>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <MX_GPIO_Init+0x158>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <MX_GPIO_Init+0x158>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a30      	ldr	r2, [pc, #192]	; (800090c <MX_GPIO_Init+0x158>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_GPIO_Init+0x158>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <MX_GPIO_Init+0x158>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a29      	ldr	r2, [pc, #164]	; (800090c <MX_GPIO_Init+0x158>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <MX_GPIO_Init+0x158>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000884:	4822      	ldr	r0, [pc, #136]	; (8000910 <MX_GPIO_Init+0x15c>)
 8000886:	f002 ff1f 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <MX_GPIO_Init+0x160>)
 8000890:	f002 ff1a 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <MX_GPIO_Init+0x164>)
 80008ac:	f002 fd5c 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0x15c>)
 80008ca:	f002 fd4d 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x160>)
 80008e6:	f002 fd3f 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0x160>)
 80008fe:	f002 fd33 	bl	8003368 <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400
 8000910:	58020400 	.word	0x58020400
 8000914:	58021800 	.word	0x58021800
 8000918:	58020800 	.word	0x58020800

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <main+0xa8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d138      	bne.n	80009a0 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <main+0xa8>)
 8000930:	2200      	movs	r2, #0
 8000932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000936:	f3bf 8f4f 	dsb	sy
}
 800093a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <main+0xa8>)
 800093e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000942:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	0b5b      	lsrs	r3, r3, #13
 8000948:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800094c:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	08db      	lsrs	r3, r3, #3
 8000952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000956:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	015a      	lsls	r2, r3, #5
 800095c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000960:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000966:	4917      	ldr	r1, [pc, #92]	; (80009c4 <main+0xa8>)
 8000968:	4313      	orrs	r3, r2
 800096a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1ef      	bne.n	8000958 <main+0x3c>
    } while(sets-- != 0U);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1e5      	bne.n	800094e <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000982:	f3bf 8f4f 	dsb	sy
}
 8000986:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <main+0xa8>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <main+0xa8>)
 800098e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000992:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000994:	f3bf 8f4f 	dsb	sy
}
 8000998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800099a:	f3bf 8f6f 	isb	sy
}
 800099e:	e000      	b.n	80009a2 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009a0:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fddf 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f80f 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff ff03 	bl	80007b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ae:	f000 faf1 	bl	8000f94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009b2:	f000 fba1 	bl	80010f8 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80009b6:	f000 f89b 	bl	8000af0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009ba:	f7ff fe83 	bl	80006c4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009be:	f007 ff9b 	bl	80088f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <main+0xa6>
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	; 0x70
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	224c      	movs	r2, #76	; 0x4c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f01a fa3f 	bl	801ae5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2220      	movs	r2, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f01a fa39 	bl	801ae5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f002 ffcf 	bl	800398c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <SystemClock_Config+0xf0>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <SystemClock_Config+0xf0>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <SystemClock_Config+0xf0>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <SystemClock_Config+0xf4>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <SystemClock_Config+0xf4>)
 8000a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <SystemClock_Config+0xf4>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a20:	bf00      	nop
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <SystemClock_Config+0xf4>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2e:	d1f8      	bne.n	8000a22 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a30:	2321      	movs	r3, #33	; 0x21
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a4a:	233c      	movs	r3, #60	; 0x3c
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a52:	2308      	movs	r3, #8
 8000a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 ffd8 	bl	8003a20 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a76:	f000 f835 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	233f      	movs	r3, #63	; 0x3f
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000a8e:	2350      	movs	r3, #80	; 0x50
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fbe9 	bl	8004278 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000aac:	f000 f81a 	bl	8000ae4 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3770      	adds	r7, #112	; 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58000400 	.word	0x58000400
 8000abc:	58024800 	.word	0x58024800

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 fd83 	bl	80015dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_RNG_Init+0x24>)
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <MX_RNG_Init+0x28>)
 8000af8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_RNG_Init+0x24>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_RNG_Init+0x24>)
 8000b02:	f005 fae9 	bl	80060d8 <HAL_RNG_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b0c:	f7ff ffea 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24009f08 	.word	0x24009f08
 8000b18:	48021800 	.word	0x48021800

08000b1c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0b2      	sub	sp, #200	; 0xc8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	22bc      	movs	r2, #188	; 0xbc
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f01a f994 	bl	801ae5a <memset>
  if(rngHandle->Instance==RNG)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_RNG_MspInit+0x78>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d126      	bne.n	8000b8a <HAL_RNG_MspInit+0x6e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 ff61 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000b58:	f7ff ffc4 	bl	8000ae4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_RNG_MspInit+0x7c>)
 8000b5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_RNG_MspInit+0x7c>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_RNG_MspInit+0x7c>)
 8000b6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	2050      	movs	r0, #80	; 0x50
 8000b80:	f000 fe48 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000b84:	2050      	movs	r0, #80	; 0x50
 8000b86:	f000 fe5f 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	37c8      	adds	r7, #200	; 0xc8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	48021800 	.word	0x48021800
 8000b98:	58024400 	.word	0x58024400

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x38>)
 8000ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_MspInit+0x38>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x38>)
 8000bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f06f 0001 	mvn.w	r0, #1
 8000bc8:	f000 fe24 	bl	8001814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d844      	bhi.n	8000c70 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000be6:	2200      	movs	r2, #0
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	2019      	movs	r0, #25
 8000bec:	f000 fe12 	bl	8001814 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bf0:	2019      	movs	r0, #25
 8000bf2:	f000 fe29 	bl	8001848 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bf6:	4a24      	ldr	r2, [pc, #144]	; (8000c88 <HAL_InitTick+0xb0>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_InitTick+0xb4>)
 8000bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_InitTick+0xb4>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_InitTick+0xb4>)
 8000c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 feb3 	bl	8004990 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c2a:	f003 fe9b 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_InitTick+0xb8>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	0c9b      	lsrs	r3, r3, #18
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <HAL_InitTick+0xc0>)
 8000c46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c64:	f005 fb1d 	bl	80062a2 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d107      	bne.n	8000c7e <HAL_InitTick+0xa6>
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e005      	b.n	8000c80 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <HAL_InitTick+0xbc>)
 8000c76:	f005 fb75 	bl	8006364 <HAL_TIM_Base_Start_IT>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000008 	.word	0x24000008
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	24009f1c 	.word	0x24009f1c
 8000c98:	40010000 	.word	0x40010000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_UP_IRQHandler+0x10>)
 8000cce:	f005 fbc1 	bl	8006454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24009f1c 	.word	0x24009f1c

08000cdc <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <RNG_IRQHandler+0x10>)
 8000ce2:	f005 fa5b 	bl	800619c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24009f08 	.word	0x24009f08

08000cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_kill>:

int _kill(int pid, int sig)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <_kill+0x20>)
 8000d0c:	2216      	movs	r2, #22
 8000d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	2400d758 	.word	0x2400d758

08000d24 <_exit>:

void _exit (int status)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffe5 	bl	8000d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d36:	e7fe      	b.n	8000d36 <_exit+0x12>

08000d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e00a      	b.n	8000d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4a:	f3af 8000 	nop.w
 8000d4e:	4601      	mov	r1, r0
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf0      	blt.n	8000d4a <_read+0x12>
	}

return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e009      	b.n	8000d98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf1      	blt.n	8000d84 <_write+0x12>
	}
	return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_close>:

int _close(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return -1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_isatty>:

int _isatty(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d205      	bcs.n	8000e50 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_sbrk+0x6c>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	24080000 	.word	0x24080000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	24001bfc 	.word	0x24001bfc
 8000e7c:	2400d770 	.word	0x2400d770
 8000e80:	2400d758 	.word	0x2400d758

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <SystemInit+0xe4>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <SystemInit+0xe4>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e98:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <SystemInit+0xe8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d807      	bhi.n	8000eb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <SystemInit+0xe8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <SystemInit+0xe8>)
 8000eae:	f043 0307 	orr.w	r3, r3, #7
 8000eb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <SystemInit+0xec>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <SystemInit+0xec>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <SystemInit+0xec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <SystemInit+0xec>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4929      	ldr	r1, [pc, #164]	; (8000f70 <SystemInit+0xec>)
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <SystemInit+0xf0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <SystemInit+0xe8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <SystemInit+0xe8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 030f 	bic.w	r3, r3, #15
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <SystemInit+0xe8>)
 8000ee8:	f043 0307 	orr.w	r3, r3, #7
 8000eec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemInit+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <SystemInit+0xec>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <SystemInit+0xec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <SystemInit+0xec>)
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <SystemInit+0xf4>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <SystemInit+0xec>)
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <SystemInit+0xf8>)
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <SystemInit+0xec>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <SystemInit+0xfc>)
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <SystemInit+0xec>)
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <SystemInit+0xfc>)
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <SystemInit+0xec>)
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <SystemInit+0xfc>)
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <SystemInit+0xec>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <SystemInit+0xec>)
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <SystemInit+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <SystemInit+0x100>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <SystemInit+0x104>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f4e:	d202      	bcs.n	8000f56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <SystemInit+0x108>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <SystemInit+0x10c>)
 8000f58:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f5c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	52002000 	.word	0x52002000
 8000f70:	58024400 	.word	0x58024400
 8000f74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f78:	02020200 	.word	0x02020200
 8000f7c:	01ff0000 	.word	0x01ff0000
 8000f80:	01010280 	.word	0x01010280
 8000f84:	5c001000 	.word	0x5c001000
 8000f88:	ffff0000 	.word	0xffff0000
 8000f8c:	51008108 	.word	0x51008108
 8000f90:	52004000 	.word	0x52004000

08000f94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART3_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000fde:	f005 fc39 	bl	8006854 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f7ff fd7c 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8000ff0:	f006 fbce 	bl	8007790 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f7ff fd73 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001002:	f006 fc03 	bl	800780c <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f7ff fd6a 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART3_UART_Init+0x90>)
 8001012:	f006 fb84 	bl	800771e <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f7ff fd62 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24009f68 	.word	0x24009f68
 8001028:	40004800 	.word	0x40004800

0800102c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0b8      	sub	sp, #224	; 0xe0
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	22bc      	movs	r2, #188	; 0xbc
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f019 ff04 	bl	801ae5a <memset>
  if(uartHandle->Instance==USART3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_UART_MspInit+0xc0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d142      	bne.n	80010e2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fcd2 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff fd35 	bl	8000ae4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 8001082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d0:	2307      	movs	r3, #7
 80010d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UART_MspInit+0xc8>)
 80010de:	f002 f943 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	37e0      	adds	r7, #224	; 0xe0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40004800 	.word	0x40004800
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020c00 	.word	0x58020c00

080010f8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010fe:	4a16      	ldr	r2, [pc, #88]	; (8001158 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001100:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001104:	2209      	movs	r2, #9
 8001106:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800110a:	2202      	movs	r2, #2
 800110c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001116:	2202      	movs	r2, #2
 8001118:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800111c:	2201      	movs	r2, #1
 800111e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800112e:	2201      	movs	r2, #1
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001134:	2201      	movs	r2, #1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800113a:	2200      	movs	r2, #0
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001140:	f002 fadb 	bl	80036fa <HAL_PCD_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800114a:	f7ff fccb 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24009ff8 	.word	0x24009ff8
 8001158:	40080000 	.word	0x40080000

0800115c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b8      	sub	sp, #224	; 0xe0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	22bc      	movs	r2, #188	; 0xbc
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f019 fe6c 	bl	801ae5a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <HAL_PCD_MspInit+0xe8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d156      	bne.n	800123a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800118c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001190:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fc38 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80011aa:	f7ff fc9b 	bl	8000ae4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011ae:	f002 fc27 	bl	8003a00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_PCD_MspInit+0xec>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_PCD_MspInit+0xec>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_PCD_MspInit+0xec>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011ea:	230a      	movs	r3, #10
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <HAL_PCD_MspInit+0xf0>)
 80011f8:	f002 f8b6 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_PCD_MspInit+0xf0>)
 8001218:	f002 f8a6 	bl	8003368 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_PCD_MspInit+0xec>)
 800121e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_PCD_MspInit+0xec>)
 8001224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001228:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_PCD_MspInit+0xec>)
 800122e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	37e0      	adds	r7, #224	; 0xe0
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40080000 	.word	0x40080000
 8001248:	58024400 	.word	0x58024400
 800124c:	58020000 	.word	0x58020000

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff fe16 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f019 fda9 	bl	801add4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fb4b 	bl	800091c <main>
  bx  lr
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800128c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001290:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8001294:	0801f9c0 	.word	0x0801f9c0
  ldr r2, =_sbss
 8001298:	2400192c 	.word	0x2400192c
  ldr r4, =_ebss
 800129c:	2400d76c 	.word	0x2400d76c

080012a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC3_IRQHandler>

080012a2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <LAN8742_RegisterBusIO+0x28>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <LAN8742_RegisterBusIO+0x28>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <LAN8742_RegisterBusIO+0x28>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e014      	b.n	80012fa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d17c      	bne.n	8001420 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e01c      	b.n	800137a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f107 0208 	add.w	r2, r7, #8
 8001348:	2112      	movs	r1, #18
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	da03      	bge.n	800135c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001354:	f06f 0304 	mvn.w	r3, #4
 8001358:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800135a:	e00b      	b.n	8001374 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d105      	bne.n	8001374 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
         break;
 8001372:	e005      	b.n	8001380 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b1f      	cmp	r3, #31
 800137e:	d9df      	bls.n	8001340 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b1f      	cmp	r3, #31
 8001386:	d902      	bls.n	800138e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001388:	f06f 0302 	mvn.w	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d145      	bne.n	8001420 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a0:	2100      	movs	r1, #0
 80013a2:	4798      	blx	r3
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db37      	blt.n	800141a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6810      	ldr	r0, [r2, #0]
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	2100      	movs	r1, #0
 80013b8:	4798      	blx	r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db28      	blt.n	8001412 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4798      	blx	r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013ca:	e01c      	b.n	8001406 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4798      	blx	r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013de:	d80e      	bhi.n	80013fe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6810      	ldr	r0, [r2, #0]
 80013e8:	f107 0208 	add.w	r2, r7, #8
 80013ec:	2100      	movs	r1, #0
 80013ee:	4798      	blx	r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da07      	bge.n	8001406 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013f6:	f06f 0304 	mvn.w	r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
                 break;
 80013fc:	e010      	b.n	8001420 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013fe:	f06f 0301 	mvn.w	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
               break;
 8001404:	e00c      	b.n	8001420 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1dd      	bne.n	80013cc <LAN8742_Init+0xc6>
 8001410:	e006      	b.n	8001420 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001412:	f06f 0304 	mvn.w	r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e002      	b.n	8001420 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800141a:	f06f 0303 	mvn.w	r3, #3
 800141e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d112      	bne.n	800144c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4798      	blx	r3
 800142c:	4603      	mov	r3, r0
 800142e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001430:	bf00      	nop
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	4798      	blx	r3
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001444:	d9f5      	bls.n	8001432 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800144c:	693b      	ldr	r3, [r7, #16]
 }
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6810      	ldr	r0, [r2, #0]
 800146a:	f107 020c 	add.w	r2, r7, #12
 800146e:	2101      	movs	r1, #1
 8001470:	4798      	blx	r3
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	da02      	bge.n	800147e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001478:	f06f 0304 	mvn.w	r3, #4
 800147c:	e06e      	b.n	800155c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6810      	ldr	r0, [r2, #0]
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	2101      	movs	r1, #1
 800148c:	4798      	blx	r3
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	da02      	bge.n	800149a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001494:	f06f 0304 	mvn.w	r3, #4
 8001498:	e060      	b.n	800155c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80014a4:	2301      	movs	r3, #1
 80014a6:	e059      	b.n	800155c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6810      	ldr	r0, [r2, #0]
 80014b0:	f107 020c 	add.w	r2, r7, #12
 80014b4:	2100      	movs	r1, #0
 80014b6:	4798      	blx	r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da02      	bge.n	80014c4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014be:	f06f 0304 	mvn.w	r3, #4
 80014c2:	e04b      	b.n	800155c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11b      	bne.n	8001506 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <LAN8742_GetLinkState+0x90>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e03a      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e033      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014fe:	2304      	movs	r3, #4
 8001500:	e02c      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001502:	2305      	movs	r3, #5
 8001504:	e02a      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	211f      	movs	r1, #31
 8001514:	4798      	blx	r3
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	da02      	bge.n	8001522 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800151c:	f06f 0304 	mvn.w	r3, #4
 8001520:	e01c      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800152c:	2306      	movs	r3, #6
 800152e:	e015      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 031c 	and.w	r3, r3, #28
 8001536:	2b18      	cmp	r3, #24
 8001538:	d101      	bne.n	800153e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800153a:	2302      	movs	r3, #2
 800153c:	e00e      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 031c 	and.w	r3, r3, #28
 8001544:	2b08      	cmp	r3, #8
 8001546:	d101      	bne.n	800154c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001548:	2303      	movs	r3, #3
 800154a:	e007      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 031c 	and.w	r3, r3, #28
 8001552:	2b14      	cmp	r3, #20
 8001554:	d101      	bne.n	800155a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001556:	2304      	movs	r3, #4
 8001558:	e000      	b.n	800155c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800155a:	2305      	movs	r3, #5
    }				
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f947 	bl	80017fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001570:	f003 f838 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_Init+0x68>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4913      	ldr	r1, [pc, #76]	; (80015d0 <HAL_Init+0x6c>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_Init+0x68>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_Init+0x6c>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_Init+0x70>)
 80015a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_Init+0x74>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ae:	200f      	movs	r0, #15
 80015b0:	f7ff fb12 	bl	8000bd8 <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e002      	b.n	80015c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015be:	f7ff faed 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	58024400 	.word	0x58024400
 80015d0:	0801f6dc 	.word	0x0801f6dc
 80015d4:	24000004 	.word	0x24000004
 80015d8:	24000000 	.word	0x24000000

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c
 8001600:	2400a400 	.word	0x2400a400

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2400a400 	.word	0x2400a400

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2400000c 	.word	0x2400000c

08001664 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetREVID+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0c1b      	lsrs	r3, r3, #16
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	5c001000 	.word	0x5c001000

0800167c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	58000400 	.word	0x58000400

080016a4 <__NVIC_SetPriorityGrouping>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0000 	.word	0x05fa0000

080016ec <__NVIC_GetPriorityGrouping>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff4c 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001822:	f7ff ff63 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7ff ffb3 	bl	8001798 <NVIC_EncodePriority>
 8001832:	4602      	mov	r2, r0
 8001834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff82 	bl	8001744 <__NVIC_SetPriority>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff56 	bl	8001708 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0c6      	b.n	8001a04 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f006 fbb6 	bl	8007ff0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2223      	movs	r2, #35	; 0x23
 8001888:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_ETH_Init+0x1a8>)
 800188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001890:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_ETH_Init+0x1a8>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_ETH_Init+0x1a8>)
 800189c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7a1b      	ldrb	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff fee3 	bl	800167c <HAL_SYSCFG_ETHInterfaceSelect>
 80018b6:	e003      	b.n	80018c0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018bc:	f7ff fede 	bl	800167c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff fe94 	bl	8001604 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018de:	e00f      	b.n	8001900 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80018e0:	f7ff fe90 	bl	8001604 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018ee:	d907      	bls.n	8001900 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	22e0      	movs	r2, #224	; 0xe0
 80018fa:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e081      	b.n	8001a04 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e6      	bne.n	80018e0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 f9ae 	bl	8002c74 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001918:	f002 ffde 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800191c:	4603      	mov	r3, r0
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_ETH_Init+0x1ac>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0c9a      	lsrs	r2, r3, #18
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3a01      	subs	r2, #1
 800192c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f001 f901 	bl	8002b38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800194c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001950:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	22e0      	movs	r2, #224	; 0xe0
 8001968:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e04a      	b.n	8001a04 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f241 1308 	movw	r3, #4360	; 0x1108
 8001976:	4413      	add	r3, r2
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_ETH_Init+0x1b0>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6952      	ldr	r2, [r2, #20]
 8001982:	0052      	lsls	r2, r2, #1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	6809      	ldr	r1, [r1, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	f241 1308 	movw	r3, #4360	; 0x1108
 800198e:	440b      	add	r3, r1
 8001990:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f001 f9c6 	bl	8002d24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f001 fa0a 	bl	8002db2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	3305      	adds	r3, #5
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	021a      	lsls	r2, r3, #8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	3304      	adds	r3, #4
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	3303      	adds	r3, #3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	061a      	lsls	r2, r3, #24
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	3302      	adds	r3, #2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2210      	movs	r2, #16
 80019fa:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2210      	movs	r2, #16
 8001a00:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	431bde83 	.word	0x431bde83
 8001a14:	ffff8001 	.word	0xffff8001

08001a18 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3310      	adds	r3, #16
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_ETH_DescAssignMemory+0x28>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d904      	bls.n	8001a4a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e021      	b.n	8001a8e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d174      	bne.n	8001b94 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2223      	movs	r2, #35	; 0x23
 8001aae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e00f      	b.n	8001ad6 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3310      	adds	r3, #16
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d9ec      	bls.n	8001ab6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0202 	orr.w	r2, r2, #2
 8001af0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b1e:	4413      	add	r3, r2
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6811      	ldr	r1, [r2, #0]
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b2e:	440b      	add	r3, r1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6811      	ldr	r1, [r2, #0]
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b4a:	440b      	add	r3, r1
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001b60:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b64:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6811      	ldr	r1, [r2, #0]
 8001b76:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b80:	440b      	add	r3, r1
 8001b82:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2210      	movs	r2, #16
 8001b88:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2222      	movs	r2, #34	; 0x22
 8001b8e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d067      	beq.n	8001c84 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2223      	movs	r2, #35	; 0x23
 8001bb8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f241 1334 	movw	r3, #4404	; 0x1134
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <HAL_ETH_Stop_IT+0xf0>)
 8001bcc:	401a      	ands	r2, r3
 8001bce:	f241 1334 	movw	r3, #4404	; 0x1134
 8001bd2:	440b      	add	r3, r1
 8001bd4:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	f023 0201 	bic.w	r2, r3, #1
 8001bea:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bee:	440b      	add	r3, r1
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	f023 0201 	bic.w	r2, r3, #1
 8001c06:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c0a:	440b      	add	r3, r1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0202 	bic.w	r2, r2, #2
 8001c40:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e00f      	b.n	8001c68 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d9ec      	bls.n	8001c48 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2210      	movs	r2, #16
 8001c78:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	ffff2fbe 	.word	0xffff2fbe

08001c98 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d107      	bne.n	8001cba <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e073      	b.n	8001da2 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d16e      	bne.n	8001da0 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f001 f8d0 	bl	8002e6c <ETH_Prepare_Tx_Descriptors>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e05f      	b.n	8001da2 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3206      	adds	r2, #6
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d904      	bls.n	8001d0c <HAL_ETH_Transmit+0x74>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	1f1a      	subs	r2, r3, #4
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	3106      	adds	r1, #6
 8001d18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001d1c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001d20:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001d22:	f7ff fc6f 	bl	8001604 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d28:	e034      	b.n	8001d94 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d011      	beq.n	8001d60 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f043 0208 	orr.w	r2, r3, #8
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	22e0      	movs	r2, #224	; 0xe0
 8001d5a:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e020      	b.n	8001da2 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d015      	beq.n	8001d94 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001d68:	f7ff fc4c 	bl	8001604 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d302      	bcc.n	8001d7e <HAL_ETH_Transmit+0xe6>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	22e0      	movs	r2, #224	; 0xe0
 8001d8e:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e006      	b.n	8001da2 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dbc6      	blt.n	8001d2a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b089      	sub	sp, #36	; 0x24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3344      	adds	r3, #68	; 0x44
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d06b      	beq.n	8001eb4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e0ce      	b.n	8001f7e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	3301      	adds	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d902      	bls.n	8001e14 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b04      	subs	r3, #4
 8001e12:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db11      	blt.n	8001e4a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2201      	movs	r2, #1
 8001e36:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d902      	bls.n	8001e4a <HAL_ETH_IsRxDataAvailable+0xa0>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3b04      	subs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e08e      	b.n	8001f7e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d902      	bls.n	8001e86 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3b04      	subs	r3, #4
 8001e84:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e010      	b.n	8001eb4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d902      	bls.n	8001eaa <HAL_ETH_IsRxDataAvailable+0x100>
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db02      	blt.n	8001ec2 <HAL_ETH_IsRxDataAvailable+0x118>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d98e      	bls.n	8001de0 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d056      	beq.n	8001f76 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e03b      	b.n	8001f60 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d20d      	bcs.n	8001f5a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d902      	bls.n	8001f50 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b04      	subs	r3, #4
 8001f4e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d3bf      	bcc.n	8001ee8 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	f241 1328 	movw	r3, #4392	; 0x1128
 8001f72:	440b      	add	r3, r1
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]

  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b08a      	sub	sp, #40	; 0x28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3344      	adds	r3, #68	; 0x44
 8001f98:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07d      	b.n	80020be <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff feed 	bl	8001daa <HAL_ETH_IsRxDataAvailable>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e071      	b.n	80020be <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	e031      	b.n	8002054 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	461a      	mov	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800202a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	2b03      	cmp	r3, #3
 8002036:	d902      	bls.n	800203e <HAL_ETH_GetRxDataBuffer+0xb4>
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	3b04      	subs	r3, #4
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	3301      	adds	r3, #1
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	3b01      	subs	r3, #1
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3c7      	bcc.n	8001ff0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	461a      	mov	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	429a      	cmp	r2, r3
 8002080:	d803      	bhi.n	800208a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	e018      	b.n	80020bc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	461a      	mov	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e001      	b.n	80020bc <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3344      	adds	r3, #68	; 0x44
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fe60 	bl	8001daa <HAL_ETH_IsRxDataAvailable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e017      	b.n	8002124 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	4413      	add	r3, r2
 80020fc:	3b01      	subs	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d902      	bls.n	800210c <HAL_ETH_GetRxDataLength+0x46>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3b04      	subs	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3344      	adds	r3, #68	; 0x44
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e057      	b.n	800220c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	e03b      	b.n	80021e8 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800217e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3b01      	subs	r3, #1
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d20d      	bcs.n	80021e2 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d902      	bls.n	80021d8 <HAL_ETH_BuildRxDescriptors+0xac>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b04      	subs	r3, #4
 80021d6:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3301      	adds	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d3bf      	bcc.n	8002170 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	f241 1328 	movw	r3, #4392	; 0x1128
 80021fa:	440b      	add	r3, r1
 80021fc:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3724      	adds	r7, #36	; 0x24
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03e      	b.n	80022b8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002242:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	055b      	lsls	r3, r3, #21
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f043 030c 	orr.w	r3, r3, #12
 8002266:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800227a:	f7ff f9c3 	bl	8001604 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002280:	e009      	b.n	8002296 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002282:	f7ff f9bf 	bl	8001604 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002290:	d901      	bls.n	8002296 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e010      	b.n	80022b8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ed      	bne.n	8002282 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03c      	b.n	800235c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	055b      	lsls	r3, r3, #21
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 030c 	bic.w	r3, r3, #12
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ETH_WritePHYRegister+0xa4>)
 8002322:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_ETH_WritePHYRegister+0xa4>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800232e:	f7ff f969 	bl	8001604 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002334:	e009      	b.n	800234a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002336:	f7ff f965 	bl	8001604 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002344:	d901      	bls.n	800234a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e008      	b.n	800235c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ed      	bne.n	8002336 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40028000 	.word	0x40028000

08002368 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e1c3      	b.n	8002704 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0e5b      	lsrs	r3, r3, #25
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	b29a      	uxth	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002690:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026a0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00a      	b.n	800273a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	2b10      	cmp	r3, #16
 800272a:	d105      	bne.n	8002738 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f860 	bl	80027f4 <ETH_SetMACConfig>

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002754:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800275e:	f002 f8bb 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8002762:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d908      	bls.n	800277e <HAL_ETH_SetMDIOClockRange+0x3a>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d804      	bhi.n	800277e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e027      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d908      	bls.n	8002798 <HAL_ETH_SetMDIOClockRange+0x54>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d204      	bcs.n	8002798 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e01a      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d303      	bcc.n	80027a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d911      	bls.n	80027cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d908      	bls.n	80027c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d804      	bhi.n	80027c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e005      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e000      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	01312cff 	.word	0x01312cff
 80027e4:	02160ebf 	.word	0x02160ebf
 80027e8:	03938700 	.word	0x03938700
 80027ec:	05f5e0ff 	.word	0x05f5e0ff
 80027f0:	08f0d17f 	.word	0x08f0d17f

080027f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002806:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800280e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
 8002814:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002816:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7b5b      	ldrb	r3, [r3, #13]
 800281c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800281e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	7b9b      	ldrb	r3, [r3, #14]
 8002824:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002826:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7bdb      	ldrb	r3, [r3, #15]
 800282c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800282e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	7c12      	ldrb	r2, [r2, #16]
 8002834:	2a00      	cmp	r2, #0
 8002836:	d102      	bne.n	800283e <ETH_SetMACConfig+0x4a>
 8002838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800283c:	e000      	b.n	8002840 <ETH_SetMACConfig+0x4c>
 800283e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002840:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	7c52      	ldrb	r2, [r2, #17]
 8002846:	2a00      	cmp	r2, #0
 8002848:	d102      	bne.n	8002850 <ETH_SetMACConfig+0x5c>
 800284a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800284e:	e000      	b.n	8002852 <ETH_SetMACConfig+0x5e>
 8002850:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002852:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7c9b      	ldrb	r3, [r3, #18]
 8002858:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800285a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002860:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002866:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7f1b      	ldrb	r3, [r3, #28]
 800286c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800286e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	7f5b      	ldrb	r3, [r3, #29]
 8002874:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002876:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	7f92      	ldrb	r2, [r2, #30]
 800287c:	2a00      	cmp	r2, #0
 800287e:	d102      	bne.n	8002886 <ETH_SetMACConfig+0x92>
 8002880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002884:	e000      	b.n	8002888 <ETH_SetMACConfig+0x94>
 8002886:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002888:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7fdb      	ldrb	r3, [r3, #31]
 800288e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002890:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002898:	2a00      	cmp	r2, #0
 800289a:	d102      	bne.n	80028a2 <ETH_SetMACConfig+0xae>
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	e000      	b.n	80028a4 <ETH_SetMACConfig+0xb0>
 80028a2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80028a4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80028aa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028b2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80028b4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <ETH_SetMACConfig+0x22c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80028e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80028ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028f2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80028f4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80028fc:	2a00      	cmp	r2, #0
 80028fe:	d102      	bne.n	8002906 <ETH_SetMACConfig+0x112>
 8002900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002904:	e000      	b.n	8002908 <ETH_SetMACConfig+0x114>
 8002906:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002908:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <ETH_SetMACConfig+0x230>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	430b      	orrs	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <ETH_SetMACConfig+0x234>)
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	430b      	orrs	r3, r1
 8002948:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002950:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002956:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800295e:	2a00      	cmp	r2, #0
 8002960:	d101      	bne.n	8002966 <ETH_SetMACConfig+0x172>
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	e000      	b.n	8002968 <ETH_SetMACConfig+0x174>
 8002966:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002968:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800297a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	430b      	orrs	r3, r1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002990:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002998:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f023 0103 	bic.w	r1, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d101      	bne.n	80029e2 <ETH_SetMACConfig+0x1ee>
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	e000      	b.n	80029e4 <ETH_SetMACConfig+0x1f0>
 80029e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80029f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	00048083 	.word	0x00048083
 8002a24:	c0f88000 	.word	0xc0f88000
 8002a28:	fffffef0 	.word	0xfffffef0

08002a2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <ETH_SetDMAConfig+0xf8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6809      	ldr	r1, [r1, #0]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002a52:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	791b      	ldrb	r3, [r3, #4]
 8002a58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a5e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7b1b      	ldrb	r3, [r3, #12]
 8002a64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a72:	4413      	add	r3, r2
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <ETH_SetDMAConfig+0xfc>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6811      	ldr	r1, [r2, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a86:	440b      	add	r3, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7b5b      	ldrb	r3, [r3, #13]
 8002a8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <ETH_SetDMAConfig+0x100>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6811      	ldr	r1, [r2, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002ab2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7d1b      	ldrb	r3, [r3, #20]
 8002abc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002abe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	7f5b      	ldrb	r3, [r3, #29]
 8002ac4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ad2:	4413      	add	r3, r2
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <ETH_SetDMAConfig+0x104>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6811      	ldr	r1, [r2, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ae6:	440b      	add	r3, r1
 8002ae8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7f1b      	ldrb	r3, [r3, #28]
 8002aee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b00:	4413      	add	r3, r2
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <ETH_SetDMAConfig+0x108>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6811      	ldr	r1, [r2, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b14:	440b      	add	r3, r1
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	ffff87fd 	.word	0xffff87fd
 8002b28:	ffff2ffe 	.word	0xffff2ffe
 8002b2c:	fffec000 	.word	0xfffec000
 8002b30:	ffc0efef 	.word	0xffc0efef
 8002b34:	7fc0ffff 	.word	0x7fc0ffff

08002b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0a4      	sub	sp, #144	; 0x90
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b46:	2300      	movs	r3, #0
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002be2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c12:	2300      	movs	r3, #0
 8002c14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fde6 	bl	80027f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002c58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff fee1 	bl	8002a2c <ETH_SetDMAConfig>
}
 8002c6a:	bf00      	nop
 8002c6c:	3790      	adds	r7, #144	; 0x90
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c8e:	f001 fe23 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8002c92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d908      	bls.n	8002cae <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d804      	bhi.n	8002cae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e027      	b.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d908      	bls.n	8002cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d204      	bcs.n	8002cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e01a      	b.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d303      	bcc.n	8002cd8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d911      	bls.n	8002cfc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d908      	bls.n	8002cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d804      	bhi.n	8002cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e005      	b.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e000      	b.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002cfc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	01312cff 	.word	0x01312cff
 8002d14:	02160ebf 	.word	0x02160ebf
 8002d18:	03938700 	.word	0x03938700
 8002d1c:	05f5e0ff 	.word	0x05f5e0ff
 8002d20:	08f0d17f 	.word	0x08f0d17f

08002d24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e01d      	b.n	8002d6e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68d9      	ldr	r1, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	3206      	adds	r2, #6
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d9de      	bls.n	8002d32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002d82:	4413      	add	r3, r2
 8002d84:	2203      	movs	r2, #3
 8002d86:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68d9      	ldr	r1, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f241 1314 	movw	r3, #4372	; 0x1114
 8002d94:	4413      	add	r3, r2
 8002d96:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e024      	b.n	8002e0a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d9d7      	bls.n	8002dc0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f241 1330 	movw	r3, #4400	; 0x1130
 8002e36:	4413      	add	r3, r2
 8002e38:	2203      	movs	r2, #3
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6919      	ldr	r1, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f241 131c 	movw	r3, #4380	; 0x111c
 8002e48:	4413      	add	r3, r2
 8002e4a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f241 1328 	movw	r3, #4392	; 0x1128
 8002e5c:	4413      	add	r3, r2
 8002e5e:	6019      	str	r1, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b08d      	sub	sp, #52	; 0x34
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eae:	d007      	beq.n	8002ec0 <ETH_Prepare_Tx_Descriptors+0x54>
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e24a      	b.n	800335a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d044      	beq.n	8002f5a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002efc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d027      	beq.n	8002f5a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	431a      	orrs	r2, r3
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f48:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f58:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	6992      	ldr	r2, [r2, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <ETH_Prepare_Tx_Descriptors+0x130>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d030      	beq.n	8002ffe <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d902      	bls.n	8002fc6 <ETH_Prepare_Tx_Descriptors+0x15a>
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fce:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fe2:	d10c      	bne.n	8002ffe <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e1ad      	b.n	800335a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	3301      	adds	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003014:	4013      	ands	r3, r2
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	6852      	ldr	r2, [r2, #4]
 800301a:	431a      	orrs	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800303e:	4013      	ands	r3, r2
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	6852      	ldr	r2, [r2, #4]
 8003044:	0412      	lsls	r2, r2, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e008      	b.n	8003060 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800305a:	4013      	ands	r3, r2
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	04db      	lsls	r3, r3, #19
 800307a:	431a      	orrs	r2, r3
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <ETH_Prepare_Tx_Descriptors+0x240>)
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	69d2      	ldr	r2, [r2, #28]
 800308c:	431a      	orrs	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e02e      	b.n	80030fe <ETH_Prepare_Tx_Descriptors+0x292>
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	ffffc000 	.word	0xffffc000
 80030a8:	c000ffff 	.word	0xc000ffff
 80030ac:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	4b93      	ldr	r3, [pc, #588]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x498>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	6852      	ldr	r2, [r2, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	431a      	orrs	r2, r3
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	431a      	orrs	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80cb 	beq.w	80032e4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	431a      	orrs	r2, r3
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003160:	e0c0      	b.n	80032e4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	3301      	adds	r3, #1
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b03      	cmp	r3, #3
 8003178:	d902      	bls.n	8003180 <ETH_Prepare_Tx_Descriptors+0x314>
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	3b04      	subs	r3, #4
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003188:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a2:	d007      	beq.n	80031b4 <ETH_Prepare_Tx_Descriptors+0x348>
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	3304      	adds	r3, #4
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d026      	beq.n	8003202 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	e016      	b.n	80031f6 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	3301      	adds	r3, #1
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d902      	bls.n	80031e6 <ETH_Prepare_Tx_Descriptors+0x37a>
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3b04      	subs	r3, #4
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ee:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	3301      	adds	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3e4      	bcc.n	80031c8 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	e0ab      	b.n	800335a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	3301      	adds	r3, #1
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800321e:	4013      	ands	r3, r2
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	6852      	ldr	r2, [r2, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003248:	4013      	ands	r3, r2
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	6852      	ldr	r2, [r2, #4]
 800324e:	0412      	lsls	r2, r2, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e008      	b.n	800326a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003264:	4013      	ands	r3, r2
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00f      	beq.n	8003296 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	69d2      	ldr	r2, [r2, #28]
 8003282:	431a      	orrs	r2, r3
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e017      	b.n	80032c6 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x498>)
 800329c:	4013      	ands	r3, r2
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f af3a 	bne.w	8003162 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e00e      	b.n	8003320 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003302:	bf00      	nop
 8003304:	ffff8000 	.word	0xffff8000
 8003308:	ffffc000 	.word	0xffffc000
 800330c:	c000ffff 	.word	0xc000ffff
 8003310:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003330:	6979      	ldr	r1, [r7, #20]
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	3304      	adds	r3, #4
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003342:	b672      	cpsid	i
}
 8003344:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003354:	b662      	cpsie	i
}
 8003356:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3734      	adds	r7, #52	; 0x34
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_GPIO_Init+0x234>)
 8003378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800337a:	e194      	b.n	80036a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2101      	movs	r1, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8186 	beq.w	80036a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d005      	beq.n	80033ac <HAL_GPIO_Init+0x44>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d130      	bne.n	800340e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e2:	2201      	movs	r2, #1
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 0201 	and.w	r2, r3, #1
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b03      	cmp	r3, #3
 8003418:	d017      	beq.n	800344a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d123      	bne.n	800349e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	69b9      	ldr	r1, [r7, #24]
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80e0 	beq.w	80036a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e0:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <HAL_GPIO_Init+0x238>)
 80034e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034e6:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <HAL_GPIO_Init+0x238>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_GPIO_Init+0x238>)
 80034f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fe:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <HAL_GPIO_Init+0x23c>)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <HAL_GPIO_Init+0x240>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d052      	beq.n	80035d0 <HAL_GPIO_Init+0x268>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_GPIO_Init+0x244>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d031      	beq.n	8003596 <HAL_GPIO_Init+0x22e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_GPIO_Init+0x248>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02b      	beq.n	8003592 <HAL_GPIO_Init+0x22a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x24c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x226>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_GPIO_Init+0x250>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x222>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_GPIO_Init+0x254>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x21e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_GPIO_Init+0x258>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x21a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_GPIO_Init+0x25c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x216>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_GPIO_Init+0x260>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x212>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_GPIO_Init+0x264>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x20e>
 8003572:	2309      	movs	r3, #9
 8003574:	e02d      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 8003576:	230a      	movs	r3, #10
 8003578:	e02b      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 800357a:	2308      	movs	r3, #8
 800357c:	e029      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 800357e:	2307      	movs	r3, #7
 8003580:	e027      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 8003582:	2306      	movs	r3, #6
 8003584:	e025      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 8003586:	2305      	movs	r3, #5
 8003588:	e023      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 800358a:	2304      	movs	r3, #4
 800358c:	e021      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 800358e:	2303      	movs	r3, #3
 8003590:	e01f      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 8003592:	2302      	movs	r3, #2
 8003594:	e01d      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 8003596:	2301      	movs	r3, #1
 8003598:	e01b      	b.n	80035d2 <HAL_GPIO_Init+0x26a>
 800359a:	bf00      	nop
 800359c:	58000080 	.word	0x58000080
 80035a0:	58024400 	.word	0x58024400
 80035a4:	58000400 	.word	0x58000400
 80035a8:	58020000 	.word	0x58020000
 80035ac:	58020400 	.word	0x58020400
 80035b0:	58020800 	.word	0x58020800
 80035b4:	58020c00 	.word	0x58020c00
 80035b8:	58021000 	.word	0x58021000
 80035bc:	58021400 	.word	0x58021400
 80035c0:	58021800 	.word	0x58021800
 80035c4:	58021c00 	.word	0x58021c00
 80035c8:	58022000 	.word	0x58022000
 80035cc:	58022400 	.word	0x58022400
 80035d0:	2300      	movs	r3, #0
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f002 0203 	and.w	r2, r2, #3
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	4093      	lsls	r3, r2
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e2:	4938      	ldr	r1, [pc, #224]	; (80036c4 <HAL_GPIO_Init+0x35c>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f ae63 	bne.w	800337c <HAL_GPIO_Init+0x14>
  }
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	3724      	adds	r7, #36	; 0x24
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	58000400 	.word	0x58000400

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fc:	b08f      	sub	sp, #60	; 0x3c
 80036fe:	af0a      	add	r7, sp, #40	; 0x28
 8003700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e116      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fd18 	bl	800115c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2203      	movs	r2, #3
 8003730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 f958 	bl	8007a00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	687e      	ldr	r6, [r7, #4]
 8003758:	466d      	mov	r5, sp
 800375a:	f106 0410 	add.w	r4, r6, #16
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376a:	e885 0003 	stmia.w	r5, {r0, r1}
 800376e:	1d33      	adds	r3, r6, #4
 8003770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f004 f8d6 	bl	8007924 <USB_CoreInit>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0d7      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f004 f946 	bl	8007a22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e04a      	b.n	8003832 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	333d      	adds	r3, #61	; 0x3d
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	333c      	adds	r3, #60	; 0x3c
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	b298      	uxth	r0, r3
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3342      	adds	r3, #66	; 0x42
 80037d8:	4602      	mov	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	; 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3348      	adds	r3, #72	; 0x48
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3350      	adds	r3, #80	; 0x50
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d3af      	bcc.n	800379c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e044      	b.n	80038cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3b5      	bcc.n	8003842 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	687e      	ldr	r6, [r7, #4]
 80038de:	466d      	mov	r5, sp
 80038e0:	f106 0410 	add.w	r4, r6, #16
 80038e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038f4:	1d33      	adds	r3, r6, #4
 80038f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f004 f8df 	bl	8007abc <USB_DevInit>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e014      	b.n	800393a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f80b 	bl	8003944 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fa99 	bl	8007e6a <USB_DevDisconnect>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003944 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_PCDEx_ActivateLPM+0x44>)
 8003974:	4313      	orrs	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	10000003 	.word	0x10000003

0800398c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00a      	beq.n	80039b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01f      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e01d      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	490f      	ldr	r1, [pc, #60]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039c6:	f7fd fe1d 	bl	8001604 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039cc:	e009      	b.n	80039e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ce:	f7fd fe19 	bl	8001604 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039dc:	d901      	bls.n	80039e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e007      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_PWREx_ConfigSupply+0x70>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d1ee      	bne.n	80039ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	58024800 	.word	0x58024800

08003a00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	58024800 	.word	0x58024800

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f000 bc1c 	b.w	800426c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8087 	beq.w	8003b50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a42:	4b9e      	ldr	r3, [pc, #632]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a4c:	4b9b      	ldr	r3, [pc, #620]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d007      	beq.n	8003a68 <HAL_RCC_OscConfig+0x48>
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	2b18      	cmp	r3, #24
 8003a5c:	d110      	bne.n	8003a80 <HAL_RCC_OscConfig+0x60>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d10b      	bne.n	8003a80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	4b94      	ldr	r3, [pc, #592]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d06c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x12e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d168      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e3f5      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x78>
 8003a8a:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a8b      	ldr	r2, [pc, #556]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e02e      	b.n	8003af6 <HAL_RCC_OscConfig+0xd6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x9a>
 8003aa0:	4b86      	ldr	r3, [pc, #536]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a85      	ldr	r2, [pc, #532]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b83      	ldr	r3, [pc, #524]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a82      	ldr	r2, [pc, #520]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e01d      	b.n	8003af6 <HAL_RCC_OscConfig+0xd6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0xbe>
 8003ac4:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b7a      	ldr	r3, [pc, #488]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a79      	ldr	r2, [pc, #484]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0xd6>
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fd81 	bl	8001604 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b06:	f7fd fd7d 	bl	8001604 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b64      	cmp	r3, #100	; 0x64
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e3a9      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0xe6>
 8003b24:	e014      	b.n	8003b50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fd fd6d 	bl	8001604 <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2e:	f7fd fd69 	bl	8001604 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e395      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x10e>
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80ca 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b68:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_RCC_OscConfig+0x164>
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b18      	cmp	r3, #24
 8003b78:	d156      	bne.n	8003c28 <HAL_RCC_OscConfig+0x208>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d151      	bne.n	8003c28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b84:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x17c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e367      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b9c:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 0219 	bic.w	r2, r3, #25
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4944      	ldr	r1, [pc, #272]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bae:	f7fd fd29 	bl	8001604 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fd25 	bl	8001604 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e351      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc8:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	f7fd fd46 	bl	8001664 <HAL_GetREVID>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d817      	bhi.n	8003c12 <HAL_RCC_OscConfig+0x1f2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d108      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1dc>
 8003bea:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bf2:	4a32      	ldr	r2, [pc, #200]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bfa:	e07a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	492c      	ldr	r1, [pc, #176]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c10:	e06f      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	4926      	ldr	r1, [pc, #152]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c26:	e064      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d047      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c30:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 0219 	bic.w	r2, r3, #25
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	491f      	ldr	r1, [pc, #124]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fd fcdf 	bl	8001604 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fd fcdb 	bl	8001604 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e307      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	f7fd fcfc 	bl	8001664 <HAL_GetREVID>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d817      	bhi.n	8003ca6 <HAL_RCC_OscConfig+0x286>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCC_OscConfig+0x270>
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c86:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	e030      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	031b      	lsls	r3, r3, #12
 8003c9e:	4907      	ldr	r1, [pc, #28]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	e025      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	4901      	ldr	r1, [pc, #4]	; (8003cbc <HAL_RCC_OscConfig+0x29c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	e01a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2d2>
 8003cbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc0:	4b9e      	ldr	r3, [pc, #632]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a9d      	ldr	r2, [pc, #628]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fc9a 	bl	8001604 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fc96 	bl	8001604 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e2c2      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ce6:	4b95      	ldr	r3, [pc, #596]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a9 	beq.w	8003e52 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d00:	4b8e      	ldr	r3, [pc, #568]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d0a:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d007      	beq.n	8003d26 <HAL_RCC_OscConfig+0x306>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b18      	cmp	r3, #24
 8003d1a:	d13a      	bne.n	8003d92 <HAL_RCC_OscConfig+0x372>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d135      	bne.n	8003d92 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d26:	4b85      	ldr	r3, [pc, #532]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x31e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e296      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d3e:	f7fd fc91 	bl	8001664 <HAL_GetREVID>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d817      	bhi.n	8003d7c <HAL_RCC_OscConfig+0x35c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d108      	bne.n	8003d66 <HAL_RCC_OscConfig+0x346>
 8003d54:	4b79      	ldr	r3, [pc, #484]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d5c:	4a77      	ldr	r2, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d64:	e075      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d66:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	069b      	lsls	r3, r3, #26
 8003d74:	4971      	ldr	r1, [pc, #452]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d7a:	e06a      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	496c      	ldr	r1, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d90:	e05f      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d042      	beq.n	8003e20 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d9a:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd fc2d 	bl	8001604 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dae:	f7fd fc29 	bl	8001604 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e255      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc0:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dcc:	f7fd fc4a 	bl	8001664 <HAL_GetREVID>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d817      	bhi.n	8003e0a <HAL_RCC_OscConfig+0x3ea>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3d4>
 8003de2:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dea:	4a54      	ldr	r2, [pc, #336]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	e02e      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
 8003df4:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	069b      	lsls	r3, r3, #26
 8003e02:	494e      	ldr	r1, [pc, #312]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
 8003e08:	e023      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
 8003e0a:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	4948      	ldr	r1, [pc, #288]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60cb      	str	r3, [r1, #12]
 8003e1e:	e018      	b.n	8003e52 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e20:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a45      	ldr	r2, [pc, #276]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fbea 	bl	8001604 <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e34:	f7fd fbe6 	bl	8001604 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e212      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd fbc7 	bl	8001604 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fbc3 	bl	8001604 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1ef      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x45a>
 8003e98:	e018      	b.n	8003ecc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9a:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fbad 	bl	8001604 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd fba9 	bl	8001604 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1d5      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d039      	beq.n	8003f4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d019      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003eec:	f7fd fb8a 	bl	8001604 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ef4:	f7fd fb86 	bl	8001604 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1b2      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4d4>
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <HAL_RCC_OscConfig+0x51c>)
 8003f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f20:	f7fd fb70 	bl	8001604 <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f28:	f7fd fb6c 	bl	8001604 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d904      	bls.n	8003f40 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e198      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f40:	4ba3      	ldr	r3, [pc, #652]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ed      	bne.n	8003f28 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8081 	beq.w	800405c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f5a:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <HAL_RCC_OscConfig+0x7b4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a9d      	ldr	r2, [pc, #628]	; (80041d4 <HAL_RCC_OscConfig+0x7b4>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f66:	f7fd fb4d 	bl	8001604 <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fd fb49 	bl	8001604 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b64      	cmp	r3, #100	; 0x64
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e175      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f80:	4b94      	ldr	r3, [pc, #592]	; (80041d4 <HAL_RCC_OscConfig+0x7b4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x582>
 8003f94:	4b8e      	ldr	r3, [pc, #568]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a8d      	ldr	r2, [pc, #564]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa0:	e02d      	b.n	8003ffe <HAL_RCC_OscConfig+0x5de>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5a4>
 8003faa:	4b89      	ldr	r3, [pc, #548]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	4a88      	ldr	r2, [pc, #544]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb6:	4b86      	ldr	r3, [pc, #536]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a85      	ldr	r2, [pc, #532]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	e01c      	b.n	8003ffe <HAL_RCC_OscConfig+0x5de>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x5c6>
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a7f      	ldr	r2, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	4b7d      	ldr	r3, [pc, #500]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a7c      	ldr	r2, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe4:	e00b      	b.n	8003ffe <HAL_RCC_OscConfig+0x5de>
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a79      	ldr	r2, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d015      	beq.n	8004032 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fd fafd 	bl	8001604 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd faf9 	bl	8001604 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e123      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004024:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCC_OscConfig+0x5ee>
 8004030:	e014      	b.n	800405c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd fae7 	bl	8001604 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd fae3 	bl	8001604 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e10d      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004050:	4b5f      	ldr	r3, [pc, #380]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8102 	beq.w	800426a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004066:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406e:	2b18      	cmp	r3, #24
 8004070:	f000 80bd 	beq.w	80041ee <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b02      	cmp	r3, #2
 800407a:	f040 8095 	bne.w	80041a8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a53      	ldr	r2, [pc, #332]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd fabb 	bl	8001604 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004092:	f7fd fab7 	bl	8001604 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0e3      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80040b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b4:	4b48      	ldr	r3, [pc, #288]	; (80041d8 <HAL_RCC_OscConfig+0x7b8>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	430a      	orrs	r2, r1
 80040c4:	4942      	ldr	r1, [pc, #264]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	628b      	str	r3, [r1, #40]	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	3b01      	subs	r3, #1
 80040da:	025b      	lsls	r3, r3, #9
 80040dc:	b29b      	uxth	r3, r3
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	3b01      	subs	r3, #1
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	3b01      	subs	r3, #1
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040fa:	4935      	ldr	r1, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a32      	ldr	r2, [pc, #200]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCC_OscConfig+0x7bc>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004118:	00d2      	lsls	r2, r2, #3
 800411a:	492d      	ldr	r1, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f023 020c 	bic.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4928      	ldr	r1, [pc, #160]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004132:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f023 0202 	bic.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4924      	ldr	r1, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fa40 	bl	8001604 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd fa3c 	bl	8001604 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e068      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x768>
 80041a6:	e060      	b.n	800426a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <HAL_RCC_OscConfig+0x7b0>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fa26 	bl	8001604 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ba:	e011      	b.n	80041e0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fa22 	bl	8001604 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d90a      	bls.n	80041e0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04e      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
 80041ce:	bf00      	nop
 80041d0:	58024400 	.word	0x58024400
 80041d4:	58024800 	.word	0x58024800
 80041d8:	fffffc0c 	.word	0xfffffc0c
 80041dc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_RCC_OscConfig+0x854>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e7      	bne.n	80041bc <HAL_RCC_OscConfig+0x79c>
 80041ec:	e03d      	b.n	800426a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_RCC_OscConfig+0x854>)
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041f4:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_RCC_OscConfig+0x854>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d031      	beq.n	8004266 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0203 	and.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d12a      	bne.n	8004266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d122      	bne.n	8004266 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d11a      	bne.n	8004266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	0a5b      	lsrs	r3, r3, #9
 8004234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d111      	bne.n	8004266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d108      	bne.n	8004266 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	0e1b      	lsrs	r3, r3, #24
 8004258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3730      	adds	r7, #48	; 0x30
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400

08004278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e19c      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 020f 	bic.w	r2, r3, #15
 80042a2:	4985      	ldr	r1, [pc, #532]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b83      	ldr	r3, [pc, #524]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e184      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d908      	bls.n	80042ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042d8:	4b78      	ldr	r3, [pc, #480]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	4975      	ldr	r1, [pc, #468]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004302:	429a      	cmp	r2, r3
 8004304:	d908      	bls.n	8004318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	496a      	ldr	r1, [pc, #424]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004314:	4313      	orrs	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	4b64      	ldr	r3, [pc, #400]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004330:	429a      	cmp	r2, r3
 8004332:	d908      	bls.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	495e      	ldr	r1, [pc, #376]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004342:	4313      	orrs	r3, r2
 8004344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435e:	429a      	cmp	r2, r3
 8004360:	d908      	bls.n	8004374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4953      	ldr	r1, [pc, #332]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004370:	4313      	orrs	r3, r2
 8004372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4b4d      	ldr	r3, [pc, #308]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 020f 	bic.w	r2, r3, #15
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4947      	ldr	r1, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d055      	beq.n	800445a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4940      	ldr	r1, [pc, #256]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043c8:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d121      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0f6      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d115      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0ea      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043f8:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0de      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0d6      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f023 0207 	bic.w	r2, r3, #7
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4925      	ldr	r1, [pc, #148]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fd f8eb 	bl	8001604 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004430:	e00a      	b.n	8004448 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7fd f8e7 	bl	8001604 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0be      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	429a      	cmp	r2, r3
 8004458:	d1eb      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	429a      	cmp	r2, r3
 8004474:	d208      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f023 020f 	bic.w	r2, r3, #15
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004484:	4313      	orrs	r3, r2
 8004486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d214      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	4906      	ldr	r1, [pc, #24]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e086      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
 80044b8:	52002000 	.word	0x52002000
 80044bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d010      	beq.n	80044ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044d8:	429a      	cmp	r2, r3
 80044da:	d208      	bcs.n	80044ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044dc:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	4939      	ldr	r1, [pc, #228]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d010      	beq.n	800451c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004506:	429a      	cmp	r2, r3
 8004508:	d208      	bcs.n	800451c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	492e      	ldr	r1, [pc, #184]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004518:	4313      	orrs	r3, r2
 800451a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699a      	ldr	r2, [r3, #24]
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004534:	429a      	cmp	r2, r3
 8004536:	d208      	bcs.n	800454a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4922      	ldr	r1, [pc, #136]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004546:	4313      	orrs	r3, r2
 8004548:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d010      	beq.n	8004578 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004562:	429a      	cmp	r2, r3
 8004564:	d208      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4917      	ldr	r1, [pc, #92]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004574:	4313      	orrs	r3, r2
 8004576:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004578:	f000 f834 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	4912      	ldr	r1, [pc, #72]	; (80045d4 <HAL_RCC_ClockConfig+0x35c>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004596:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <HAL_RCC_ClockConfig+0x35c>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x360>)
 80045ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x364>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x368>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fb0c 	bl	8000bd8 <HAL_InitTick>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400
 80045d4:	0801f6dc 	.word	0x0801f6dc
 80045d8:	24000004 	.word	0x24000004
 80045dc:	24000000 	.word	0x24000000
 80045e0:	24000008 	.word	0x24000008

080045e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ea:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f2:	2b18      	cmp	r3, #24
 80045f4:	f200 8155 	bhi.w	80048a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004665 	.word	0x08004665
 8004604:	080048a3 	.word	0x080048a3
 8004608:	080048a3 	.word	0x080048a3
 800460c:	080048a3 	.word	0x080048a3
 8004610:	080048a3 	.word	0x080048a3
 8004614:	080048a3 	.word	0x080048a3
 8004618:	080048a3 	.word	0x080048a3
 800461c:	080048a3 	.word	0x080048a3
 8004620:	0800468b 	.word	0x0800468b
 8004624:	080048a3 	.word	0x080048a3
 8004628:	080048a3 	.word	0x080048a3
 800462c:	080048a3 	.word	0x080048a3
 8004630:	080048a3 	.word	0x080048a3
 8004634:	080048a3 	.word	0x080048a3
 8004638:	080048a3 	.word	0x080048a3
 800463c:	080048a3 	.word	0x080048a3
 8004640:	08004691 	.word	0x08004691
 8004644:	080048a3 	.word	0x080048a3
 8004648:	080048a3 	.word	0x080048a3
 800464c:	080048a3 	.word	0x080048a3
 8004650:	080048a3 	.word	0x080048a3
 8004654:	080048a3 	.word	0x080048a3
 8004658:	080048a3 	.word	0x080048a3
 800465c:	080048a3 	.word	0x080048a3
 8004660:	08004697 	.word	0x08004697
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004670:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	4a90      	ldr	r2, [pc, #576]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004682:	e111      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004684:	4b8d      	ldr	r3, [pc, #564]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004686:	61bb      	str	r3, [r7, #24]
    break;
 8004688:	e10e      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800468a:	4b8d      	ldr	r3, [pc, #564]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800468c:	61bb      	str	r3, [r7, #24]
    break;
 800468e:	e10b      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004690:	4b8c      	ldr	r3, [pc, #560]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004692:	61bb      	str	r3, [r7, #24]
    break;
 8004694:	e108      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046a0:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046ac:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046b6:	4b80      	ldr	r3, [pc, #512]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80e1 	beq.w	800489c <HAL_RCC_GetSysClockFreq+0x2b8>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f000 8083 	beq.w	80047e8 <HAL_RCC_GetSysClockFreq+0x204>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f200 80a1 	bhi.w	800482c <HAL_RCC_GetSysClockFreq+0x248>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x114>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d056      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046f6:	e099      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f8:	4b6f      	ldr	r3, [pc, #444]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02d      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	4a6b      	ldr	r2, [pc, #428]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004742:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800475e:	e087      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800476e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004782:	ed97 6a02 	vldr	s12, [r7, #8]
 8004786:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800478a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a2:	e065      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e6:	e043      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a02 	vldr	s12, [r7, #8]
 800480e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	e021      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004852:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487a:	3301      	adds	r3, #1
 800487c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004888:	edd7 6a07 	vldr	s13, [r7, #28]
 800488c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004894:	ee17 3a90 	vmov	r3, s15
 8004898:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800489a:	e005      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
    break;
 80048a0:	e002      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048a4:	61bb      	str	r3, [r7, #24]
    break;
 80048a6:	bf00      	nop
  }

  return sysclockfreq;
 80048a8:	69bb      	ldr	r3, [r7, #24]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	; 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	58024400 	.word	0x58024400
 80048bc:	03d09000 	.word	0x03d09000
 80048c0:	003d0900 	.word	0x003d0900
 80048c4:	007a1200 	.word	0x007a1200
 80048c8:	46000000 	.word	0x46000000
 80048cc:	4c742400 	.word	0x4c742400
 80048d0:	4a742400 	.word	0x4a742400
 80048d4:	4af42400 	.word	0x4af42400

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048de:	f7ff fe81 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCC_GetHCLKFreq+0x50>)
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490f      	ldr	r1, [pc, #60]	; (800492c <HAL_RCC_GetHCLKFreq+0x54>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCC_GetHCLKFreq+0x50>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_GetHCLKFreq+0x54>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <HAL_RCC_GetHCLKFreq+0x58>)
 8004914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004916:	4a07      	ldr	r2, [pc, #28]	; (8004934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_RCC_GetHCLKFreq+0x58>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	0801f6dc 	.word	0x0801f6dc
 8004930:	24000004 	.word	0x24000004
 8004934:	24000000 	.word	0x24000000

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800493c:	f7ff ffcc 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58024400 	.word	0x58024400
 8004960:	0801f6dc 	.word	0x0801f6dc

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004968:	f7ff ffb6 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4904      	ldr	r1, [pc, #16]	; (800498c <HAL_RCC_GetPCLK2Freq+0x28>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	58024400 	.word	0x58024400
 800498c:	0801f6dc 	.word	0x0801f6dc

08004990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	223f      	movs	r2, #63	; 0x3f
 800499e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0207 	and.w	r2, r3, #7
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80049b8:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80049e8:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_RCC_GetClockConfig+0x7c>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_GetClockConfig+0x80>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	52002000 	.word	0x52002000

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a20:	2300      	movs	r3, #0
 8004a22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a38:	d02a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a3e:	d824      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a44:	d018      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a4a:	d81e      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a54:	d007      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a56:	e018      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	4bab      	ldr	r3, [pc, #684]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4aaa      	ldr	r2, [pc, #680]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a64:	e015      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 f9cf 	bl	8005e10 <RCCEx_PLL2_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a76:	e00c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3324      	adds	r3, #36	; 0x24
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 fa78 	bl	8005f74 <RCCEx_PLL3_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a98:	4b9b      	ldr	r3, [pc, #620]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa4:	4998      	ldr	r1, [pc, #608]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d03d      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d826      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004ae1 	.word	0x08004ae1
 8004ad0:	08004aef 	.word	0x08004aef
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	08004b19 	.word	0x08004b19
 8004adc:	08004b19 	.word	0x08004b19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a88      	ldr	r2, [pc, #544]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004aec:	e015      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 f98b 	bl	8005e10 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004afe:	e00c      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fa34 	bl	8005f74 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
      break;
 8004b16:	e000      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b20:	4b79      	ldr	r3, [pc, #484]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	f023 0207 	bic.w	r2, r3, #7
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	4976      	ldr	r1, [pc, #472]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	650b      	str	r3, [r1, #80]	; 0x50
 8004b32:	e001      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d042      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b52:	d825      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b54:	2bc0      	cmp	r3, #192	; 0xc0
 8004b56:	d028      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b58:	2bc0      	cmp	r3, #192	; 0xc0
 8004b5a:	d821      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d016      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d81d      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d007      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b6c:	e018      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6e:	4b66      	ldr	r3, [pc, #408]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a65      	ldr	r2, [pc, #404]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b7a:	e017      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 f944 	bl	8005e10 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b8c:	e00e      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f9ed 	bl	8005f74 <RCCEx_PLL3_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b9e:	e005      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bb2:	4b55      	ldr	r3, [pc, #340]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	4952      	ldr	r1, [pc, #328]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	650b      	str	r3, [r1, #80]	; 0x50
 8004bc4:	e001      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d049      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be0:	d030      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be6:	d82a      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004be8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bec:	d02c      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004bee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bf2:	d824      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d018      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d81e      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c08:	d007      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c18:	e017      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f8f5 	bl	8005e10 <RCCEx_PLL2_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c2a:	e00e      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3324      	adds	r3, #36	; 0x24
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 f99e 	bl	8005f74 <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c3c:	e005      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c44:	bf00      	nop
 8004c46:	e000      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c5e:	492a      	ldr	r1, [pc, #168]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	658b      	str	r3, [r1, #88]	; 0x58
 8004c64:	e001      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04c      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c80:	d030      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004c82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c86:	d82a      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c8c:	d02c      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c92:	d824      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c98:	d018      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9e:	d81e      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca8:	d007      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004caa:	e018      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cac:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb8:	e017      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 f8a5 	bl	8005e10 <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cca:	e00e      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 f94e 	bl	8005f74 <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfe:	4902      	ldr	r1, [pc, #8]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	658b      	str	r3, [r1, #88]	; 0x58
 8004d04:	e004      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d032      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d01c      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d817      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d00c      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d813      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d10f      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d38:	4baf      	ldr	r3, [pc, #700]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4aae      	ldr	r2, [pc, #696]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d44:	e00e      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f85f 	bl	8005e10 <RCCEx_PLL2_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d6a:	4ba3      	ldr	r3, [pc, #652]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	49a0      	ldr	r1, [pc, #640]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d7c:	e001      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d047      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d96:	d030      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d9c:	d82a      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da2:	d02c      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004da8:	d824      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dae:	d018      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d81e      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	d007      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004dc0:	e018      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a8c      	ldr	r2, [pc, #560]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dce:	e017      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f81a 	bl	8005e10 <RCCEx_PLL2_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004de0:	e00e      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3324      	adds	r3, #36	; 0x24
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 f8c3 	bl	8005f74 <RCCEx_PLL3_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004df2:	e005      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
      break;
 8004df8:	e002      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e06:	4b7c      	ldr	r3, [pc, #496]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e12:	4979      	ldr	r1, [pc, #484]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	650b      	str	r3, [r1, #80]	; 0x50
 8004e18:	e001      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d049      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e32:	d02e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e38:	d828      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e3e:	d02a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e44:	d822      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4a:	d026      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e50:	d81c      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d010      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5c:	d816      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01d      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e66:	d111      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 ffce 	bl	8005e10 <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e78:	e012      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f877 	bl	8005f74 <RCCEx_PLL3_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004e92:	bf00      	nop
 8004e94:	e004      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ea6:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	4951      	ldr	r1, [pc, #324]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	650b      	str	r3, [r1, #80]	; 0x50
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed4:	d02e      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eda:	d828      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d02a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d822      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eec:	d026      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ef2:	d81c      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef8:	d010      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efe:	d816      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f08:	d111      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 ff7d 	bl	8005e10 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f1a:	e012      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3324      	adds	r3, #36	; 0x24
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 f826 	bl	8005f74 <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f2c:	e009      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
      break;
 8004f32:	e006      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f34:	bf00      	nop
 8004f36:	e004      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f56:	4928      	ldr	r1, [pc, #160]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5c:	e001      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d02f      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f76:	d00e      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7c:	d814      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d015      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f86:	d10f      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f94:	e00c      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 ff37 	bl	8005e10 <RCCEx_PLL2_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fa6:	e003      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e000      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc2:	490d      	ldr	r1, [pc, #52]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	650b      	str	r3, [r1, #80]	; 0x50
 8004fc8:	e001      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d033      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d81c      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005023 	.word	0x08005023
 8004fec:	08004ffd 	.word	0x08004ffd
 8004ff0:	0800500b 	.word	0x0800500b
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4bb8      	ldr	r3, [pc, #736]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4ab7      	ldr	r2, [pc, #732]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005008:	e00c      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2102      	movs	r1, #2
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fefd 	bl	8005e10 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800501a:	e003      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800502a:	4bad      	ldr	r3, [pc, #692]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	49aa      	ldr	r1, [pc, #680]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800503c:	e001      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8086 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005050:	4ba4      	ldr	r3, [pc, #656]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4aa3      	ldr	r2, [pc, #652]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505c:	f7fc fad2 	bl	8001604 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005062:	e009      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005064:	f7fc face 	bl	8001604 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d902      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	75fb      	strb	r3, [r7, #23]
        break;
 8005076:	e005      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005078:	4b9a      	ldr	r3, [pc, #616]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d166      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800508a:	4b95      	ldr	r3, [pc, #596]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800508c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005094:	4053      	eors	r3, r2
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d013      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800509e:	4b90      	ldr	r3, [pc, #576]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a8:	4b8d      	ldr	r3, [pc, #564]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a8c      	ldr	r2, [pc, #560]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b4:	4b8a      	ldr	r3, [pc, #552]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a89      	ldr	r2, [pc, #548]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050c0:	4a87      	ldr	r2, [pc, #540]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d115      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fc fa97 	bl	8001604 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d8:	e00b      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fc fa93 	bl	8001604 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d902      	bls.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	75fb      	strb	r3, [r7, #23]
            break;
 80050f0:	e005      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f2:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ed      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d126      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800510a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005112:	d10d      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005114:	4b72      	ldr	r3, [pc, #456]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005122:	0919      	lsrs	r1, r3, #4
 8005124:	4b70      	ldr	r3, [pc, #448]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005126:	400b      	ands	r3, r1
 8005128:	496d      	ldr	r1, [pc, #436]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
 800512e:	e005      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005130:	4b6b      	ldr	r3, [pc, #428]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4a6a      	ldr	r2, [pc, #424]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800513a:	6113      	str	r3, [r2, #16]
 800513c:	4b68      	ldr	r3, [pc, #416]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800513e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	4965      	ldr	r1, [pc, #404]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	670b      	str	r3, [r1, #112]	; 0x70
 8005150:	e004      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	75bb      	strb	r3, [r7, #22]
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d07e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516c:	2b28      	cmp	r3, #40	; 0x28
 800516e:	d867      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	08005247 	.word	0x08005247
 800517c:	08005241 	.word	0x08005241
 8005180:	08005241 	.word	0x08005241
 8005184:	08005241 	.word	0x08005241
 8005188:	08005241 	.word	0x08005241
 800518c:	08005241 	.word	0x08005241
 8005190:	08005241 	.word	0x08005241
 8005194:	08005241 	.word	0x08005241
 8005198:	0800521d 	.word	0x0800521d
 800519c:	08005241 	.word	0x08005241
 80051a0:	08005241 	.word	0x08005241
 80051a4:	08005241 	.word	0x08005241
 80051a8:	08005241 	.word	0x08005241
 80051ac:	08005241 	.word	0x08005241
 80051b0:	08005241 	.word	0x08005241
 80051b4:	08005241 	.word	0x08005241
 80051b8:	0800522f 	.word	0x0800522f
 80051bc:	08005241 	.word	0x08005241
 80051c0:	08005241 	.word	0x08005241
 80051c4:	08005241 	.word	0x08005241
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005241 	.word	0x08005241
 80051d4:	08005241 	.word	0x08005241
 80051d8:	08005247 	.word	0x08005247
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005241 	.word	0x08005241
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005247 	.word	0x08005247
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
 800520c:	08005241 	.word	0x08005241
 8005210:	08005241 	.word	0x08005241
 8005214:	08005241 	.word	0x08005241
 8005218:	08005247 	.word	0x08005247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	2101      	movs	r1, #1
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fdf4 	bl	8005e10 <RCCEx_PLL2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800522c:	e00c      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fe9d 	bl	8005f74 <RCCEx_PLL3_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800523e:	e003      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
      break;
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525a:	4921      	ldr	r1, [pc, #132]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	654b      	str	r3, [r1, #84]	; 0x54
 8005260:	e001      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d03e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	2b05      	cmp	r3, #5
 8005278:	d820      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052c3 	.word	0x080052c3
 8005284:	08005299 	.word	0x08005299
 8005288:	080052ab 	.word	0x080052ab
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	2101      	movs	r1, #1
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fdb6 	bl	8005e10 <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052a8:	e00c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	2101      	movs	r1, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fe5f 	bl	8005f74 <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80052c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d110      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	4902      	ldr	r1, [pc, #8]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	654b      	str	r3, [r1, #84]	; 0x54
 80052dc:	e008      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	58024800 	.word	0x58024800
 80052e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d039      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	2b05      	cmp	r3, #5
 8005304:	d820      	bhi.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800534f 	.word	0x0800534f
 8005310:	08005325 	.word	0x08005325
 8005314:	08005337 	.word	0x08005337
 8005318:	0800534f 	.word	0x0800534f
 800531c:	0800534f 	.word	0x0800534f
 8005320:	0800534f 	.word	0x0800534f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fd70 	bl	8005e10 <RCCEx_PLL2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005334:	e00c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fe19 	bl	8005f74 <RCCEx_PLL3_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	75fb      	strb	r3, [r7, #23]
      break;
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800534e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005356:	4bb7      	ldr	r3, [pc, #732]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	49b3      	ldr	r1, [pc, #716]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005366:	4313      	orrs	r3, r2
 8005368:	658b      	str	r3, [r1, #88]	; 0x58
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d04b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005386:	d02e      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800538c:	d828      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d02a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d822      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800539a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800539e:	d026      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80053a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053a4:	d81c      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d010      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b0:	d816      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80053b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ba:	d111      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fd24 	bl	8005e10 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053cc:	e012      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fdcd 	bl	8005f74 <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80053e6:	bf00      	nop
 80053e8:	e004      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80053f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fa:	4b8e      	ldr	r3, [pc, #568]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005408:	498a      	ldr	r1, [pc, #552]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800540a:	4313      	orrs	r3, r2
 800540c:	654b      	str	r3, [r1, #84]	; 0x54
 800540e:	e001      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d04b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800542a:	d02e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800542c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005430:	d828      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d02a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543c:	d822      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005442:	d026      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005448:	d81c      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d010      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005454:	d816      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d111      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcd2 	bl	8005e10 <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005470:	e012      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3324      	adds	r3, #36	; 0x24
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd7b 	bl	8005f74 <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005482:	e009      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
      break;
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800548a:	bf00      	nop
 800548c:	e004      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800548e:	bf00      	nop
 8005490:	e002      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005492:	bf00      	nop
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800549e:	4b65      	ldr	r3, [pc, #404]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ac:	4961      	ldr	r1, [pc, #388]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	658b      	str	r3, [r1, #88]	; 0x58
 80054b2:	e001      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d04b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054ce:	d02e      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80054d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054d4:	d828      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054da:	d02a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e0:	d822      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054e6:	d026      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80054e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054ec:	d81c      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f2:	d010      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80054f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f8:	d816      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01d      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	d111      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fc80 	bl	8005e10 <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005514:	e012      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3324      	adds	r3, #36	; 0x24
 800551a:	2102      	movs	r1, #2
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd29 	bl	8005f74 <RCCEx_PLL3_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005526:	e009      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	e006      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800552e:	bf00      	nop
 8005530:	e004      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800553a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005542:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005550:	4938      	ldr	r1, [pc, #224]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005552:	4313      	orrs	r3, r2
 8005554:	658b      	str	r3, [r1, #88]	; 0x58
 8005556:	e001      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d10a      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	2102      	movs	r1, #2
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fcfa 	bl	8005f74 <RCCEx_PLL3_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800558a:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005598:	4926      	ldr	r1, [pc, #152]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800559a:	4313      	orrs	r3, r2
 800559c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d10a      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3324      	adds	r3, #36	; 0x24
 80055ba:	2102      	movs	r1, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fcd9 	bl	8005f74 <RCCEx_PLL3_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055da:	4916      	ldr	r1, [pc, #88]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d036      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f6:	d01f      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80055f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fc:	d817      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005606:	d009      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005608:	e011      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fbfd 	bl	8005e10 <RCCEx_PLL2_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800561a:	e00e      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fca6 	bl	8005f74 <RCCEx_PLL3_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800562c:	e005      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
      break;
 8005632:	e002      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005634:	58024400 	.word	0x58024400
      break;
 8005638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005640:	4b93      	ldr	r3, [pc, #588]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800564e:	4990      	ldr	r1, [pc, #576]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005650:	4313      	orrs	r3, r2
 8005652:	658b      	str	r3, [r1, #88]	; 0x58
 8005654:	e001      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d033      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005670:	d01c      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005676:	d816      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567c:	d003      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800567e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005682:	d007      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005684:	e00f      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005686:	4b82      	ldr	r3, [pc, #520]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	4a81      	ldr	r2, [pc, #516]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800568c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005692:	e00c      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fc6a 	bl	8005f74 <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056a4:	e003      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80056ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b4:	4b76      	ldr	r3, [pc, #472]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c2:	4973      	ldr	r1, [pc, #460]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	654b      	str	r3, [r1, #84]	; 0x54
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d029      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d007      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80056e8:	e00f      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4b69      	ldr	r3, [pc, #420]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a68      	ldr	r2, [pc, #416]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80056f6:	e00b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2102      	movs	r1, #2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fb86 	bl	8005e10 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
      break;
 800570e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005716:	4b5e      	ldr	r3, [pc, #376]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	495b      	ldr	r1, [pc, #364]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005728:	e001      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	2102      	movs	r1, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fc17 	bl	8005f74 <RCCEx_PLL3_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d030      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005764:	d017      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d811      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d013      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005776:	d80b      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d106      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005782:	4b43      	ldr	r3, [pc, #268]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	4a42      	ldr	r2, [pc, #264]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800578e:	e007      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	e004      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005796:	bf00      	nop
 8005798:	e002      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800579e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a6:	4b3a      	ldr	r3, [pc, #232]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b2:	4937      	ldr	r1, [pc, #220]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	654b      	str	r3, [r1, #84]	; 0x54
 80057b8:	e001      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	492e      	ldr	r1, [pc, #184]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057e8:	4b29      	ldr	r3, [pc, #164]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057f6:	4926      	ldr	r1, [pc, #152]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005808:	4b21      	ldr	r3, [pc, #132]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005814:	491e      	ldr	r1, [pc, #120]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	4a19      	ldr	r2, [pc, #100]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800582c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005830:	6113      	str	r3, [r2, #16]
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800583c:	4914      	ldr	r1, [pc, #80]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	da08      	bge.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	490e      	ldr	r1, [pc, #56]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005858:	4313      	orrs	r3, r2
 800585a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	4906      	ldr	r1, [pc, #24]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800587c:	7dbb      	ldrb	r3, [r7, #22]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	58024400 	.word	0x58024400

08005894 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005898:	f7ff f81e 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4904      	ldr	r1, [pc, #16]	; (80058bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	58024400 	.word	0x58024400
 80058bc:	0801f6dc 	.word	0x0801f6dc

080058c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058c8:	4ba1      	ldr	r3, [pc, #644]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058d2:	4b9f      	ldr	r3, [pc, #636]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	0b1b      	lsrs	r3, r3, #12
 80058d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058de:	4b9c      	ldr	r3, [pc, #624]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80058ea:	4b99      	ldr	r3, [pc, #612]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	08db      	lsrs	r3, r3, #3
 80058f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8111 	beq.w	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b02      	cmp	r3, #2
 8005912:	f000 8083 	beq.w	8005a1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b02      	cmp	r3, #2
 800591a:	f200 80a1 	bhi.w	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d056      	beq.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800592a:	e099      	b.n	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800592c:	4b88      	ldr	r3, [pc, #544]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d02d      	beq.n	8005994 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005938:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	08db      	lsrs	r3, r3, #3
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	4a84      	ldr	r2, [pc, #528]	; (8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
 8005948:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005962:	4b7b      	ldr	r3, [pc, #492]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a03 	vldr	s12, [r7, #12]
 8005976:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005992:	e087      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	4b6a      	ldr	r3, [pc, #424]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d6:	e065      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1a:	e043      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5e:	e021      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005aa4:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	0a5b      	lsrs	r3, r3, #9
 8005aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aca:	ee17 2a90 	vmov	r2, s15
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af8:	ee17 2a90 	vmov	r2, s15
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b00:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	0e1b      	lsrs	r3, r3, #24
 8005b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b26:	ee17 2a90 	vmov	r2, s15
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b2e:	e008      	b.n	8005b42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
}
 8005b42:	bf00      	nop
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400
 8005b54:	03d09000 	.word	0x03d09000
 8005b58:	46000000 	.word	0x46000000
 8005b5c:	4c742400 	.word	0x4c742400
 8005b60:	4a742400 	.word	0x4a742400
 8005b64:	4af42400 	.word	0x4af42400

08005b68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b70:	4ba1      	ldr	r3, [pc, #644]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b7a:	4b9f      	ldr	r3, [pc, #636]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	0d1b      	lsrs	r3, r3, #20
 8005b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b86:	4b9c      	ldr	r3, [pc, #624]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005b92:	4b99      	ldr	r3, [pc, #612]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8111 	beq.w	8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f000 8083 	beq.w	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	f200 80a1 	bhi.w	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d056      	beq.n	8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bd2:	e099      	b.n	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd4:	4b88      	ldr	r3, [pc, #544]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02d      	beq.n	8005c3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005be0:	4b85      	ldr	r3, [pc, #532]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	4a84      	ldr	r2, [pc, #528]	; (8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c3a:	e087      	b.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c7e:	e065      	b.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc2:	e043      	b.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b48      	ldr	r3, [pc, #288]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d06:	e021      	b.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d4c:	4b2a      	ldr	r3, [pc, #168]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	0a5b      	lsrs	r3, r3, #9
 8005d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da0:	ee17 2a90 	vmov	r2, s15
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005da8:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dce:	ee17 2a90 	vmov	r2, s15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dd6:	e008      	b.n	8005dea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
}
 8005dea:	bf00      	nop
 8005dec:	3724      	adds	r7, #36	; 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	46000000 	.word	0x46000000
 8005e04:	4c742400 	.word	0x4c742400
 8005e08:	4a742400 	.word	0x4a742400
 8005e0c:	4af42400 	.word	0x4af42400

08005e10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e1e:	4b53      	ldr	r3, [pc, #332]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d101      	bne.n	8005e2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e099      	b.n	8005f62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e2e:	4b4f      	ldr	r3, [pc, #316]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a4e      	ldr	r2, [pc, #312]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e3a:	f7fb fbe3 	bl	8001604 <HAL_GetTick>
 8005e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e40:	e008      	b.n	8005e54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e42:	f7fb fbdf 	bl	8001604 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e086      	b.n	8005f62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e54:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e60:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	493f      	ldr	r1, [pc, #252]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	628b      	str	r3, [r1, #40]	; 0x28
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	025b      	lsls	r3, r3, #9
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	061b      	lsls	r3, r3, #24
 8005ea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ea4:	4931      	ldr	r1, [pc, #196]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005eaa:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	492d      	ldr	r1, [pc, #180]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ebc:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f023 0220 	bic.w	r2, r3, #32
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	4928      	ldr	r1, [pc, #160]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ece:	4b27      	ldr	r3, [pc, #156]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <RCCEx_PLL2_Config+0x160>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	69d2      	ldr	r2, [r2, #28]
 8005ee6:	00d2      	lsls	r2, r2, #3
 8005ee8:	4920      	ldr	r1, [pc, #128]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	f043 0310 	orr.w	r3, r3, #16
 8005ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f0c:	e00f      	b.n	8005f2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	4a14      	ldr	r2, [pc, #80]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f20:	e005      	b.n	8005f2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a11      	ldr	r2, [pc, #68]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3a:	f7fb fb63 	bl	8001604 <HAL_GetTick>
 8005f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f40:	e008      	b.n	8005f54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f42:	f7fb fb5f 	bl	8001604 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e006      	b.n	8005f62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <RCCEx_PLL2_Config+0x15c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	ffff0007 	.word	0xffff0007

08005f74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f82:	4b53      	ldr	r3, [pc, #332]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d101      	bne.n	8005f92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e099      	b.n	80060c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f92:	4b4f      	ldr	r3, [pc, #316]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a4e      	ldr	r2, [pc, #312]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9e:	f7fb fb31 	bl	8001604 <HAL_GetTick>
 8005fa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fa4:	e008      	b.n	8005fb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fa6:	f7fb fb2d 	bl	8001604 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e086      	b.n	80060c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fb8:	4b45      	ldr	r3, [pc, #276]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f0      	bne.n	8005fa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fc4:	4b42      	ldr	r3, [pc, #264]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	051b      	lsls	r3, r3, #20
 8005fd2:	493f      	ldr	r1, [pc, #252]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	025b      	lsls	r3, r3, #9
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	3b01      	subs	r3, #1
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006008:	4931      	ldr	r1, [pc, #196]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800600a:	4313      	orrs	r3, r2
 800600c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800600e:	4b30      	ldr	r3, [pc, #192]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	492d      	ldr	r1, [pc, #180]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800601c:	4313      	orrs	r3, r2
 800601e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006020:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	4928      	ldr	r1, [pc, #160]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800602e:	4313      	orrs	r3, r2
 8006030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006032:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800603c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800603e:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <RCCEx_PLL3_Config+0x160>)
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	69d2      	ldr	r2, [r2, #28]
 800604a:	00d2      	lsls	r2, r2, #3
 800604c:	4920      	ldr	r1, [pc, #128]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006052:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006064:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800606a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800606e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006070:	e00f      	b.n	8006092 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d106      	bne.n	8006086 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800607e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006084:	e005      	b.n	8006092 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	4a11      	ldr	r2, [pc, #68]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 800608c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006090:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609e:	f7fb fab1 	bl	8001604 <HAL_GetTick>
 80060a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060a4:	e008      	b.n	80060b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060a6:	f7fb faad 	bl	8001604 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e006      	b.n	80060c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <RCCEx_PLL3_Config+0x15c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	58024400 	.word	0x58024400
 80060d4:	ffff0007 	.word	0xffff0007

080060d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e054      	b.n	8006194 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7a5b      	ldrb	r3, [r3, #9]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa fd0e 	bl	8000b1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 0120 	bic.w	r1, r3, #32
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0204 	orr.w	r2, r2, #4
 800612a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d104      	bne.n	8006144 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2204      	movs	r2, #4
 800613e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e027      	b.n	8006194 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006144:	f7fb fa5e 	bl	8001604 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800614a:	e015      	b.n	8006178 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800614c:	f7fb fa5a 	bl	8001604 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d90e      	bls.n	8006178 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b04      	cmp	r3, #4
 8006166:	d107      	bne.n	8006178 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2204      	movs	r2, #4
 800616c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e00d      	b.n	8006194 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b04      	cmp	r3, #4
 8006184:	d0e2      	beq.n	800614c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d105      	bne.n	80061c2 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2210      	movs	r2, #16
 80061ba:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e023      	b.n	800620a <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d11c      	bne.n	800620a <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d008      	beq.n	80061f0 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	e00c      	b.n	800620a <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2208      	movs	r2, #8
 80061f4:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 80061f6:	2301      	movs	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0208 	bic.w	r2, r2, #8
 8006208:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10b      	bne.n	8006228 <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2204      	movs	r2, #4
 8006214:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f839 	bl	800628e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8006224:	605a      	str	r2, [r3, #4]

    return;
 8006226:	e024      	b.n	8006272 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d11d      	bne.n	8006272 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0208 	bic.w	r2, r2, #8
 8006244:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7a5b      	ldrb	r3, [r3, #9]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b04      	cmp	r3, #4
 8006258:	d00b      	beq.n	8006272 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f803 	bl	8006278 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e049      	b.n	8006348 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f841 	bl	8006350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f000 f9ff 	bl	80066e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d001      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e054      	b.n	8006426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <HAL_TIM_Base_Start_IT+0xd0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d022      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d01d      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <HAL_TIM_Base_Start_IT+0xd4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d018      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a21      	ldr	r2, [pc, #132]	; (800643c <HAL_TIM_Base_Start_IT+0xd8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <HAL_TIM_Base_Start_IT+0xdc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <HAL_TIM_Base_Start_IT+0xe0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_TIM_Base_Start_IT+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1b      	ldr	r2, [pc, #108]	; (800644c <HAL_TIM_Base_Start_IT+0xe8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d115      	bne.n	8006410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	4b19      	ldr	r3, [pc, #100]	; (8006450 <HAL_TIM_Base_Start_IT+0xec>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b06      	cmp	r3, #6
 80063f4:	d015      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0xbe>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fc:	d011      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640e:	e008      	b.n	8006422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	e000      	b.n	8006424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40001800 	.word	0x40001800
 800644c:	40014000 	.word	0x40014000
 8006450:	00010007 	.word	0x00010007

08006454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0202 	mvn.w	r2, #2
 8006480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f905 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8f7 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f908 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0204 	mvn.w	r2, #4
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8db 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8cd 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8de 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b08      	cmp	r3, #8
 8006510:	d122      	bne.n	8006558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d11b      	bne.n	8006558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0208 	mvn.w	r2, #8
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2204      	movs	r2, #4
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8b1 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8a3 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8b4 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b10      	cmp	r3, #16
 8006564:	d122      	bne.n	80065ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d11b      	bne.n	80065ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0210 	mvn.w	r2, #16
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2208      	movs	r2, #8
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f887 	bl	80066a6 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f879 	bl	8006692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f88a 	bl	80066ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10e      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0201 	mvn.w	r2, #1
 80065d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fa74 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d10e      	bne.n	8006604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d107      	bne.n	8006604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f914 	bl	800682c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006612:	d10e      	bne.n	8006632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d107      	bne.n	8006632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800662a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f907 	bl	8006840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d10e      	bne.n	800665e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d107      	bne.n	800665e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f838 	bl	80066ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0220 	mvn.w	r2, #32
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f8c7 	bl	8006818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a40      	ldr	r2, [pc, #256]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006702:	d00f      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a3d      	ldr	r2, [pc, #244]	; (80067fc <TIM_Base_SetConfig+0x118>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00b      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a3c      	ldr	r2, [pc, #240]	; (8006800 <TIM_Base_SetConfig+0x11c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a3b      	ldr	r2, [pc, #236]	; (8006804 <TIM_Base_SetConfig+0x120>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a3a      	ldr	r2, [pc, #232]	; (8006808 <TIM_Base_SetConfig+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d108      	bne.n	8006736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01f      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d01b      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <TIM_Base_SetConfig+0x118>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d017      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <TIM_Base_SetConfig+0x11c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <TIM_Base_SetConfig+0x120>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00f      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_Base_SetConfig+0x124>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_Base_SetConfig+0x128>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a26      	ldr	r2, [pc, #152]	; (8006814 <TIM_Base_SetConfig+0x130>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d108      	bne.n	8006790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <TIM_Base_SetConfig+0x114>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a12      	ldr	r2, [pc, #72]	; (8006808 <TIM_Base_SetConfig+0x124>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a11      	ldr	r2, [pc, #68]	; (800680c <TIM_Base_SetConfig+0x128>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <TIM_Base_SetConfig+0x12c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0xf8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0f      	ldr	r2, [pc, #60]	; (8006814 <TIM_Base_SetConfig+0x130>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d103      	bne.n	80067e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	615a      	str	r2, [r3, #20]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40000400 	.word	0x40000400
 8006800:	40000800 	.word	0x40000800
 8006804:	40000c00 	.word	0x40000c00
 8006808:	40010400 	.word	0x40010400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e042      	b.n	80068ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fa fbd7 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2224      	movs	r2, #36	; 0x24
 8006882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f82c 	bl	80068f4 <UART_SetConfig>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e022      	b.n	80068ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fd80 	bl	80073b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fe07 	bl	80074f8 <UART_CheckIdleState>
 80068ea:	4603      	mov	r3, r0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	b5b0      	push	{r4, r5, r7, lr}
 80068f6:	b08e      	sub	sp, #56	; 0x38
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	4313      	orrs	r3, r2
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4bbf      	ldr	r3, [pc, #764]	; (8006c20 <UART_SetConfig+0x32c>)
 8006922:	4013      	ands	r3, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800692a:	430b      	orrs	r3, r1
 800692c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4ab5      	ldr	r2, [pc, #724]	; (8006c24 <UART_SetConfig+0x330>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695a:	4313      	orrs	r3, r2
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	4bb0      	ldr	r3, [pc, #704]	; (8006c28 <UART_SetConfig+0x334>)
 8006966:	4013      	ands	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800696e:	430b      	orrs	r3, r1
 8006970:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f023 010f 	bic.w	r1, r3, #15
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4aa7      	ldr	r2, [pc, #668]	; (8006c2c <UART_SetConfig+0x338>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d176      	bne.n	8006a80 <UART_SetConfig+0x18c>
 8006992:	4ba7      	ldr	r3, [pc, #668]	; (8006c30 <UART_SetConfig+0x33c>)
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800699a:	2b28      	cmp	r3, #40	; 0x28
 800699c:	d86c      	bhi.n	8006a78 <UART_SetConfig+0x184>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0xb0>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	08006a49 	.word	0x08006a49
 80069a8:	08006a79 	.word	0x08006a79
 80069ac:	08006a79 	.word	0x08006a79
 80069b0:	08006a79 	.word	0x08006a79
 80069b4:	08006a79 	.word	0x08006a79
 80069b8:	08006a79 	.word	0x08006a79
 80069bc:	08006a79 	.word	0x08006a79
 80069c0:	08006a79 	.word	0x08006a79
 80069c4:	08006a51 	.word	0x08006a51
 80069c8:	08006a79 	.word	0x08006a79
 80069cc:	08006a79 	.word	0x08006a79
 80069d0:	08006a79 	.word	0x08006a79
 80069d4:	08006a79 	.word	0x08006a79
 80069d8:	08006a79 	.word	0x08006a79
 80069dc:	08006a79 	.word	0x08006a79
 80069e0:	08006a79 	.word	0x08006a79
 80069e4:	08006a59 	.word	0x08006a59
 80069e8:	08006a79 	.word	0x08006a79
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006a79 	.word	0x08006a79
 80069f4:	08006a79 	.word	0x08006a79
 80069f8:	08006a79 	.word	0x08006a79
 80069fc:	08006a79 	.word	0x08006a79
 8006a00:	08006a79 	.word	0x08006a79
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a79 	.word	0x08006a79
 8006a0c:	08006a79 	.word	0x08006a79
 8006a10:	08006a79 	.word	0x08006a79
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006a79 	.word	0x08006a79
 8006a1c:	08006a79 	.word	0x08006a79
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a69 	.word	0x08006a69
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a79 	.word	0x08006a79
 8006a30:	08006a79 	.word	0x08006a79
 8006a34:	08006a79 	.word	0x08006a79
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
 8006a40:	08006a79 	.word	0x08006a79
 8006a44:	08006a71 	.word	0x08006a71
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4e:	e222      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	e21e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5e:	e21a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a66:	e216      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a6e:	e212      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a76:	e20e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a7e:	e20a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a6b      	ldr	r2, [pc, #428]	; (8006c34 <UART_SetConfig+0x340>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d130      	bne.n	8006aec <UART_SetConfig+0x1f8>
 8006a8a:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <UART_SetConfig+0x33c>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d826      	bhi.n	8006ae4 <UART_SetConfig+0x1f0>
 8006a96:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <UART_SetConfig+0x1a8>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e1ec      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e1e8      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e1e4      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e1e0      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ada:	e1dc      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006adc:	2340      	movs	r3, #64	; 0x40
 8006ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae2:	e1d8      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aea:	e1d4      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a51      	ldr	r2, [pc, #324]	; (8006c38 <UART_SetConfig+0x344>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d130      	bne.n	8006b58 <UART_SetConfig+0x264>
 8006af6:	4b4e      	ldr	r3, [pc, #312]	; (8006c30 <UART_SetConfig+0x33c>)
 8006af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d826      	bhi.n	8006b50 <UART_SetConfig+0x25c>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <UART_SetConfig+0x214>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b21 	.word	0x08006b21
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	08006b31 	.word	0x08006b31
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b41 	.word	0x08006b41
 8006b1c:	08006b49 	.word	0x08006b49
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b26:	e1b6      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2e:	e1b2      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b36:	e1ae      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3e:	e1aa      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b40:	2320      	movs	r3, #32
 8006b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b46:	e1a6      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b48:	2340      	movs	r3, #64	; 0x40
 8006b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4e:	e1a2      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b50:	2380      	movs	r3, #128	; 0x80
 8006b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b56:	e19e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a37      	ldr	r2, [pc, #220]	; (8006c3c <UART_SetConfig+0x348>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d130      	bne.n	8006bc4 <UART_SetConfig+0x2d0>
 8006b62:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <UART_SetConfig+0x33c>)
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d826      	bhi.n	8006bbc <UART_SetConfig+0x2c8>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x280>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b8d 	.word	0x08006b8d
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	08006b9d 	.word	0x08006b9d
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e180      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9a:	e17c      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba2:	e178      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006baa:	e174      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006bac:	2320      	movs	r3, #32
 8006bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb2:	e170      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bba:	e16c      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc2:	e168      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <UART_SetConfig+0x34c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d142      	bne.n	8006c54 <UART_SetConfig+0x360>
 8006bce:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <UART_SetConfig+0x33c>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d838      	bhi.n	8006c4c <UART_SetConfig+0x358>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <UART_SetConfig+0x2ec>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006bf9 	.word	0x08006bf9
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	08006c09 	.word	0x08006c09
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c45 	.word	0x08006c45
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfe:	e14a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c06:	e146      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0e:	e142      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c16:	e13e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1e:	e13a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c20:	cfff69f3 	.word	0xcfff69f3
 8006c24:	58000c00 	.word	0x58000c00
 8006c28:	11fff4ff 	.word	0x11fff4ff
 8006c2c:	40011000 	.word	0x40011000
 8006c30:	58024400 	.word	0x58024400
 8006c34:	40004400 	.word	0x40004400
 8006c38:	40004800 	.word	0x40004800
 8006c3c:	40004c00 	.word	0x40004c00
 8006c40:	40005000 	.word	0x40005000
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4a:	e124      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c52:	e120      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4acc      	ldr	r2, [pc, #816]	; (8006f8c <UART_SetConfig+0x698>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d176      	bne.n	8006d4c <UART_SetConfig+0x458>
 8006c5e:	4bcc      	ldr	r3, [pc, #816]	; (8006f90 <UART_SetConfig+0x69c>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c66:	2b28      	cmp	r3, #40	; 0x28
 8006c68:	d86c      	bhi.n	8006d44 <UART_SetConfig+0x450>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <UART_SetConfig+0x37c>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006d15 	.word	0x08006d15
 8006c74:	08006d45 	.word	0x08006d45
 8006c78:	08006d45 	.word	0x08006d45
 8006c7c:	08006d45 	.word	0x08006d45
 8006c80:	08006d45 	.word	0x08006d45
 8006c84:	08006d45 	.word	0x08006d45
 8006c88:	08006d45 	.word	0x08006d45
 8006c8c:	08006d45 	.word	0x08006d45
 8006c90:	08006d1d 	.word	0x08006d1d
 8006c94:	08006d45 	.word	0x08006d45
 8006c98:	08006d45 	.word	0x08006d45
 8006c9c:	08006d45 	.word	0x08006d45
 8006ca0:	08006d45 	.word	0x08006d45
 8006ca4:	08006d45 	.word	0x08006d45
 8006ca8:	08006d45 	.word	0x08006d45
 8006cac:	08006d45 	.word	0x08006d45
 8006cb0:	08006d25 	.word	0x08006d25
 8006cb4:	08006d45 	.word	0x08006d45
 8006cb8:	08006d45 	.word	0x08006d45
 8006cbc:	08006d45 	.word	0x08006d45
 8006cc0:	08006d45 	.word	0x08006d45
 8006cc4:	08006d45 	.word	0x08006d45
 8006cc8:	08006d45 	.word	0x08006d45
 8006ccc:	08006d45 	.word	0x08006d45
 8006cd0:	08006d2d 	.word	0x08006d2d
 8006cd4:	08006d45 	.word	0x08006d45
 8006cd8:	08006d45 	.word	0x08006d45
 8006cdc:	08006d45 	.word	0x08006d45
 8006ce0:	08006d45 	.word	0x08006d45
 8006ce4:	08006d45 	.word	0x08006d45
 8006ce8:	08006d45 	.word	0x08006d45
 8006cec:	08006d45 	.word	0x08006d45
 8006cf0:	08006d35 	.word	0x08006d35
 8006cf4:	08006d45 	.word	0x08006d45
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d45 	.word	0x08006d45
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d1a:	e0bc      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d22:	e0b8      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d24:	2308      	movs	r3, #8
 8006d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2a:	e0b4      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d32:	e0b0      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d34:	2320      	movs	r3, #32
 8006d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3a:	e0ac      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d3c:	2340      	movs	r3, #64	; 0x40
 8006d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d42:	e0a8      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4a:	e0a4      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a90      	ldr	r2, [pc, #576]	; (8006f94 <UART_SetConfig+0x6a0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d130      	bne.n	8006db8 <UART_SetConfig+0x4c4>
 8006d56:	4b8e      	ldr	r3, [pc, #568]	; (8006f90 <UART_SetConfig+0x69c>)
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d826      	bhi.n	8006db0 <UART_SetConfig+0x4bc>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x474>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d89 	.word	0x08006d89
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d86:	e086      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8e:	e082      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d90:	2308      	movs	r3, #8
 8006d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d96:	e07e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9e:	e07a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006da0:	2320      	movs	r3, #32
 8006da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da6:	e076      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dae:	e072      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db6:	e06e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a76      	ldr	r2, [pc, #472]	; (8006f98 <UART_SetConfig+0x6a4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d130      	bne.n	8006e24 <UART_SetConfig+0x530>
 8006dc2:	4b73      	ldr	r3, [pc, #460]	; (8006f90 <UART_SetConfig+0x69c>)
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b05      	cmp	r3, #5
 8006dcc:	d826      	bhi.n	8006e1c <UART_SetConfig+0x528>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <UART_SetConfig+0x4e0>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006ded 	.word	0x08006ded
 8006dd8:	08006df5 	.word	0x08006df5
 8006ddc:	08006dfd 	.word	0x08006dfd
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e15 	.word	0x08006e15
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df2:	e050      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfa:	e04c      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e02:	e048      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0a:	e044      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e12:	e040      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1a:	e03c      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e22:	e038      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <UART_SetConfig+0x6a8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d130      	bne.n	8006e90 <UART_SetConfig+0x59c>
 8006e2e:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <UART_SetConfig+0x69c>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d826      	bhi.n	8006e88 <UART_SetConfig+0x594>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x54c>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e59 	.word	0x08006e59
 8006e44:	08006e61 	.word	0x08006e61
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e81 	.word	0x08006e81
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5e:	e01a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e66:	e016      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6e:	e012      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e76:	e00e      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7e:	e00a      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e86:	e006      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8e:	e002      	b.n	8006e96 <UART_SetConfig+0x5a2>
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a40      	ldr	r2, [pc, #256]	; (8006f9c <UART_SetConfig+0x6a8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	f040 80ef 	bne.w	8007080 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	dc46      	bgt.n	8006f38 <UART_SetConfig+0x644>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	f2c0 8081 	blt.w	8006fb2 <UART_SetConfig+0x6be>
 8006eb0:	3b02      	subs	r3, #2
 8006eb2:	2b1e      	cmp	r3, #30
 8006eb4:	d87d      	bhi.n	8006fb2 <UART_SetConfig+0x6be>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x5c8>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f3f 	.word	0x08006f3f
 8006ec0:	08006fb3 	.word	0x08006fb3
 8006ec4:	08006f47 	.word	0x08006f47
 8006ec8:	08006fb3 	.word	0x08006fb3
 8006ecc:	08006fb3 	.word	0x08006fb3
 8006ed0:	08006fb3 	.word	0x08006fb3
 8006ed4:	08006f57 	.word	0x08006f57
 8006ed8:	08006fb3 	.word	0x08006fb3
 8006edc:	08006fb3 	.word	0x08006fb3
 8006ee0:	08006fb3 	.word	0x08006fb3
 8006ee4:	08006fb3 	.word	0x08006fb3
 8006ee8:	08006fb3 	.word	0x08006fb3
 8006eec:	08006fb3 	.word	0x08006fb3
 8006ef0:	08006fb3 	.word	0x08006fb3
 8006ef4:	08006f67 	.word	0x08006f67
 8006ef8:	08006fb3 	.word	0x08006fb3
 8006efc:	08006fb3 	.word	0x08006fb3
 8006f00:	08006fb3 	.word	0x08006fb3
 8006f04:	08006fb3 	.word	0x08006fb3
 8006f08:	08006fb3 	.word	0x08006fb3
 8006f0c:	08006fb3 	.word	0x08006fb3
 8006f10:	08006fb3 	.word	0x08006fb3
 8006f14:	08006fb3 	.word	0x08006fb3
 8006f18:	08006fb3 	.word	0x08006fb3
 8006f1c:	08006fb3 	.word	0x08006fb3
 8006f20:	08006fb3 	.word	0x08006fb3
 8006f24:	08006fb3 	.word	0x08006fb3
 8006f28:	08006fb3 	.word	0x08006fb3
 8006f2c:	08006fb3 	.word	0x08006fb3
 8006f30:	08006fb3 	.word	0x08006fb3
 8006f34:	08006fa5 	.word	0x08006fa5
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d036      	beq.n	8006faa <UART_SetConfig+0x6b6>
 8006f3c:	e039      	b.n	8006fb2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f3e:	f7fe fca9 	bl	8005894 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f44:	e03b      	b.n	8006fbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f46:	f107 0314 	add.w	r3, r7, #20
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fcb8 	bl	80058c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f54:	e033      	b.n	8006fbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f56:	f107 0308 	add.w	r3, r7, #8
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fe04 	bl	8005b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f64:	e02b      	b.n	8006fbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <UART_SetConfig+0x69c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <UART_SetConfig+0x69c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	08db      	lsrs	r3, r3, #3
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <UART_SetConfig+0x6ac>)
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f84:	e01b      	b.n	8006fbe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <UART_SetConfig+0x6ac>)
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f8a:	e018      	b.n	8006fbe <UART_SetConfig+0x6ca>
 8006f8c:	40011400 	.word	0x40011400
 8006f90:	58024400 	.word	0x58024400
 8006f94:	40007800 	.word	0x40007800
 8006f98:	40007c00 	.word	0x40007c00
 8006f9c:	58000c00 	.word	0x58000c00
 8006fa0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fa4:	4bc4      	ldr	r3, [pc, #784]	; (80072b8 <UART_SetConfig+0x9c4>)
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa8:	e009      	b.n	8006fbe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb0:	e005      	b.n	8006fbe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 81da 	beq.w	800737a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	4abc      	ldr	r2, [pc, #752]	; (80072bc <UART_SetConfig+0x9c8>)
 8006fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d305      	bcc.n	8006ff6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d903      	bls.n	8006ffe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ffc:	e1bd      	b.n	800737a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	4618      	mov	r0, r3
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	4aac      	ldr	r2, [pc, #688]	; (80072bc <UART_SetConfig+0x9c8>)
 800700c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007010:	b29a      	uxth	r2, r3
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	f7f9 f9b3 	bl	8000380 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	020b      	lsls	r3, r1, #8
 800702c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007030:	0202      	lsls	r2, r0, #8
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	6849      	ldr	r1, [r1, #4]
 8007036:	0849      	lsrs	r1, r1, #1
 8007038:	4608      	mov	r0, r1
 800703a:	f04f 0100 	mov.w	r1, #0
 800703e:	1814      	adds	r4, r2, r0
 8007040:	eb43 0501 	adc.w	r5, r3, r1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	461a      	mov	r2, r3
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 f995 	bl	8000380 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4613      	mov	r3, r2
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007064:	d308      	bcc.n	8007078 <UART_SetConfig+0x784>
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706c:	d204      	bcs.n	8007078 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	e180      	b.n	800737a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800707e:	e17c      	b.n	800737a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007088:	f040 80be 	bne.w	8007208 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800708c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007090:	2b20      	cmp	r3, #32
 8007092:	dc49      	bgt.n	8007128 <UART_SetConfig+0x834>
 8007094:	2b00      	cmp	r3, #0
 8007096:	db7c      	blt.n	8007192 <UART_SetConfig+0x89e>
 8007098:	2b20      	cmp	r3, #32
 800709a:	d87a      	bhi.n	8007192 <UART_SetConfig+0x89e>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0x7b0>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	0800712f 	.word	0x0800712f
 80070a8:	08007137 	.word	0x08007137
 80070ac:	08007193 	.word	0x08007193
 80070b0:	08007193 	.word	0x08007193
 80070b4:	0800713f 	.word	0x0800713f
 80070b8:	08007193 	.word	0x08007193
 80070bc:	08007193 	.word	0x08007193
 80070c0:	08007193 	.word	0x08007193
 80070c4:	0800714f 	.word	0x0800714f
 80070c8:	08007193 	.word	0x08007193
 80070cc:	08007193 	.word	0x08007193
 80070d0:	08007193 	.word	0x08007193
 80070d4:	08007193 	.word	0x08007193
 80070d8:	08007193 	.word	0x08007193
 80070dc:	08007193 	.word	0x08007193
 80070e0:	08007193 	.word	0x08007193
 80070e4:	0800715f 	.word	0x0800715f
 80070e8:	08007193 	.word	0x08007193
 80070ec:	08007193 	.word	0x08007193
 80070f0:	08007193 	.word	0x08007193
 80070f4:	08007193 	.word	0x08007193
 80070f8:	08007193 	.word	0x08007193
 80070fc:	08007193 	.word	0x08007193
 8007100:	08007193 	.word	0x08007193
 8007104:	08007193 	.word	0x08007193
 8007108:	08007193 	.word	0x08007193
 800710c:	08007193 	.word	0x08007193
 8007110:	08007193 	.word	0x08007193
 8007114:	08007193 	.word	0x08007193
 8007118:	08007193 	.word	0x08007193
 800711c:	08007193 	.word	0x08007193
 8007120:	08007193 	.word	0x08007193
 8007124:	08007185 	.word	0x08007185
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d02e      	beq.n	800718a <UART_SetConfig+0x896>
 800712c:	e031      	b.n	8007192 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800712e:	f7fd fc03 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8007132:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007134:	e033      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007136:	f7fd fc15 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 800713a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800713c:	e02f      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fbbc 	bl	80058c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800714c:	e027      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fd08 	bl	8005b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800715c:	e01f      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800715e:	4b58      	ldr	r3, [pc, #352]	; (80072c0 <UART_SetConfig+0x9cc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800716a:	4b55      	ldr	r3, [pc, #340]	; (80072c0 <UART_SetConfig+0x9cc>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	08db      	lsrs	r3, r3, #3
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	4a53      	ldr	r2, [pc, #332]	; (80072c4 <UART_SetConfig+0x9d0>)
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800717c:	e00f      	b.n	800719e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800717e:	4b51      	ldr	r3, [pc, #324]	; (80072c4 <UART_SetConfig+0x9d0>)
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007182:	e00c      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007184:	4b4c      	ldr	r3, [pc, #304]	; (80072b8 <UART_SetConfig+0x9c4>)
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007188:	e009      	b.n	800719e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007190:	e005      	b.n	800719e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800719c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80ea 	beq.w	800737a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	4a44      	ldr	r2, [pc, #272]	; (80072bc <UART_SetConfig+0x9c8>)
 80071ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	d916      	bls.n	8007200 <UART_SetConfig+0x90c>
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d212      	bcs.n	8007200 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f023 030f 	bic.w	r3, r3, #15
 80071e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071f2:	4313      	orrs	r3, r2
 80071f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e0bc      	b.n	800737a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007206:	e0b8      	b.n	800737a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800720c:	2b20      	cmp	r3, #32
 800720e:	dc4b      	bgt.n	80072a8 <UART_SetConfig+0x9b4>
 8007210:	2b00      	cmp	r3, #0
 8007212:	f2c0 8087 	blt.w	8007324 <UART_SetConfig+0xa30>
 8007216:	2b20      	cmp	r3, #32
 8007218:	f200 8084 	bhi.w	8007324 <UART_SetConfig+0xa30>
 800721c:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <UART_SetConfig+0x930>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	080072af 	.word	0x080072af
 8007228:	080072c9 	.word	0x080072c9
 800722c:	08007325 	.word	0x08007325
 8007230:	08007325 	.word	0x08007325
 8007234:	080072d1 	.word	0x080072d1
 8007238:	08007325 	.word	0x08007325
 800723c:	08007325 	.word	0x08007325
 8007240:	08007325 	.word	0x08007325
 8007244:	080072e1 	.word	0x080072e1
 8007248:	08007325 	.word	0x08007325
 800724c:	08007325 	.word	0x08007325
 8007250:	08007325 	.word	0x08007325
 8007254:	08007325 	.word	0x08007325
 8007258:	08007325 	.word	0x08007325
 800725c:	08007325 	.word	0x08007325
 8007260:	08007325 	.word	0x08007325
 8007264:	080072f1 	.word	0x080072f1
 8007268:	08007325 	.word	0x08007325
 800726c:	08007325 	.word	0x08007325
 8007270:	08007325 	.word	0x08007325
 8007274:	08007325 	.word	0x08007325
 8007278:	08007325 	.word	0x08007325
 800727c:	08007325 	.word	0x08007325
 8007280:	08007325 	.word	0x08007325
 8007284:	08007325 	.word	0x08007325
 8007288:	08007325 	.word	0x08007325
 800728c:	08007325 	.word	0x08007325
 8007290:	08007325 	.word	0x08007325
 8007294:	08007325 	.word	0x08007325
 8007298:	08007325 	.word	0x08007325
 800729c:	08007325 	.word	0x08007325
 80072a0:	08007325 	.word	0x08007325
 80072a4:	08007317 	.word	0x08007317
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d037      	beq.n	800731c <UART_SetConfig+0xa28>
 80072ac:	e03a      	b.n	8007324 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ae:	f7fd fb43 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 80072b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072b4:	e03c      	b.n	8007330 <UART_SetConfig+0xa3c>
 80072b6:	bf00      	nop
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	0801f6ec 	.word	0x0801f6ec
 80072c0:	58024400 	.word	0x58024400
 80072c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c8:	f7fd fb4c 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 80072cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072ce:	e02f      	b.n	8007330 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe faf3 	bl	80058c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072de:	e027      	b.n	8007330 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fc3f 	bl	8005b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ee:	e01f      	b.n	8007330 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <UART_SetConfig+0xab0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072fc:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <UART_SetConfig+0xab0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <UART_SetConfig+0xab4>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730e:	e00f      	b.n	8007330 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <UART_SetConfig+0xab4>)
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007314:	e00c      	b.n	8007330 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007316:	4b25      	ldr	r3, [pc, #148]	; (80073ac <UART_SetConfig+0xab8>)
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731a:	e009      	b.n	8007330 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007322:	e005      	b.n	8007330 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800732e:	bf00      	nop
    }

    if (pclk != 0U)
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d021      	beq.n	800737a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	4a1d      	ldr	r2, [pc, #116]	; (80073b0 <UART_SetConfig+0xabc>)
 800733c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007340:	461a      	mov	r2, r3
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	fbb3 f2f2 	udiv	r2, r3, r2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	441a      	add	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	fbb2 f3f3 	udiv	r3, r2, r3
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d909      	bls.n	8007374 <UART_SetConfig+0xa80>
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d205      	bcs.n	8007374 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	e002      	b.n	800737a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007396:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800739a:	4618      	mov	r0, r3
 800739c:	3738      	adds	r7, #56	; 0x38
 800739e:	46bd      	mov	sp, r7
 80073a0:	bdb0      	pop	{r4, r5, r7, pc}
 80073a2:	bf00      	nop
 80073a4:	58024400 	.word	0x58024400
 80073a8:	03d09000 	.word	0x03d09000
 80073ac:	003d0900 	.word	0x003d0900
 80073b0:	0801f6ec 	.word	0x0801f6ec

080073b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01a      	beq.n	80074ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b2:	d10a      	bne.n	80074ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007508:	f7fa f87c 	bl	8001604 <HAL_GetTick>
 800750c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d10e      	bne.n	800753a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f82f 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e025      	b.n	8007586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d10e      	bne.n	8007566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f819 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e00f      	b.n	8007586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b09c      	sub	sp, #112	; 0x70
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759e:	e0a9      	b.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	f000 80a5 	beq.w	80076f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075aa:	f7fa f82b 	bl	8001604 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80075ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d140      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075d4:	667b      	str	r3, [r7, #100]	; 0x64
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	663b      	str	r3, [r7, #96]	; 0x60
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007612:	64ba      	str	r2, [r7, #72]	; 0x48
 8007614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e069      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d051      	beq.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d149      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007668:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800767e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
 800768a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800768e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	613b      	str	r3, [r7, #16]
   return(result);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076bc:	623a      	str	r2, [r7, #32]
 80076be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	6a3a      	ldr	r2, [r7, #32]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e010      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4013      	ands	r3, r2
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	bf0c      	ite	eq
 8007704:	2301      	moveq	r3, #1
 8007706:	2300      	movne	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	429a      	cmp	r2, r3
 8007710:	f43f af46 	beq.w	80075a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3770      	adds	r7, #112	; 0x70
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_UARTEx_DisableFifoMode+0x16>
 8007730:	2302      	movs	r3, #2
 8007732:	e027      	b.n	8007784 <HAL_UARTEx_DisableFifoMode+0x66>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	; 0x24
 8007740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007762:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e02d      	b.n	8007804 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2224      	movs	r2, #36	; 0x24
 80077b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f84f 	bl	8007888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e02d      	b.n	8007880 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2224      	movs	r2, #36	; 0x24
 8007830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f811 	bl	8007888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007894:	2b00      	cmp	r3, #0
 8007896:	d108      	bne.n	80078aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078a8:	e031      	b.n	800790e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078aa:	2310      	movs	r3, #16
 80078ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ae:	2310      	movs	r3, #16
 80078b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	0e5b      	lsrs	r3, r3, #25
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	0f5b      	lsrs	r3, r3, #29
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	7b3a      	ldrb	r2, [r7, #12]
 80078d6:	4911      	ldr	r1, [pc, #68]	; (800791c <UARTEx_SetNbDataToProcess+0x94>)
 80078d8:	5c8a      	ldrb	r2, [r1, r2]
 80078da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078de:	7b3a      	ldrb	r2, [r7, #12]
 80078e0:	490f      	ldr	r1, [pc, #60]	; (8007920 <UARTEx_SetNbDataToProcess+0x98>)
 80078e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	7b7a      	ldrb	r2, [r7, #13]
 80078f4:	4909      	ldr	r1, [pc, #36]	; (800791c <UARTEx_SetNbDataToProcess+0x94>)
 80078f6:	5c8a      	ldrb	r2, [r1, r2]
 80078f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078fc:	7b7a      	ldrb	r2, [r7, #13]
 80078fe:	4908      	ldr	r1, [pc, #32]	; (8007920 <UARTEx_SetNbDataToProcess+0x98>)
 8007900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007902:	fb93 f3f2 	sdiv	r3, r3, r2
 8007906:	b29a      	uxth	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	0801f704 	.word	0x0801f704
 8007920:	0801f70c 	.word	0x0801f70c

08007924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007924:	b084      	sub	sp, #16
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	f107 001c 	add.w	r0, r7, #28
 8007932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	2b01      	cmp	r3, #1
 800793a:	d120      	bne.n	800797e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b2a      	ldr	r3, [pc, #168]	; (80079f8 <USB_CoreInit+0xd4>)
 800794e:	4013      	ands	r3, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	2b01      	cmp	r3, #1
 8007964:	d105      	bne.n	8007972 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 faa8 	bl	8007ec8 <USB_CoreReset>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
 800797c:	e01a      	b.n	80079b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa9c 	bl	8007ec8 <USB_CoreReset>
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
 80079a6:	e005      	b.n	80079b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d116      	bne.n	80079e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <USB_CoreInit+0xd8>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f043 0206 	orr.w	r2, r3, #6
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f043 0220 	orr.w	r2, r3, #32
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f4:	b004      	add	sp, #16
 80079f6:	4770      	bx	lr
 80079f8:	ffbdffbf 	.word	0xffbdffbf
 80079fc:	03ee0000 	.word	0x03ee0000

08007a00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f023 0201 	bic.w	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d115      	bne.n	8007a70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a50:	2001      	movs	r0, #1
 8007a52:	f7f9 fde3 	bl	800161c <HAL_Delay>
      ms++;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa25 	bl	8007eac <USB_GetMode>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d01e      	beq.n	8007aa6 <USB_SetCurrentMode+0x84>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b31      	cmp	r3, #49	; 0x31
 8007a6c:	d9f0      	bls.n	8007a50 <USB_SetCurrentMode+0x2e>
 8007a6e:	e01a      	b.n	8007aa6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d115      	bne.n	8007aa2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a82:	2001      	movs	r0, #1
 8007a84:	f7f9 fdca 	bl	800161c <HAL_Delay>
      ms++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa0c 	bl	8007eac <USB_GetMode>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <USB_SetCurrentMode+0x84>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b31      	cmp	r3, #49	; 0x31
 8007a9e:	d9f0      	bls.n	8007a82 <USB_SetCurrentMode+0x60>
 8007aa0:	e001      	b.n	8007aa6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e005      	b.n	8007ab2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b32      	cmp	r3, #50	; 0x32
 8007aaa:	d101      	bne.n	8007ab0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007abc:	b084      	sub	sp, #16
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e009      	b.n	8007af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3340      	adds	r3, #64	; 0x40
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3301      	adds	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b0e      	cmp	r3, #14
 8007af4:	d9f2      	bls.n	8007adc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11c      	bne.n	8007b36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b0a:	f043 0302 	orr.w	r3, r3, #2
 8007b0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e005      	b.n	8007b42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	4619      	mov	r1, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	680b      	ldr	r3, [r1, #0]
 8007b60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d10c      	bne.n	8007b82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f961 	bl	8007e38 <USB_SetDevSpeed>
 8007b76:	e008      	b.n	8007b8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b78:	2101      	movs	r1, #1
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f95c 	bl	8007e38 <USB_SetDevSpeed>
 8007b80:	e003      	b.n	8007b8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b82:	2103      	movs	r1, #3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f957 	bl	8007e38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b8a:	2110      	movs	r1, #16
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f8f3 	bl	8007d78 <USB_FlushTxFifo>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f91d 	bl	8007ddc <USB_FlushRxFifo>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	e043      	b.n	8007c5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d118      	bne.n	8007c20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	461a      	mov	r2, r3
 8007c02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e013      	b.n	8007c32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	461a      	mov	r2, r3
 8007c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e008      	b.n	8007c32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2300      	movs	r3, #0
 8007c42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3b7      	bcc.n	8007bd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	e043      	b.n	8007cf4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c82:	d118      	bne.n	8007cb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	461a      	mov	r2, r3
 8007c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	e013      	b.n	8007cc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e008      	b.n	8007cc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3b7      	bcc.n	8007c6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f043 0210 	orr.w	r2, r3, #16
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <USB_DevInit+0x2b4>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f043 0208 	orr.w	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d105      	bne.n	8007d60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <USB_DevInit+0x2b8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d6c:	b004      	add	sp, #16
 8007d6e:	4770      	bx	lr
 8007d70:	803c3800 	.word	0x803c3800
 8007d74:	40000004 	.word	0x40000004

08007d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <USB_FlushTxFifo+0x60>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e01a      	b.n	8007dcc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	daf3      	bge.n	8007d86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	019b      	lsls	r3, r3, #6
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <USB_FlushTxFifo+0x60>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e006      	b.n	8007dcc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d0f1      	beq.n	8007dae <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	00030d40 	.word	0x00030d40

08007ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <USB_FlushRxFifo+0x58>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d901      	bls.n	8007df8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e017      	b.n	8007e28 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	daf3      	bge.n	8007de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2210      	movs	r2, #16
 8007e08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <USB_FlushRxFifo+0x58>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d901      	bls.n	8007e1a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e006      	b.n	8007e28 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d0f1      	beq.n	8007e0a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	00030d40 	.word	0x00030d40

08007e38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e84:	f023 0303 	bic.w	r3, r3, #3
 8007e88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e98:	f043 0302 	orr.w	r3, r3, #2
 8007e9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <USB_CoreReset+0x60>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d901      	bls.n	8007ee4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e01a      	b.n	8007f1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	daf3      	bge.n	8007ed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <USB_CoreReset+0x60>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d0f1      	beq.n	8007efc <USB_CoreReset+0x34>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	00030d40 	.word	0x00030d40

08007f2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007f2c:	b5b0      	push	{r4, r5, r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007f32:	2100      	movs	r1, #0
 8007f34:	2000      	movs	r0, #0
 8007f36:	f005 fca5 	bl	800d884 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007f3a:	4b20      	ldr	r3, [pc, #128]	; (8007fbc <MX_LWIP_Init+0x90>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007f40:	4b1f      	ldr	r3, [pc, #124]	; (8007fc0 <MX_LWIP_Init+0x94>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007f46:	4b1f      	ldr	r3, [pc, #124]	; (8007fc4 <MX_LWIP_Init+0x98>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <MX_LWIP_Init+0x9c>)
 8007f4e:	9302      	str	r3, [sp, #8]
 8007f50:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <MX_LWIP_Init+0xa0>)
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <MX_LWIP_Init+0x98>)
 8007f5a:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <MX_LWIP_Init+0x94>)
 8007f5c:	4917      	ldr	r1, [pc, #92]	; (8007fbc <MX_LWIP_Init+0x90>)
 8007f5e:	481c      	ldr	r0, [pc, #112]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f60:	f006 fb12 	bl	800e588 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007f64:	481a      	ldr	r0, [pc, #104]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f66:	f006 fcc9 	bl	800e8fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007f6a:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f70:	089b      	lsrs	r3, r3, #2
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007f7c:	4814      	ldr	r0, [pc, #80]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f7e:	f006 fccd 	bl	800e91c <netif_set_up>
 8007f82:	e002      	b.n	8007f8a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007f84:	4812      	ldr	r0, [pc, #72]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f86:	f006 fd35 	bl	800e9f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007f8a:	4912      	ldr	r1, [pc, #72]	; (8007fd4 <MX_LWIP_Init+0xa8>)
 8007f8c:	4810      	ldr	r0, [pc, #64]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007f8e:	f006 fdcb 	bl	800eb28 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <MX_LWIP_Init+0xac>)
 8007f94:	1d3c      	adds	r4, r7, #4
 8007f96:	461d      	mov	r5, r3
 8007f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007fa4:	1d3b      	adds	r3, r7, #4
 8007fa6:	490a      	ldr	r1, [pc, #40]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fcbc 	bl	8008926 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007fae:	4808      	ldr	r0, [pc, #32]	; (8007fd0 <MX_LWIP_Init+0xa4>)
 8007fb0:	f00e fe1a 	bl	8016be8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007fb4:	bf00      	nop
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bdb0      	pop	{r4, r5, r7, pc}
 8007fbc:	2400a43c 	.word	0x2400a43c
 8007fc0:	2400a440 	.word	0x2400a440
 8007fc4:	2400a444 	.word	0x2400a444
 8007fc8:	0800d795 	.word	0x0800d795
 8007fcc:	08008671 	.word	0x08008671
 8007fd0:	2400a404 	.word	0x2400a404
 8007fd4:	08007fdd 	.word	0x08007fdd
 8007fd8:	0801bdd0 	.word	0x0801bdd0

08007fdc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08e      	sub	sp, #56	; 0x38
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	609a      	str	r2, [r3, #8]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a59      	ldr	r2, [pc, #356]	; (8008174 <HAL_ETH_MspInit+0x184>)
 800800e:	4293      	cmp	r3, r2
 8008010:	f040 80ab 	bne.w	800816a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008014:	4b58      	ldr	r3, [pc, #352]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008016:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800801a:	4a57      	ldr	r2, [pc, #348]	; (8008178 <HAL_ETH_MspInit+0x188>)
 800801c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008020:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008024:	4b54      	ldr	r3, [pc, #336]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800802a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802e:	623b      	str	r3, [r7, #32]
 8008030:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008032:	4b51      	ldr	r3, [pc, #324]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008038:	4a4f      	ldr	r2, [pc, #316]	; (8008178 <HAL_ETH_MspInit+0x188>)
 800803a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800803e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008042:	4b4d      	ldr	r3, [pc, #308]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008050:	4b49      	ldr	r3, [pc, #292]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008052:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008056:	4a48      	ldr	r2, [pc, #288]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008060:	4b45      	ldr	r3, [pc, #276]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800806e:	4b42      	ldr	r3, [pc, #264]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008074:	4a40      	ldr	r2, [pc, #256]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008076:	f043 0304 	orr.w	r3, r3, #4
 800807a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800807e:	4b3e      	ldr	r3, [pc, #248]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800808c:	4b3a      	ldr	r3, [pc, #232]	; (8008178 <HAL_ETH_MspInit+0x188>)
 800808e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008092:	4a39      	ldr	r2, [pc, #228]	; (8008178 <HAL_ETH_MspInit+0x188>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800809c:	4b36      	ldr	r3, [pc, #216]	; (8008178 <HAL_ETH_MspInit+0x188>)
 800809e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080aa:	4b33      	ldr	r3, [pc, #204]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080b0:	4a31      	ldr	r2, [pc, #196]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080ba:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ce:	4a2a      	ldr	r2, [pc, #168]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080d8:	4b27      	ldr	r3, [pc, #156]	; (8008178 <HAL_ETH_MspInit+0x188>)
 80080da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80080e6:	2332      	movs	r3, #50	; 0x32
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ea:	2302      	movs	r3, #2
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080f2:	2300      	movs	r3, #0
 80080f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080f6:	230b      	movs	r3, #11
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fe:	4619      	mov	r1, r3
 8008100:	481e      	ldr	r0, [pc, #120]	; (800817c <HAL_ETH_MspInit+0x18c>)
 8008102:	f7fb f931 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008106:	2386      	movs	r3, #134	; 0x86
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810a:	2302      	movs	r3, #2
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800810e:	2300      	movs	r3, #0
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008112:	2300      	movs	r3, #0
 8008114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008116:	230b      	movs	r3, #11
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800811a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800811e:	4619      	mov	r1, r3
 8008120:	4817      	ldr	r0, [pc, #92]	; (8008180 <HAL_ETH_MspInit+0x190>)
 8008122:	f7fb f921 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812c:	2302      	movs	r3, #2
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008130:	2300      	movs	r3, #0
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008134:	2300      	movs	r3, #0
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008138:	230b      	movs	r3, #11
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800813c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008140:	4619      	mov	r1, r3
 8008142:	4810      	ldr	r0, [pc, #64]	; (8008184 <HAL_ETH_MspInit+0x194>)
 8008144:	f7fb f910 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008148:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814e:	2302      	movs	r3, #2
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008152:	2300      	movs	r3, #0
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008156:	2300      	movs	r3, #0
 8008158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800815a:	230b      	movs	r3, #11
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800815e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008162:	4619      	mov	r1, r3
 8008164:	4808      	ldr	r0, [pc, #32]	; (8008188 <HAL_ETH_MspInit+0x198>)
 8008166:	f7fb f8ff 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800816a:	bf00      	nop
 800816c:	3738      	adds	r7, #56	; 0x38
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40028000 	.word	0x40028000
 8008178:	58024400 	.word	0x58024400
 800817c:	58020800 	.word	0x58020800
 8008180:	58020000 	.word	0x58020000
 8008184:	58020400 	.word	0x58020400
 8008188:	58021800 	.word	0x58021800

0800818c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800818c:	b5b0      	push	{r4, r5, r7, lr}
 800818e:	b0ac      	sub	sp, #176	; 0xb0
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80081a6:	4b91      	ldr	r3, [pc, #580]	; (80083ec <low_level_init+0x260>)
 80081a8:	4a91      	ldr	r2, [pc, #580]	; (80083f0 <low_level_init+0x264>)
 80081aa:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80081b2:	2380      	movs	r3, #128	; 0x80
 80081b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80081b8:	23e1      	movs	r3, #225	; 0xe1
 80081ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80081be:	2300      	movs	r3, #0
 80081c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x20;
 80081c4:	2320      	movs	r3, #32
 80081c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x10;
 80081ca:	2310      	movs	r3, #16
 80081cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80081d0:	4a86      	ldr	r2, [pc, #536]	; (80083ec <low_level_init+0x260>)
 80081d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081d6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80081d8:	4b84      	ldr	r3, [pc, #528]	; (80083ec <low_level_init+0x260>)
 80081da:	2201      	movs	r2, #1
 80081dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80081de:	4b83      	ldr	r3, [pc, #524]	; (80083ec <low_level_init+0x260>)
 80081e0:	4a84      	ldr	r2, [pc, #528]	; (80083f4 <low_level_init+0x268>)
 80081e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80081e4:	4b81      	ldr	r3, [pc, #516]	; (80083ec <low_level_init+0x260>)
 80081e6:	4a84      	ldr	r2, [pc, #528]	; (80083f8 <low_level_init+0x26c>)
 80081e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80081ea:	4b80      	ldr	r3, [pc, #512]	; (80083ec <low_level_init+0x260>)
 80081ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80081f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80081f2:	487e      	ldr	r0, [pc, #504]	; (80083ec <low_level_init+0x260>)
 80081f4:	f7f9 fb36 	bl	8001864 <HAL_ETH_Init>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80081fe:	2234      	movs	r2, #52	; 0x34
 8008200:	2100      	movs	r1, #0
 8008202:	487e      	ldr	r0, [pc, #504]	; (80083fc <low_level_init+0x270>)
 8008204:	f012 fe29 	bl	801ae5a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008208:	4b7c      	ldr	r3, [pc, #496]	; (80083fc <low_level_init+0x270>)
 800820a:	2221      	movs	r2, #33	; 0x21
 800820c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800820e:	4b7b      	ldr	r3, [pc, #492]	; (80083fc <low_level_init+0x270>)
 8008210:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008214:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008216:	4b79      	ldr	r3, [pc, #484]	; (80083fc <low_level_init+0x270>)
 8008218:	2200      	movs	r2, #0
 800821a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800821c:	4878      	ldr	r0, [pc, #480]	; (8008400 <low_level_init+0x274>)
 800821e:	f006 f86d 	bl	800e2fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2206      	movs	r2, #6
 8008226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800822a:	4b70      	ldr	r3, [pc, #448]	; (80083ec <low_level_init+0x260>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008236:	4b6d      	ldr	r3, [pc, #436]	; (80083ec <low_level_init+0x260>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	785a      	ldrb	r2, [r3, #1]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008242:	4b6a      	ldr	r3, [pc, #424]	; (80083ec <low_level_init+0x260>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	789a      	ldrb	r2, [r3, #2]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800824e:	4b67      	ldr	r3, [pc, #412]	; (80083ec <low_level_init+0x260>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	78da      	ldrb	r2, [r3, #3]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800825a:	4b64      	ldr	r3, [pc, #400]	; (80083ec <low_level_init+0x260>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	791a      	ldrb	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008266:	4b61      	ldr	r3, [pc, #388]	; (80083ec <low_level_init+0x260>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	795a      	ldrb	r2, [r3, #5]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008278:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008280:	f043 030a 	orr.w	r3, r3, #10
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008292:	e012      	b.n	80082ba <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8008294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008298:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800829c:	fb02 f303 	mul.w	r3, r2, r3
 80082a0:	4a58      	ldr	r2, [pc, #352]	; (8008404 <low_level_init+0x278>)
 80082a2:	441a      	add	r2, r3
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80082aa:	4850      	ldr	r0, [pc, #320]	; (80083ec <low_level_init+0x260>)
 80082ac:	f7f9 fbb4 	bl	8001a18 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80082b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b4:	3301      	adds	r3, #1
 80082b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d9e8      	bls.n	8008294 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80082c2:	2300      	movs	r3, #0
 80082c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c6:	2300      	movs	r3, #0
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80082ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ce:	2101      	movs	r1, #1
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fc25 	bl	8008b20 <osSemaphoreCreate>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4a4b      	ldr	r2, [pc, #300]	; (8008408 <low_level_init+0x27c>)
 80082da:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80082dc:	4b4b      	ldr	r3, [pc, #300]	; (800840c <low_level_init+0x280>)
 80082de:	f107 040c 	add.w	r4, r7, #12
 80082e2:	461d      	mov	r5, r3
 80082e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80082f0:	f107 030c 	add.w	r3, r7, #12
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fb15 	bl	8008926 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80082fc:	4944      	ldr	r1, [pc, #272]	; (8008410 <low_level_init+0x284>)
 80082fe:	4845      	ldr	r0, [pc, #276]	; (8008414 <low_level_init+0x288>)
 8008300:	f7f8 ffcf 	bl	80012a2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008304:	4843      	ldr	r0, [pc, #268]	; (8008414 <low_level_init+0x288>)
 8008306:	f7f8 fffe 	bl	8001306 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800830a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d165      	bne.n	80083de <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008312:	4840      	ldr	r0, [pc, #256]	; (8008414 <low_level_init+0x288>)
 8008314:	f7f9 f89f 	bl	8001456 <LAN8742_GetLinkState>
 8008318:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800831c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008320:	2b01      	cmp	r3, #1
 8008322:	dc06      	bgt.n	8008332 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f006 fbcf 	bl	800eac8 <netif_set_link_down>
      netif_set_down(netif);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f006 fb62 	bl	800e9f4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008330:	e057      	b.n	80083e2 <low_level_init+0x256>
 8008332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008336:	3b02      	subs	r3, #2
 8008338:	2b03      	cmp	r3, #3
 800833a:	d82b      	bhi.n	8008394 <low_level_init+0x208>
 800833c:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <low_level_init+0x1b8>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008355 	.word	0x08008355
 8008348:	08008367 	.word	0x08008367
 800834c:	08008377 	.word	0x08008377
 8008350:	08008387 	.word	0x08008387
        duplex = ETH_FULLDUPLEX_MODE;
 8008354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800835c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008364:	e01f      	b.n	80083a6 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800836c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008374:	e017      	b.n	80083a6 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800837a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800837e:	2300      	movs	r3, #0
 8008380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008384:	e00f      	b.n	80083a6 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008392:	e008      	b.n	80083a6 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800839c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80083a4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083aa:	4619      	mov	r1, r3
 80083ac:	480f      	ldr	r0, [pc, #60]	; (80083ec <low_level_init+0x260>)
 80083ae:	f7f9 ffdb 	bl	8002368 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80083b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083b6:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 80083b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083c2:	4619      	mov	r1, r3
 80083c4:	4809      	ldr	r0, [pc, #36]	; (80083ec <low_level_init+0x260>)
 80083c6:	f7fa f9a3 	bl	8002710 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80083ca:	4808      	ldr	r0, [pc, #32]	; (80083ec <low_level_init+0x260>)
 80083cc:	f7f9 fb65 	bl	8001a9a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f006 faa3 	bl	800e91c <netif_set_up>
    netif_set_link_up(netif);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f006 fb3e 	bl	800ea58 <netif_set_link_up>
}
 80083dc:	e001      	b.n	80083e2 <low_level_init+0x256>
    Error_Handler();
 80083de:	f7f8 fb81 	bl	8000ae4 <Error_Handler>
}
 80083e2:	bf00      	nop
 80083e4:	37b0      	adds	r7, #176	; 0xb0
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	2400a534 	.word	0x2400a534
 80083f0:	40028000 	.word	0x40028000
 80083f4:	240000fc 	.word	0x240000fc
 80083f8:	2400009c 	.word	0x2400009c
 80083fc:	2400a5bc 	.word	0x2400a5bc
 8008400:	0801f714 	.word	0x0801f714
 8008404:	2400015c 	.word	0x2400015c
 8008408:	24001c00 	.word	0x24001c00
 800840c:	0801bdf4 	.word	0x0801bdf4
 8008410:	24000010 	.word	0x24000010
 8008414:	2400a514 	.word	0x2400a514

08008418 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b092      	sub	sp, #72	; 0x48
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8008422:	2300      	movs	r3, #0
 8008424:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	2230      	movs	r2, #48	; 0x30
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f012 fd10 	bl	801ae5a <memset>

  for(q = p; q != NULL; q = q->next)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
 800843e:	e049      	b.n	80084d4 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008442:	2b03      	cmp	r3, #3
 8008444:	d902      	bls.n	800844c <low_level_output+0x34>
      return ERR_IF;
 8008446:	f06f 030b 	mvn.w	r3, #11
 800844a:	e056      	b.n	80084fa <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800844c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844e:	6859      	ldr	r1, [r3, #4]
 8008450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008452:	4613      	mov	r3, r2
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800845e:	4413      	add	r3, r2
 8008460:	3b3c      	subs	r3, #60	; 0x3c
 8008462:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008466:	895b      	ldrh	r3, [r3, #10]
 8008468:	4619      	mov	r1, r3
 800846a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800846c:	4613      	mov	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008478:	4413      	add	r3, r2
 800847a:	3b38      	subs	r3, #56	; 0x38
 800847c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800847e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008480:	2b00      	cmp	r3, #0
 8008482:	d012      	beq.n	80084aa <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	f107 000c 	add.w	r0, r7, #12
 800848c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800848e:	460b      	mov	r3, r1
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	440b      	add	r3, r1
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	18c1      	adds	r1, r0, r3
 8008498:	4613      	mov	r3, r2
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084a4:	4413      	add	r3, r2
 80084a6:	3b34      	subs	r3, #52	; 0x34
 80084a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80084aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80084b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b4:	4613      	mov	r3, r2
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084c0:	4413      	add	r3, r2
 80084c2:	3b34      	subs	r3, #52	; 0x34
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
    }

    i++;
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	3301      	adds	r3, #1
 80084cc:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80084ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	643b      	str	r3, [r7, #64]	; 0x40
 80084d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1b2      	bne.n	8008440 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	891b      	ldrh	r3, [r3, #8]
 80084de:	461a      	mov	r2, r3
 80084e0:	4b08      	ldr	r3, [pc, #32]	; (8008504 <low_level_output+0xec>)
 80084e2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80084e4:	4a07      	ldr	r2, [pc, #28]	; (8008504 <low_level_output+0xec>)
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80084ec:	2214      	movs	r2, #20
 80084ee:	4905      	ldr	r1, [pc, #20]	; (8008504 <low_level_output+0xec>)
 80084f0:	4805      	ldr	r0, [pc, #20]	; (8008508 <low_level_output+0xf0>)
 80084f2:	f7f9 fbd1 	bl	8001c98 <HAL_ETH_Transmit>

  return errval;
 80084f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3748      	adds	r7, #72	; 0x48
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2400a5bc 	.word	0x2400a5bc
 8008508:	2400a534 	.word	0x2400a534

0800850c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b098      	sub	sp, #96	; 0x60
 8008510:	af02      	add	r7, sp, #8
 8008512:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	60bb      	str	r3, [r7, #8]
 800851c:	2300      	movs	r3, #0
 800851e:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008520:	f107 030c 	add.w	r3, r7, #12
 8008524:	2230      	movs	r2, #48	; 0x30
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f012 fc96 	bl	801ae5a <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800852e:	2300      	movs	r3, #0
 8008530:	653b      	str	r3, [r7, #80]	; 0x50
 8008532:	e015      	b.n	8008560 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	f107 010c 	add.w	r1, r7, #12
 800853c:	4613      	mov	r3, r2
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4419      	add	r1, r3
 8008546:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008548:	4613      	mov	r3, r2
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008554:	4413      	add	r3, r2
 8008556:	3b44      	subs	r3, #68	; 0x44
 8008558:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800855a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800855c:	3301      	adds	r3, #1
 800855e:	653b      	str	r3, [r7, #80]	; 0x50
 8008560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008562:	2b02      	cmp	r3, #2
 8008564:	d9e6      	bls.n	8008534 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4619      	mov	r1, r3
 800856c:	4828      	ldr	r0, [pc, #160]	; (8008610 <low_level_input+0x104>)
 800856e:	f7f9 fd0c 	bl	8001f8a <HAL_ETH_GetRxDataBuffer>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d145      	bne.n	8008604 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008578:	f107 0308 	add.w	r3, r7, #8
 800857c:	4619      	mov	r1, r3
 800857e:	4824      	ldr	r0, [pc, #144]	; (8008610 <low_level_input+0x104>)
 8008580:	f7f9 fda1 	bl	80020c6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008584:	4822      	ldr	r0, [pc, #136]	; (8008610 <low_level_input+0x104>)
 8008586:	f7f9 fdd1 	bl	800212c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008590:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd1d      	ble.n	80085d4 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800859a:	f003 021f 	and.w	r2, r3, #31
 800859e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a0:	4413      	add	r3, r2
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80085a8:	f3bf 8f4f 	dsb	sy
}
 80085ac:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80085ae:	4a19      	ldr	r2, [pc, #100]	; (8008614 <low_level_input+0x108>)
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	3320      	adds	r3, #32
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80085bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085be:	3b20      	subs	r3, #32
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 80085c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dcf2      	bgt.n	80085ae <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 80085c8:	f3bf 8f4f 	dsb	sy
}
 80085cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085ce:	f3bf 8f6f 	isb	sy
}
 80085d2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80085d4:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80085d6:	4810      	ldr	r0, [pc, #64]	; (8008618 <low_level_input+0x10c>)
 80085d8:	f005 ff0c 	bl	800e3f4 <memp_malloc_pool>
 80085dc:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 80085de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00f      	beq.n	8008604 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 80085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e6:	4a0d      	ldr	r2, [pc, #52]	; (800861c <low_level_input+0x110>)
 80085e8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	b299      	uxth	r1, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	b292      	uxth	r2, r2
 80085f4:	9201      	str	r2, [sp, #4]
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fa:	2241      	movs	r2, #65	; 0x41
 80085fc:	2000      	movs	r0, #0
 80085fe:	f006 fc87 	bl	800ef10 <pbuf_alloced_custom>
 8008602:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8008604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008606:	4618      	mov	r0, r3
 8008608:	3758      	adds	r7, #88	; 0x58
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2400a534 	.word	0x2400a534
 8008614:	e000ed00 	.word	0xe000ed00
 8008618:	0801f714 	.word	0x0801f714
 800861c:	080086cd 	.word	0x080086cd

08008620 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800862c:	4b0f      	ldr	r3, [pc, #60]	; (800866c <ethernetif_input+0x4c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f04f 31ff 	mov.w	r1, #4294967295
 8008634:	4618      	mov	r0, r3
 8008636:	f000 faa5 	bl	8008b84 <osSemaphoreWait>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1f5      	bne.n	800862c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ff63 	bl	800850c <low_level_input>
 8008646:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	68b8      	ldr	r0, [r7, #8]
 8008656:	4798      	blx	r3
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800865e:	68b8      	ldr	r0, [r7, #8]
 8008660:	f006 fe10 	bl	800f284 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1ea      	bne.n	8008640 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800866a:	e7df      	b.n	800862c <ethernetif_input+0xc>
 800866c:	24001c00 	.word	0x24001c00

08008670 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <ethernetif_init+0x1c>
 800867e:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <ethernetif_init+0x48>)
 8008680:	f240 2242 	movw	r2, #578	; 0x242
 8008684:	490d      	ldr	r1, [pc, #52]	; (80086bc <ethernetif_init+0x4c>)
 8008686:	480e      	ldr	r0, [pc, #56]	; (80086c0 <ethernetif_init+0x50>)
 8008688:	f012 fc4a 	bl	801af20 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2273      	movs	r2, #115	; 0x73
 8008690:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2274      	movs	r2, #116	; 0x74
 8008698:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <ethernetif_init+0x54>)
 80086a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <ethernetif_init+0x58>)
 80086a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fd6f 	bl	800818c <low_level_init>

  return ERR_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	0801be10 	.word	0x0801be10
 80086bc:	0801be2c 	.word	0x0801be2c
 80086c0:	0801be3c 	.word	0x0801be3c
 80086c4:	08018ab5 	.word	0x08018ab5
 80086c8:	08008419 	.word	0x08008419

080086cc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80086d8:	68f9      	ldr	r1, [r7, #12]
 80086da:	4803      	ldr	r0, [pc, #12]	; (80086e8 <pbuf_free_custom+0x1c>)
 80086dc:	f005 fefe 	bl	800e4dc <memp_free_pool>
}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	0801f714 	.word	0x0801f714

080086ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086f0:	f7f8 ff88 	bl	8001604 <HAL_GetTick>
 80086f4:	4603      	mov	r3, r0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008700:	4802      	ldr	r0, [pc, #8]	; (800870c <ETH_PHY_IO_Init+0x10>)
 8008702:	f7fa f81f 	bl	8002744 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	2400a534 	.word	0x2400a534

08008710 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
  return 0;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	68f9      	ldr	r1, [r7, #12]
 8008732:	4807      	ldr	r0, [pc, #28]	; (8008750 <ETH_PHY_IO_ReadReg+0x30>)
 8008734:	f7f9 fd70 	bl	8002218 <HAL_ETH_ReadPHYRegister>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800873e:	f04f 33ff 	mov.w	r3, #4294967295
 8008742:	e000      	b.n	8008746 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	2400a534 	.word	0x2400a534

08008754 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	68f9      	ldr	r1, [r7, #12]
 8008766:	4807      	ldr	r0, [pc, #28]	; (8008784 <ETH_PHY_IO_WriteReg+0x30>)
 8008768:	f7f9 fdaa 	bl	80022c0 <HAL_ETH_WritePHYRegister>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	e000      	b.n	800877a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	2400a534 	.word	0x2400a534

08008788 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800878c:	f7f8 ff3a 	bl	8001604 <HAL_GetTick>
 8008790:	4603      	mov	r3, r0
}
 8008792:	4618      	mov	r0, r3
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0a0      	sub	sp, #128	; 0x80
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087a4:	2300      	movs	r3, #0
 80087a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80087a8:	2300      	movs	r3, #0
 80087aa:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80087b0:	483a      	ldr	r0, [pc, #232]	; (800889c <ethernet_link_thread+0x104>)
 80087b2:	f7f8 fe50 	bl	8001456 <LAN8742_GetLinkState>
 80087b6:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80087b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80087be:	089b      	lsrs	r3, r3, #2
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <ethernet_link_thread+0x4c>
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	dc09      	bgt.n	80087e4 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 80087d0:	4833      	ldr	r0, [pc, #204]	; (80088a0 <ethernet_link_thread+0x108>)
 80087d2:	f7f9 f9e7 	bl	8001ba4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80087d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087d8:	f006 f90c 	bl	800e9f4 <netif_set_down>
    netif_set_link_down(netif);
 80087dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087de:	f006 f973 	bl	800eac8 <netif_set_link_down>
 80087e2:	e056      	b.n	8008892 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80087e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d14f      	bne.n	8008892 <ethernet_link_thread+0xfa>
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	dd4c      	ble.n	8008892 <ethernet_link_thread+0xfa>
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	3b02      	subs	r3, #2
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d82b      	bhi.n	8008858 <ethernet_link_thread+0xc0>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <ethernet_link_thread+0x70>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008819 	.word	0x08008819
 800880c:	0800882b 	.word	0x0800882b
 8008810:	0800883b 	.word	0x0800883b
 8008814:	0800884b 	.word	0x0800884b
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800881c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800881e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008822:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008824:	2301      	movs	r3, #1
 8008826:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008828:	e017      	b.n	800885a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800882a:	2300      	movs	r3, #0
 800882c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800882e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008832:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008834:	2301      	movs	r3, #1
 8008836:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008838:	e00f      	b.n	800885a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800883a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800883e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008840:	2300      	movs	r3, #0
 8008842:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008848:	e007      	b.n	800885a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800884a:	2300      	movs	r3, #0
 800884c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800884e:	2300      	movs	r3, #0
 8008850:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008856:	e000      	b.n	800885a <ethernet_link_thread+0xc2>
    default:
      break;
 8008858:	bf00      	nop
    }

    if(linkchanged)
 800885a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d018      	beq.n	8008892 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008860:	f107 0308 	add.w	r3, r7, #8
 8008864:	4619      	mov	r1, r3
 8008866:	480e      	ldr	r0, [pc, #56]	; (80088a0 <ethernet_link_thread+0x108>)
 8008868:	f7f9 fd7e 	bl	8002368 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800886c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800886e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008872:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008874:	f107 0308 	add.w	r3, r7, #8
 8008878:	4619      	mov	r1, r3
 800887a:	4809      	ldr	r0, [pc, #36]	; (80088a0 <ethernet_link_thread+0x108>)
 800887c:	f7f9 ff48 	bl	8002710 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008880:	4807      	ldr	r0, [pc, #28]	; (80088a0 <ethernet_link_thread+0x108>)
 8008882:	f7f9 f90a 	bl	8001a9a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008886:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008888:	f006 f848 	bl	800e91c <netif_set_up>
      netif_set_link_up(netif);
 800888c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800888e:	f006 f8e3 	bl	800ea58 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008892:	2064      	movs	r0, #100	; 0x64
 8008894:	f000 f893 	bl	80089be <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008898:	e78a      	b.n	80087b0 <ethernet_link_thread+0x18>
 800889a:	bf00      	nop
 800889c:	2400a514 	.word	0x2400a514
 80088a0:	2400a534 	.word	0x2400a534

080088a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80088b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088b6:	2b84      	cmp	r3, #132	; 0x84
 80088b8:	d005      	beq.n	80088c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80088ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	3303      	adds	r3, #3
 80088c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80088c6:	68fb      	ldr	r3, [r7, #12]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088da:	f3ef 8305 	mrs	r3, IPSR
 80088de:	607b      	str	r3, [r7, #4]
  return(result);
 80088e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80088fc:	f001 fd44 	bl	800a388 <vTaskStartScheduler>
  
  return osOK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	bd80      	pop	{r7, pc}

08008906 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800890a:	f7ff ffe3 	bl	80088d4 <inHandlerMode>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008914:	f001 fe5c 	bl	800a5d0 <xTaskGetTickCountFromISR>
 8008918:	4603      	mov	r3, r0
 800891a:	e002      	b.n	8008922 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800891c:	f001 fe48 	bl	800a5b0 <xTaskGetTickCount>
 8008920:	4603      	mov	r3, r0
  }
}
 8008922:	4618      	mov	r0, r3
 8008924:	bd80      	pop	{r7, pc}

08008926 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008928:	b089      	sub	sp, #36	; 0x24
 800892a:	af04      	add	r7, sp, #16
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d020      	beq.n	800897a <osThreadCreate+0x54>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01c      	beq.n	800897a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685c      	ldr	r4, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681d      	ldr	r5, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691e      	ldr	r6, [r3, #16]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ffa6 	bl	80088a4 <makeFreeRtosPriority>
 8008958:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008962:	9202      	str	r2, [sp, #8]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	9100      	str	r1, [sp, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	4632      	mov	r2, r6
 800896c:	4629      	mov	r1, r5
 800896e:	4620      	mov	r0, r4
 8008970:	f001 fb24 	bl	8009fbc <xTaskCreateStatic>
 8008974:	4603      	mov	r3, r0
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e01c      	b.n	80089b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685c      	ldr	r4, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008986:	b29e      	uxth	r6, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ff88 	bl	80088a4 <makeFreeRtosPriority>
 8008994:	4602      	mov	r2, r0
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	9200      	str	r2, [sp, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	4632      	mov	r2, r6
 80089a2:	4629      	mov	r1, r5
 80089a4:	4620      	mov	r0, r4
 80089a6:	f001 fb66 	bl	800a076 <xTaskCreate>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d001      	beq.n	80089b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	e000      	b.n	80089b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80089b4:	68fb      	ldr	r3, [r7, #12]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <osDelay+0x16>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	e000      	b.n	80089d6 <osDelay+0x18>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fca2 	bl	800a320 <vTaskDelay>
  
  return osOK;
 80089dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	4619      	mov	r1, r3
 80089fc:	2001      	movs	r0, #1
 80089fe:	f000 fc7e 	bl	80092fe <xQueueCreateMutexStatic>
 8008a02:	4603      	mov	r3, r0
 8008a04:	e003      	b.n	8008a0e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008a06:	2001      	movs	r0, #1
 8008a08:	f000 fc61 	bl	80092ce <xQueueCreateMutex>
 8008a0c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <osMutexWait+0x18>
    return osErrorParameter;
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	e03a      	b.n	8008aa6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3a:	d103      	bne.n	8008a44 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e009      	b.n	8008a58 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <osMutexWait+0x40>
      ticks = 1;
 8008a54:	2301      	movs	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008a58:	f7ff ff3c 	bl	80088d4 <inHandlerMode>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d017      	beq.n	8008a92 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	461a      	mov	r2, r3
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 f874 	bl	8009b58 <xQueueReceiveFromISR>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d001      	beq.n	8008a7a <osMutexWait+0x62>
      return osErrorOS;
 8008a76:	23ff      	movs	r3, #255	; 0xff
 8008a78:	e015      	b.n	8008aa6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d011      	beq.n	8008aa4 <osMutexWait+0x8c>
 8008a80:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <osMutexWait+0x98>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	e008      	b.n	8008aa4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 ff53 	bl	8009940 <xQueueSemaphoreTake>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d001      	beq.n	8008aa4 <osMutexWait+0x8c>
    return osErrorOS;
 8008aa0:	23ff      	movs	r3, #255	; 0xff
 8008aa2:	e000      	b.n	8008aa6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ac4:	f7ff ff06 	bl	80088d4 <inHandlerMode>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fdc6 	bl	8009666 <xQueueGiveFromISR>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d001      	beq.n	8008ae4 <osMutexRelease+0x30>
      return osErrorOS;
 8008ae0:	23ff      	movs	r3, #255	; 0xff
 8008ae2:	e017      	b.n	8008b14 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d013      	beq.n	8008b12 <osMutexRelease+0x5e>
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <osMutexRelease+0x68>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	e00a      	b.n	8008b12 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008afc:	2300      	movs	r3, #0
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc16 	bl	8009334 <xQueueGenericSend>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d001      	beq.n	8008b12 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008b0e:	23ff      	movs	r3, #255	; 0xff
 8008b10:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008b12:	68fb      	ldr	r3, [r7, #12]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d10a      	bne.n	8008b4e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	9200      	str	r2, [sp, #0]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	2001      	movs	r0, #1
 8008b46:	f000 fad7 	bl	80090f8 <xQueueGenericCreateStatic>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	e016      	b.n	8008b7c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e014      	b.n	8008b7c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d110      	bne.n	8008b7a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008b58:	2203      	movs	r2, #3
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	f000 fb43 	bl	80091e8 <xQueueGenericCreate>
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <osSemaphoreCreate+0x56>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fbdf 	bl	8009334 <xQueueGenericSend>
      return sema;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	e000      	b.n	8008b7c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008b7a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	e03a      	b.n	8008c12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba6:	d103      	bne.n	8008bb0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	e009      	b.n	8008bc4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d006      	beq.n	8008bc4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <osSemaphoreWait+0x40>
      ticks = 1;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008bc4:	f7ff fe86 	bl	80088d4 <inHandlerMode>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d017      	beq.n	8008bfe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008bce:	f107 0308 	add.w	r3, r7, #8
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 ffbe 	bl	8009b58 <xQueueReceiveFromISR>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d001      	beq.n	8008be6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008be2:	23ff      	movs	r3, #255	; 0xff
 8008be4:	e015      	b.n	8008c12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d011      	beq.n	8008c10 <osSemaphoreWait+0x8c>
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <osSemaphoreWait+0x98>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	e008      	b.n	8008c10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fe9d 	bl	8009940 <xQueueSemaphoreTake>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d001      	beq.n	8008c10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008c0c:	23ff      	movs	r3, #255	; 0xff
 8008c0e:	e000      	b.n	8008c12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed04 	.word	0xe000ed04

08008c20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008c30:	f7ff fe50 	bl	80088d4 <inHandlerMode>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c3a:	f107 0308 	add.w	r3, r7, #8
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fd10 	bl	8009666 <xQueueGiveFromISR>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d001      	beq.n	8008c50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008c4c:	23ff      	movs	r3, #255	; 0xff
 8008c4e:	e017      	b.n	8008c80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d013      	beq.n	8008c7e <osSemaphoreRelease+0x5e>
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <osSemaphoreRelease+0x68>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	e00a      	b.n	8008c7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb60 	bl	8009334 <xQueueGenericSend>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d001      	beq.n	8008c7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008c94:	f7ff fe1e 	bl	80088d4 <inHandlerMode>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008c9e:	2382      	movs	r3, #130	; 0x82
 8008ca0:	e003      	b.n	8008caa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f814 	bl	8009cd0 <vQueueDelete>

  return osOK; 
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008cb2:	b590      	push	{r4, r7, lr}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af02      	add	r7, sp, #8
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d011      	beq.n	8008ce8 <osMessageCreate+0x36>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00d      	beq.n	8008ce8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6859      	ldr	r1, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2400      	movs	r4, #0
 8008cde:	9400      	str	r4, [sp, #0]
 8008ce0:	f000 fa0a 	bl	80090f8 <xQueueGenericCreateStatic>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	e008      	b.n	8008cfa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f000 fa78 	bl	80091e8 <xQueueGenericCreate>
 8008cf8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd90      	pop	{r4, r7, pc}
	...

08008d04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <osMessagePut+0x1e>
    ticks = 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008d22:	f7ff fdd7 	bl	80088d4 <inHandlerMode>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d2c:	f107 0210 	add.w	r2, r7, #16
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	2300      	movs	r3, #0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fbfa 	bl	8009530 <xQueueGenericSendFromISR>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d001      	beq.n	8008d46 <osMessagePut+0x42>
      return osErrorOS;
 8008d42:	23ff      	movs	r3, #255	; 0xff
 8008d44:	e018      	b.n	8008d78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d014      	beq.n	8008d76 <osMessagePut+0x72>
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <osMessagePut+0x7c>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	e00b      	b.n	8008d76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008d5e:	f107 0108 	add.w	r1, r7, #8
 8008d62:	2300      	movs	r3, #0
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fae4 	bl	8009334 <xQueueGenericSend>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d001      	beq.n	8008d76 <osMessagePut+0x72>
      return osErrorOS;
 8008d72:	23ff      	movs	r3, #255	; 0xff
 8008d74:	e000      	b.n	8008d78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b08b      	sub	sp, #44	; 0x2c
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008d9e:	2380      	movs	r3, #128	; 0x80
 8008da0:	617b      	str	r3, [r7, #20]
    return event;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	461c      	mov	r4, r3
 8008da6:	f107 0314 	add.w	r3, r7, #20
 8008daa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008db2:	e054      	b.n	8008e5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d103      	bne.n	8008dcc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dca:	e009      	b.n	8008de0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <osMessageGet+0x5c>
      ticks = 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008de0:	f7ff fd78 	bl	80088d4 <inHandlerMode>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01c      	beq.n	8008e24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008dea:	f107 0220 	add.w	r2, r7, #32
 8008dee:	f107 0314 	add.w	r3, r7, #20
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	68b8      	ldr	r0, [r7, #8]
 8008df8:	f000 feae 	bl	8009b58 <xQueueReceiveFromISR>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d102      	bne.n	8008e08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008e02:	2310      	movs	r3, #16
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e001      	b.n	8008e0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01d      	beq.n	8008e4e <osMessageGet+0xca>
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <osMessageGet+0xe4>)
 8008e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	e014      	b.n	8008e4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	3304      	adds	r3, #4
 8008e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	f000 fca6 	bl	8009780 <xQueueReceive>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d102      	bne.n	8008e40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e006      	b.n	8008e4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <osMessageGet+0xc6>
 8008e46:	2300      	movs	r3, #0
 8008e48:	e000      	b.n	8008e4c <osMessageGet+0xc8>
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	461c      	mov	r4, r3
 8008e52:	f107 0314 	add.w	r3, r7, #20
 8008e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	372c      	adds	r7, #44	; 0x2c
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd90      	pop	{r4, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008e74:	f7ff fd2e 	bl	80088d4 <inHandlerMode>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 ff08 	bl	8009c94 <uxQueueMessagesWaitingFromISR>
 8008e84:	4603      	mov	r3, r0
 8008e86:	e003      	b.n	8008e90 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fee5 	bl	8009c58 <uxQueueMessagesWaiting>
 8008e8e:	4603      	mov	r3, r0
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008ea0:	f7ff fd18 	bl	80088d4 <inHandlerMode>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <osMessageDelete+0x16>
    return osErrorISR;
 8008eaa:	2382      	movs	r3, #130	; 0x82
 8008eac:	e003      	b.n	8008eb6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 ff0e 	bl	8009cd0 <vQueueDelete>

  return osOK; 
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f103 0208 	add.w	r2, r3, #8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f103 0208 	add.w	r2, r3, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	601a      	str	r2, [r3, #0]
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d103      	bne.n	8008f80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e00c      	b.n	8008f9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3308      	adds	r3, #8
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e002      	b.n	8008f8e <vListInsert+0x2e>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d2f6      	bcs.n	8008f88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6892      	ldr	r2, [r2, #8]
 8008fe8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6852      	ldr	r2, [r2, #4]
 8008ff2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d103      	bne.n	8009006 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	1e5a      	subs	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009052:	f002 f93f 	bl	800b2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	68f9      	ldr	r1, [r7, #12]
 8009060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	441a      	add	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009082:	3b01      	subs	r3, #1
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	441a      	add	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	22ff      	movs	r2, #255	; 0xff
 8009096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d114      	bne.n	80090d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01a      	beq.n	80090e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3310      	adds	r3, #16
 80090b4:	4618      	mov	r0, r3
 80090b6:	f001 fc01 	bl	800a8bc <xTaskRemoveFromEventList>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090c0:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <xQueueGenericReset+0xcc>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	e009      	b.n	80090e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3310      	adds	r3, #16
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fef1 	bl	8008ebe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff feec 	bl	8008ebe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090e6:	f002 f925 	bl	800b334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090ea:	2301      	movs	r3, #1
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08e      	sub	sp, #56	; 0x38
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <xQueueGenericCreateStatic+0x52>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <xQueueGenericCreateStatic+0x56>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <xQueueGenericCreateStatic+0x58>
 800914e:	2300      	movs	r3, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	623b      	str	r3, [r7, #32]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <xQueueGenericCreateStatic+0x7e>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <xQueueGenericCreateStatic+0x82>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericCreateStatic+0x84>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	61fb      	str	r3, [r7, #28]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009196:	2348      	movs	r3, #72	; 0x48
 8009198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b48      	cmp	r3, #72	; 0x48
 800919e:	d00a      	beq.n	80091b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	61bb      	str	r3, [r7, #24]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	4613      	mov	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 f83f 	bl	800925c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3730      	adds	r7, #48	; 0x30
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericCreate+0x2a>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	613b      	str	r3, [r7, #16]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	3348      	adds	r3, #72	; 0x48
 8009220:	4618      	mov	r0, r3
 8009222:	f002 f979 	bl	800b518 <pvPortMalloc>
 8009226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d011      	beq.n	8009252 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3348      	adds	r3, #72	; 0x48
 8009236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4613      	mov	r3, r2
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f805 	bl	800925c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009252:	69bb      	ldr	r3, [r7, #24]
	}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	e002      	b.n	800927e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800928a:	2101      	movs	r1, #1
 800928c:	69b8      	ldr	r0, [r7, #24]
 800928e:	f7ff fecb 	bl	8009028 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00e      	beq.n	80092c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80092ba:	2300      	movs	r3, #0
 80092bc:	2200      	movs	r2, #0
 80092be:	2100      	movs	r1, #0
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f837 	bl	8009334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	4603      	mov	r3, r0
 80092d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	2300      	movs	r3, #0
 80092de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6939      	ldr	r1, [r7, #16]
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f7ff ff7e 	bl	80091e8 <xQueueGenericCreate>
 80092ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff ffd3 	bl	800929a <prvInitialiseMutex>

		return xNewQueue;
 80092f4:	68fb      	ldr	r3, [r7, #12]
	}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b088      	sub	sp, #32
 8009302:	af02      	add	r7, sp, #8
 8009304:	4603      	mov	r3, r0
 8009306:	6039      	str	r1, [r7, #0]
 8009308:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800930a:	2301      	movs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	6939      	ldr	r1, [r7, #16]
 800931c:	6978      	ldr	r0, [r7, #20]
 800931e:	f7ff feeb 	bl	80090f8 <xQueueGenericCreateStatic>
 8009322:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff ffb8 	bl	800929a <prvInitialiseMutex>

		return xNewQueue;
 800932a:	68fb      	ldr	r3, [r7, #12]
	}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08e      	sub	sp, #56	; 0x38
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <xQueueGenericSend+0x32>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d103      	bne.n	8009374 <xQueueGenericSend+0x40>
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <xQueueGenericSend+0x44>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <xQueueGenericSend+0x46>
 8009378:	2300      	movs	r3, #0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <xQueueGenericSend+0x60>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d103      	bne.n	80093a2 <xQueueGenericSend+0x6e>
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d101      	bne.n	80093a6 <xQueueGenericSend+0x72>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueGenericSend+0x74>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	623b      	str	r3, [r7, #32]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093c2:	f001 fc3b 	bl	800ac3c <xTaskGetSchedulerState>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <xQueueGenericSend+0x9e>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <xQueueGenericSend+0xa2>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <xQueueGenericSend+0xa4>
 80093d6:	2300      	movs	r3, #0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	61fb      	str	r3, [r7, #28]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093f2:	f001 ff6f 	bl	800b2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <xQueueGenericSend+0xd4>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d129      	bne.n	800945c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	68b9      	ldr	r1, [r7, #8]
 800940c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800940e:	f000 fc9a 	bl	8009d46 <prvCopyDataToQueue>
 8009412:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	d010      	beq.n	800943e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	4618      	mov	r0, r3
 8009422:	f001 fa4b 	bl	800a8bc <xTaskRemoveFromEventList>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d013      	beq.n	8009454 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800942c:	4b3f      	ldr	r3, [pc, #252]	; (800952c <xQueueGenericSend+0x1f8>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	e00a      	b.n	8009454 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d007      	beq.n	8009454 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009444:	4b39      	ldr	r3, [pc, #228]	; (800952c <xQueueGenericSend+0x1f8>)
 8009446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009454:	f001 ff6e 	bl	800b334 <vPortExitCritical>
				return pdPASS;
 8009458:	2301      	movs	r3, #1
 800945a:	e063      	b.n	8009524 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009462:	f001 ff67 	bl	800b334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009466:	2300      	movs	r3, #0
 8009468:	e05c      	b.n	8009524 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800946a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009470:	f107 0314 	add.w	r3, r7, #20
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fa83 	bl	800a980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800947a:	2301      	movs	r3, #1
 800947c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800947e:	f001 ff59 	bl	800b334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009482:	f000 ffeb 	bl	800a45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009486:	f001 ff25 	bl	800b2d4 <vPortEnterCritical>
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009490:	b25b      	sxtb	r3, r3
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d103      	bne.n	80094a0 <xQueueGenericSend+0x16c>
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a6:	b25b      	sxtb	r3, r3
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d103      	bne.n	80094b6 <xQueueGenericSend+0x182>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094b6:	f001 ff3d 	bl	800b334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ba:	1d3a      	adds	r2, r7, #4
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fa72 	bl	800a9ac <xTaskCheckForTimeOut>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d124      	bne.n	8009518 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094d0:	f000 fd31 	bl	8009f36 <prvIsQueueFull>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d018      	beq.n	800950c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	3310      	adds	r3, #16
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f9c6 	bl	800a874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ea:	f000 fcbc 	bl	8009e66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094ee:	f000 ffc3 	bl	800a478 <xTaskResumeAll>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f af7c 	bne.w	80093f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80094fa:	4b0c      	ldr	r3, [pc, #48]	; (800952c <xQueueGenericSend+0x1f8>)
 80094fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	e772      	b.n	80093f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800950c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950e:	f000 fcaa 	bl	8009e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009512:	f000 ffb1 	bl	800a478 <xTaskResumeAll>
 8009516:	e76c      	b.n	80093f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951a:	f000 fca4 	bl	8009e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800951e:	f000 ffab 	bl	800a478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009524:	4618      	mov	r0, r3
 8009526:	3738      	adds	r7, #56	; 0x38
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b090      	sub	sp, #64	; 0x40
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <xQueueGenericSendFromISR+0x3c>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <xQueueGenericSendFromISR+0x40>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <xQueueGenericSendFromISR+0x42>
 8009570:	2300      	movs	r3, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d103      	bne.n	800959a <xQueueGenericSendFromISR+0x6a>
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	2b01      	cmp	r3, #1
 8009598:	d101      	bne.n	800959e <xQueueGenericSendFromISR+0x6e>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericSendFromISR+0x70>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	623b      	str	r3, [r7, #32]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095ba:	f001 ff6d 	bl	800b498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095be:	f3ef 8211 	mrs	r2, BASEPRI
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	61fa      	str	r2, [r7, #28]
 80095d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d302      	bcc.n	80095ec <xQueueGenericSendFromISR+0xbc>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d12f      	bne.n	800964c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009602:	f000 fba0 	bl	8009d46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009606:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d112      	bne.n	8009636 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d016      	beq.n	8009646 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	3324      	adds	r3, #36	; 0x24
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f94d 	bl	800a8bc <xTaskRemoveFromEventList>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e007      	b.n	8009646 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800963a:	3301      	adds	r3, #1
 800963c:	b2db      	uxtb	r3, r3
 800963e:	b25a      	sxtb	r2, r3
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009646:	2301      	movs	r3, #1
 8009648:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800964a:	e001      	b.n	8009650 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009652:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800965a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800965c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800965e:	4618      	mov	r0, r3
 8009660:	3740      	adds	r7, #64	; 0x40
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b08e      	sub	sp, #56	; 0x38
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	623b      	str	r3, [r7, #32]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	61fb      	str	r3, [r7, #28]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <xQueueGiveFromISR+0x58>
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <xQueueGiveFromISR+0x5c>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <xQueueGiveFromISR+0x5e>
 80096c2:	2300      	movs	r3, #0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xQueueGiveFromISR+0x78>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	61bb      	str	r3, [r7, #24]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096de:	f001 fedb 	bl	800b498 <vPortValidateInterruptPriority>
	__asm volatile
 80096e2:	f3ef 8211 	mrs	r2, BASEPRI
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	617a      	str	r2, [r7, #20]
 80096f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80096fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970a:	429a      	cmp	r2, r3
 800970c:	d22b      	bcs.n	8009766 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d112      	bne.n	8009750 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b00      	cmp	r3, #0
 8009730:	d016      	beq.n	8009760 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	3324      	adds	r3, #36	; 0x24
 8009736:	4618      	mov	r0, r3
 8009738:	f001 f8c0 	bl	800a8bc <xTaskRemoveFromEventList>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00e      	beq.n	8009760 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2201      	movs	r2, #1
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	e007      	b.n	8009760 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009754:	3301      	adds	r3, #1
 8009756:	b2db      	uxtb	r3, r3
 8009758:	b25a      	sxtb	r2, r3
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009760:	2301      	movs	r3, #1
 8009762:	637b      	str	r3, [r7, #52]	; 0x34
 8009764:	e001      	b.n	800976a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009766:	2300      	movs	r3, #0
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f383 8811 	msr	BASEPRI, r3
}
 8009774:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009778:	4618      	mov	r0, r3
 800977a:	3738      	adds	r7, #56	; 0x38
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	; 0x30
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800978c:	2300      	movs	r3, #0
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <xQueueReceive+0x30>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	623b      	str	r3, [r7, #32]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d103      	bne.n	80097be <xQueueReceive+0x3e>
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <xQueueReceive+0x42>
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <xQueueReceive+0x44>
 80097c2:	2300      	movs	r3, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <xQueueReceive+0x5e>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	61fb      	str	r3, [r7, #28]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097de:	f001 fa2d 	bl	800ac3c <xTaskGetSchedulerState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <xQueueReceive+0x6e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <xQueueReceive+0x72>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <xQueueReceive+0x74>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xQueueReceive+0x8e>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	61bb      	str	r3, [r7, #24]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800980e:	f001 fd61 	bl	800b2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01f      	beq.n	800985e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009822:	f000 fafa 	bl	8009e1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	1e5a      	subs	r2, r3, #1
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	3310      	adds	r3, #16
 800983a:	4618      	mov	r0, r3
 800983c:	f001 f83e 	bl	800a8bc <xTaskRemoveFromEventList>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009846:	4b3d      	ldr	r3, [pc, #244]	; (800993c <xQueueReceive+0x1bc>)
 8009848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009856:	f001 fd6d 	bl	800b334 <vPortExitCritical>
				return pdPASS;
 800985a:	2301      	movs	r3, #1
 800985c:	e069      	b.n	8009932 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009864:	f001 fd66 	bl	800b334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009868:	2300      	movs	r3, #0
 800986a:	e062      	b.n	8009932 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d106      	bne.n	8009880 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009872:	f107 0310 	add.w	r3, r7, #16
 8009876:	4618      	mov	r0, r3
 8009878:	f001 f882 	bl	800a980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009880:	f001 fd58 	bl	800b334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009884:	f000 fdea 	bl	800a45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009888:	f001 fd24 	bl	800b2d4 <vPortEnterCritical>
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009892:	b25b      	sxtb	r3, r3
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d103      	bne.n	80098a2 <xQueueReceive+0x122>
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d103      	bne.n	80098b8 <xQueueReceive+0x138>
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098b8:	f001 fd3c 	bl	800b334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098bc:	1d3a      	adds	r2, r7, #4
 80098be:	f107 0310 	add.w	r3, r7, #16
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 f871 	bl	800a9ac <xTaskCheckForTimeOut>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d123      	bne.n	8009918 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d2:	f000 fb1a 	bl	8009f0a <prvIsQueueEmpty>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d017      	beq.n	800990c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	3324      	adds	r3, #36	; 0x24
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 ffc5 	bl	800a874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ec:	f000 fabb 	bl	8009e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098f0:	f000 fdc2 	bl	800a478 <xTaskResumeAll>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d189      	bne.n	800980e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80098fa:	4b10      	ldr	r3, [pc, #64]	; (800993c <xQueueReceive+0x1bc>)
 80098fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	e780      	b.n	800980e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800990c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990e:	f000 faaa 	bl	8009e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009912:	f000 fdb1 	bl	800a478 <xTaskResumeAll>
 8009916:	e77a      	b.n	800980e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991a:	f000 faa4 	bl	8009e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800991e:	f000 fdab 	bl	800a478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009924:	f000 faf1 	bl	8009f0a <prvIsQueueEmpty>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	f43f af6f 	beq.w	800980e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009932:	4618      	mov	r0, r3
 8009934:	3730      	adds	r7, #48	; 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	623b      	str	r3, [r7, #32]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61fb      	str	r3, [r7, #28]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009990:	f001 f954 	bl	800ac3c <xTaskGetSchedulerState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <xQueueSemaphoreTake+0x60>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <xQueueSemaphoreTake+0x64>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <xQueueSemaphoreTake+0x66>
 80099a4:	2300      	movs	r3, #0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10a      	bne.n	80099c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	61bb      	str	r3, [r7, #24]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099c0:	f001 fc88 	bl	800b2d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d024      	beq.n	8009a1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80099e0:	f001 fad4 	bl	800af8c <pvTaskIncrementMutexHeldCount>
 80099e4:	4602      	mov	r2, r0
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00f      	beq.n	8009a12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	3310      	adds	r3, #16
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 ff60 	bl	800a8bc <xTaskRemoveFromEventList>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a02:	4b54      	ldr	r3, [pc, #336]	; (8009b54 <xQueueSemaphoreTake+0x214>)
 8009a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a12:	f001 fc8f 	bl	800b334 <vPortExitCritical>
				return pdPASS;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e097      	b.n	8009b4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d111      	bne.n	8009a44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	617b      	str	r3, [r7, #20]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a3c:	f001 fc7a 	bl	800b334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e082      	b.n	8009b4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d106      	bne.n	8009a58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 ff96 	bl	800a980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a58:	f001 fc6c 	bl	800b334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a5c:	f000 fcfe 	bl	800a45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a60:	f001 fc38 	bl	800b2d4 <vPortEnterCritical>
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a6a:	b25b      	sxtb	r3, r3
 8009a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a70:	d103      	bne.n	8009a7a <xQueueSemaphoreTake+0x13a>
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a80:	b25b      	sxtb	r3, r3
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a86:	d103      	bne.n	8009a90 <xQueueSemaphoreTake+0x150>
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a90:	f001 fc50 	bl	800b334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a94:	463a      	mov	r2, r7
 8009a96:	f107 030c 	add.w	r3, r7, #12
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 ff85 	bl	800a9ac <xTaskCheckForTimeOut>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d132      	bne.n	8009b0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aaa:	f000 fa2e 	bl	8009f0a <prvIsQueueEmpty>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d026      	beq.n	8009b02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d109      	bne.n	8009ad0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009abc:	f001 fc0a 	bl	800b2d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 f8d7 	bl	800ac78 <xTaskPriorityInherit>
 8009aca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009acc:	f001 fc32 	bl	800b334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	3324      	adds	r3, #36	; 0x24
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 fecb 	bl	800a874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ae0:	f000 f9c1 	bl	8009e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ae4:	f000 fcc8 	bl	800a478 <xTaskResumeAll>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f47f af68 	bne.w	80099c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009af0:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <xQueueSemaphoreTake+0x214>)
 8009af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	e75e      	b.n	80099c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b04:	f000 f9af 	bl	8009e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b08:	f000 fcb6 	bl	800a478 <xTaskResumeAll>
 8009b0c:	e758      	b.n	80099c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b10:	f000 f9a9 	bl	8009e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b14:	f000 fcb0 	bl	800a478 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b1a:	f000 f9f6 	bl	8009f0a <prvIsQueueEmpty>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f43f af4d 	beq.w	80099c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00d      	beq.n	8009b48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009b2c:	f001 fbd2 	bl	800b2d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b32:	f000 f8f0 	bl	8009d16 <prvGetDisinheritPriorityAfterTimeout>
 8009b36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 f996 	bl	800ae70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b44:	f001 fbf6 	bl	800b334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3738      	adds	r7, #56	; 0x38
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	623b      	str	r3, [r7, #32]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <xQueueReceiveFromISR+0x3a>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <xQueueReceiveFromISR+0x3e>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <xQueueReceiveFromISR+0x40>
 8009b96:	2300      	movs	r3, #0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61fb      	str	r3, [r7, #28]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bb2:	f001 fc71 	bl	800b498 <vPortValidateInterruptPriority>
	__asm volatile
 8009bb6:	f3ef 8211 	mrs	r2, BASEPRI
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	61ba      	str	r2, [r7, #24]
 8009bcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02f      	beq.n	8009c3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bec:	f000 f915 	bl	8009e1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	1e5a      	subs	r2, r3, #1
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d112      	bne.n	8009c28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d016      	beq.n	8009c38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	3310      	adds	r3, #16
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fe54 	bl	800a8bc <xTaskRemoveFromEventList>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00e      	beq.n	8009c38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00b      	beq.n	8009c38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	e007      	b.n	8009c38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	b25a      	sxtb	r2, r3
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	e001      	b.n	8009c42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f383 8811 	msr	BASEPRI, r3
}
 8009c4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3738      	adds	r7, #56	; 0x38
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	60bb      	str	r3, [r7, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	e7fe      	b.n	8009c7a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009c7c:	f001 fb2a 	bl	800b2d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009c86:	f001 fb55 	bl	800b334 <vPortExitCritical>

	return uxReturn;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60fb      	str	r3, [r7, #12]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009cc2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <vQueueDelete+0x28>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	60bb      	str	r3, [r7, #8]
}
 8009cf4:	bf00      	nop
 8009cf6:	e7fe      	b.n	8009cf6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f935 	bl	8009f68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 fcd1 	bl	800b6b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d16:	b480      	push	{r7}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d006      	beq.n	8009d34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f1c3 0307 	rsb	r3, r3, #7
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e001      	b.n	8009d38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d38:	68fb      	ldr	r3, [r7, #12]
	}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d14d      	bne.n	8009e08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fff7 	bl	800ad64 <xTaskPriorityDisinherit>
 8009d76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	609a      	str	r2, [r3, #8]
 8009d7e:	e043      	b.n	8009e08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d119      	bne.n	8009dba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6858      	ldr	r0, [r3, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	461a      	mov	r2, r3
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	f011 f854 	bl	801ae3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	441a      	add	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d32b      	bcc.n	8009e08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	605a      	str	r2, [r3, #4]
 8009db8:	e026      	b.n	8009e08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68d8      	ldr	r0, [r3, #12]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	f011 f83a 	bl	801ae3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	425b      	negs	r3, r3
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d207      	bcs.n	8009df6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	425b      	negs	r3, r3
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d105      	bne.n	8009e08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e10:	697b      	ldr	r3, [r7, #20]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d018      	beq.n	8009e5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68da      	ldr	r2, [r3, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	441a      	add	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d303      	bcc.n	8009e4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68d9      	ldr	r1, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	461a      	mov	r2, r3
 8009e58:	6838      	ldr	r0, [r7, #0]
 8009e5a:	f010 fff0 	bl	801ae3e <memcpy>
	}
}
 8009e5e:	bf00      	nop
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e6e:	f001 fa31 	bl	800b2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e7a:	e011      	b.n	8009ea0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d012      	beq.n	8009eaa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3324      	adds	r3, #36	; 0x24
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fd17 	bl	800a8bc <xTaskRemoveFromEventList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e94:	f000 fdec 	bl	800aa70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dce9      	bgt.n	8009e7c <prvUnlockQueue+0x16>
 8009ea8:	e000      	b.n	8009eac <prvUnlockQueue+0x46>
					break;
 8009eaa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	22ff      	movs	r2, #255	; 0xff
 8009eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009eb4:	f001 fa3e 	bl	800b334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009eb8:	f001 fa0c 	bl	800b2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ec2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ec4:	e011      	b.n	8009eea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d012      	beq.n	8009ef4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3310      	adds	r3, #16
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fcf2 	bl	800a8bc <xTaskRemoveFromEventList>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ede:	f000 fdc7 	bl	800aa70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	dce9      	bgt.n	8009ec6 <prvUnlockQueue+0x60>
 8009ef2:	e000      	b.n	8009ef6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ef4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	22ff      	movs	r2, #255	; 0xff
 8009efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009efe:	f001 fa19 	bl	800b334 <vPortExitCritical>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f12:	f001 f9df 	bl	800b2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e001      	b.n	8009f28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f28:	f001 fa04 	bl	800b334 <vPortExitCritical>

	return xReturn;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f3e:	f001 f9c9 	bl	800b2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d102      	bne.n	8009f54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e001      	b.n	8009f58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f58:	f001 f9ec 	bl	800b334 <vPortExitCritical>

	return xReturn;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e016      	b.n	8009fa4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f76:	4a10      	ldr	r2, [pc, #64]	; (8009fb8 <vQueueUnregisterQueue+0x50>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4413      	add	r3, r2
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d10b      	bne.n	8009f9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f86:	4a0c      	ldr	r2, [pc, #48]	; (8009fb8 <vQueueUnregisterQueue+0x50>)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f90:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <vQueueUnregisterQueue+0x50>)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	4413      	add	r3, r2
 8009f98:	2200      	movs	r2, #0
 8009f9a:	605a      	str	r2, [r3, #4]
				break;
 8009f9c:	e006      	b.n	8009fac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	d9e5      	bls.n	8009f76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	2400a5f0 	.word	0x2400a5f0

08009fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af04      	add	r7, sp, #16
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	623b      	str	r3, [r7, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xTaskCreateStatic+0x46>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a002:	23b4      	movs	r3, #180	; 0xb4
 800a004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2bb4      	cmp	r3, #180	; 0xb4
 800a00a:	d00a      	beq.n	800a022 <xTaskCreateStatic+0x66>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61bb      	str	r3, [r7, #24]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a022:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01e      	beq.n	800a068 <xTaskCreateStatic+0xac>
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01b      	beq.n	800a068 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a038:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	2202      	movs	r2, #2
 800a03e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a042:	2300      	movs	r3, #0
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	f107 0314 	add.w	r3, r7, #20
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	68b9      	ldr	r1, [r7, #8]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f850 	bl	800a100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a062:	f000 f8f3 	bl	800a24c <prvAddNewTaskToReadyList>
 800a066:	e001      	b.n	800a06c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a06c:	697b      	ldr	r3, [r7, #20]
	}
 800a06e:	4618      	mov	r0, r3
 800a070:	3728      	adds	r7, #40	; 0x28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a076:	b580      	push	{r7, lr}
 800a078:	b08c      	sub	sp, #48	; 0x30
 800a07a:	af04      	add	r7, sp, #16
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	4613      	mov	r3, r2
 800a084:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 fa44 	bl	800b518 <pvPortMalloc>
 800a090:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a098:	20b4      	movs	r0, #180	; 0xb4
 800a09a:	f001 fa3d 	bl	800b518 <pvPortMalloc>
 800a09e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ac:	e005      	b.n	800a0ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f001 fafe 	bl	800b6b0 <vPortFree>
 800a0b4:	e001      	b.n	800a0ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d017      	beq.n	800a0f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0c8:	88fa      	ldrh	r2, [r7, #6]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f80e 	bl	800a100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0e4:	69f8      	ldr	r0, [r7, #28]
 800a0e6:	f000 f8b1 	bl	800a24c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	e002      	b.n	800a0f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	461a      	mov	r2, r3
 800a118:	21a5      	movs	r1, #165	; 0xa5
 800a11a:	f010 fe9e 	bl	801ae5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a128:	440b      	add	r3, r1
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	f023 0307 	bic.w	r3, r3, #7
 800a136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	617b      	str	r3, [r7, #20]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01f      	beq.n	800a19e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a15e:	2300      	movs	r3, #0
 800a160:	61fb      	str	r3, [r7, #28]
 800a162:	e012      	b.n	800a18a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	7819      	ldrb	r1, [r3, #0]
 800a16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	3334      	adds	r3, #52	; 0x34
 800a174:	460a      	mov	r2, r1
 800a176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d006      	beq.n	800a192 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3301      	adds	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	2b0f      	cmp	r3, #15
 800a18e:	d9e9      	bls.n	800a164 <prvInitialiseNewTask+0x64>
 800a190:	e000      	b.n	800a194 <prvInitialiseNewTask+0x94>
			{
				break;
 800a192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a19c:	e003      	b.n	800a1a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	2b06      	cmp	r3, #6
 800a1aa:	d901      	bls.n	800a1b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1ac:	2306      	movs	r3, #6
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	2200      	movs	r2, #0
 800a1c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fe99 	bl	8008efe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	3318      	adds	r3, #24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fe94 	bl	8008efe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	f1c3 0207 	rsb	r2, r3, #7
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	334c      	adds	r3, #76	; 0x4c
 800a200:	2260      	movs	r2, #96	; 0x60
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f010 fe28 	bl	801ae5a <memset>
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <prvInitialiseNewTask+0x140>)
 800a20e:	651a      	str	r2, [r3, #80]	; 0x50
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <prvInitialiseNewTask+0x144>)
 800a214:	655a      	str	r2, [r3, #84]	; 0x54
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	4a0b      	ldr	r2, [pc, #44]	; (800a248 <prvInitialiseNewTask+0x148>)
 800a21a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	69b8      	ldr	r0, [r7, #24]
 800a222:	f000 ff2d 	bl	800b080 <pxPortInitialiseStack>
 800a226:	4602      	mov	r2, r0
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a236:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a238:	bf00      	nop
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0801f884 	.word	0x0801f884
 800a244:	0801f8a4 	.word	0x0801f8a4
 800a248:	0801f864 	.word	0x0801f864

0800a24c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a254:	f001 f83e 	bl	800b2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a258:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <prvAddNewTaskToReadyList+0xb8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	4a29      	ldr	r2, [pc, #164]	; (800a304 <prvAddNewTaskToReadyList+0xb8>)
 800a260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a262:	4b29      	ldr	r3, [pc, #164]	; (800a308 <prvAddNewTaskToReadyList+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d109      	bne.n	800a27e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a26a:	4a27      	ldr	r2, [pc, #156]	; (800a308 <prvAddNewTaskToReadyList+0xbc>)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a270:	4b24      	ldr	r3, [pc, #144]	; (800a304 <prvAddNewTaskToReadyList+0xb8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d110      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a278:	f000 fc1e 	bl	800aab8 <prvInitialiseTaskLists>
 800a27c:	e00d      	b.n	800a29a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a27e:	4b23      	ldr	r3, [pc, #140]	; (800a30c <prvAddNewTaskToReadyList+0xc0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a286:	4b20      	ldr	r3, [pc, #128]	; (800a308 <prvAddNewTaskToReadyList+0xbc>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d802      	bhi.n	800a29a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a294:	4a1c      	ldr	r2, [pc, #112]	; (800a308 <prvAddNewTaskToReadyList+0xbc>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a29a:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	4a1b      	ldr	r2, [pc, #108]	; (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a2a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	409a      	lsls	r2, r3
 800a2ac:	4b19      	ldr	r3, [pc, #100]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	4a18      	ldr	r2, [pc, #96]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4a15      	ldr	r2, [pc, #84]	; (800a318 <prvAddNewTaskToReadyList+0xcc>)
 800a2c4:	441a      	add	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f7fe fe23 	bl	8008f18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2d2:	f001 f82f 	bl	800b334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <prvAddNewTaskToReadyList+0xc0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2de:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <prvAddNewTaskToReadyList+0xbc>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d207      	bcs.n	800a2fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	24001d08 	.word	0x24001d08
 800a308:	24001c08 	.word	0x24001c08
 800a30c:	24001d14 	.word	0x24001d14
 800a310:	24001d24 	.word	0x24001d24
 800a314:	24001d10 	.word	0x24001d10
 800a318:	24001c0c 	.word	0x24001c0c
 800a31c:	e000ed04 	.word	0xe000ed04

0800a320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d017      	beq.n	800a362 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a332:	4b13      	ldr	r3, [pc, #76]	; (800a380 <vTaskDelay+0x60>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <vTaskDelay+0x30>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	60bb      	str	r3, [r7, #8]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a350:	f000 f884 	bl	800a45c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a354:	2100      	movs	r1, #0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fe2c 	bl	800afb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a35c:	f000 f88c 	bl	800a478 <xTaskResumeAll>
 800a360:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a368:	4b06      	ldr	r3, [pc, #24]	; (800a384 <vTaskDelay+0x64>)
 800a36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a378:	bf00      	nop
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	24001d30 	.word	0x24001d30
 800a384:	e000ed04 	.word	0xe000ed04

0800a388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	; 0x28
 800a38c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a396:	463a      	mov	r2, r7
 800a398:	1d39      	adds	r1, r7, #4
 800a39a:	f107 0308 	add.w	r3, r7, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 f976 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	9202      	str	r2, [sp, #8]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	460a      	mov	r2, r1
 800a3b6:	4921      	ldr	r1, [pc, #132]	; (800a43c <vTaskStartScheduler+0xb4>)
 800a3b8:	4821      	ldr	r0, [pc, #132]	; (800a440 <vTaskStartScheduler+0xb8>)
 800a3ba:	f7ff fdff 	bl	8009fbc <xTaskCreateStatic>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4a20      	ldr	r2, [pc, #128]	; (800a444 <vTaskStartScheduler+0xbc>)
 800a3c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3c4:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <vTaskStartScheduler+0xbc>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	617b      	str	r3, [r7, #20]
 800a3d0:	e001      	b.n	800a3d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d11b      	bne.n	800a414 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	613b      	str	r3, [r7, #16]
}
 800a3ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3f0:	4b15      	ldr	r3, [pc, #84]	; (800a448 <vTaskStartScheduler+0xc0>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	334c      	adds	r3, #76	; 0x4c
 800a3f6:	4a15      	ldr	r2, [pc, #84]	; (800a44c <vTaskStartScheduler+0xc4>)
 800a3f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <vTaskStartScheduler+0xc8>)
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a402:	4b14      	ldr	r3, [pc, #80]	; (800a454 <vTaskStartScheduler+0xcc>)
 800a404:	2201      	movs	r2, #1
 800a406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a408:	4b13      	ldr	r3, [pc, #76]	; (800a458 <vTaskStartScheduler+0xd0>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a40e:	f000 febf 	bl	800b190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a412:	e00e      	b.n	800a432 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d10a      	bne.n	800a432 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	60fb      	str	r3, [r7, #12]
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <vTaskStartScheduler+0xa8>
}
 800a432:	bf00      	nop
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	0801be64 	.word	0x0801be64
 800a440:	0800aa89 	.word	0x0800aa89
 800a444:	24001d2c 	.word	0x24001d2c
 800a448:	24001c08 	.word	0x24001c08
 800a44c:	24000038 	.word	0x24000038
 800a450:	24001d28 	.word	0x24001d28
 800a454:	24001d14 	.word	0x24001d14
 800a458:	24001d0c 	.word	0x24001d0c

0800a45c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a460:	4b04      	ldr	r3, [pc, #16]	; (800a474 <vTaskSuspendAll+0x18>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	4a03      	ldr	r2, [pc, #12]	; (800a474 <vTaskSuspendAll+0x18>)
 800a468:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a46a:	bf00      	nop
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	24001d30 	.word	0x24001d30

0800a478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a482:	2300      	movs	r3, #0
 800a484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a486:	4b41      	ldr	r3, [pc, #260]	; (800a58c <xTaskResumeAll+0x114>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	603b      	str	r3, [r7, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4a4:	f000 ff16 	bl	800b2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4a8:	4b38      	ldr	r3, [pc, #224]	; (800a58c <xTaskResumeAll+0x114>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	4a37      	ldr	r2, [pc, #220]	; (800a58c <xTaskResumeAll+0x114>)
 800a4b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4b2:	4b36      	ldr	r3, [pc, #216]	; (800a58c <xTaskResumeAll+0x114>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d161      	bne.n	800a57e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4ba:	4b35      	ldr	r3, [pc, #212]	; (800a590 <xTaskResumeAll+0x118>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d05d      	beq.n	800a57e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4c2:	e02e      	b.n	800a522 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c4:	4b33      	ldr	r3, [pc, #204]	; (800a594 <xTaskResumeAll+0x11c>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	3318      	adds	r3, #24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fd7e 	bl	8008fd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fd79 	bl	8008fd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	409a      	lsls	r2, r3
 800a4e8:	4b2b      	ldr	r3, [pc, #172]	; (800a598 <xTaskResumeAll+0x120>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	4a2a      	ldr	r2, [pc, #168]	; (800a598 <xTaskResumeAll+0x120>)
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4a27      	ldr	r2, [pc, #156]	; (800a59c <xTaskResumeAll+0x124>)
 800a500:	441a      	add	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7fe fd05 	bl	8008f18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a512:	4b23      	ldr	r3, [pc, #140]	; (800a5a0 <xTaskResumeAll+0x128>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	429a      	cmp	r2, r3
 800a51a:	d302      	bcc.n	800a522 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a51c:	4b21      	ldr	r3, [pc, #132]	; (800a5a4 <xTaskResumeAll+0x12c>)
 800a51e:	2201      	movs	r2, #1
 800a520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a522:	4b1c      	ldr	r3, [pc, #112]	; (800a594 <xTaskResumeAll+0x11c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1cc      	bne.n	800a4c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a530:	f000 fb64 	bl	800abfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a534:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <xTaskResumeAll+0x130>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a540:	f000 f858 	bl	800a5f4 <xTaskIncrementTick>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a54a:	4b16      	ldr	r3, [pc, #88]	; (800a5a4 <xTaskResumeAll+0x12c>)
 800a54c:	2201      	movs	r2, #1
 800a54e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3b01      	subs	r3, #1
 800a554:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1f1      	bne.n	800a540 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a55c:	4b12      	ldr	r3, [pc, #72]	; (800a5a8 <xTaskResumeAll+0x130>)
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a562:	4b10      	ldr	r3, [pc, #64]	; (800a5a4 <xTaskResumeAll+0x12c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a56a:	2301      	movs	r3, #1
 800a56c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a56e:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <xTaskResumeAll+0x134>)
 800a570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a57e:	f000 fed9 	bl	800b334 <vPortExitCritical>

	return xAlreadyYielded;
 800a582:	68bb      	ldr	r3, [r7, #8]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	24001d30 	.word	0x24001d30
 800a590:	24001d08 	.word	0x24001d08
 800a594:	24001cc8 	.word	0x24001cc8
 800a598:	24001d10 	.word	0x24001d10
 800a59c:	24001c0c 	.word	0x24001c0c
 800a5a0:	24001c08 	.word	0x24001c08
 800a5a4:	24001d1c 	.word	0x24001d1c
 800a5a8:	24001d18 	.word	0x24001d18
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <xTaskGetTickCount+0x1c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5bc:	687b      	ldr	r3, [r7, #4]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	24001d0c 	.word	0x24001d0c

0800a5d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5d6:	f000 ff5f 	bl	800b498 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a5da:	2300      	movs	r3, #0
 800a5dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a5de:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <xTaskGetTickCountFromISR+0x20>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e4:	683b      	ldr	r3, [r7, #0]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	24001d0c 	.word	0x24001d0c

0800a5f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5fe:	4b4e      	ldr	r3, [pc, #312]	; (800a738 <xTaskIncrementTick+0x144>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f040 808e 	bne.w	800a724 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a608:	4b4c      	ldr	r3, [pc, #304]	; (800a73c <xTaskIncrementTick+0x148>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a610:	4a4a      	ldr	r2, [pc, #296]	; (800a73c <xTaskIncrementTick+0x148>)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d120      	bne.n	800a65e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a61c:	4b48      	ldr	r3, [pc, #288]	; (800a740 <xTaskIncrementTick+0x14c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <xTaskIncrementTick+0x48>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	603b      	str	r3, [r7, #0]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xTaskIncrementTick+0x46>
 800a63c:	4b40      	ldr	r3, [pc, #256]	; (800a740 <xTaskIncrementTick+0x14c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	4b40      	ldr	r3, [pc, #256]	; (800a744 <xTaskIncrementTick+0x150>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a3e      	ldr	r2, [pc, #248]	; (800a740 <xTaskIncrementTick+0x14c>)
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	4a3e      	ldr	r2, [pc, #248]	; (800a744 <xTaskIncrementTick+0x150>)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	4b3d      	ldr	r3, [pc, #244]	; (800a748 <xTaskIncrementTick+0x154>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3301      	adds	r3, #1
 800a656:	4a3c      	ldr	r2, [pc, #240]	; (800a748 <xTaskIncrementTick+0x154>)
 800a658:	6013      	str	r3, [r2, #0]
 800a65a:	f000 facf 	bl	800abfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a65e:	4b3b      	ldr	r3, [pc, #236]	; (800a74c <xTaskIncrementTick+0x158>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d348      	bcc.n	800a6fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a668:	4b35      	ldr	r3, [pc, #212]	; (800a740 <xTaskIncrementTick+0x14c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a672:	4b36      	ldr	r3, [pc, #216]	; (800a74c <xTaskIncrementTick+0x158>)
 800a674:	f04f 32ff 	mov.w	r2, #4294967295
 800a678:	601a      	str	r2, [r3, #0]
					break;
 800a67a:	e03e      	b.n	800a6fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a67c:	4b30      	ldr	r3, [pc, #192]	; (800a740 <xTaskIncrementTick+0x14c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d203      	bcs.n	800a69c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a694:	4a2d      	ldr	r2, [pc, #180]	; (800a74c <xTaskIncrementTick+0x158>)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a69a:	e02e      	b.n	800a6fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fc96 	bl	8008fd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	3318      	adds	r3, #24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fc8d 	bl	8008fd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	2201      	movs	r2, #1
 800a6be:	409a      	lsls	r2, r3
 800a6c0:	4b23      	ldr	r3, [pc, #140]	; (800a750 <xTaskIncrementTick+0x15c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	4a22      	ldr	r2, [pc, #136]	; (800a750 <xTaskIncrementTick+0x15c>)
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <xTaskIncrementTick+0x160>)
 800a6d8:	441a      	add	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7fe fc19 	bl	8008f18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ea:	4b1b      	ldr	r3, [pc, #108]	; (800a758 <xTaskIncrementTick+0x164>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d3b9      	bcc.n	800a668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f8:	e7b6      	b.n	800a668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6fa:	4b17      	ldr	r3, [pc, #92]	; (800a758 <xTaskIncrementTick+0x164>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4914      	ldr	r1, [pc, #80]	; (800a754 <xTaskIncrementTick+0x160>)
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d901      	bls.n	800a716 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a712:	2301      	movs	r3, #1
 800a714:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a716:	4b11      	ldr	r3, [pc, #68]	; (800a75c <xTaskIncrementTick+0x168>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d007      	beq.n	800a72e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a71e:	2301      	movs	r3, #1
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	e004      	b.n	800a72e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a724:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <xTaskIncrementTick+0x16c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3301      	adds	r3, #1
 800a72a:	4a0d      	ldr	r2, [pc, #52]	; (800a760 <xTaskIncrementTick+0x16c>)
 800a72c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a72e:	697b      	ldr	r3, [r7, #20]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	24001d30 	.word	0x24001d30
 800a73c:	24001d0c 	.word	0x24001d0c
 800a740:	24001cc0 	.word	0x24001cc0
 800a744:	24001cc4 	.word	0x24001cc4
 800a748:	24001d20 	.word	0x24001d20
 800a74c:	24001d28 	.word	0x24001d28
 800a750:	24001d10 	.word	0x24001d10
 800a754:	24001c0c 	.word	0x24001c0c
 800a758:	24001c08 	.word	0x24001c08
 800a75c:	24001d1c 	.word	0x24001d1c
 800a760:	24001d18 	.word	0x24001d18

0800a764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a76a:	4b3c      	ldr	r3, [pc, #240]	; (800a85c <vTaskSwitchContext+0xf8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a772:	4b3b      	ldr	r3, [pc, #236]	; (800a860 <vTaskSwitchContext+0xfc>)
 800a774:	2201      	movs	r2, #1
 800a776:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a778:	e06b      	b.n	800a852 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800a77a:	4b39      	ldr	r3, [pc, #228]	; (800a860 <vTaskSwitchContext+0xfc>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a780:	4b38      	ldr	r3, [pc, #224]	; (800a864 <vTaskSwitchContext+0x100>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	429a      	cmp	r2, r3
 800a796:	d111      	bne.n	800a7bc <vTaskSwitchContext+0x58>
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	3304      	adds	r3, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10b      	bne.n	800a7bc <vTaskSwitchContext+0x58>
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d105      	bne.n	800a7bc <vTaskSwitchContext+0x58>
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	330c      	adds	r3, #12
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d008      	beq.n	800a7ce <vTaskSwitchContext+0x6a>
 800a7bc:	4b29      	ldr	r3, [pc, #164]	; (800a864 <vTaskSwitchContext+0x100>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4b28      	ldr	r3, [pc, #160]	; (800a864 <vTaskSwitchContext+0x100>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3334      	adds	r3, #52	; 0x34
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7f5 ff55 	bl	8000678 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ce:	4b26      	ldr	r3, [pc, #152]	; (800a868 <vTaskSwitchContext+0x104>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	fab3 f383 	clz	r3, r3
 800a7da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a7dc:	7afb      	ldrb	r3, [r7, #11]
 800a7de:	f1c3 031f 	rsb	r3, r3, #31
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	4921      	ldr	r1, [pc, #132]	; (800a86c <vTaskSwitchContext+0x108>)
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <vTaskSwitchContext+0xaa>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	607b      	str	r3, [r7, #4]
}
 800a80a:	bf00      	nop
 800a80c:	e7fe      	b.n	800a80c <vTaskSwitchContext+0xa8>
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4a14      	ldr	r2, [pc, #80]	; (800a86c <vTaskSwitchContext+0x108>)
 800a81a:	4413      	add	r3, r2
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	605a      	str	r2, [r3, #4]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	3308      	adds	r3, #8
 800a830:	429a      	cmp	r2, r3
 800a832:	d104      	bne.n	800a83e <vTaskSwitchContext+0xda>
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	4a07      	ldr	r2, [pc, #28]	; (800a864 <vTaskSwitchContext+0x100>)
 800a846:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a848:	4b06      	ldr	r3, [pc, #24]	; (800a864 <vTaskSwitchContext+0x100>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	334c      	adds	r3, #76	; 0x4c
 800a84e:	4a08      	ldr	r2, [pc, #32]	; (800a870 <vTaskSwitchContext+0x10c>)
 800a850:	6013      	str	r3, [r2, #0]
}
 800a852:	bf00      	nop
 800a854:	3720      	adds	r7, #32
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	24001d30 	.word	0x24001d30
 800a860:	24001d1c 	.word	0x24001d1c
 800a864:	24001c08 	.word	0x24001c08
 800a868:	24001d10 	.word	0x24001d10
 800a86c:	24001c0c 	.word	0x24001c0c
 800a870:	24000038 	.word	0x24000038

0800a874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	60fb      	str	r3, [r7, #12]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <vTaskPlaceOnEventList+0x44>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3318      	adds	r3, #24
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fe fb5c 	bl	8008f60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	6838      	ldr	r0, [r7, #0]
 800a8ac:	f000 fb82 	bl	800afb4 <prvAddCurrentTaskToDelayedList>
}
 800a8b0:	bf00      	nop
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	24001c08 	.word	0x24001c08

0800a8bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	60fb      	str	r3, [r7, #12]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	3318      	adds	r3, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe fb70 	bl	8008fd2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <xTaskRemoveFromEventList+0xac>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d11c      	bne.n	800a934 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fb67 	bl	8008fd2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	2201      	movs	r2, #1
 800a90a:	409a      	lsls	r2, r3
 800a90c:	4b17      	ldr	r3, [pc, #92]	; (800a96c <xTaskRemoveFromEventList+0xb0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4313      	orrs	r3, r2
 800a912:	4a16      	ldr	r2, [pc, #88]	; (800a96c <xTaskRemoveFromEventList+0xb0>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4a13      	ldr	r2, [pc, #76]	; (800a970 <xTaskRemoveFromEventList+0xb4>)
 800a924:	441a      	add	r2, r3
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3304      	adds	r3, #4
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7fe faf3 	bl	8008f18 <vListInsertEnd>
 800a932:	e005      	b.n	800a940 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	3318      	adds	r3, #24
 800a938:	4619      	mov	r1, r3
 800a93a:	480e      	ldr	r0, [pc, #56]	; (800a974 <xTaskRemoveFromEventList+0xb8>)
 800a93c:	f7fe faec 	bl	8008f18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <xTaskRemoveFromEventList+0xbc>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d905      	bls.n	800a95a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a952:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <xTaskRemoveFromEventList+0xc0>)
 800a954:	2201      	movs	r2, #1
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e001      	b.n	800a95e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a95e:	697b      	ldr	r3, [r7, #20]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	24001d30 	.word	0x24001d30
 800a96c:	24001d10 	.word	0x24001d10
 800a970:	24001c0c 	.word	0x24001c0c
 800a974:	24001cc8 	.word	0x24001cc8
 800a978:	24001c08 	.word	0x24001c08
 800a97c:	24001d1c 	.word	0x24001d1c

0800a980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <vTaskInternalSetTimeOutState+0x24>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <vTaskInternalSetTimeOutState+0x28>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	605a      	str	r2, [r3, #4]
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	24001d20 	.word	0x24001d20
 800a9a8:	24001d0c 	.word	0x24001d0c

0800a9ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	613b      	str	r3, [r7, #16]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9ee:	f000 fc71 	bl	800b2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9f2:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <xTaskCheckForTimeOut+0xbc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d102      	bne.n	800aa12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	e023      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <xTaskCheckForTimeOut+0xc0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d007      	beq.n	800aa2e <xTaskCheckForTimeOut+0x82>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d302      	bcc.n	800aa2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e015      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d20b      	bcs.n	800aa50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ff9b 	bl	800a980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	e004      	b.n	800aa5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa5a:	f000 fc6b 	bl	800b334 <vPortExitCritical>

	return xReturn;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	24001d0c 	.word	0x24001d0c
 800aa6c:	24001d20 	.word	0x24001d20

0800aa70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa74:	4b03      	ldr	r3, [pc, #12]	; (800aa84 <vTaskMissedYield+0x14>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	24001d1c 	.word	0x24001d1c

0800aa88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa90:	f000 f852 	bl	800ab38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa94:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <prvIdleTask+0x28>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d9f9      	bls.n	800aa90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <prvIdleTask+0x2c>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aaac:	e7f0      	b.n	800aa90 <prvIdleTask+0x8>
 800aaae:	bf00      	nop
 800aab0:	24001c0c 	.word	0x24001c0c
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	e00c      	b.n	800aade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4a12      	ldr	r2, [pc, #72]	; (800ab18 <prvInitialiseTaskLists+0x60>)
 800aad0:	4413      	add	r3, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe f9f3 	bl	8008ebe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3301      	adds	r3, #1
 800aadc:	607b      	str	r3, [r7, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b06      	cmp	r3, #6
 800aae2:	d9ef      	bls.n	800aac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aae4:	480d      	ldr	r0, [pc, #52]	; (800ab1c <prvInitialiseTaskLists+0x64>)
 800aae6:	f7fe f9ea 	bl	8008ebe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aaea:	480d      	ldr	r0, [pc, #52]	; (800ab20 <prvInitialiseTaskLists+0x68>)
 800aaec:	f7fe f9e7 	bl	8008ebe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaf0:	480c      	ldr	r0, [pc, #48]	; (800ab24 <prvInitialiseTaskLists+0x6c>)
 800aaf2:	f7fe f9e4 	bl	8008ebe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaf6:	480c      	ldr	r0, [pc, #48]	; (800ab28 <prvInitialiseTaskLists+0x70>)
 800aaf8:	f7fe f9e1 	bl	8008ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aafc:	480b      	ldr	r0, [pc, #44]	; (800ab2c <prvInitialiseTaskLists+0x74>)
 800aafe:	f7fe f9de 	bl	8008ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <prvInitialiseTaskLists+0x78>)
 800ab04:	4a05      	ldr	r2, [pc, #20]	; (800ab1c <prvInitialiseTaskLists+0x64>)
 800ab06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <prvInitialiseTaskLists+0x7c>)
 800ab0a:	4a05      	ldr	r2, [pc, #20]	; (800ab20 <prvInitialiseTaskLists+0x68>)
 800ab0c:	601a      	str	r2, [r3, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	24001c0c 	.word	0x24001c0c
 800ab1c:	24001c98 	.word	0x24001c98
 800ab20:	24001cac 	.word	0x24001cac
 800ab24:	24001cc8 	.word	0x24001cc8
 800ab28:	24001cdc 	.word	0x24001cdc
 800ab2c:	24001cf4 	.word	0x24001cf4
 800ab30:	24001cc0 	.word	0x24001cc0
 800ab34:	24001cc4 	.word	0x24001cc4

0800ab38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab3e:	e019      	b.n	800ab74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab40:	f000 fbc8 	bl	800b2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab44:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <prvCheckTasksWaitingTermination+0x50>)
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fa3e 	bl	8008fd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab56:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <prvCheckTasksWaitingTermination+0x54>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	4a0b      	ldr	r2, [pc, #44]	; (800ab8c <prvCheckTasksWaitingTermination+0x54>)
 800ab5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab6a:	f000 fbe3 	bl	800b334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f810 	bl	800ab94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab74:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <prvCheckTasksWaitingTermination+0x58>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e1      	bne.n	800ab40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab7c:	bf00      	nop
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	24001cdc 	.word	0x24001cdc
 800ab8c:	24001d08 	.word	0x24001d08
 800ab90:	24001cf0 	.word	0x24001cf0

0800ab94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	334c      	adds	r3, #76	; 0x4c
 800aba0:	4618      	mov	r0, r3
 800aba2:	f010 fa23 	bl	801afec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d108      	bne.n	800abc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fd7b 	bl	800b6b0 <vPortFree>
				vPortFree( pxTCB );
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fd78 	bl	800b6b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abc0:	e018      	b.n	800abf4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d103      	bne.n	800abd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fd6f 	bl	800b6b0 <vPortFree>
	}
 800abd2:	e00f      	b.n	800abf4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d00a      	beq.n	800abf4 <prvDeleteTCB+0x60>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	60fb      	str	r3, [r7, #12]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <prvDeleteTCB+0x5e>
	}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <prvResetNextTaskUnblockTime+0x38>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d104      	bne.n	800ac16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <prvResetNextTaskUnblockTime+0x3c>)
 800ac0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac14:	e008      	b.n	800ac28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <prvResetNextTaskUnblockTime+0x38>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4a04      	ldr	r2, [pc, #16]	; (800ac38 <prvResetNextTaskUnblockTime+0x3c>)
 800ac26:	6013      	str	r3, [r2, #0]
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	24001cc0 	.word	0x24001cc0
 800ac38:	24001d28 	.word	0x24001d28

0800ac3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac42:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <xTaskGetSchedulerState+0x34>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	e008      	b.n	800ac62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac50:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <xTaskGetSchedulerState+0x38>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	607b      	str	r3, [r7, #4]
 800ac5c:	e001      	b.n	800ac62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac62:	687b      	ldr	r3, [r7, #4]
	}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	24001d14 	.word	0x24001d14
 800ac74:	24001d30 	.word	0x24001d30

0800ac78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d05e      	beq.n	800ad4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	4b31      	ldr	r3, [pc, #196]	; (800ad58 <xTaskPriorityInherit+0xe0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d24e      	bcs.n	800ad3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	db06      	blt.n	800acb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca4:	4b2c      	ldr	r3, [pc, #176]	; (800ad58 <xTaskPriorityInherit+0xe0>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f1c3 0207 	rsb	r2, r3, #7
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6959      	ldr	r1, [r3, #20]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4a26      	ldr	r2, [pc, #152]	; (800ad5c <xTaskPriorityInherit+0xe4>)
 800acc4:	4413      	add	r3, r2
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d12f      	bne.n	800ad2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe f97f 	bl	8008fd2 <uxListRemove>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10a      	bne.n	800acf0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	2201      	movs	r2, #1
 800ace0:	fa02 f303 	lsl.w	r3, r2, r3
 800ace4:	43da      	mvns	r2, r3
 800ace6:	4b1e      	ldr	r3, [pc, #120]	; (800ad60 <xTaskPriorityInherit+0xe8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4013      	ands	r3, r2
 800acec:	4a1c      	ldr	r2, [pc, #112]	; (800ad60 <xTaskPriorityInherit+0xe8>)
 800acee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <xTaskPriorityInherit+0xe0>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfe:	2201      	movs	r2, #1
 800ad00:	409a      	lsls	r2, r3
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <xTaskPriorityInherit+0xe8>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	4a15      	ldr	r2, [pc, #84]	; (800ad60 <xTaskPriorityInherit+0xe8>)
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <xTaskPriorityInherit+0xe4>)
 800ad1a:	441a      	add	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fe f8f8 	bl	8008f18 <vListInsertEnd>
 800ad28:	e004      	b.n	800ad34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <xTaskPriorityInherit+0xe0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	e008      	b.n	800ad4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <xTaskPriorityInherit+0xe0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d201      	bcs.n	800ad4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	24001c08 	.word	0x24001c08
 800ad5c:	24001c0c 	.word	0x24001c0c
 800ad60:	24001d10 	.word	0x24001d10

0800ad64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d06e      	beq.n	800ae58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad7a:	4b3a      	ldr	r3, [pc, #232]	; (800ae64 <xTaskPriorityDisinherit+0x100>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d00a      	beq.n	800ad9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	60fb      	str	r3, [r7, #12]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	60bb      	str	r3, [r7, #8]
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adbc:	1e5a      	subs	r2, r3, #1
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adca:	429a      	cmp	r2, r3
 800adcc:	d044      	beq.n	800ae58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800add2:	2b00      	cmp	r3, #0
 800add4:	d140      	bne.n	800ae58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	3304      	adds	r3, #4
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe f8f9 	bl	8008fd2 <uxListRemove>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d115      	bne.n	800ae12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adea:	491f      	ldr	r1, [pc, #124]	; (800ae68 <xTaskPriorityDisinherit+0x104>)
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xTaskPriorityDisinherit+0xae>
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	2201      	movs	r2, #1
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	43da      	mvns	r2, r3
 800ae08:	4b18      	ldr	r3, [pc, #96]	; (800ae6c <xTaskPriorityDisinherit+0x108>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	4a17      	ldr	r2, [pc, #92]	; (800ae6c <xTaskPriorityDisinherit+0x108>)
 800ae10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1e:	f1c3 0207 	rsb	r2, r3, #7
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	409a      	lsls	r2, r3
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <xTaskPriorityDisinherit+0x108>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	4a0d      	ldr	r2, [pc, #52]	; (800ae6c <xTaskPriorityDisinherit+0x108>)
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4a08      	ldr	r2, [pc, #32]	; (800ae68 <xTaskPriorityDisinherit+0x104>)
 800ae46:	441a      	add	r2, r3
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f7fe f862 	bl	8008f18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae58:	697b      	ldr	r3, [r7, #20]
	}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	24001c08 	.word	0x24001c08
 800ae68:	24001c0c 	.word	0x24001c0c
 800ae6c:	24001d10 	.word	0x24001d10

0800ae70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d077      	beq.n	800af78 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d902      	bls.n	800aeb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e002      	b.n	800aebc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d058      	beq.n	800af78 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d153      	bne.n	800af78 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aed0:	4b2b      	ldr	r3, [pc, #172]	; (800af80 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d10a      	bne.n	800aef0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	60bb      	str	r3, [r7, #8]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	69fa      	ldr	r2, [r7, #28]
 800aefa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	db04      	blt.n	800af0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f1c3 0207 	rsb	r2, r3, #7
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	6959      	ldr	r1, [r3, #20]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4a19      	ldr	r2, [pc, #100]	; (800af84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800af1e:	4413      	add	r3, r2
 800af20:	4299      	cmp	r1, r3
 800af22:	d129      	bne.n	800af78 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	3304      	adds	r3, #4
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe f852 	bl	8008fd2 <uxListRemove>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	2201      	movs	r2, #1
 800af3a:	fa02 f303 	lsl.w	r3, r2, r3
 800af3e:	43da      	mvns	r2, r3
 800af40:	4b11      	ldr	r3, [pc, #68]	; (800af88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4013      	ands	r3, r2
 800af46:	4a10      	ldr	r2, [pc, #64]	; (800af88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800af48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	2201      	movs	r2, #1
 800af50:	409a      	lsls	r2, r3
 800af52:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4313      	orrs	r3, r2
 800af58:	4a0b      	ldr	r2, [pc, #44]	; (800af88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4a06      	ldr	r2, [pc, #24]	; (800af84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800af6a:	441a      	add	r2, r3
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	3304      	adds	r3, #4
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fd ffd0 	bl	8008f18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af78:	bf00      	nop
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	24001c08 	.word	0x24001c08
 800af84:	24001c0c 	.word	0x24001c0c
 800af88:	24001d10 	.word	0x24001d10

0800af8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d004      	beq.n	800afa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af9e:	3201      	adds	r2, #1
 800afa0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800afa2:	4b03      	ldr	r3, [pc, #12]	; (800afb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800afa4:	681b      	ldr	r3, [r3, #0]
	}
 800afa6:	4618      	mov	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	24001c08 	.word	0x24001c08

0800afb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afbe:	4b29      	ldr	r3, [pc, #164]	; (800b064 <prvAddCurrentTaskToDelayedList+0xb0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afc4:	4b28      	ldr	r3, [pc, #160]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3304      	adds	r3, #4
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe f801 	bl	8008fd2 <uxListRemove>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	2201      	movs	r2, #1
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	43da      	mvns	r2, r3
 800afe4:	4b21      	ldr	r3, [pc, #132]	; (800b06c <prvAddCurrentTaskToDelayedList+0xb8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4013      	ands	r3, r2
 800afea:	4a20      	ldr	r2, [pc, #128]	; (800b06c <prvAddCurrentTaskToDelayedList+0xb8>)
 800afec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d10a      	bne.n	800b00c <prvAddCurrentTaskToDelayedList+0x58>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800affc:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	481a      	ldr	r0, [pc, #104]	; (800b070 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b006:	f7fd ff87 	bl	8008f18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b00a:	e026      	b.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4413      	add	r3, r2
 800b012:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b014:	4b14      	ldr	r3, [pc, #80]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	429a      	cmp	r2, r3
 800b022:	d209      	bcs.n	800b038 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b024:	4b13      	ldr	r3, [pc, #76]	; (800b074 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fd ff95 	bl	8008f60 <vListInsert>
}
 800b036:	e010      	b.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b038:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f7fd ff8b 	bl	8008f60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b04a:	4b0c      	ldr	r3, [pc, #48]	; (800b07c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	d202      	bcs.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b054:	4a09      	ldr	r2, [pc, #36]	; (800b07c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	6013      	str	r3, [r2, #0]
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	24001d0c 	.word	0x24001d0c
 800b068:	24001c08 	.word	0x24001c08
 800b06c:	24001d10 	.word	0x24001d10
 800b070:	24001cf4 	.word	0x24001cf4
 800b074:	24001cc4 	.word	0x24001cc4
 800b078:	24001cc0 	.word	0x24001cc0
 800b07c:	24001d28 	.word	0x24001d28

0800b080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3b04      	subs	r3, #4
 800b090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3b04      	subs	r3, #4
 800b09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f023 0201 	bic.w	r2, r3, #1
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3b04      	subs	r3, #4
 800b0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0b0:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <pxPortInitialiseStack+0x64>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3b14      	subs	r3, #20
 800b0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3b04      	subs	r3, #4
 800b0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f06f 0202 	mvn.w	r2, #2
 800b0ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3b20      	subs	r3, #32
 800b0d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	0800b0e9 	.word	0x0800b0e9

0800b0e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0f2:	4b12      	ldr	r3, [pc, #72]	; (800b13c <prvTaskExitError+0x54>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d00a      	beq.n	800b112 <prvTaskExitError+0x2a>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <prvTaskExitError+0x28>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	60bb      	str	r3, [r7, #8]
}
 800b124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b126:	bf00      	nop
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0fc      	beq.n	800b128 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b12e:	bf00      	nop
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	24000024 	.word	0x24000024

0800b140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <pxCurrentTCBConst2>)
 800b142:	6819      	ldr	r1, [r3, #0]
 800b144:	6808      	ldr	r0, [r1, #0]
 800b146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	f380 8809 	msr	PSP, r0
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f04f 0000 	mov.w	r0, #0
 800b156:	f380 8811 	msr	BASEPRI, r0
 800b15a:	4770      	bx	lr
 800b15c:	f3af 8000 	nop.w

0800b160 <pxCurrentTCBConst2>:
 800b160:	24001c08 	.word	0x24001c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop

0800b168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b168:	4808      	ldr	r0, [pc, #32]	; (800b18c <prvPortStartFirstTask+0x24>)
 800b16a:	6800      	ldr	r0, [r0, #0]
 800b16c:	6800      	ldr	r0, [r0, #0]
 800b16e:	f380 8808 	msr	MSP, r0
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f380 8814 	msr	CONTROL, r0
 800b17a:	b662      	cpsie	i
 800b17c:	b661      	cpsie	f
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	df00      	svc	0
 800b188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b18a:	bf00      	nop
 800b18c:	e000ed08 	.word	0xe000ed08

0800b190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b196:	4b46      	ldr	r3, [pc, #280]	; (800b2b0 <xPortStartScheduler+0x120>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a46      	ldr	r2, [pc, #280]	; (800b2b4 <xPortStartScheduler+0x124>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d10a      	bne.n	800b1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	; (800b2b0 <xPortStartScheduler+0x120>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a3f      	ldr	r2, [pc, #252]	; (800b2b8 <xPortStartScheduler+0x128>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d10a      	bne.n	800b1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	60fb      	str	r3, [r7, #12]
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1d6:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <xPortStartScheduler+0x12c>)
 800b1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	22ff      	movs	r2, #255	; 0xff
 800b1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	4b31      	ldr	r3, [pc, #196]	; (800b2c0 <xPortStartScheduler+0x130>)
 800b1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1fe:	4b31      	ldr	r3, [pc, #196]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b200:	2207      	movs	r2, #7
 800b202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b204:	e009      	b.n	800b21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b206:	4b2f      	ldr	r3, [pc, #188]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4a2d      	ldr	r2, [pc, #180]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	b2db      	uxtb	r3, r3
 800b218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b21a:	78fb      	ldrb	r3, [r7, #3]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b222:	2b80      	cmp	r3, #128	; 0x80
 800b224:	d0ef      	beq.n	800b206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b226:	4b27      	ldr	r3, [pc, #156]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f1c3 0307 	rsb	r3, r3, #7
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d00a      	beq.n	800b248 <xPortStartScheduler+0xb8>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	60bb      	str	r3, [r7, #8]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b248:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	021b      	lsls	r3, r3, #8
 800b24e:	4a1d      	ldr	r2, [pc, #116]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b252:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b25a:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <xPortStartScheduler+0x134>)
 800b25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	b2da      	uxtb	r2, r3
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b266:	4b18      	ldr	r3, [pc, #96]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b272:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a14      	ldr	r2, [pc, #80]	; (800b2c8 <xPortStartScheduler+0x138>)
 800b278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b27e:	f000 f8dd 	bl	800b43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <xPortStartScheduler+0x13c>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b288:	f000 f8fc 	bl	800b484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b28c:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <xPortStartScheduler+0x140>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a0f      	ldr	r2, [pc, #60]	; (800b2d0 <xPortStartScheduler+0x140>)
 800b292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b298:	f7ff ff66 	bl	800b168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b29c:	f7ff fa62 	bl	800a764 <vTaskSwitchContext>
	prvTaskExitError();
 800b2a0:	f7ff ff22 	bl	800b0e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	e000ed00 	.word	0xe000ed00
 800b2b4:	410fc271 	.word	0x410fc271
 800b2b8:	410fc270 	.word	0x410fc270
 800b2bc:	e000e400 	.word	0xe000e400
 800b2c0:	24001d34 	.word	0x24001d34
 800b2c4:	24001d38 	.word	0x24001d38
 800b2c8:	e000ed20 	.word	0xe000ed20
 800b2cc:	24000024 	.word	0x24000024
 800b2d0:	e000ef34 	.word	0xe000ef34

0800b2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	607b      	str	r3, [r7, #4]
}
 800b2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <vPortEnterCritical+0x58>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <vPortEnterCritical+0x58>)
 800b2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2f8:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <vPortEnterCritical+0x58>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10f      	bne.n	800b320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <vPortEnterCritical+0x5c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <vPortEnterCritical+0x4c>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	603b      	str	r3, [r7, #0]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <vPortEnterCritical+0x4a>
	}
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	24000024 	.word	0x24000024
 800b330:	e000ed04 	.word	0xe000ed04

0800b334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <vPortExitCritical+0x50>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <vPortExitCritical+0x24>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	607b      	str	r3, [r7, #4]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b358:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <vPortExitCritical+0x50>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <vPortExitCritical+0x50>)
 800b360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b362:	4b08      	ldr	r3, [pc, #32]	; (800b384 <vPortExitCritical+0x50>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <vPortExitCritical+0x42>
 800b36a:	2300      	movs	r3, #0
 800b36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f383 8811 	msr	BASEPRI, r3
}
 800b374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	24000024 	.word	0x24000024
	...

0800b390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b390:	f3ef 8009 	mrs	r0, PSP
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <pxCurrentTCBConst>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f01e 0f10 	tst.w	lr, #16
 800b3a0:	bf08      	it	eq
 800b3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3b4:	f380 8811 	msr	BASEPRI, r0
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f7ff f9d0 	bl	800a764 <vTaskSwitchContext>
 800b3c4:	f04f 0000 	mov.w	r0, #0
 800b3c8:	f380 8811 	msr	BASEPRI, r0
 800b3cc:	bc09      	pop	{r0, r3}
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	6808      	ldr	r0, [r1, #0]
 800b3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d6:	f01e 0f10 	tst.w	lr, #16
 800b3da:	bf08      	it	eq
 800b3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3e0:	f380 8809 	msr	PSP, r0
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst>:
 800b3f0:	24001c08 	.word	0x24001c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	607b      	str	r3, [r7, #4]
}
 800b410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b412:	f7ff f8ef 	bl	800a5f4 <xTaskIncrementTick>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b41c:	4b06      	ldr	r3, [pc, #24]	; (800b438 <SysTick_Handler+0x40>)
 800b41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	f383 8811 	msr	BASEPRI, r3
}
 800b42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <vPortSetupTimerInterrupt+0x38>)
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <vPortSetupTimerInterrupt+0x3c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <vPortSetupTimerInterrupt+0x40>)
 800b452:	fba2 2303 	umull	r2, r3, r2, r3
 800b456:	099b      	lsrs	r3, r3, #6
 800b458:	4a09      	ldr	r2, [pc, #36]	; (800b480 <vPortSetupTimerInterrupt+0x44>)
 800b45a:	3b01      	subs	r3, #1
 800b45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b460:	2207      	movs	r2, #7
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	e000e010 	.word	0xe000e010
 800b474:	e000e018 	.word	0xe000e018
 800b478:	24000000 	.word	0x24000000
 800b47c:	10624dd3 	.word	0x10624dd3
 800b480:	e000e014 	.word	0xe000e014

0800b484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b494 <vPortEnableVFP+0x10>
 800b488:	6801      	ldr	r1, [r0, #0]
 800b48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b48e:	6001      	str	r1, [r0, #0]
 800b490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b492:	bf00      	nop
 800b494:	e000ed88 	.word	0xe000ed88

0800b498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b49e:	f3ef 8305 	mrs	r3, IPSR
 800b4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b0f      	cmp	r3, #15
 800b4a8:	d914      	bls.n	800b4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4aa:	4a17      	ldr	r2, [pc, #92]	; (800b508 <vPortValidateInterruptPriority+0x70>)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4b4:	4b15      	ldr	r3, [pc, #84]	; (800b50c <vPortValidateInterruptPriority+0x74>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	7afa      	ldrb	r2, [r7, #11]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d20a      	bcs.n	800b4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
 800b4d2:	e7fe      	b.n	800b4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4d4:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <vPortValidateInterruptPriority+0x78>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <vPortValidateInterruptPriority+0x7c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d90a      	bls.n	800b4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	603b      	str	r3, [r7, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <vPortValidateInterruptPriority+0x60>
	}
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	e000e3f0 	.word	0xe000e3f0
 800b50c:	24001d34 	.word	0x24001d34
 800b510:	e000ed0c 	.word	0xe000ed0c
 800b514:	24001d38 	.word	0x24001d38

0800b518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	; 0x28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b524:	f7fe ff9a 	bl	800a45c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b528:	4b5b      	ldr	r3, [pc, #364]	; (800b698 <pvPortMalloc+0x180>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b530:	f000 f920 	bl	800b774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b534:	4b59      	ldr	r3, [pc, #356]	; (800b69c <pvPortMalloc+0x184>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f040 8093 	bne.w	800b668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01d      	beq.n	800b584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b548:	2208      	movs	r2, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	2b00      	cmp	r3, #0
 800b558:	d014      	beq.n	800b584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f023 0307 	bic.w	r3, r3, #7
 800b560:	3308      	adds	r3, #8
 800b562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f003 0307 	and.w	r3, r3, #7
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <pvPortMalloc+0x6c>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	617b      	str	r3, [r7, #20]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d06e      	beq.n	800b668 <pvPortMalloc+0x150>
 800b58a:	4b45      	ldr	r3, [pc, #276]	; (800b6a0 <pvPortMalloc+0x188>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d869      	bhi.n	800b668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b594:	4b43      	ldr	r3, [pc, #268]	; (800b6a4 <pvPortMalloc+0x18c>)
 800b596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b598:	4b42      	ldr	r3, [pc, #264]	; (800b6a4 <pvPortMalloc+0x18c>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b59e:	e004      	b.n	800b5aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d903      	bls.n	800b5bc <pvPortMalloc+0xa4>
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f1      	bne.n	800b5a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5bc:	4b36      	ldr	r3, [pc, #216]	; (800b698 <pvPortMalloc+0x180>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d050      	beq.n	800b668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2208      	movs	r2, #8
 800b5cc:	4413      	add	r3, r2
 800b5ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d91f      	bls.n	800b628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <pvPortMalloc+0xf8>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	613b      	str	r3, [r7, #16]
}
 800b60c:	bf00      	nop
 800b60e:	e7fe      	b.n	800b60e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b622:	69b8      	ldr	r0, [r7, #24]
 800b624:	f000 f908 	bl	800b838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b628:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <pvPortMalloc+0x188>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	4a1b      	ldr	r2, [pc, #108]	; (800b6a0 <pvPortMalloc+0x188>)
 800b634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b636:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <pvPortMalloc+0x188>)
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <pvPortMalloc+0x190>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d203      	bcs.n	800b64a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b642:	4b17      	ldr	r3, [pc, #92]	; (800b6a0 <pvPortMalloc+0x188>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a18      	ldr	r2, [pc, #96]	; (800b6a8 <pvPortMalloc+0x190>)
 800b648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b13      	ldr	r3, [pc, #76]	; (800b69c <pvPortMalloc+0x184>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	431a      	orrs	r2, r3
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b65e:	4b13      	ldr	r3, [pc, #76]	; (800b6ac <pvPortMalloc+0x194>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	4a11      	ldr	r2, [pc, #68]	; (800b6ac <pvPortMalloc+0x194>)
 800b666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b668:	f7fe ff06 	bl	800a478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00a      	beq.n	800b68c <pvPortMalloc+0x174>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	60fb      	str	r3, [r7, #12]
}
 800b688:	bf00      	nop
 800b68a:	e7fe      	b.n	800b68a <pvPortMalloc+0x172>
	return pvReturn;
 800b68c:	69fb      	ldr	r3, [r7, #28]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3728      	adds	r7, #40	; 0x28
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	24009d44 	.word	0x24009d44
 800b69c:	24009d58 	.word	0x24009d58
 800b6a0:	24009d48 	.word	0x24009d48
 800b6a4:	24009d3c 	.word	0x24009d3c
 800b6a8:	24009d4c 	.word	0x24009d4c
 800b6ac:	24009d50 	.word	0x24009d50

0800b6b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d04d      	beq.n	800b75e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6c2:	2308      	movs	r3, #8
 800b6c4:	425b      	negs	r3, r3
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	4b24      	ldr	r3, [pc, #144]	; (800b768 <vPortFree+0xb8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <vPortFree+0x44>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	60fb      	str	r3, [r7, #12]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00a      	beq.n	800b712 <vPortFree+0x62>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	60bb      	str	r3, [r7, #8]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	4b14      	ldr	r3, [pc, #80]	; (800b768 <vPortFree+0xb8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d01e      	beq.n	800b75e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d11a      	bne.n	800b75e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	4b0e      	ldr	r3, [pc, #56]	; (800b768 <vPortFree+0xb8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	43db      	mvns	r3, r3
 800b732:	401a      	ands	r2, r3
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b738:	f7fe fe90 	bl	800a45c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <vPortFree+0xbc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4413      	add	r3, r2
 800b746:	4a09      	ldr	r2, [pc, #36]	; (800b76c <vPortFree+0xbc>)
 800b748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b74a:	6938      	ldr	r0, [r7, #16]
 800b74c:	f000 f874 	bl	800b838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b750:	4b07      	ldr	r3, [pc, #28]	; (800b770 <vPortFree+0xc0>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3301      	adds	r3, #1
 800b756:	4a06      	ldr	r2, [pc, #24]	; (800b770 <vPortFree+0xc0>)
 800b758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b75a:	f7fe fe8d 	bl	800a478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b75e:	bf00      	nop
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	24009d58 	.word	0x24009d58
 800b76c:	24009d48 	.word	0x24009d48
 800b770:	24009d54 	.word	0x24009d54

0800b774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b77a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b77e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b780:	4b27      	ldr	r3, [pc, #156]	; (800b820 <prvHeapInit+0xac>)
 800b782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00c      	beq.n	800b7a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3307      	adds	r3, #7
 800b792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0307 	bic.w	r3, r3, #7
 800b79a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	4a1f      	ldr	r2, [pc, #124]	; (800b820 <prvHeapInit+0xac>)
 800b7a4:	4413      	add	r3, r2
 800b7a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7ac:	4a1d      	ldr	r2, [pc, #116]	; (800b824 <prvHeapInit+0xb0>)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7b2:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <prvHeapInit+0xb0>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	4413      	add	r3, r2
 800b7be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f023 0307 	bic.w	r3, r3, #7
 800b7ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4a15      	ldr	r2, [pc, #84]	; (800b828 <prvHeapInit+0xb4>)
 800b7d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b7d6:	4b14      	ldr	r3, [pc, #80]	; (800b828 <prvHeapInit+0xb4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b7de:	4b12      	ldr	r3, [pc, #72]	; (800b828 <prvHeapInit+0xb4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	1ad2      	subs	r2, r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <prvHeapInit+0xb4>)
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4a0a      	ldr	r2, [pc, #40]	; (800b82c <prvHeapInit+0xb8>)
 800b802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	4a09      	ldr	r2, [pc, #36]	; (800b830 <prvHeapInit+0xbc>)
 800b80a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <prvHeapInit+0xc0>)
 800b80e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	24001d3c 	.word	0x24001d3c
 800b824:	24009d3c 	.word	0x24009d3c
 800b828:	24009d44 	.word	0x24009d44
 800b82c:	24009d4c 	.word	0x24009d4c
 800b830:	24009d48 	.word	0x24009d48
 800b834:	24009d58 	.word	0x24009d58

0800b838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b840:	4b28      	ldr	r3, [pc, #160]	; (800b8e4 <prvInsertBlockIntoFreeList+0xac>)
 800b842:	60fb      	str	r3, [r7, #12]
 800b844:	e002      	b.n	800b84c <prvInsertBlockIntoFreeList+0x14>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	429a      	cmp	r2, r3
 800b854:	d8f7      	bhi.n	800b846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	4413      	add	r3, r2
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d108      	bne.n	800b87a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	441a      	add	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	441a      	add	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d118      	bne.n	800b8c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d00d      	beq.n	800b8b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	441a      	add	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	e008      	b.n	800b8c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	e003      	b.n	800b8c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d002      	beq.n	800b8d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8d6:	bf00      	nop
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	24009d3c 	.word	0x24009d3c
 800b8e8:	24009d44 	.word	0x24009d44

0800b8ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	330c      	adds	r3, #12
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 ffa9 	bl	800d858 <tcpip_send_msg_wait_sem>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d103      	bne.n	800b91a <netconn_apimsg+0x2e>
    return apimsg->err;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b918:	e001      	b.n	800b91e <netconn_apimsg+0x32>
  }
  return err;
 800b91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08c      	sub	sp, #48	; 0x30
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	603a      	str	r2, [r7, #0]
 800b932:	71fb      	strb	r3, [r7, #7]
 800b934:	460b      	mov	r3, r1
 800b936:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 ff21 	bl	800c784 <netconn_alloc>
 800b942:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d054      	beq.n	800b9f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b94a:	79bb      	ldrb	r3, [r7, #6]
 800b94c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b952:	f107 0308 	add.w	r3, r7, #8
 800b956:	4619      	mov	r1, r3
 800b958:	4829      	ldr	r0, [pc, #164]	; (800ba00 <netconn_new_with_proto_and_callback+0xd8>)
 800b95a:	f7ff ffc7 	bl	800b8ec <netconn_apimsg>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800b964:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d043      	beq.n	800b9f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <netconn_new_with_proto_and_callback+0x58>
 800b974:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <netconn_new_with_proto_and_callback+0xdc>)
 800b976:	22a3      	movs	r2, #163	; 0xa3
 800b978:	4923      	ldr	r1, [pc, #140]	; (800ba08 <netconn_new_with_proto_and_callback+0xe0>)
 800b97a:	4824      	ldr	r0, [pc, #144]	; (800ba0c <netconn_new_with_proto_and_callback+0xe4>)
 800b97c:	f00f fad0 	bl	801af20 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	3310      	adds	r3, #16
 800b984:	4618      	mov	r0, r3
 800b986:	f00e fff6 	bl	801a976 <sys_mbox_valid>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <netconn_new_with_proto_and_callback+0x74>
 800b990:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <netconn_new_with_proto_and_callback+0xdc>)
 800b992:	22a4      	movs	r2, #164	; 0xa4
 800b994:	491e      	ldr	r1, [pc, #120]	; (800ba10 <netconn_new_with_proto_and_callback+0xe8>)
 800b996:	481d      	ldr	r0, [pc, #116]	; (800ba0c <netconn_new_with_proto_and_callback+0xe4>)
 800b998:	f00f fac2 	bl	801af20 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	3314      	adds	r3, #20
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f00e ffe8 	bl	801a976 <sys_mbox_valid>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <netconn_new_with_proto_and_callback+0x90>
 800b9ac:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <netconn_new_with_proto_and_callback+0xdc>)
 800b9ae:	22a6      	movs	r2, #166	; 0xa6
 800b9b0:	4918      	ldr	r1, [pc, #96]	; (800ba14 <netconn_new_with_proto_and_callback+0xec>)
 800b9b2:	4816      	ldr	r0, [pc, #88]	; (800ba0c <netconn_new_with_proto_and_callback+0xe4>)
 800b9b4:	f00f fab4 	bl	801af20 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	330c      	adds	r3, #12
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f00f f86b 	bl	801aa98 <sys_sem_valid>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d105      	bne.n	800b9d4 <netconn_new_with_proto_and_callback+0xac>
 800b9c8:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <netconn_new_with_proto_and_callback+0xdc>)
 800b9ca:	22a9      	movs	r2, #169	; 0xa9
 800b9cc:	4912      	ldr	r1, [pc, #72]	; (800ba18 <netconn_new_with_proto_and_callback+0xf0>)
 800b9ce:	480f      	ldr	r0, [pc, #60]	; (800ba0c <netconn_new_with_proto_and_callback+0xe4>)
 800b9d0:	f00f faa6 	bl	801af20 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d6:	330c      	adds	r3, #12
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f00f f850 	bl	801aa7e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	3310      	adds	r3, #16
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f00e ff40 	bl	801a868 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b9e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9ea:	2007      	movs	r0, #7
 800b9ec:	f002 fd9a 	bl	800e524 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	e000      	b.n	800b9f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3730      	adds	r7, #48	; 0x30
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800c759 	.word	0x0800c759
 800ba04:	0801be6c 	.word	0x0801be6c
 800ba08:	0801bea0 	.word	0x0801bea0
 800ba0c:	0801bec4 	.word	0x0801bec4
 800ba10:	0801beec 	.word	0x0801beec
 800ba14:	0801bf04 	.word	0x0801bf04
 800ba18:	0801bf28 	.word	0x0801bf28

0800ba1c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08c      	sub	sp, #48	; 0x30
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e014      	b.n	800ba58 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ba32:	2329      	movs	r3, #41	; 0x29
 800ba34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ba36:	f107 030c 	add.w	r3, r7, #12
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4808      	ldr	r0, [pc, #32]	; (800ba60 <netconn_prepare_delete+0x44>)
 800ba3e:	f7ff ff55 	bl	800b8ec <netconn_apimsg>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ba48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <netconn_prepare_delete+0x3a>
    return err;
 800ba50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba54:	e000      	b.n	800ba58 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3730      	adds	r7, #48	; 0x30
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	0800ccbd 	.word	0x0800ccbd

0800ba64 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <netconn_delete+0x12>
    return ERR_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e00d      	b.n	800ba92 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff ffd0 	bl	800ba1c <netconn_prepare_delete>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ba80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <netconn_delete+0x2a>
    netconn_free(conn);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fee9 	bl	800c860 <netconn_free>
  }
  return err;
 800ba8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08e      	sub	sp, #56	; 0x38
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	4613      	mov	r3, r2
 800baa8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <netconn_bind+0x28>
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <netconn_bind+0x5c>)
 800bab2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800bab6:	4911      	ldr	r1, [pc, #68]	; (800bafc <netconn_bind+0x60>)
 800bab8:	4811      	ldr	r0, [pc, #68]	; (800bb00 <netconn_bind+0x64>)
 800baba:	f00f fa31 	bl	801af20 <iprintf>
 800babe:	f06f 030f 	mvn.w	r3, #15
 800bac2:	e015      	b.n	800baf0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800baca:	4b0e      	ldr	r3, [pc, #56]	; (800bb04 <netconn_bind+0x68>)
 800bacc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800bada:	f107 0314 	add.w	r3, r7, #20
 800bade:	4619      	mov	r1, r3
 800bae0:	4809      	ldr	r0, [pc, #36]	; (800bb08 <netconn_bind+0x6c>)
 800bae2:	f7ff ff03 	bl	800b8ec <netconn_apimsg>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800baec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3738      	adds	r7, #56	; 0x38
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	0801be6c 	.word	0x0801be6c
 800bafc:	0801bfa4 	.word	0x0801bfa4
 800bb00:	0801bec4 	.word	0x0801bec4
 800bb04:	0801f844 	.word	0x0801f844
 800bb08:	0800ce85 	.word	0x0800ce85

0800bb0c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	4613      	mov	r3, r2
 800bb18:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <netconn_recv_data+0x2c>
 800bb24:	4b58      	ldr	r3, [pc, #352]	; (800bc88 <netconn_recv_data+0x17c>)
 800bb26:	f44f 7212 	mov.w	r2, #584	; 0x248
 800bb2a:	4958      	ldr	r1, [pc, #352]	; (800bc8c <netconn_recv_data+0x180>)
 800bb2c:	4858      	ldr	r0, [pc, #352]	; (800bc90 <netconn_recv_data+0x184>)
 800bb2e:	f00f f9f7 	bl	801af20 <iprintf>
 800bb32:	f06f 030f 	mvn.w	r3, #15
 800bb36:	e0a2      	b.n	800bc7e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <netconn_recv_data+0x4c>
 800bb44:	4b50      	ldr	r3, [pc, #320]	; (800bc88 <netconn_recv_data+0x17c>)
 800bb46:	f240 224a 	movw	r2, #586	; 0x24a
 800bb4a:	4952      	ldr	r1, [pc, #328]	; (800bc94 <netconn_recv_data+0x188>)
 800bb4c:	4850      	ldr	r0, [pc, #320]	; (800bc90 <netconn_recv_data+0x184>)
 800bb4e:	f00f f9e7 	bl	801af20 <iprintf>
 800bb52:	f06f 030f 	mvn.w	r3, #15
 800bb56:	e092      	b.n	800bc7e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3310      	adds	r3, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f00e ff0a 	bl	801a976 <sys_mbox_valid>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10e      	bne.n	800bb86 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 fa45 	bl	800bff8 <netconn_err>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bb72:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bb7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bb7e:	e07e      	b.n	800bc7e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bb80:	f06f 030a 	mvn.w	r3, #10
 800bb84:	e07b      	b.n	800bc7e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	7f1b      	ldrb	r3, [r3, #28]
 800bb8a:	f003 0302 	and.w	r3, r3, #2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10f      	bne.n	800bbb2 <netconn_recv_data+0xa6>
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	f003 0304 	and.w	r3, r3, #4
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	7f1b      	ldrb	r3, [r3, #28]
 800bba0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d104      	bne.n	800bbb2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d023      	beq.n	800bbfa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	f107 0218 	add.w	r2, r7, #24
 800bbba:	4611      	mov	r1, r2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f00e febe 	bl	801a93e <sys_arch_mbox_tryfetch>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d11f      	bne.n	800bc0a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 fa14 	bl	800bff8 <netconn_err>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800bbd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800bbdc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbe0:	e04d      	b.n	800bc7e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	7f1b      	ldrb	r3, [r3, #28]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800bbee:	f06f 030a 	mvn.w	r3, #10
 800bbf2:	e044      	b.n	800bc7e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800bbf4:	f06f 0306 	mvn.w	r3, #6
 800bbf8:	e041      	b.n	800bc7e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3310      	adds	r3, #16
 800bbfe:	f107 0118 	add.w	r1, r7, #24
 800bc02:	2200      	movs	r2, #0
 800bc04:	4618      	mov	r0, r3
 800bc06:	f00e fe5b 	bl	801a8c0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc12:	2b10      	cmp	r3, #16
 800bc14:	d117      	bne.n	800bc46 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	f107 0217 	add.w	r2, r7, #23
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 fa3c 	bl	800c09c <lwip_netconn_is_err_msg>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800bc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc2e:	f113 0f0f 	cmn.w	r3, #15
 800bc32:	d101      	bne.n	800bc38 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	e022      	b.n	800bc7e <netconn_recv_data+0x172>
      }
      return err;
 800bc38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc3c:	e01f      	b.n	800bc7e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	891b      	ldrh	r3, [r3, #8]
 800bc42:	83fb      	strh	r3, [r7, #30]
 800bc44:	e00d      	b.n	800bc62 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <netconn_recv_data+0x14e>
 800bc4c:	4b0e      	ldr	r3, [pc, #56]	; (800bc88 <netconn_recv_data+0x17c>)
 800bc4e:	f240 2291 	movw	r2, #657	; 0x291
 800bc52:	4911      	ldr	r1, [pc, #68]	; (800bc98 <netconn_recv_data+0x18c>)
 800bc54:	480e      	ldr	r0, [pc, #56]	; (800bc90 <netconn_recv_data+0x184>)
 800bc56:	f00f f963 	bl	801af20 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	891b      	ldrh	r3, [r3, #8]
 800bc60:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <netconn_recv_data+0x16a>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	8bfa      	ldrh	r2, [r7, #30]
 800bc70:	2101      	movs	r1, #1
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	0801be6c 	.word	0x0801be6c
 800bc8c:	0801c084 	.word	0x0801c084
 800bc90:	0801bec4 	.word	0x0801bec4
 800bc94:	0801c0a4 	.word	0x0801c0a4
 800bc98:	0801c0c0 	.word	0x0801c0c0

0800bc9c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <netconn_tcp_recvd_msg+0x1e>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcb6:	2b10      	cmp	r3, #16
 800bcb8:	d009      	beq.n	800bcce <netconn_tcp_recvd_msg+0x32>
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <netconn_tcp_recvd_msg+0x50>)
 800bcbc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800bcc0:	490b      	ldr	r1, [pc, #44]	; (800bcf0 <netconn_tcp_recvd_msg+0x54>)
 800bcc2:	480c      	ldr	r0, [pc, #48]	; (800bcf4 <netconn_tcp_recvd_msg+0x58>)
 800bcc4:	f00f f92c 	bl	801af20 <iprintf>
 800bcc8:	f06f 030f 	mvn.w	r3, #15
 800bccc:	e00a      	b.n	800bce4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4806      	ldr	r0, [pc, #24]	; (800bcf8 <netconn_tcp_recvd_msg+0x5c>)
 800bcde:	f7ff fe05 	bl	800b8ec <netconn_apimsg>
 800bce2:	4603      	mov	r3, r0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	0801be6c 	.word	0x0801be6c
 800bcf0:	0801c0cc 	.word	0x0801c0cc
 800bcf4:	0801bec4 	.word	0x0801bec4
 800bcf8:	0800cf93 	.word	0x0800cf93

0800bcfc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b090      	sub	sp, #64	; 0x40
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3310      	adds	r3, #16
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f00e fe31 	bl	801a976 <sys_mbox_valid>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d102      	bne.n	800bd20 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800bd1a:	f06f 030a 	mvn.w	r3, #10
 800bd1e:	e06d      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	7f1b      	ldrb	r3, [r3, #28]
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	da07      	bge.n	800bd3a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	7f1b      	ldrb	r3, [r3, #28]
 800bd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800bd38:	e039      	b.n	800bdae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f7ff fee3 	bl	800bb0c <netconn_recv_data>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800bd4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800bd54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd58:	e050      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10e      	bne.n	800bd88 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <netconn_recv_data_tcp+0x7a>
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	891b      	ldrh	r3, [r3, #8]
 800bd74:	e000      	b.n	800bd78 <netconn_recv_data_tcp+0x7c>
 800bd76:	2301      	movs	r3, #1
 800bd78:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800bd7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd7c:	f107 0214 	add.w	r2, r7, #20
 800bd80:	4619      	mov	r1, r3
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7ff ff8a 	bl	800bc9c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d134      	bne.n	800bdf8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	f003 0310 	and.w	r3, r3, #16
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d009      	beq.n	800bdac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	7f1b      	ldrb	r3, [r3, #28]
 800bd9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800bda6:	f06f 0306 	mvn.w	r3, #6
 800bdaa:	e027      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800bdac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d005      	beq.n	800bdc2 <netconn_recv_data_tcp+0xc6>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10f      	bne.n	800bdea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 f914 	bl	800bff8 <netconn_err>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800bdd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <netconn_recv_data_tcp+0xe8>
          return err;
 800bdde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bde2:	e00b      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800bde4:	f06f 030d 	mvn.w	r3, #13
 800bde8:	e008      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800bdea:	2101      	movs	r1, #1
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 f8d3 	bl	800bf98 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800bdf2:	f06f 030e 	mvn.w	r3, #14
 800bdf6:	e001      	b.n	800bdfc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800bdf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3740      	adds	r7, #64	; 0x40
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d109      	bne.n	800be2c <netconn_recv+0x28>
 800be18:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <netconn_recv+0xe0>)
 800be1a:	f240 3263 	movw	r2, #867	; 0x363
 800be1e:	4932      	ldr	r1, [pc, #200]	; (800bee8 <netconn_recv+0xe4>)
 800be20:	4832      	ldr	r0, [pc, #200]	; (800beec <netconn_recv+0xe8>)
 800be22:	f00f f87d 	bl	801af20 <iprintf>
 800be26:	f06f 030f 	mvn.w	r3, #15
 800be2a:	e056      	b.n	800beda <netconn_recv+0xd6>
  *new_buf = NULL;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d109      	bne.n	800be4c <netconn_recv+0x48>
 800be38:	4b2a      	ldr	r3, [pc, #168]	; (800bee4 <netconn_recv+0xe0>)
 800be3a:	f240 3265 	movw	r2, #869	; 0x365
 800be3e:	492c      	ldr	r1, [pc, #176]	; (800bef0 <netconn_recv+0xec>)
 800be40:	482a      	ldr	r0, [pc, #168]	; (800beec <netconn_recv+0xe8>)
 800be42:	f00f f86d 	bl	801af20 <iprintf>
 800be46:	f06f 030f 	mvn.w	r3, #15
 800be4a:	e046      	b.n	800beda <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be54:	2b10      	cmp	r3, #16
 800be56:	d13a      	bne.n	800bece <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800be5c:	2006      	movs	r0, #6
 800be5e:	f002 faeb 	bl	800e438 <memp_malloc>
 800be62:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d102      	bne.n	800be70 <netconn_recv+0x6c>
      return ERR_MEM;
 800be6a:	f04f 33ff 	mov.w	r3, #4294967295
 800be6e:	e034      	b.n	800beda <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800be70:	f107 030c 	add.w	r3, r7, #12
 800be74:	2200      	movs	r2, #0
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff ff3f 	bl	800bcfc <netconn_recv_data_tcp>
 800be7e:	4603      	mov	r3, r0
 800be80:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800be82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d006      	beq.n	800be98 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800be8a:	6979      	ldr	r1, [r7, #20]
 800be8c:	2006      	movs	r0, #6
 800be8e:	f002 fb49 	bl	800e524 <memp_free>
      return err;
 800be92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be96:	e020      	b.n	800beda <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <netconn_recv+0xa8>
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <netconn_recv+0xe0>)
 800bea0:	f240 3279 	movw	r2, #889	; 0x379
 800bea4:	4913      	ldr	r1, [pc, #76]	; (800bef4 <netconn_recv+0xf0>)
 800bea6:	4811      	ldr	r0, [pc, #68]	; (800beec <netconn_recv+0xe8>)
 800bea8:	f00f f83a 	bl	801af20 <iprintf>

    buf->p = p;
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2200      	movs	r2, #0
 800bebc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2200      	movs	r2, #0
 800bec2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e005      	b.n	800beda <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800bece:	2200      	movs	r2, #0
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff fe1a 	bl	800bb0c <netconn_recv_data>
 800bed8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	0801be6c 	.word	0x0801be6c
 800bee8:	0801c084 	.word	0x0801c084
 800beec:	0801bec4 	.word	0x0801bec4
 800bef0:	0801c0a4 	.word	0x0801c0a4
 800bef4:	0801c11c 	.word	0x0801c11c

0800bef8 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d011      	beq.n	800bf30 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <netconn_sendto+0x20>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	e000      	b.n	800bf1a <netconn_sendto+0x22>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	887a      	ldrh	r2, [r7, #2]
 800bf22:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f808 	bl	800bf3c <netconn_send>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	e001      	b.n	800bf34 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800bf30:	f06f 0305 	mvn.w	r3, #5
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	; 0x30
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d109      	bne.n	800bf60 <netconn_send+0x24>
 800bf4c:	4b0e      	ldr	r3, [pc, #56]	; (800bf88 <netconn_send+0x4c>)
 800bf4e:	f240 32b2 	movw	r2, #946	; 0x3b2
 800bf52:	490e      	ldr	r1, [pc, #56]	; (800bf8c <netconn_send+0x50>)
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <netconn_send+0x54>)
 800bf56:	f00e ffe3 	bl	801af20 <iprintf>
 800bf5a:	f06f 030f 	mvn.w	r3, #15
 800bf5e:	e00e      	b.n	800bf7e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4809      	ldr	r0, [pc, #36]	; (800bf94 <netconn_send+0x58>)
 800bf70:	f7ff fcbc 	bl	800b8ec <netconn_apimsg>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bf7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3730      	adds	r7, #48	; 0x30
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	0801be6c 	.word	0x0801be6c
 800bf8c:	0801c128 	.word	0x0801c128
 800bf90:	0801bec4 	.word	0x0801bec4
 800bf94:	0800cef9 	.word	0x0800cef9

0800bf98 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08c      	sub	sp, #48	; 0x30
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d109      	bne.n	800bfbe <netconn_close_shutdown+0x26>
 800bfaa:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <netconn_close_shutdown+0x50>)
 800bfac:	f240 4247 	movw	r2, #1095	; 0x447
 800bfb0:	490e      	ldr	r1, [pc, #56]	; (800bfec <netconn_close_shutdown+0x54>)
 800bfb2:	480f      	ldr	r0, [pc, #60]	; (800bff0 <netconn_close_shutdown+0x58>)
 800bfb4:	f00e ffb4 	bl	801af20 <iprintf>
 800bfb8:	f06f 030f 	mvn.w	r3, #15
 800bfbc:	e010      	b.n	800bfe0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800bfc2:	78fb      	ldrb	r3, [r7, #3]
 800bfc4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bfc6:	2329      	movs	r3, #41	; 0x29
 800bfc8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4808      	ldr	r0, [pc, #32]	; (800bff4 <netconn_close_shutdown+0x5c>)
 800bfd2:	f7ff fc8b 	bl	800b8ec <netconn_apimsg>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bfdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3730      	adds	r7, #48	; 0x30
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	0801be6c 	.word	0x0801be6c
 800bfec:	0801c1a8 	.word	0x0801c1a8
 800bff0:	0801bec4 	.word	0x0801bec4
 800bff4:	0800d395 	.word	0x0800d395

0800bff8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <netconn_err+0x12>
    return ERR_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	e00d      	b.n	800c026 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c00a:	f00e fdcf 	bl	801abac <sys_arch_protect>
 800c00e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	7a1b      	ldrb	r3, [r3, #8]
 800c014:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f00e fdd3 	bl	801abc8 <sys_arch_unprotect>
  return err;
 800c022:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c03e:	f113 0f0d 	cmn.w	r3, #13
 800c042:	d009      	beq.n	800c058 <lwip_netconn_err_to_msg+0x28>
 800c044:	f113 0f0d 	cmn.w	r3, #13
 800c048:	dc0c      	bgt.n	800c064 <lwip_netconn_err_to_msg+0x34>
 800c04a:	f113 0f0f 	cmn.w	r3, #15
 800c04e:	d007      	beq.n	800c060 <lwip_netconn_err_to_msg+0x30>
 800c050:	f113 0f0e 	cmn.w	r3, #14
 800c054:	d002      	beq.n	800c05c <lwip_netconn_err_to_msg+0x2c>
 800c056:	e005      	b.n	800c064 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <lwip_netconn_err_to_msg+0x54>)
 800c05a:	e00e      	b.n	800c07a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c05c:	4b0a      	ldr	r3, [pc, #40]	; (800c088 <lwip_netconn_err_to_msg+0x58>)
 800c05e:	e00c      	b.n	800c07a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <lwip_netconn_err_to_msg+0x5c>)
 800c062:	e00a      	b.n	800c07a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <lwip_netconn_err_to_msg+0x48>
 800c06c:	4b08      	ldr	r3, [pc, #32]	; (800c090 <lwip_netconn_err_to_msg+0x60>)
 800c06e:	227d      	movs	r2, #125	; 0x7d
 800c070:	4908      	ldr	r1, [pc, #32]	; (800c094 <lwip_netconn_err_to_msg+0x64>)
 800c072:	4809      	ldr	r0, [pc, #36]	; (800c098 <lwip_netconn_err_to_msg+0x68>)
 800c074:	f00e ff54 	bl	801af20 <iprintf>
      return NULL;
 800c078:	2300      	movs	r3, #0
  }
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	0801f720 	.word	0x0801f720
 800c088:	0801f721 	.word	0x0801f721
 800c08c:	0801f722 	.word	0x0801f722
 800c090:	0801c1c4 	.word	0x0801c1c4
 800c094:	0801c1f8 	.word	0x0801c1f8
 800c098:	0801c208 	.word	0x0801c208

0800c09c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d105      	bne.n	800c0b8 <lwip_netconn_is_err_msg+0x1c>
 800c0ac:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <lwip_netconn_is_err_msg+0x5c>)
 800c0ae:	2285      	movs	r2, #133	; 0x85
 800c0b0:	4912      	ldr	r1, [pc, #72]	; (800c0fc <lwip_netconn_is_err_msg+0x60>)
 800c0b2:	4813      	ldr	r0, [pc, #76]	; (800c100 <lwip_netconn_is_err_msg+0x64>)
 800c0b4:	f00e ff34 	bl	801af20 <iprintf>

  if (msg == &netconn_aborted) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a12      	ldr	r2, [pc, #72]	; (800c104 <lwip_netconn_is_err_msg+0x68>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d104      	bne.n	800c0ca <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	22f3      	movs	r2, #243	; 0xf3
 800c0c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e012      	b.n	800c0f0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a0e      	ldr	r2, [pc, #56]	; (800c108 <lwip_netconn_is_err_msg+0x6c>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d104      	bne.n	800c0dc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	22f2      	movs	r2, #242	; 0xf2
 800c0d6:	701a      	strb	r2, [r3, #0]
    return 1;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e009      	b.n	800c0f0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a0b      	ldr	r2, [pc, #44]	; (800c10c <lwip_netconn_is_err_msg+0x70>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d104      	bne.n	800c0ee <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	22f1      	movs	r2, #241	; 0xf1
 800c0e8:	701a      	strb	r2, [r3, #0]
    return 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	0801c1c4 	.word	0x0801c1c4
 800c0fc:	0801c230 	.word	0x0801c230
 800c100:	0801c208 	.word	0x0801c208
 800c104:	0801f720 	.word	0x0801f720
 800c108:	0801f721 	.word	0x0801f721
 800c10c:	0801f722 	.word	0x0801f722

0800c110 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d105      	bne.n	800c130 <recv_udp+0x20>
 800c124:	4b34      	ldr	r3, [pc, #208]	; (800c1f8 <recv_udp+0xe8>)
 800c126:	22e5      	movs	r2, #229	; 0xe5
 800c128:	4934      	ldr	r1, [pc, #208]	; (800c1fc <recv_udp+0xec>)
 800c12a:	4835      	ldr	r0, [pc, #212]	; (800c200 <recv_udp+0xf0>)
 800c12c:	f00e fef8 	bl	801af20 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d105      	bne.n	800c142 <recv_udp+0x32>
 800c136:	4b30      	ldr	r3, [pc, #192]	; (800c1f8 <recv_udp+0xe8>)
 800c138:	22e6      	movs	r2, #230	; 0xe6
 800c13a:	4932      	ldr	r1, [pc, #200]	; (800c204 <recv_udp+0xf4>)
 800c13c:	4830      	ldr	r0, [pc, #192]	; (800c200 <recv_udp+0xf0>)
 800c13e:	f00e feef 	bl	801af20 <iprintf>
  conn = (struct netconn *)arg;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <recv_udp+0x44>
    pbuf_free(p);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f003 f899 	bl	800f284 <pbuf_free>
    return;
 800c152:	e04d      	b.n	800c1f0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d005      	beq.n	800c16a <recv_udp+0x5a>
 800c15e:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <recv_udp+0xe8>)
 800c160:	22ee      	movs	r2, #238	; 0xee
 800c162:	4929      	ldr	r1, [pc, #164]	; (800c208 <recv_udp+0xf8>)
 800c164:	4826      	ldr	r0, [pc, #152]	; (800c200 <recv_udp+0xf0>)
 800c166:	f00e fedb 	bl	801af20 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	3310      	adds	r3, #16
 800c16e:	4618      	mov	r0, r3
 800c170:	f00e fc01 	bl	801a976 <sys_mbox_valid>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f003 f882 	bl	800f284 <pbuf_free>
    return;
 800c180:	e036      	b.n	800c1f0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c182:	2006      	movs	r0, #6
 800c184:	f002 f958 	bl	800e438 <memp_malloc>
 800c188:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d103      	bne.n	800c198 <recv_udp+0x88>
    pbuf_free(p);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f003 f877 	bl	800f284 <pbuf_free>
    return;
 800c196:	e02b      	b.n	800c1f0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <recv_udp+0xa0>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	e000      	b.n	800c1b2 <recv_udp+0xa2>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c1ba:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	891b      	ldrh	r3, [r3, #8]
 800c1c0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	3310      	adds	r3, #16
 800c1c6:	69b9      	ldr	r1, [r7, #24]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f00e fb5f 	bl	801a88c <sys_mbox_trypost>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <recv_udp+0xcc>
    netbuf_delete(buf);
 800c1d4:	69b8      	ldr	r0, [r7, #24]
 800c1d6:	f001 f97d 	bl	800d4d4 <netbuf_delete>
    return;
 800c1da:	e009      	b.n	800c1f0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <recv_udp+0xe0>
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	8afa      	ldrh	r2, [r7, #22]
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	69f8      	ldr	r0, [r7, #28]
 800c1ee:	4798      	blx	r3
  }
}
 800c1f0:	3720      	adds	r7, #32
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	0801c1c4 	.word	0x0801c1c4
 800c1fc:	0801c23c 	.word	0x0801c23c
 800c200:	0801c208 	.word	0x0801c208
 800c204:	0801c260 	.word	0x0801c260
 800c208:	0801c280 	.word	0x0801c280

0800c20c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <recv_tcp+0x22>
 800c220:	4b36      	ldr	r3, [pc, #216]	; (800c2fc <recv_tcp+0xf0>)
 800c222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c226:	4936      	ldr	r1, [pc, #216]	; (800c300 <recv_tcp+0xf4>)
 800c228:	4836      	ldr	r0, [pc, #216]	; (800c304 <recv_tcp+0xf8>)
 800c22a:	f00e fe79 	bl	801af20 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d106      	bne.n	800c242 <recv_tcp+0x36>
 800c234:	4b31      	ldr	r3, [pc, #196]	; (800c2fc <recv_tcp+0xf0>)
 800c236:	f240 122d 	movw	r2, #301	; 0x12d
 800c23a:	4933      	ldr	r1, [pc, #204]	; (800c308 <recv_tcp+0xfc>)
 800c23c:	4831      	ldr	r0, [pc, #196]	; (800c304 <recv_tcp+0xf8>)
 800c23e:	f00e fe6f 	bl	801af20 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <recv_tcp+0x4c>
 800c24a:	4b2c      	ldr	r3, [pc, #176]	; (800c2fc <recv_tcp+0xf0>)
 800c24c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c250:	492e      	ldr	r1, [pc, #184]	; (800c30c <recv_tcp+0x100>)
 800c252:	482c      	ldr	r0, [pc, #176]	; (800c304 <recv_tcp+0xf8>)
 800c254:	f00e fe64 	bl	801af20 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d102      	bne.n	800c268 <recv_tcp+0x5c>
    return ERR_VAL;
 800c262:	f06f 0305 	mvn.w	r3, #5
 800c266:	e045      	b.n	800c2f4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d006      	beq.n	800c280 <recv_tcp+0x74>
 800c272:	4b22      	ldr	r3, [pc, #136]	; (800c2fc <recv_tcp+0xf0>)
 800c274:	f240 1235 	movw	r2, #309	; 0x135
 800c278:	4925      	ldr	r1, [pc, #148]	; (800c310 <recv_tcp+0x104>)
 800c27a:	4822      	ldr	r0, [pc, #136]	; (800c304 <recv_tcp+0xf8>)
 800c27c:	f00e fe50 	bl	801af20 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	3310      	adds	r3, #16
 800c284:	4618      	mov	r0, r3
 800c286:	f00e fb76 	bl	801a976 <sys_mbox_valid>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10d      	bne.n	800c2ac <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d008      	beq.n	800c2a8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	891b      	ldrh	r3, [r3, #8]
 800c29a:	4619      	mov	r1, r3
 800c29c:	68b8      	ldr	r0, [r7, #8]
 800c29e:	f003 feef 	bl	8010080 <tcp_recved>
      pbuf_free(p);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f002 ffee 	bl	800f284 <pbuf_free>
    }
    return ERR_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e023      	b.n	800c2f4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <recv_tcp+0xb2>
    msg = p;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	891b      	ldrh	r3, [r3, #8]
 800c2ba:	83fb      	strh	r3, [r7, #30]
 800c2bc:	e003      	b.n	800c2c6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c2be:	4b15      	ldr	r3, [pc, #84]	; (800c314 <recv_tcp+0x108>)
 800c2c0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	69b9      	ldr	r1, [r7, #24]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f00e fadd 	bl	801a88c <sys_mbox_trypost>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2dc:	e00a      	b.n	800c2f4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d005      	beq.n	800c2f2 <recv_tcp+0xe6>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ea:	8bfa      	ldrh	r2, [r7, #30]
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6978      	ldr	r0, [r7, #20]
 800c2f0:	4798      	blx	r3
  }

  return ERR_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0801c1c4 	.word	0x0801c1c4
 800c300:	0801c2a0 	.word	0x0801c2a0
 800c304:	0801c208 	.word	0x0801c208
 800c308:	0801c2c4 	.word	0x0801c2c4
 800c30c:	0801c2e4 	.word	0x0801c2e4
 800c310:	0801c2fc 	.word	0x0801c2fc
 800c314:	0801f722 	.word	0x0801f722

0800c318 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <poll_tcp+0x22>
 800c32c:	4b29      	ldr	r3, [pc, #164]	; (800c3d4 <poll_tcp+0xbc>)
 800c32e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c332:	4929      	ldr	r1, [pc, #164]	; (800c3d8 <poll_tcp+0xc0>)
 800c334:	4829      	ldr	r0, [pc, #164]	; (800c3dc <poll_tcp+0xc4>)
 800c336:	f00e fdf3 	bl	801af20 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	785b      	ldrb	r3, [r3, #1]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d104      	bne.n	800c34c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c342:	2101      	movs	r1, #1
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 fe59 	bl	800cffc <lwip_netconn_do_writemore>
 800c34a:	e016      	b.n	800c37a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	2b04      	cmp	r3, #4
 800c352:	d112      	bne.n	800c37a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6a1b      	ldr	r3, [r3, #32]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00a      	beq.n	800c372 <poll_tcp+0x5a>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	7a5b      	ldrb	r3, [r3, #9]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d005      	beq.n	800c372 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	7a5a      	ldrb	r2, [r3, #9]
 800c36c:	3a01      	subs	r2, #1
 800c36e:	b2d2      	uxtb	r2, r2
 800c370:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c372:	2101      	movs	r1, #1
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 fb3b 	bl	800c9f0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	7f1b      	ldrb	r3, [r3, #28]
 800c37e:	f003 0310 	and.w	r3, r3, #16
 800c382:	2b00      	cmp	r3, #0
 800c384:	d021      	beq.n	800c3ca <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d01d      	beq.n	800c3ca <poll_tcp+0xb2>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c396:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c39a:	d316      	bcc.n	800c3ca <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c3a4:	2b04      	cmp	r3, #4
 800c3a6:	d810      	bhi.n	800c3ca <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	7f1b      	ldrb	r3, [r3, #28]
 800c3ac:	f023 0310 	bic.w	r3, r3, #16
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d005      	beq.n	800c3ca <poll_tcp+0xb2>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2102      	movs	r1, #2
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	0801c1c4 	.word	0x0801c1c4
 800c3d8:	0801c31c 	.word	0x0801c31c
 800c3dc:	0801c208 	.word	0x0801c208

0800c3e0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d106      	bne.n	800c406 <sent_tcp+0x26>
 800c3f8:	4b20      	ldr	r3, [pc, #128]	; (800c47c <sent_tcp+0x9c>)
 800c3fa:	f240 1293 	movw	r2, #403	; 0x193
 800c3fe:	4920      	ldr	r1, [pc, #128]	; (800c480 <sent_tcp+0xa0>)
 800c400:	4820      	ldr	r0, [pc, #128]	; (800c484 <sent_tcp+0xa4>)
 800c402:	f00e fd8d 	bl	801af20 <iprintf>

  if (conn) {
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d032      	beq.n	800c472 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	785b      	ldrb	r3, [r3, #1]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d104      	bne.n	800c41e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c414:	2101      	movs	r1, #1
 800c416:	6978      	ldr	r0, [r7, #20]
 800c418:	f000 fdf0 	bl	800cffc <lwip_netconn_do_writemore>
 800c41c:	e007      	b.n	800c42e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2b04      	cmp	r3, #4
 800c424:	d103      	bne.n	800c42e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c426:	2101      	movs	r1, #1
 800c428:	6978      	ldr	r0, [r7, #20]
 800c42a:	f000 fae1 	bl	800c9f0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d01d      	beq.n	800c472 <sent_tcp+0x92>
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c43e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c442:	d316      	bcc.n	800c472 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d810      	bhi.n	800c472 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	7f1b      	ldrb	r3, [r3, #28]
 800c454:	f023 0310 	bic.w	r3, r3, #16
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <sent_tcp+0x92>
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	88fa      	ldrh	r2, [r7, #6]
 800c46c:	2102      	movs	r1, #2
 800c46e:	6978      	ldr	r0, [r7, #20]
 800c470:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	0801c1c4 	.word	0x0801c1c4
 800c480:	0801c31c 	.word	0x0801c31c
 800c484:	0801c208 	.word	0x0801c208

0800c488 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d106      	bne.n	800c4ac <err_tcp+0x24>
 800c49e:	4b5f      	ldr	r3, [pc, #380]	; (800c61c <err_tcp+0x194>)
 800c4a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c4a4:	495e      	ldr	r1, [pc, #376]	; (800c620 <err_tcp+0x198>)
 800c4a6:	485f      	ldr	r0, [pc, #380]	; (800c624 <err_tcp+0x19c>)
 800c4a8:	f00e fd3a 	bl	801af20 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c4ac:	f00e fb7e 	bl	801abac <sys_arch_protect>
 800c4b0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	7f1b      	ldrb	r3, [r3, #28]
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c4d8:	69b8      	ldr	r0, [r7, #24]
 800c4da:	f00e fb75 	bl	801abc8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d005      	beq.n	800c4f2 <err_tcp+0x6a>
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2104      	movs	r1, #4
 800c4ee:	69f8      	ldr	r0, [r7, #28]
 800c4f0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <err_tcp+0x7e>
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	2200      	movs	r2, #0
 800c500:	2100      	movs	r1, #0
 800c502:	69f8      	ldr	r0, [r7, #28]
 800c504:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <err_tcp+0x92>
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	2200      	movs	r2, #0
 800c514:	2102      	movs	r1, #2
 800c516:	69f8      	ldr	r0, [r7, #28]
 800c518:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c51a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fd86 	bl	800c030 <lwip_netconn_err_to_msg>
 800c524:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	3310      	adds	r3, #16
 800c52a:	4618      	mov	r0, r3
 800c52c:	f00e fa23 	bl	801a976 <sys_mbox_valid>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	3310      	adds	r3, #16
 800c53a:	6939      	ldr	r1, [r7, #16]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f00e f9a5 	bl	801a88c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	3314      	adds	r3, #20
 800c546:	4618      	mov	r0, r3
 800c548:	f00e fa15 	bl	801a976 <sys_mbox_valid>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	3314      	adds	r3, #20
 800c556:	6939      	ldr	r1, [r7, #16]
 800c558:	4618      	mov	r0, r3
 800c55a:	f00e f997 	bl	801a88c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d005      	beq.n	800c570 <err_tcp+0xe8>
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	2b04      	cmp	r3, #4
 800c568:	d002      	beq.n	800c570 <err_tcp+0xe8>
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d143      	bne.n	800c5f8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	7f1b      	ldrb	r3, [r3, #28]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf14      	ite	ne
 800c57c:	2301      	movne	r3, #1
 800c57e:	2300      	moveq	r3, #0
 800c580:	b2db      	uxtb	r3, r3
 800c582:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	7f1b      	ldrb	r3, [r3, #28]
 800c588:	f023 0304 	bic.w	r3, r3, #4
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d13b      	bne.n	800c610 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <err_tcp+0x126>
 800c5a0:	4b1e      	ldr	r3, [pc, #120]	; (800c61c <err_tcp+0x194>)
 800c5a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c5a6:	4920      	ldr	r1, [pc, #128]	; (800c628 <err_tcp+0x1a0>)
 800c5a8:	481e      	ldr	r0, [pc, #120]	; (800c624 <err_tcp+0x19c>)
 800c5aa:	f00e fcb9 	bl	801af20 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d104      	bne.n	800c5be <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	711a      	strb	r2, [r3, #4]
 800c5bc:	e003      	b.n	800c5c6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f00e fa61 	bl	801aa98 <sys_sem_valid>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d106      	bne.n	800c5ea <err_tcp+0x162>
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <err_tcp+0x194>)
 800c5de:	f240 12ef 	movw	r2, #495	; 0x1ef
 800c5e2:	4912      	ldr	r1, [pc, #72]	; (800c62c <err_tcp+0x1a4>)
 800c5e4:	480f      	ldr	r0, [pc, #60]	; (800c624 <err_tcp+0x19c>)
 800c5e6:	f00e fc9b 	bl	801af20 <iprintf>
      conn->current_msg = NULL;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c5f0:	68b8      	ldr	r0, [r7, #8]
 800c5f2:	f00e fa37 	bl	801aa64 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c5f6:	e00b      	b.n	800c610 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	6a1b      	ldr	r3, [r3, #32]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <err_tcp+0x18a>
 800c600:	4b06      	ldr	r3, [pc, #24]	; (800c61c <err_tcp+0x194>)
 800c602:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c606:	490a      	ldr	r1, [pc, #40]	; (800c630 <err_tcp+0x1a8>)
 800c608:	4806      	ldr	r0, [pc, #24]	; (800c624 <err_tcp+0x19c>)
 800c60a:	f00e fc89 	bl	801af20 <iprintf>
  }
}
 800c60e:	e000      	b.n	800c612 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c610:	bf00      	nop
}
 800c612:	bf00      	nop
 800c614:	3720      	adds	r7, #32
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	0801c1c4 	.word	0x0801c1c4
 800c620:	0801c31c 	.word	0x0801c31c
 800c624:	0801c208 	.word	0x0801c208
 800c628:	0801c32c 	.word	0x0801c32c
 800c62c:	0801c348 	.word	0x0801c348
 800c630:	0801c364 	.word	0x0801c364

0800c634 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c642:	6879      	ldr	r1, [r7, #4]
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f004 fbe1 	bl	8010e0c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c64a:	490a      	ldr	r1, [pc, #40]	; (800c674 <setup_tcp+0x40>)
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f004 fbef 	bl	8010e30 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c652:	4909      	ldr	r1, [pc, #36]	; (800c678 <setup_tcp+0x44>)
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f004 fc0d 	bl	8010e74 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c65a:	2202      	movs	r2, #2
 800c65c:	4907      	ldr	r1, [pc, #28]	; (800c67c <setup_tcp+0x48>)
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f004 fc64 	bl	8010f2c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c664:	4906      	ldr	r1, [pc, #24]	; (800c680 <setup_tcp+0x4c>)
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f004 fc26 	bl	8010eb8 <tcp_err>
}
 800c66c:	bf00      	nop
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	0800c20d 	.word	0x0800c20d
 800c678:	0800c3e1 	.word	0x0800c3e1
 800c67c:	0800c319 	.word	0x0800c319
 800c680:	0800c489 	.word	0x0800c489

0800c684 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <pcb_new+0x24>
 800c69a:	4b2b      	ldr	r3, [pc, #172]	; (800c748 <pcb_new+0xc4>)
 800c69c:	f240 2265 	movw	r2, #613	; 0x265
 800c6a0:	492a      	ldr	r1, [pc, #168]	; (800c74c <pcb_new+0xc8>)
 800c6a2:	482b      	ldr	r0, [pc, #172]	; (800c750 <pcb_new+0xcc>)
 800c6a4:	f00e fc3c 	bl	801af20 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6b2:	2b10      	cmp	r3, #16
 800c6b4:	d022      	beq.n	800c6fc <pcb_new+0x78>
 800c6b6:	2b20      	cmp	r3, #32
 800c6b8:	d133      	bne.n	800c722 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681c      	ldr	r4, [r3, #0]
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f009 fed6 	bl	8016472 <udp_new_ip_type>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d02a      	beq.n	800c72a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2b22      	cmp	r3, #34	; 0x22
 800c6dc:	d104      	bne.n	800c6e8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6858      	ldr	r0, [r3, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4917      	ldr	r1, [pc, #92]	; (800c754 <pcb_new+0xd0>)
 800c6f6:	f009 fe43 	bl	8016380 <udp_recv>
      }
      break;
 800c6fa:	e016      	b.n	800c72a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681c      	ldr	r4, [r3, #0]
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	4618      	mov	r0, r3
 800c704:	f004 fb74 	bl	8010df0 <tcp_new_ip_type>
 800c708:	4603      	mov	r3, r0
 800c70a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff ff8a 	bl	800c634 <setup_tcp>
      }
      break;
 800c720:	e005      	b.n	800c72e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	22fa      	movs	r2, #250	; 0xfa
 800c726:	711a      	strb	r2, [r3, #4]
      return;
 800c728:	e00a      	b.n	800c740 <pcb_new+0xbc>
      break;
 800c72a:	bf00      	nop
 800c72c:	e000      	b.n	800c730 <pcb_new+0xac>
      break;
 800c72e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d102      	bne.n	800c740 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	22ff      	movs	r2, #255	; 0xff
 800c73e:	711a      	strb	r2, [r3, #4]
  }
}
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	bd90      	pop	{r4, r7, pc}
 800c746:	bf00      	nop
 800c748:	0801c1c4 	.word	0x0801c1c4
 800c74c:	0801c3a8 	.word	0x0801c3a8
 800c750:	0801c208 	.word	0x0801c208
 800c754:	0800c111 	.word	0x0800c111

0800c758 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f7ff ff85 	bl	800c684 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800c77a:	bf00      	nop
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	4603      	mov	r3, r0
 800c78c:	6039      	str	r1, [r7, #0]
 800c78e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c794:	2007      	movs	r0, #7
 800c796:	f001 fe4f 	bl	800e438 <memp_malloc>
 800c79a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <netconn_alloc+0x22>
    return NULL;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e052      	b.n	800c84c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	79fa      	ldrb	r2, [r7, #7]
 800c7b0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7be:	2b10      	cmp	r3, #16
 800c7c0:	d004      	beq.n	800c7cc <netconn_alloc+0x48>
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d105      	bne.n	800c7d2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800c7c6:	2306      	movs	r3, #6
 800c7c8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c7ca:	e00a      	b.n	800c7e2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800c7cc:	2306      	movs	r3, #6
 800c7ce:	617b      	str	r3, [r7, #20]
      break;
 800c7d0:	e007      	b.n	800c7e2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c7d2:	4b20      	ldr	r3, [pc, #128]	; (800c854 <netconn_alloc+0xd0>)
 800c7d4:	f240 22e5 	movw	r2, #741	; 0x2e5
 800c7d8:	491f      	ldr	r1, [pc, #124]	; (800c858 <netconn_alloc+0xd4>)
 800c7da:	4820      	ldr	r0, [pc, #128]	; (800c85c <netconn_alloc+0xd8>)
 800c7dc:	f00e fba0 	bl	801af20 <iprintf>
      goto free_and_return;
 800c7e0:	e02f      	b.n	800c842 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3310      	adds	r3, #16
 800c7e6:	6979      	ldr	r1, [r7, #20]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f00e f81b 	bl	801a824 <sys_mbox_new>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d125      	bne.n	800c840 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	330c      	adds	r3, #12
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f00e f8d9 	bl	801a9b2 <sys_sem_new>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d005      	beq.n	800c812 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3310      	adds	r3, #16
 800c80a:	4618      	mov	r0, r3
 800c80c:	f00e f82c 	bl	801a868 <sys_mbox_free>
    goto free_and_return;
 800c810:	e017      	b.n	800c842 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3314      	adds	r3, #20
 800c816:	4618      	mov	r0, r3
 800c818:	f00e f8be 	bl	801a998 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f04f 32ff 	mov.w	r2, #4294967295
 800c828:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7cfa      	ldrb	r2, [r7, #19]
 800c83a:	771a      	strb	r2, [r3, #28]
  return conn;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	e005      	b.n	800c84c <netconn_alloc+0xc8>
    goto free_and_return;
 800c840:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	2007      	movs	r0, #7
 800c846:	f001 fe6d 	bl	800e524 <memp_free>
  return NULL;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3718      	adds	r7, #24
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	0801c1c4 	.word	0x0801c1c4
 800c858:	0801c3c8 	.word	0x0801c3c8
 800c85c:	0801c208 	.word	0x0801c208

0800c860 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d006      	beq.n	800c87e <netconn_free+0x1e>
 800c870:	4b1b      	ldr	r3, [pc, #108]	; (800c8e0 <netconn_free+0x80>)
 800c872:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c876:	491b      	ldr	r1, [pc, #108]	; (800c8e4 <netconn_free+0x84>)
 800c878:	481b      	ldr	r0, [pc, #108]	; (800c8e8 <netconn_free+0x88>)
 800c87a:	f00e fb51 	bl	801af20 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3310      	adds	r3, #16
 800c882:	4618      	mov	r0, r3
 800c884:	f00e f877 	bl	801a976 <sys_mbox_valid>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d006      	beq.n	800c89c <netconn_free+0x3c>
 800c88e:	4b14      	ldr	r3, [pc, #80]	; (800c8e0 <netconn_free+0x80>)
 800c890:	f240 3223 	movw	r2, #803	; 0x323
 800c894:	4915      	ldr	r1, [pc, #84]	; (800c8ec <netconn_free+0x8c>)
 800c896:	4814      	ldr	r0, [pc, #80]	; (800c8e8 <netconn_free+0x88>)
 800c898:	f00e fb42 	bl	801af20 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f00e f868 	bl	801a976 <sys_mbox_valid>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <netconn_free+0x5a>
 800c8ac:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <netconn_free+0x80>)
 800c8ae:	f240 3226 	movw	r2, #806	; 0x326
 800c8b2:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <netconn_free+0x90>)
 800c8b4:	480c      	ldr	r0, [pc, #48]	; (800c8e8 <netconn_free+0x88>)
 800c8b6:	f00e fb33 	bl	801af20 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	330c      	adds	r3, #12
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f00e f8dd 	bl	801aa7e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	330c      	adds	r3, #12
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f00e f8f6 	bl	801aaba <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c8ce:	6879      	ldr	r1, [r7, #4]
 800c8d0:	2007      	movs	r0, #7
 800c8d2:	f001 fe27 	bl	800e524 <memp_free>
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	0801c1c4 	.word	0x0801c1c4
 800c8e4:	0801c3f0 	.word	0x0801c3f0
 800c8e8:	0801c208 	.word	0x0801c208
 800c8ec:	0801c420 	.word	0x0801c420
 800c8f0:	0801c45c 	.word	0x0801c45c

0800c8f4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3310      	adds	r3, #16
 800c900:	4618      	mov	r0, r3
 800c902:	f00e f838 	bl	801a976 <sys_mbox_valid>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d02f      	beq.n	800c96c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c90c:	e018      	b.n	800c940 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c916:	2b10      	cmp	r3, #16
 800c918:	d10e      	bne.n	800c938 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f107 020f 	add.w	r2, r7, #15
 800c920:	4611      	mov	r1, r2
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fbba 	bl	800c09c <lwip_netconn_is_err_msg>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d108      	bne.n	800c940 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	4618      	mov	r0, r3
 800c932:	f002 fca7 	bl	800f284 <pbuf_free>
 800c936:	e003      	b.n	800c940 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fdca 	bl	800d4d4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3310      	adds	r3, #16
 800c944:	f107 0210 	add.w	r2, r7, #16
 800c948:	4611      	mov	r1, r2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f00d fff7 	bl	801a93e <sys_arch_mbox_tryfetch>
 800c950:	4603      	mov	r3, r0
 800c952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c956:	d1da      	bne.n	800c90e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3310      	adds	r3, #16
 800c95c:	4618      	mov	r0, r3
 800c95e:	f00d ff83 	bl	801a868 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3310      	adds	r3, #16
 800c966:	4618      	mov	r0, r3
 800c968:	f00e f816 	bl	801a998 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3314      	adds	r3, #20
 800c970:	4618      	mov	r0, r3
 800c972:	f00e f800 	bl	801a976 <sys_mbox_valid>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d034      	beq.n	800c9e6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c97c:	e01d      	b.n	800c9ba <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f107 020e 	add.w	r2, r7, #14
 800c984:	4611      	mov	r1, r2
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fb88 	bl	800c09c <lwip_netconn_is_err_msg>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d113      	bne.n	800c9ba <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c996:	6978      	ldr	r0, [r7, #20]
 800c998:	f7ff ffac 	bl	800c8f4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f003 fa6b 	bl	800fe84 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c9b4:	6978      	ldr	r0, [r7, #20]
 800c9b6:	f7ff ff53 	bl	800c860 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3314      	adds	r3, #20
 800c9be:	f107 0210 	add.w	r2, r7, #16
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f00d ffba 	bl	801a93e <sys_arch_mbox_tryfetch>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d0:	d1d5      	bne.n	800c97e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3314      	adds	r3, #20
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f00d ff46 	bl	801a868 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3314      	adds	r3, #20
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f00d ffd9 	bl	801a998 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c9e6:	bf00      	nop
 800c9e8:	3718      	adds	r7, #24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <lwip_netconn_do_close_internal+0x24>
 800ca06:	4ba1      	ldr	r3, [pc, #644]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800ca08:	f240 32a2 	movw	r2, #930	; 0x3a2
 800ca0c:	49a0      	ldr	r1, [pc, #640]	; (800cc90 <lwip_netconn_do_close_internal+0x2a0>)
 800ca0e:	48a1      	ldr	r0, [pc, #644]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800ca10:	f00e fa86 	bl	801af20 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca1c:	2b10      	cmp	r3, #16
 800ca1e:	d006      	beq.n	800ca2e <lwip_netconn_do_close_internal+0x3e>
 800ca20:	4b9a      	ldr	r3, [pc, #616]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800ca22:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ca26:	499c      	ldr	r1, [pc, #624]	; (800cc98 <lwip_netconn_do_close_internal+0x2a8>)
 800ca28:	489a      	ldr	r0, [pc, #616]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800ca2a:	f00e fa79 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	785b      	ldrb	r3, [r3, #1]
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d006      	beq.n	800ca44 <lwip_netconn_do_close_internal+0x54>
 800ca36:	4b95      	ldr	r3, [pc, #596]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800ca38:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ca3c:	4997      	ldr	r1, [pc, #604]	; (800cc9c <lwip_netconn_do_close_internal+0x2ac>)
 800ca3e:	4895      	ldr	r0, [pc, #596]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800ca40:	f00e fa6e 	bl	801af20 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d106      	bne.n	800ca5a <lwip_netconn_do_close_internal+0x6a>
 800ca4c:	4b8f      	ldr	r3, [pc, #572]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800ca4e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ca52:	4993      	ldr	r1, [pc, #588]	; (800cca0 <lwip_netconn_do_close_internal+0x2b0>)
 800ca54:	488f      	ldr	r0, [pc, #572]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800ca56:	f00e fa63 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <lwip_netconn_do_close_internal+0x80>
 800ca62:	4b8a      	ldr	r3, [pc, #552]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800ca64:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ca68:	498e      	ldr	r1, [pc, #568]	; (800cca4 <lwip_netconn_do_close_internal+0x2b4>)
 800ca6a:	488a      	ldr	r0, [pc, #552]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800ca6c:	f00e fa58 	bl	801af20 <iprintf>

  tpcb = conn->pcb.tcp;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	7a1b      	ldrb	r3, [r3, #8]
 800ca7c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	f003 0302 	and.w	r3, r3, #2
 800ca8c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b03      	cmp	r3, #3
 800ca92:	d102      	bne.n	800ca9a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ca94:	2301      	movs	r3, #1
 800ca96:	75bb      	strb	r3, [r7, #22]
 800ca98:	e01f      	b.n	800cada <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00e      	beq.n	800cabe <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800caa4:	2b05      	cmp	r3, #5
 800caa6:	d007      	beq.n	800cab8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800caac:	2b06      	cmp	r3, #6
 800caae:	d003      	beq.n	800cab8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d102      	bne.n	800cabe <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800cab8:	2301      	movs	r3, #1
 800caba:	75bb      	strb	r3, [r7, #22]
 800cabc:	e00d      	b.n	800cada <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800cabe:	7b7b      	ldrb	r3, [r7, #13]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <lwip_netconn_do_close_internal+0xe6>
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	8b5b      	ldrh	r3, [r3, #26]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800cad0:	2301      	movs	r3, #1
 800cad2:	75bb      	strb	r3, [r7, #22]
 800cad4:	e001      	b.n	800cada <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800cada:	7dbb      	ldrb	r3, [r7, #22]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d003      	beq.n	800cae8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cae0:	2100      	movs	r1, #0
 800cae2:	6938      	ldr	r0, [r7, #16]
 800cae4:	f004 f992 	bl	8010e0c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d104      	bne.n	800cafa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800caf0:	2100      	movs	r1, #0
 800caf2:	6938      	ldr	r0, [r7, #16]
 800caf4:	f004 fa02 	bl	8010efc <tcp_accept>
 800caf8:	e01d      	b.n	800cb36 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d007      	beq.n	800cb10 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cb00:	2100      	movs	r1, #0
 800cb02:	6938      	ldr	r0, [r7, #16]
 800cb04:	f004 f994 	bl	8010e30 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cb08:	2100      	movs	r1, #0
 800cb0a:	6938      	ldr	r0, [r7, #16]
 800cb0c:	f004 f9f6 	bl	8010efc <tcp_accept>
    }
    if (shut_tx) {
 800cb10:	7b7b      	ldrb	r3, [r7, #13]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cb16:	2100      	movs	r1, #0
 800cb18:	6938      	ldr	r0, [r7, #16]
 800cb1a:	f004 f9ab 	bl	8010e74 <tcp_sent>
    }
    if (shut_close) {
 800cb1e:	7dbb      	ldrb	r3, [r7, #22]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d008      	beq.n	800cb36 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800cb24:	2200      	movs	r2, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	6938      	ldr	r0, [r7, #16]
 800cb2a:	f004 f9ff 	bl	8010f2c <tcp_poll>
      tcp_err(tpcb, NULL);
 800cb2e:	2100      	movs	r1, #0
 800cb30:	6938      	ldr	r0, [r7, #16]
 800cb32:	f004 f9c1 	bl	8010eb8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800cb36:	7dbb      	ldrb	r3, [r7, #22]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800cb3c:	6938      	ldr	r0, [r7, #16]
 800cb3e:	f003 f85b 	bl	800fbf8 <tcp_close>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
 800cb46:	e007      	b.n	800cb58 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	7b7a      	ldrb	r2, [r7, #13]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6938      	ldr	r0, [r7, #16]
 800cb50:	f003 f87e 	bl	800fc50 <tcp_shutdown>
 800cb54:	4603      	mov	r3, r0
 800cb56:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800cb58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800cb60:	2301      	movs	r3, #1
 800cb62:	757b      	strb	r3, [r7, #21]
 800cb64:	e016      	b.n	800cb94 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800cb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d10f      	bne.n	800cb90 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	7a5b      	ldrb	r3, [r3, #9]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10c      	bne.n	800cb94 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800cb7e:	7dbb      	ldrb	r3, [r7, #22]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d007      	beq.n	800cb94 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800cb84:	6938      	ldr	r0, [r7, #16]
 800cb86:	f003 f97d 	bl	800fe84 <tcp_abort>
          err = ERR_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	75fb      	strb	r3, [r7, #23]
 800cb8e:	e001      	b.n	800cb94 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800cb90:	2301      	movs	r3, #1
 800cb92:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800cb94:	7d7b      	ldrb	r3, [r7, #21]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d044      	beq.n	800cc24 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	330c      	adds	r3, #12
 800cba2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	7dfa      	ldrb	r2, [r7, #23]
 800cbaa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800cbb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d129      	bne.n	800cc14 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800cbc0:	7dbb      	ldrb	r3, [r7, #22]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00c      	beq.n	800cbe0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <lwip_netconn_do_close_internal+0x1f0>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2104      	movs	r1, #4
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	4798      	blx	r3
      }
      if (shut_rx) {
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d005      	beq.n	800cbfa <lwip_netconn_do_close_internal+0x20a>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
      }
      if (shut_tx) {
 800cbfa:	7b7b      	ldrb	r3, [r7, #13]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d009      	beq.n	800cc14 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <lwip_netconn_do_close_internal+0x224>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2102      	movs	r1, #2
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cc14:	78fb      	ldrb	r3, [r7, #3]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800cc1a:	68b8      	ldr	r0, [r7, #8]
 800cc1c:	f00d ff22 	bl	801aa64 <sys_sem_signal>
    }
    return ERR_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	e02e      	b.n	800cc82 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800cc24:	7d7b      	ldrb	r3, [r7, #21]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d11e      	bne.n	800cc68 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	7d1b      	ldrb	r3, [r3, #20]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d106      	bne.n	800cc40 <lwip_netconn_do_close_internal+0x250>
 800cc32:	4b16      	ldr	r3, [pc, #88]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800cc34:	f240 4241 	movw	r2, #1089	; 0x441
 800cc38:	491b      	ldr	r1, [pc, #108]	; (800cca8 <lwip_netconn_do_close_internal+0x2b8>)
 800cc3a:	4816      	ldr	r0, [pc, #88]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800cc3c:	f00e f970 	bl	801af20 <iprintf>
    if (shut_tx) {
 800cc40:	7b7b      	ldrb	r3, [r7, #13]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800cc46:	4919      	ldr	r1, [pc, #100]	; (800ccac <lwip_netconn_do_close_internal+0x2bc>)
 800cc48:	6938      	ldr	r0, [r7, #16]
 800cc4a:	f004 f913 	bl	8010e74 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800cc4e:	2201      	movs	r2, #1
 800cc50:	4917      	ldr	r1, [pc, #92]	; (800ccb0 <lwip_netconn_do_close_internal+0x2c0>)
 800cc52:	6938      	ldr	r0, [r7, #16]
 800cc54:	f004 f96a 	bl	8010f2c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800cc58:	4916      	ldr	r1, [pc, #88]	; (800ccb4 <lwip_netconn_do_close_internal+0x2c4>)
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f004 f92c 	bl	8010eb8 <tcp_err>
    tcp_arg(tpcb, conn);
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f004 f8d2 	bl	8010e0c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800cc68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <lwip_netconn_do_close_internal+0x28e>
 800cc70:	4b06      	ldr	r3, [pc, #24]	; (800cc8c <lwip_netconn_do_close_internal+0x29c>)
 800cc72:	f240 424d 	movw	r2, #1101	; 0x44d
 800cc76:	4910      	ldr	r1, [pc, #64]	; (800ccb8 <lwip_netconn_do_close_internal+0x2c8>)
 800cc78:	4806      	ldr	r0, [pc, #24]	; (800cc94 <lwip_netconn_do_close_internal+0x2a4>)
 800cc7a:	f00e f951 	bl	801af20 <iprintf>
  return err;
 800cc7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	0801c1c4 	.word	0x0801c1c4
 800cc90:	0801c498 	.word	0x0801c498
 800cc94:	0801c208 	.word	0x0801c208
 800cc98:	0801c4a8 	.word	0x0801c4a8
 800cc9c:	0801c4c8 	.word	0x0801c4c8
 800cca0:	0801c4ec 	.word	0x0801c4ec
 800cca4:	0801c32c 	.word	0x0801c32c
 800cca8:	0801c500 	.word	0x0801c500
 800ccac:	0800c3e1 	.word	0x0800c3e1
 800ccb0:	0800c319 	.word	0x0800c319
 800ccb4:	0800c489 	.word	0x0800c489
 800ccb8:	0801c524 	.word	0x0801c524

0800ccbc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	785b      	ldrb	r3, [r3, #1]
 800ccce:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ccd0:	7afb      	ldrb	r3, [r7, #11]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00d      	beq.n	800ccf2 <lwip_netconn_do_delconn+0x36>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cce0:	2b10      	cmp	r3, #16
 800cce2:	d006      	beq.n	800ccf2 <lwip_netconn_do_delconn+0x36>
 800cce4:	4b60      	ldr	r3, [pc, #384]	; (800ce68 <lwip_netconn_do_delconn+0x1ac>)
 800cce6:	f240 425e 	movw	r2, #1118	; 0x45e
 800ccea:	4960      	ldr	r1, [pc, #384]	; (800ce6c <lwip_netconn_do_delconn+0x1b0>)
 800ccec:	4860      	ldr	r0, [pc, #384]	; (800ce70 <lwip_netconn_do_delconn+0x1b4>)
 800ccee:	f00e f917 	bl	801af20 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ccf2:	7afb      	ldrb	r3, [r7, #11]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <lwip_netconn_do_delconn+0x48>
 800ccf8:	7afb      	ldrb	r3, [r7, #11]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d002      	beq.n	800cd04 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ccfe:	7afb      	ldrb	r3, [r7, #11]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d109      	bne.n	800cd18 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d10a      	bne.n	800cd20 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	7f1b      	ldrb	r3, [r3, #28]
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	22fb      	movs	r2, #251	; 0xfb
 800cd1c:	711a      	strb	r2, [r3, #4]
 800cd1e:	e097      	b.n	800ce50 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800cd20:	7afb      	ldrb	r3, [r7, #11]
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d10d      	bne.n	800cd42 <lwip_netconn_do_delconn+0x86>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	7f1b      	ldrb	r3, [r3, #28]
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d106      	bne.n	800cd42 <lwip_netconn_do_delconn+0x86>
 800cd34:	4b4c      	ldr	r3, [pc, #304]	; (800ce68 <lwip_netconn_do_delconn+0x1ac>)
 800cd36:	f240 427a 	movw	r2, #1146	; 0x47a
 800cd3a:	494e      	ldr	r1, [pc, #312]	; (800ce74 <lwip_netconn_do_delconn+0x1b8>)
 800cd3c:	484c      	ldr	r0, [pc, #304]	; (800ce70 <lwip_netconn_do_delconn+0x1b4>)
 800cd3e:	f00e f8ef 	bl	801af20 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff fdd1 	bl	800c8f4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d05f      	beq.n	800ce1c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd66:	2b10      	cmp	r3, #16
 800cd68:	d00d      	beq.n	800cd86 <lwip_netconn_do_delconn+0xca>
 800cd6a:	2b20      	cmp	r3, #32
 800cd6c:	d151      	bne.n	800ce12 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f009 fb1e 	bl	80163c0 <udp_remove>
          break;
 800cd84:	e046      	b.n	800ce14 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6a1b      	ldr	r3, [r3, #32]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d006      	beq.n	800cd9e <lwip_netconn_do_delconn+0xe2>
 800cd90:	4b35      	ldr	r3, [pc, #212]	; (800ce68 <lwip_netconn_do_delconn+0x1ac>)
 800cd92:	f240 4294 	movw	r2, #1172	; 0x494
 800cd96:	4938      	ldr	r1, [pc, #224]	; (800ce78 <lwip_netconn_do_delconn+0x1bc>)
 800cd98:	4835      	ldr	r0, [pc, #212]	; (800ce70 <lwip_netconn_do_delconn+0x1b4>)
 800cd9a:	f00e f8c1 	bl	801af20 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2204      	movs	r2, #4
 800cda4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2203      	movs	r2, #3
 800cdaa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2100      	movs	r1, #0
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff fe18 	bl	800c9f0 <lwip_netconn_do_close_internal>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d04b      	beq.n	800ce5e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	785b      	ldrb	r3, [r3, #1]
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d006      	beq.n	800cdde <lwip_netconn_do_delconn+0x122>
 800cdd0:	4b25      	ldr	r3, [pc, #148]	; (800ce68 <lwip_netconn_do_delconn+0x1ac>)
 800cdd2:	f240 429a 	movw	r2, #1178	; 0x49a
 800cdd6:	4929      	ldr	r1, [pc, #164]	; (800ce7c <lwip_netconn_do_delconn+0x1c0>)
 800cdd8:	4825      	ldr	r0, [pc, #148]	; (800ce70 <lwip_netconn_do_delconn+0x1b4>)
 800cdda:	f00e f8a1 	bl	801af20 <iprintf>
            UNLOCK_TCPIP_CORE();
 800cdde:	4828      	ldr	r0, [pc, #160]	; (800ce80 <lwip_netconn_do_delconn+0x1c4>)
 800cde0:	f00d feb1 	bl	801ab46 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	330c      	adds	r3, #12
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f00d fe08 	bl	801aa02 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800cdf2:	4823      	ldr	r0, [pc, #140]	; (800ce80 <lwip_netconn_do_delconn+0x1c4>)
 800cdf4:	f00d fe98 	bl	801ab28 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	785b      	ldrb	r3, [r3, #1]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d02d      	beq.n	800ce5e <lwip_netconn_do_delconn+0x1a2>
 800ce02:	4b19      	ldr	r3, [pc, #100]	; (800ce68 <lwip_netconn_do_delconn+0x1ac>)
 800ce04:	f240 429e 	movw	r2, #1182	; 0x49e
 800ce08:	491c      	ldr	r1, [pc, #112]	; (800ce7c <lwip_netconn_do_delconn+0x1c0>)
 800ce0a:	4819      	ldr	r0, [pc, #100]	; (800ce70 <lwip_netconn_do_delconn+0x1b4>)
 800ce0c:	f00e f888 	bl	801af20 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ce10:	e025      	b.n	800ce5e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ce12:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d007      	beq.n	800ce36 <lwip_netconn_do_delconn+0x17a>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6810      	ldr	r0, [r2, #0]
 800ce30:	2200      	movs	r2, #0
 800ce32:	2100      	movs	r1, #0
 800ce34:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <lwip_netconn_do_delconn+0x194>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	6810      	ldr	r0, [r2, #0]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2102      	movs	r1, #2
 800ce4e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	330c      	adds	r3, #12
 800ce56:	4618      	mov	r0, r3
 800ce58:	f00d fe1e 	bl	801aa98 <sys_sem_valid>
 800ce5c:	e000      	b.n	800ce60 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ce5e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	0801c1c4 	.word	0x0801c1c4
 800ce6c:	0801c534 	.word	0x0801c534
 800ce70:	0801c208 	.word	0x0801c208
 800ce74:	0801c548 	.word	0x0801c548
 800ce78:	0801c568 	.word	0x0801c568
 800ce7c:	0801c584 	.word	0x0801c584
 800ce80:	2400a630 	.word	0x2400a630

0800ce84 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d025      	beq.n	800cee6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cea4:	2b10      	cmp	r3, #16
 800cea6:	d00e      	beq.n	800cec6 <lwip_netconn_do_bind+0x42>
 800cea8:	2b20      	cmp	r3, #32
 800ceaa:	d119      	bne.n	800cee0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6858      	ldr	r0, [r3, #4]
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	6899      	ldr	r1, [r3, #8]
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	899b      	ldrh	r3, [r3, #12]
 800ceba:	461a      	mov	r2, r3
 800cebc:	f009 f96a 	bl	8016194 <udp_bind>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73fb      	strb	r3, [r7, #15]
        break;
 800cec4:	e011      	b.n	800ceea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6858      	ldr	r0, [r3, #4]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	6899      	ldr	r1, [r3, #8]
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	899b      	ldrh	r3, [r3, #12]
 800ced4:	461a      	mov	r2, r3
 800ced6:	f002 ffe1 	bl	800fe9c <tcp_bind>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73fb      	strb	r3, [r7, #15]
        break;
 800cede:	e004      	b.n	800ceea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800cee0:	23fa      	movs	r3, #250	; 0xfa
 800cee2:	73fb      	strb	r3, [r7, #15]
        break;
 800cee4:	e001      	b.n	800ceea <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800cee6:	23fa      	movs	r3, #250	; 0xfa
 800cee8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	7bfa      	ldrb	r2, [r7, #15]
 800ceee:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff f875 	bl	800bff8 <netconn_err>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d134      	bne.n	800cf84 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d02d      	beq.n	800cf80 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf2e:	2b20      	cmp	r3, #32
 800cf30:	d123      	bne.n	800cf7a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10c      	bne.n	800cf56 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685a      	ldr	r2, [r3, #4]
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f008 ff38 	bl	8015dc0 <udp_send>
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800cf54:	e016      	b.n	800cf84 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6858      	ldr	r0, [r3, #4]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f103 0208 	add.w	r2, r3, #8
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	899b      	ldrh	r3, [r3, #12]
 800cf70:	f008 ff5a 	bl	8015e28 <udp_sendto>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
          break;
 800cf78:	e004      	b.n	800cf84 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800cf7a:	23f5      	movs	r3, #245	; 0xf5
 800cf7c:	73fb      	strb	r3, [r7, #15]
          break;
 800cf7e:	e001      	b.n	800cf84 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800cf80:	23f5      	movs	r3, #245	; 0xf5
 800cf82:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	7bfa      	ldrb	r2, [r7, #15]
 800cf88:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800cf8a:	bf00      	nop
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b086      	sub	sp, #24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d022      	beq.n	800cff4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfb8:	2b10      	cmp	r3, #16
 800cfba:	d11b      	bne.n	800cff4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc8:	d202      	bcs.n	800cfd0 <lwip_netconn_do_recv+0x3e>
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	e001      	b.n	800cfd4 <lwip_netconn_do_recv+0x42>
 800cfd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfd4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	89fa      	ldrh	r2, [r7, #14]
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f003 f84d 	bl	8010080 <tcp_recved>
        remaining -= recved;
 800cfe6:	89fb      	ldrh	r3, [r7, #14]
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e6      	bne.n	800cfc2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cff4:	bf00      	nop
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <lwip_netconn_do_writemore+0x24>
 800d012:	4b96      	ldr	r3, [pc, #600]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d014:	f240 6273 	movw	r2, #1651	; 0x673
 800d018:	4995      	ldr	r1, [pc, #596]	; (800d270 <lwip_netconn_do_writemore+0x274>)
 800d01a:	4896      	ldr	r0, [pc, #600]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d01c:	f00d ff80 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d006      	beq.n	800d036 <lwip_netconn_do_writemore+0x3a>
 800d028:	4b90      	ldr	r3, [pc, #576]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d02a:	f240 6274 	movw	r2, #1652	; 0x674
 800d02e:	4992      	ldr	r1, [pc, #584]	; (800d278 <lwip_netconn_do_writemore+0x27c>)
 800d030:	4890      	ldr	r0, [pc, #576]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d032:	f00d ff75 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <lwip_netconn_do_writemore+0x50>
 800d03e:	4b8b      	ldr	r3, [pc, #556]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d040:	f240 6275 	movw	r2, #1653	; 0x675
 800d044:	498d      	ldr	r1, [pc, #564]	; (800d27c <lwip_netconn_do_writemore+0x280>)
 800d046:	488b      	ldr	r0, [pc, #556]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d048:	f00d ff6a 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d106      	bne.n	800d062 <lwip_netconn_do_writemore+0x66>
 800d054:	4b85      	ldr	r3, [pc, #532]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d056:	f240 6276 	movw	r2, #1654	; 0x676
 800d05a:	4989      	ldr	r1, [pc, #548]	; (800d280 <lwip_netconn_do_writemore+0x284>)
 800d05c:	4885      	ldr	r0, [pc, #532]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d05e:	f00d ff5f 	bl	801af20 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	699a      	ldr	r2, [r3, #24]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d306      	bcc.n	800d080 <lwip_netconn_do_writemore+0x84>
 800d072:	4b7e      	ldr	r3, [pc, #504]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d074:	f240 6277 	movw	r2, #1655	; 0x677
 800d078:	4982      	ldr	r1, [pc, #520]	; (800d284 <lwip_netconn_do_writemore+0x288>)
 800d07a:	487e      	ldr	r0, [pc, #504]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d07c:	f00d ff50 	bl	801af20 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	899b      	ldrh	r3, [r3, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <lwip_netconn_do_writemore+0x9c>
 800d08a:	4b78      	ldr	r3, [pc, #480]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d08c:	f240 6279 	movw	r2, #1657	; 0x679
 800d090:	497d      	ldr	r1, [pc, #500]	; (800d288 <lwip_netconn_do_writemore+0x28c>)
 800d092:	4878      	ldr	r0, [pc, #480]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d094:	f00d ff44 	bl	801af20 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	7f1b      	ldrb	r3, [r3, #28]
 800d09e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	7f1b      	ldrb	r3, [r3, #28]
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d104      	bne.n	800d0b6 <lwip_netconn_do_writemore+0xba>
 800d0ac:	7ebb      	ldrb	r3, [r7, #26]
 800d0ae:	f003 0304 	and.w	r3, r3, #4
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <lwip_netconn_do_writemore+0xbe>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <lwip_netconn_do_writemore+0xc0>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a1b      	ldr	r3, [r3, #32]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a1b      	ldr	r3, [r3, #32]
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0e8:	d307      	bcc.n	800d0fa <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0ee:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d0f0:	7ebb      	ldrb	r3, [r7, #26]
 800d0f2:	f043 0302 	orr.w	r3, r3, #2
 800d0f6:	76bb      	strb	r3, [r7, #26]
 800d0f8:	e001      	b.n	800d0fe <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d106:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d108:	89fa      	ldrh	r2, [r7, #14]
 800d10a:	8bbb      	ldrh	r3, [r7, #28]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d216      	bcs.n	800d13e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d114:	7e3b      	ldrb	r3, [r7, #24]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00d      	beq.n	800d136 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d11a:	8bbb      	ldrh	r3, [r7, #28]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10e      	bne.n	800d13e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a1b      	ldr	r3, [r3, #32]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d102      	bne.n	800d130 <lwip_netconn_do_writemore+0x134>
 800d12a:	f06f 0306 	mvn.w	r3, #6
 800d12e:	e000      	b.n	800d132 <lwip_netconn_do_writemore+0x136>
 800d130:	2300      	movs	r3, #0
 800d132:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d134:	e07d      	b.n	800d232 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d136:	7ebb      	ldrb	r3, [r7, #26]
 800d138:	f043 0302 	orr.w	r3, r3, #2
 800d13c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	691a      	ldr	r2, [r3, #16]
 800d144:	8bbb      	ldrh	r3, [r7, #28]
 800d146:	441a      	add	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d906      	bls.n	800d162 <lwip_netconn_do_writemore+0x166>
 800d154:	4b45      	ldr	r3, [pc, #276]	; (800d26c <lwip_netconn_do_writemore+0x270>)
 800d156:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d15a:	494c      	ldr	r1, [pc, #304]	; (800d28c <lwip_netconn_do_writemore+0x290>)
 800d15c:	4845      	ldr	r0, [pc, #276]	; (800d274 <lwip_netconn_do_writemore+0x278>)
 800d15e:	f00d fedf 	bl	801af20 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d162:	8bbb      	ldrh	r3, [r7, #28]
 800d164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d168:	4293      	cmp	r3, r2
 800d16a:	d103      	bne.n	800d174 <lwip_netconn_do_writemore+0x178>
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d172:	d209      	bcs.n	800d188 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d178:	8bba      	ldrh	r2, [r7, #28]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d10b      	bne.n	800d196 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	899b      	ldrh	r3, [r3, #12]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d906      	bls.n	800d196 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d188:	2301      	movs	r3, #1
 800d18a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d18c:	7ebb      	ldrb	r3, [r7, #26]
 800d18e:	f043 0302 	orr.w	r3, r3, #2
 800d192:	76bb      	strb	r3, [r7, #26]
 800d194:	e001      	b.n	800d19a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6858      	ldr	r0, [r3, #4]
 800d19e:	7ebb      	ldrb	r3, [r7, #26]
 800d1a0:	8bba      	ldrh	r2, [r7, #28]
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	f006 fd70 	bl	8013c88 <tcp_write>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d1ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d12c      	bne.n	800d20e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a1b      	ldr	r3, [r3, #32]
 800d1b8:	6999      	ldr	r1, [r3, #24]
 800d1ba:	8bba      	ldrh	r2, [r7, #28]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a1b      	ldr	r3, [r3, #32]
 800d1c0:	440a      	add	r2, r1
 800d1c2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a1b      	ldr	r3, [r3, #32]
 800d1c8:	6919      	ldr	r1, [r3, #16]
 800d1ca:	8bba      	ldrh	r2, [r7, #28]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a1b      	ldr	r3, [r3, #32]
 800d1d0:	440a      	add	r2, r1
 800d1d2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6a1b      	ldr	r3, [r3, #32]
 800d1d8:	691a      	ldr	r2, [r3, #16]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a1b      	ldr	r3, [r3, #32]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d113      	bne.n	800d20e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	899a      	ldrh	r2, [r3, #12]
 800d1ec:	3a01      	subs	r2, #1
 800d1ee:	b292      	uxth	r2, r2
 800d1f0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	899b      	ldrh	r3, [r3, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d008      	beq.n	800d20e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	689a      	ldr	r2, [r3, #8]
 800d202:	3208      	adds	r2, #8
 800d204:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	2200      	movs	r2, #0
 800d20c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d20e:	7e7b      	ldrb	r3, [r7, #25]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d004      	beq.n	800d21e <lwip_netconn_do_writemore+0x222>
 800d214:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f43f af50 	beq.w	800d0be <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d21e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <lwip_netconn_do_writemore+0x234>
 800d226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22e:	d146      	bne.n	800d2be <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d230:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d232:	7e3b      	ldrb	r3, [r7, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d02b      	beq.n	800d290 <lwip_netconn_do_writemore+0x294>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	699a      	ldr	r2, [r3, #24]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	429a      	cmp	r2, r3
 800d246:	d223      	bcs.n	800d290 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <lwip_netconn_do_writemore+0x260>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	2200      	movs	r2, #0
 800d256:	2103      	movs	r1, #3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7f1b      	ldrb	r3, [r3, #28]
 800d260:	f043 0310 	orr.w	r3, r3, #16
 800d264:	b2da      	uxtb	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	771a      	strb	r2, [r3, #28]
 800d26a:	e028      	b.n	800d2be <lwip_netconn_do_writemore+0x2c2>
 800d26c:	0801c1c4 	.word	0x0801c1c4
 800d270:	0801c31c 	.word	0x0801c31c
 800d274:	0801c208 	.word	0x0801c208
 800d278:	0801c624 	.word	0x0801c624
 800d27c:	0801c32c 	.word	0x0801c32c
 800d280:	0801c644 	.word	0x0801c644
 800d284:	0801c65c 	.word	0x0801c65c
 800d288:	0801c69c 	.word	0x0801c69c
 800d28c:	0801c6c4 	.word	0x0801c6c4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d298:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d29c:	d305      	bcc.n	800d2aa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d2a6:	2b04      	cmp	r3, #4
 800d2a8:	d909      	bls.n	800d2be <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d005      	beq.n	800d2be <lwip_netconn_do_writemore+0x2c2>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2103      	movs	r1, #3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d2be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d11d      	bne.n	800d302 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	699a      	ldr	r2, [r3, #24]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a1b      	ldr	r3, [r3, #32]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d002      	beq.n	800d2dc <lwip_netconn_do_writemore+0x2e0>
 800d2d6:	7e3b      	ldrb	r3, [r7, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f007 fab9 	bl	801485c <tcp_output>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d2ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d2f2:	f113 0f04 	cmn.w	r3, #4
 800d2f6:	d12c      	bne.n	800d352 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d2f8:	7b3b      	ldrb	r3, [r7, #12]
 800d2fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	76fb      	strb	r3, [r7, #27]
 800d300:	e027      	b.n	800d352 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d302:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d120      	bne.n	800d34e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	4618      	mov	r0, r3
 800d312:	f007 faa3 	bl	801485c <tcp_output>
 800d316:	4603      	mov	r3, r0
 800d318:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d31a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d31e:	f113 0f04 	cmn.w	r3, #4
 800d322:	d104      	bne.n	800d32e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d324:	7b7b      	ldrb	r3, [r7, #13]
 800d326:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d328:	2301      	movs	r3, #1
 800d32a:	76fb      	strb	r3, [r7, #27]
 800d32c:	e011      	b.n	800d352 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d32e:	7e3b      	ldrb	r3, [r7, #24]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00e      	beq.n	800d352 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <lwip_netconn_do_writemore+0x348>
 800d33e:	f06f 0306 	mvn.w	r3, #6
 800d342:	e000      	b.n	800d346 <lwip_netconn_do_writemore+0x34a>
 800d344:	2300      	movs	r3, #0
 800d346:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d348:	2301      	movs	r3, #1
 800d34a:	76fb      	strb	r3, [r7, #27]
 800d34c:	e001      	b.n	800d352 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d34e:	2301      	movs	r3, #1
 800d350:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d352:	7efb      	ldrb	r3, [r7, #27]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d015      	beq.n	800d384 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a1b      	ldr	r3, [r3, #32]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	330c      	adds	r3, #12
 800d360:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	7ffa      	ldrb	r2, [r7, #31]
 800d368:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d376:	78fb      	ldrb	r3, [r7, #3]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d006      	beq.n	800d38a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d37c:	68b8      	ldr	r0, [r7, #8]
 800d37e:	f00d fb71 	bl	801aa64 <sys_sem_signal>
 800d382:	e002      	b.n	800d38a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d384:	f04f 33ff 	mov.w	r3, #4294967295
 800d388:	e000      	b.n	800d38c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d069      	beq.n	800d486 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d3bc:	2b10      	cmp	r3, #16
 800d3be:	d162      	bne.n	800d486 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d002      	beq.n	800d3ce <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d05b      	beq.n	800d486 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d103      	bne.n	800d3dc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	22f5      	movs	r2, #245	; 0xf5
 800d3d8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d3da:	e059      	b.n	800d490 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d3dc:	7afb      	ldrb	r3, [r7, #11]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d103      	bne.n	800d3ea <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	22fb      	movs	r2, #251	; 0xfb
 800d3e6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d3e8:	e052      	b.n	800d490 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	7a1b      	ldrb	r3, [r3, #8]
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d004      	beq.n	800d400 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fa7a 	bl	800c8f4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d006      	beq.n	800d418 <lwip_netconn_do_close+0x84>
 800d40a:	4b23      	ldr	r3, [pc, #140]	; (800d498 <lwip_netconn_do_close+0x104>)
 800d40c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800d410:	4922      	ldr	r1, [pc, #136]	; (800d49c <lwip_netconn_do_close+0x108>)
 800d412:	4823      	ldr	r0, [pc, #140]	; (800d4a0 <lwip_netconn_do_close+0x10c>)
 800d414:	f00d fd84 	bl	801af20 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2204      	movs	r2, #4
 800d41e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2100      	movs	r1, #0
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fade 	bl	800c9f0 <lwip_netconn_do_close_internal>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d029      	beq.n	800d48e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	2b04      	cmp	r3, #4
 800d442:	d006      	beq.n	800d452 <lwip_netconn_do_close+0xbe>
 800d444:	4b14      	ldr	r3, [pc, #80]	; (800d498 <lwip_netconn_do_close+0x104>)
 800d446:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800d44a:	4916      	ldr	r1, [pc, #88]	; (800d4a4 <lwip_netconn_do_close+0x110>)
 800d44c:	4814      	ldr	r0, [pc, #80]	; (800d4a0 <lwip_netconn_do_close+0x10c>)
 800d44e:	f00d fd67 	bl	801af20 <iprintf>
        UNLOCK_TCPIP_CORE();
 800d452:	4815      	ldr	r0, [pc, #84]	; (800d4a8 <lwip_netconn_do_close+0x114>)
 800d454:	f00d fb77 	bl	801ab46 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	330c      	adds	r3, #12
 800d45e:	2100      	movs	r1, #0
 800d460:	4618      	mov	r0, r3
 800d462:	f00d face 	bl	801aa02 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d466:	4810      	ldr	r0, [pc, #64]	; (800d4a8 <lwip_netconn_do_close+0x114>)
 800d468:	f00d fb5e 	bl	801ab28 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	785b      	ldrb	r3, [r3, #1]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00b      	beq.n	800d48e <lwip_netconn_do_close+0xfa>
 800d476:	4b08      	ldr	r3, [pc, #32]	; (800d498 <lwip_netconn_do_close+0x104>)
 800d478:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800d47c:	4909      	ldr	r1, [pc, #36]	; (800d4a4 <lwip_netconn_do_close+0x110>)
 800d47e:	4808      	ldr	r0, [pc, #32]	; (800d4a0 <lwip_netconn_do_close+0x10c>)
 800d480:	f00d fd4e 	bl	801af20 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d484:	e003      	b.n	800d48e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	22f5      	movs	r2, #245	; 0xf5
 800d48a:	711a      	strb	r2, [r3, #4]
 800d48c:	e000      	b.n	800d490 <lwip_netconn_do_close+0xfc>
      return;
 800d48e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	0801c1c4 	.word	0x0801c1c4
 800d49c:	0801c568 	.word	0x0801c568
 800d4a0:	0801c208 	.word	0x0801c208
 800d4a4:	0801c584 	.word	0x0801c584
 800d4a8:	2400a630 	.word	0x2400a630

0800d4ac <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d4b2:	2006      	movs	r0, #6
 800d4b4:	f000 ffc0 	bl	800e438 <memp_malloc>
 800d4b8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800d4c0:	2210      	movs	r2, #16
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f00d fcc8 	bl	801ae5a <memset>
  }
  return buf;
 800d4ca:	687b      	ldr	r3, [r7, #4]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d013      	beq.n	800d50a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00b      	beq.n	800d502 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f001 fec8 	bl	800f284 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d502:	6879      	ldr	r1, [r7, #4]
 800d504:	2006      	movs	r0, #6
 800d506:	f001 f80d 	bl	800e524 <memp_free>
  }
}
 800d50a:	bf00      	nop
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
	...

0800d514 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d107      	bne.n	800d536 <netbuf_alloc+0x22>
 800d526:	4b1c      	ldr	r3, [pc, #112]	; (800d598 <netbuf_alloc+0x84>)
 800d528:	2268      	movs	r2, #104	; 0x68
 800d52a:	491c      	ldr	r1, [pc, #112]	; (800d59c <netbuf_alloc+0x88>)
 800d52c:	481c      	ldr	r0, [pc, #112]	; (800d5a0 <netbuf_alloc+0x8c>)
 800d52e:	f00d fcf7 	bl	801af20 <iprintf>
 800d532:	2300      	movs	r3, #0
 800d534:	e02b      	b.n	800d58e <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4618      	mov	r0, r3
 800d544:	f001 fe9e 	bl	800f284 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 800d548:	887b      	ldrh	r3, [r7, #2]
 800d54a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d54e:	4619      	mov	r1, r3
 800d550:	2036      	movs	r0, #54	; 0x36
 800d552:	f001 fbb3 	bl	800ecbc <pbuf_alloc>
 800d556:	4602      	mov	r2, r0
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <netbuf_alloc+0x54>
    return NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	e012      	b.n	800d58e <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	895b      	ldrh	r3, [r3, #10]
 800d56e:	887a      	ldrh	r2, [r7, #2]
 800d570:	429a      	cmp	r2, r3
 800d572:	d905      	bls.n	800d580 <netbuf_alloc+0x6c>
 800d574:	4b08      	ldr	r3, [pc, #32]	; (800d598 <netbuf_alloc+0x84>)
 800d576:	2272      	movs	r2, #114	; 0x72
 800d578:	490a      	ldr	r1, [pc, #40]	; (800d5a4 <netbuf_alloc+0x90>)
 800d57a:	4809      	ldr	r0, [pc, #36]	; (800d5a0 <netbuf_alloc+0x8c>)
 800d57c:	f00d fcd0 	bl	801af20 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	685b      	ldr	r3, [r3, #4]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	0801c71c 	.word	0x0801c71c
 800d59c:	0801c750 	.word	0x0801c750
 800d5a0:	0801c76c 	.word	0x0801c76c
 800d5a4:	0801c794 	.word	0x0801c794

0800d5a8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d5b2:	f008 fa0b 	bl	80159cc <sys_timeouts_sleeptime>
 800d5b6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5be:	d10b      	bne.n	800d5d8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d5c0:	4813      	ldr	r0, [pc, #76]	; (800d610 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5c2:	f00d fac0 	bl	801ab46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f00d f978 	bl	801a8c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d5d0:	480f      	ldr	r0, [pc, #60]	; (800d610 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5d2:	f00d faa9 	bl	801ab28 <sys_mutex_lock>
    return;
 800d5d6:	e018      	b.n	800d60a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d102      	bne.n	800d5e4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d5de:	f008 f9bb 	bl	8015958 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5e2:	e7e6      	b.n	800d5b2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d5e4:	480a      	ldr	r0, [pc, #40]	; (800d610 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5e6:	f00d faae 	bl	801ab46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f00d f966 	bl	801a8c0 <sys_arch_mbox_fetch>
 800d5f4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d5f6:	4806      	ldr	r0, [pc, #24]	; (800d610 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5f8:	f00d fa96 	bl	801ab28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d602:	d102      	bne.n	800d60a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d604:	f008 f9a8 	bl	8015958 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d608:	e7d3      	b.n	800d5b2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	2400a630 	.word	0x2400a630

0800d614 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d61c:	4810      	ldr	r0, [pc, #64]	; (800d660 <tcpip_thread+0x4c>)
 800d61e:	f00d fa83 	bl	801ab28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d622:	4b10      	ldr	r3, [pc, #64]	; (800d664 <tcpip_thread+0x50>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d62a:	4b0e      	ldr	r3, [pc, #56]	; (800d664 <tcpip_thread+0x50>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a0e      	ldr	r2, [pc, #56]	; (800d668 <tcpip_thread+0x54>)
 800d630:	6812      	ldr	r2, [r2, #0]
 800d632:	4610      	mov	r0, r2
 800d634:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d636:	f107 030c 	add.w	r3, r7, #12
 800d63a:	4619      	mov	r1, r3
 800d63c:	480b      	ldr	r0, [pc, #44]	; (800d66c <tcpip_thread+0x58>)
 800d63e:	f7ff ffb3 	bl	800d5a8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d648:	4b09      	ldr	r3, [pc, #36]	; (800d670 <tcpip_thread+0x5c>)
 800d64a:	2291      	movs	r2, #145	; 0x91
 800d64c:	4909      	ldr	r1, [pc, #36]	; (800d674 <tcpip_thread+0x60>)
 800d64e:	480a      	ldr	r0, [pc, #40]	; (800d678 <tcpip_thread+0x64>)
 800d650:	f00d fc66 	bl	801af20 <iprintf>
      continue;
 800d654:	e003      	b.n	800d65e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 f80f 	bl	800d67c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d65e:	e7ea      	b.n	800d636 <tcpip_thread+0x22>
 800d660:	2400a630 	.word	0x2400a630
 800d664:	24009d5c 	.word	0x24009d5c
 800d668:	24009d60 	.word	0x24009d60
 800d66c:	24009d64 	.word	0x24009d64
 800d670:	0801c8b4 	.word	0x0801c8b4
 800d674:	0801c8e4 	.word	0x0801c8e4
 800d678:	0801c904 	.word	0x0801c904

0800d67c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d026      	beq.n	800d6da <tcpip_thread_handle_msg+0x5e>
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	dc2b      	bgt.n	800d6e8 <tcpip_thread_handle_msg+0x6c>
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <tcpip_thread_handle_msg+0x1e>
 800d694:	2b01      	cmp	r3, #1
 800d696:	d015      	beq.n	800d6c4 <tcpip_thread_handle_msg+0x48>
 800d698:	e026      	b.n	800d6e8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6850      	ldr	r0, [r2, #4]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6892      	ldr	r2, [r2, #8]
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4798      	blx	r3
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fde5 	bl	800f284 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	2009      	movs	r0, #9
 800d6be:	f000 ff31 	bl	800e524 <memp_free>
      break;
 800d6c2:	e018      	b.n	800d6f6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6892      	ldr	r2, [r2, #8]
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	2008      	movs	r0, #8
 800d6d4:	f000 ff26 	bl	800e524 <memp_free>
      break;
 800d6d8:	e00d      	b.n	800d6f6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	6892      	ldr	r2, [r2, #8]
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	4798      	blx	r3
      break;
 800d6e6:	e006      	b.n	800d6f6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d6e8:	4b05      	ldr	r3, [pc, #20]	; (800d700 <tcpip_thread_handle_msg+0x84>)
 800d6ea:	22cf      	movs	r2, #207	; 0xcf
 800d6ec:	4905      	ldr	r1, [pc, #20]	; (800d704 <tcpip_thread_handle_msg+0x88>)
 800d6ee:	4806      	ldr	r0, [pc, #24]	; (800d708 <tcpip_thread_handle_msg+0x8c>)
 800d6f0:	f00d fc16 	bl	801af20 <iprintf>
      break;
 800d6f4:	bf00      	nop
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	0801c8b4 	.word	0x0801c8b4
 800d704:	0801c8e4 	.word	0x0801c8e4
 800d708:	0801c904 	.word	0x0801c904

0800d70c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d718:	481a      	ldr	r0, [pc, #104]	; (800d784 <tcpip_inpkt+0x78>)
 800d71a:	f00d f92c 	bl	801a976 <sys_mbox_valid>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d105      	bne.n	800d730 <tcpip_inpkt+0x24>
 800d724:	4b18      	ldr	r3, [pc, #96]	; (800d788 <tcpip_inpkt+0x7c>)
 800d726:	22fc      	movs	r2, #252	; 0xfc
 800d728:	4918      	ldr	r1, [pc, #96]	; (800d78c <tcpip_inpkt+0x80>)
 800d72a:	4819      	ldr	r0, [pc, #100]	; (800d790 <tcpip_inpkt+0x84>)
 800d72c:	f00d fbf8 	bl	801af20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d730:	2009      	movs	r0, #9
 800d732:	f000 fe81 	bl	800e438 <memp_malloc>
 800d736:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d73e:	f04f 33ff 	mov.w	r3, #4294967295
 800d742:	e01a      	b.n	800d77a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2200      	movs	r2, #0
 800d748:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d75c:	6979      	ldr	r1, [r7, #20]
 800d75e:	4809      	ldr	r0, [pc, #36]	; (800d784 <tcpip_inpkt+0x78>)
 800d760:	f00d f894 	bl	801a88c <sys_mbox_trypost>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d006      	beq.n	800d778 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d76a:	6979      	ldr	r1, [r7, #20]
 800d76c:	2009      	movs	r0, #9
 800d76e:	f000 fed9 	bl	800e524 <memp_free>
    return ERR_MEM;
 800d772:	f04f 33ff 	mov.w	r3, #4294967295
 800d776:	e000      	b.n	800d77a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d778:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	24009d64 	.word	0x24009d64
 800d788:	0801c8b4 	.word	0x0801c8b4
 800d78c:	0801c92c 	.word	0x0801c92c
 800d790:	0801c904 	.word	0x0801c904

0800d794 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d7a4:	f003 0318 	and.w	r3, r3, #24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d006      	beq.n	800d7ba <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d7ac:	4a08      	ldr	r2, [pc, #32]	; (800d7d0 <tcpip_input+0x3c>)
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff ffab 	bl	800d70c <tcpip_inpkt>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	e005      	b.n	800d7c6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d7ba:	4a06      	ldr	r2, [pc, #24]	; (800d7d4 <tcpip_input+0x40>)
 800d7bc:	6839      	ldr	r1, [r7, #0]
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff ffa4 	bl	800d70c <tcpip_inpkt>
 800d7c4:	4603      	mov	r3, r0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0801a679 	.word	0x0801a679
 800d7d4:	08019551 	.word	0x08019551

0800d7d8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d7e2:	4819      	ldr	r0, [pc, #100]	; (800d848 <tcpip_try_callback+0x70>)
 800d7e4:	f00d f8c7 	bl	801a976 <sys_mbox_valid>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <tcpip_try_callback+0x24>
 800d7ee:	4b17      	ldr	r3, [pc, #92]	; (800d84c <tcpip_try_callback+0x74>)
 800d7f0:	f240 125d 	movw	r2, #349	; 0x15d
 800d7f4:	4916      	ldr	r1, [pc, #88]	; (800d850 <tcpip_try_callback+0x78>)
 800d7f6:	4817      	ldr	r0, [pc, #92]	; (800d854 <tcpip_try_callback+0x7c>)
 800d7f8:	f00d fb92 	bl	801af20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d7fc:	2008      	movs	r0, #8
 800d7fe:	f000 fe1b 	bl	800e438 <memp_malloc>
 800d802:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d80a:	f04f 33ff 	mov.w	r3, #4294967295
 800d80e:	e017      	b.n	800d840 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2201      	movs	r2, #1
 800d814:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d822:	68f9      	ldr	r1, [r7, #12]
 800d824:	4808      	ldr	r0, [pc, #32]	; (800d848 <tcpip_try_callback+0x70>)
 800d826:	f00d f831 	bl	801a88c <sys_mbox_trypost>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d006      	beq.n	800d83e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d830:	68f9      	ldr	r1, [r7, #12]
 800d832:	2008      	movs	r0, #8
 800d834:	f000 fe76 	bl	800e524 <memp_free>
    return ERR_MEM;
 800d838:	f04f 33ff 	mov.w	r3, #4294967295
 800d83c:	e000      	b.n	800d840 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	24009d64 	.word	0x24009d64
 800d84c:	0801c8b4 	.word	0x0801c8b4
 800d850:	0801c92c 	.word	0x0801c92c
 800d854:	0801c904 	.word	0x0801c904

0800d858 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d864:	4806      	ldr	r0, [pc, #24]	; (800d880 <tcpip_send_msg_wait_sem+0x28>)
 800d866:	f00d f95f 	bl	801ab28 <sys_mutex_lock>
  fn(apimsg);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	68b8      	ldr	r0, [r7, #8]
 800d86e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d870:	4803      	ldr	r0, [pc, #12]	; (800d880 <tcpip_send_msg_wait_sem+0x28>)
 800d872:	f00d f968 	bl	801ab46 <sys_mutex_unlock>
  return ERR_OK;
 800d876:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	2400a630 	.word	0x2400a630

0800d884 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af02      	add	r7, sp, #8
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d88e:	f000 f92d 	bl	800daec <lwip_init>

  tcpip_init_done = initfunc;
 800d892:	4a17      	ldr	r2, [pc, #92]	; (800d8f0 <tcpip_init+0x6c>)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d898:	4a16      	ldr	r2, [pc, #88]	; (800d8f4 <tcpip_init+0x70>)
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d89e:	2106      	movs	r1, #6
 800d8a0:	4815      	ldr	r0, [pc, #84]	; (800d8f8 <tcpip_init+0x74>)
 800d8a2:	f00c ffbf 	bl	801a824 <sys_mbox_new>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d006      	beq.n	800d8ba <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d8ac:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <tcpip_init+0x78>)
 800d8ae:	f240 2261 	movw	r2, #609	; 0x261
 800d8b2:	4913      	ldr	r1, [pc, #76]	; (800d900 <tcpip_init+0x7c>)
 800d8b4:	4813      	ldr	r0, [pc, #76]	; (800d904 <tcpip_init+0x80>)
 800d8b6:	f00d fb33 	bl	801af20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d8ba:	4813      	ldr	r0, [pc, #76]	; (800d908 <tcpip_init+0x84>)
 800d8bc:	f00d f918 	bl	801aaf0 <sys_mutex_new>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d006      	beq.n	800d8d4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <tcpip_init+0x78>)
 800d8c8:	f240 2265 	movw	r2, #613	; 0x265
 800d8cc:	490f      	ldr	r1, [pc, #60]	; (800d90c <tcpip_init+0x88>)
 800d8ce:	480d      	ldr	r0, [pc, #52]	; (800d904 <tcpip_init+0x80>)
 800d8d0:	f00d fb26 	bl	801af20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8dc:	2200      	movs	r2, #0
 800d8de:	490c      	ldr	r1, [pc, #48]	; (800d910 <tcpip_init+0x8c>)
 800d8e0:	480c      	ldr	r0, [pc, #48]	; (800d914 <tcpip_init+0x90>)
 800d8e2:	f00d f93d 	bl	801ab60 <sys_thread_new>
}
 800d8e6:	bf00      	nop
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	24009d5c 	.word	0x24009d5c
 800d8f4:	24009d60 	.word	0x24009d60
 800d8f8:	24009d64 	.word	0x24009d64
 800d8fc:	0801c8b4 	.word	0x0801c8b4
 800d900:	0801c93c 	.word	0x0801c93c
 800d904:	0801c904 	.word	0x0801c904
 800d908:	2400a630 	.word	0x2400a630
 800d90c:	0801c960 	.word	0x0801c960
 800d910:	0800d615 	.word	0x0800d615
 800d914:	0801c984 	.word	0x0801c984

0800d918 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d922:	88fb      	ldrh	r3, [r7, #6]
 800d924:	021b      	lsls	r3, r3, #8
 800d926:	b21a      	sxth	r2, r3
 800d928:	88fb      	ldrh	r3, [r7, #6]
 800d92a:	0a1b      	lsrs	r3, r3, #8
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	b21b      	sxth	r3, r3
 800d930:	4313      	orrs	r3, r2
 800d932:	b21b      	sxth	r3, r3
 800d934:	b29b      	uxth	r3, r3
}
 800d936:	4618      	mov	r0, r3
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	061a      	lsls	r2, r3, #24
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	021b      	lsls	r3, r3, #8
 800d952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d956:	431a      	orrs	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	0a1b      	lsrs	r3, r3, #8
 800d95c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d960:	431a      	orrs	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	0e1b      	lsrs	r3, r3, #24
 800d966:	4313      	orrs	r3, r2
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d974:	b480      	push	{r7}
 800d976:	b089      	sub	sp, #36	; 0x24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	f003 0301 	and.w	r3, r3, #1
 800d990:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00d      	beq.n	800d9b4 <lwip_standard_chksum+0x40>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	dd0a      	ble.n	800d9b4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d99e:	69fa      	ldr	r2, [r7, #28]
 800d9a0:	1c53      	adds	r3, r2, #1
 800d9a2:	61fb      	str	r3, [r7, #28]
 800d9a4:	f107 030e 	add.w	r3, r7, #14
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	7812      	ldrb	r2, [r2, #0]
 800d9ac:	701a      	strb	r2, [r3, #0]
    len--;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d9b8:	e00a      	b.n	800d9d0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	1c9a      	adds	r2, r3, #2
 800d9be:	61ba      	str	r2, [r7, #24]
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	3b02      	subs	r3, #2
 800d9ce:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	dcf1      	bgt.n	800d9ba <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	dd04      	ble.n	800d9e6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d9dc:	f107 030e 	add.w	r3, r7, #14
 800d9e0:	69ba      	ldr	r2, [r7, #24]
 800d9e2:	7812      	ldrb	r2, [r2, #0]
 800d9e4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d9e6:	89fb      	ldrh	r3, [r7, #14]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	0c1a      	lsrs	r2, r3, #16
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4413      	add	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	0c1a      	lsrs	r2, r3, #16
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	b29b      	uxth	r3, r3
 800da04:	4413      	add	r3, r2
 800da06:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d007      	beq.n	800da1e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	b29a      	uxth	r2, r3
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	0a1b      	lsrs	r3, r3, #8
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	4313      	orrs	r3, r2
 800da1c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	b29b      	uxth	r3, r3
}
 800da22:	4618      	mov	r0, r3
 800da24:	3724      	adds	r7, #36	; 0x24
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800da3a:	887b      	ldrh	r3, [r7, #2]
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff ff98 	bl	800d974 <lwip_standard_chksum>
 800da44:	4603      	mov	r3, r0
 800da46:	43db      	mvns	r3, r3
 800da48:	b29b      	uxth	r3, r3
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b086      	sub	sp, #24
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	613b      	str	r3, [r7, #16]
 800da66:	e02b      	b.n	800dac0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	895b      	ldrh	r3, [r3, #10]
 800da70:	4619      	mov	r1, r3
 800da72:	4610      	mov	r0, r2
 800da74:	f7ff ff7e 	bl	800d974 <lwip_standard_chksum>
 800da78:	4603      	mov	r3, r0
 800da7a:	461a      	mov	r2, r3
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	4413      	add	r3, r2
 800da80:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	0c1a      	lsrs	r2, r3, #16
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	4413      	add	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	895b      	ldrh	r3, [r3, #10]
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	b29b      	uxth	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00e      	beq.n	800daba <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bf0c      	ite	eq
 800daa2:	2301      	moveq	r3, #1
 800daa4:	2300      	movne	r3, #0
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	021b      	lsls	r3, r3, #8
 800daae:	b29a      	uxth	r2, r3
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	0a1b      	lsrs	r3, r3, #8
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	613b      	str	r3, [r7, #16]
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1d0      	bne.n	800da68 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d007      	beq.n	800dadc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	0a1b      	lsrs	r3, r3, #8
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	4313      	orrs	r3, r2
 800dada:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	43db      	mvns	r3, r3
 800dae2:	b29b      	uxth	r3, r3
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800daf6:	f00c ffed 	bl	801aad4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800dafa:	f000 f8d5 	bl	800dca8 <mem_init>
  memp_init();
 800dafe:	f000 fc2d 	bl	800e35c <memp_init>
  pbuf_init();
  netif_init();
 800db02:	f000 fd39 	bl	800e578 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800db06:	f007 ff99 	bl	8015a3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800db0a:	f001 fe65 	bl	800f7d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800db0e:	f007 fedb 	bl	80158c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	4603      	mov	r3, r0
 800db24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800db26:	4b05      	ldr	r3, [pc, #20]	; (800db3c <ptr_to_mem+0x20>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	4413      	add	r3, r2
}
 800db2e:	4618      	mov	r0, r3
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	24009d68 	.word	0x24009d68

0800db40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800db48:	4b05      	ldr	r3, [pc, #20]	; (800db60 <mem_to_ptr+0x20>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	b29b      	uxth	r3, r3
}
 800db52:	4618      	mov	r0, r3
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	24009d68 	.word	0x24009d68

0800db64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800db64:	b590      	push	{r4, r7, lr}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800db6c:	4b45      	ldr	r3, [pc, #276]	; (800dc84 <plug_holes+0x120>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d206      	bcs.n	800db84 <plug_holes+0x20>
 800db76:	4b44      	ldr	r3, [pc, #272]	; (800dc88 <plug_holes+0x124>)
 800db78:	f240 12df 	movw	r2, #479	; 0x1df
 800db7c:	4943      	ldr	r1, [pc, #268]	; (800dc8c <plug_holes+0x128>)
 800db7e:	4844      	ldr	r0, [pc, #272]	; (800dc90 <plug_holes+0x12c>)
 800db80:	f00d f9ce 	bl	801af20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800db84:	4b43      	ldr	r3, [pc, #268]	; (800dc94 <plug_holes+0x130>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d306      	bcc.n	800db9c <plug_holes+0x38>
 800db8e:	4b3e      	ldr	r3, [pc, #248]	; (800dc88 <plug_holes+0x124>)
 800db90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800db94:	4940      	ldr	r1, [pc, #256]	; (800dc98 <plug_holes+0x134>)
 800db96:	483e      	ldr	r0, [pc, #248]	; (800dc90 <plug_holes+0x12c>)
 800db98:	f00d f9c2 	bl	801af20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	791b      	ldrb	r3, [r3, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d006      	beq.n	800dbb2 <plug_holes+0x4e>
 800dba4:	4b38      	ldr	r3, [pc, #224]	; (800dc88 <plug_holes+0x124>)
 800dba6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dbaa:	493c      	ldr	r1, [pc, #240]	; (800dc9c <plug_holes+0x138>)
 800dbac:	4838      	ldr	r0, [pc, #224]	; (800dc90 <plug_holes+0x12c>)
 800dbae:	f00d f9b7 	bl	801af20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dbba:	d906      	bls.n	800dbca <plug_holes+0x66>
 800dbbc:	4b32      	ldr	r3, [pc, #200]	; (800dc88 <plug_holes+0x124>)
 800dbbe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800dbc2:	4937      	ldr	r1, [pc, #220]	; (800dca0 <plug_holes+0x13c>)
 800dbc4:	4832      	ldr	r0, [pc, #200]	; (800dc90 <plug_holes+0x12c>)
 800dbc6:	f00d f9ab 	bl	801af20 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff ffa4 	bl	800db1c <ptr_to_mem>
 800dbd4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d024      	beq.n	800dc28 <plug_holes+0xc4>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	791b      	ldrb	r3, [r3, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d120      	bne.n	800dc28 <plug_holes+0xc4>
 800dbe6:	4b2b      	ldr	r3, [pc, #172]	; (800dc94 <plug_holes+0x130>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d01b      	beq.n	800dc28 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dbf0:	4b2c      	ldr	r3, [pc, #176]	; (800dca4 <plug_holes+0x140>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d102      	bne.n	800dc00 <plug_holes+0x9c>
      lfree = mem;
 800dbfa:	4a2a      	ldr	r2, [pc, #168]	; (800dca4 <plug_holes+0x140>)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	881a      	ldrh	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	881b      	ldrh	r3, [r3, #0]
 800dc0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc10:	d00a      	beq.n	800dc28 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff ff80 	bl	800db1c <ptr_to_mem>
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7ff ff8e 	bl	800db40 <mem_to_ptr>
 800dc24:	4603      	mov	r3, r0
 800dc26:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	885b      	ldrh	r3, [r3, #2]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff ff75 	bl	800db1c <ptr_to_mem>
 800dc32:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d01f      	beq.n	800dc7c <plug_holes+0x118>
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	791b      	ldrb	r3, [r3, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d11b      	bne.n	800dc7c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dc44:	4b17      	ldr	r3, [pc, #92]	; (800dca4 <plug_holes+0x140>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d102      	bne.n	800dc54 <plug_holes+0xf0>
      lfree = pmem;
 800dc4e:	4a15      	ldr	r2, [pc, #84]	; (800dca4 <plug_holes+0x140>)
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	881a      	ldrh	r2, [r3, #0]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc64:	d00a      	beq.n	800dc7c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ff56 	bl	800db1c <ptr_to_mem>
 800dc70:	4604      	mov	r4, r0
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f7ff ff64 	bl	800db40 <mem_to_ptr>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dc7c:	bf00      	nop
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd90      	pop	{r4, r7, pc}
 800dc84:	24009d68 	.word	0x24009d68
 800dc88:	0801c994 	.word	0x0801c994
 800dc8c:	0801c9c4 	.word	0x0801c9c4
 800dc90:	0801c9dc 	.word	0x0801c9dc
 800dc94:	24009d6c 	.word	0x24009d6c
 800dc98:	0801ca04 	.word	0x0801ca04
 800dc9c:	0801ca20 	.word	0x0801ca20
 800dca0:	0801ca3c 	.word	0x0801ca3c
 800dca4:	24009d74 	.word	0x24009d74

0800dca8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dcae:	4b1d      	ldr	r3, [pc, #116]	; (800dd24 <mem_init+0x7c>)
 800dcb0:	4a1d      	ldr	r2, [pc, #116]	; (800dd28 <mem_init+0x80>)
 800dcb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dcb4:	4b1b      	ldr	r3, [pc, #108]	; (800dd24 <mem_init+0x7c>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dcc0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dcce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800dcd2:	f7ff ff23 	bl	800db1c <ptr_to_mem>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4a14      	ldr	r2, [pc, #80]	; (800dd2c <mem_init+0x84>)
 800dcda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dcdc:	4b13      	ldr	r3, [pc, #76]	; (800dd2c <mem_init+0x84>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2201      	movs	r2, #1
 800dce2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dce4:	4b11      	ldr	r3, [pc, #68]	; (800dd2c <mem_init+0x84>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dcec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dcee:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <mem_init+0x84>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dcf6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dcf8:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <mem_init+0x7c>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a0c      	ldr	r2, [pc, #48]	; (800dd30 <mem_init+0x88>)
 800dcfe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dd00:	480c      	ldr	r0, [pc, #48]	; (800dd34 <mem_init+0x8c>)
 800dd02:	f00c fef5 	bl	801aaf0 <sys_mutex_new>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d006      	beq.n	800dd1a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <mem_init+0x90>)
 800dd0e:	f240 221f 	movw	r2, #543	; 0x21f
 800dd12:	490a      	ldr	r1, [pc, #40]	; (800dd3c <mem_init+0x94>)
 800dd14:	480a      	ldr	r0, [pc, #40]	; (800dd40 <mem_init+0x98>)
 800dd16:	f00d f903 	bl	801af20 <iprintf>
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	24009d68 	.word	0x24009d68
 800dd28:	30044000 	.word	0x30044000
 800dd2c:	24009d6c 	.word	0x24009d6c
 800dd30:	24009d74 	.word	0x24009d74
 800dd34:	24009d70 	.word	0x24009d70
 800dd38:	0801c994 	.word	0x0801c994
 800dd3c:	0801ca68 	.word	0x0801ca68
 800dd40:	0801c9dc 	.word	0x0801c9dc

0800dd44 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff fef7 	bl	800db40 <mem_to_ptr>
 800dd52:	4603      	mov	r3, r0
 800dd54:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff fede 	bl	800db1c <ptr_to_mem>
 800dd60:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff fed8 	bl	800db1c <ptr_to_mem>
 800dd6c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dd76:	d818      	bhi.n	800ddaa <mem_link_valid+0x66>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	885b      	ldrh	r3, [r3, #2]
 800dd7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dd80:	d813      	bhi.n	800ddaa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dd86:	8afa      	ldrh	r2, [r7, #22]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d004      	beq.n	800dd96 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	8afa      	ldrh	r2, [r7, #22]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d109      	bne.n	800ddaa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dd96:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <mem_link_valid+0x74>)
 800dd98:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d006      	beq.n	800ddae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	885b      	ldrh	r3, [r3, #2]
 800dda4:	8afa      	ldrh	r2, [r7, #22]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d001      	beq.n	800ddae <mem_link_valid+0x6a>
    return 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	e000      	b.n	800ddb0 <mem_link_valid+0x6c>
  }
  return 1;
 800ddae:	2301      	movs	r3, #1
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3718      	adds	r7, #24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	24009d6c 	.word	0x24009d6c

0800ddbc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d070      	beq.n	800deac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00d      	beq.n	800ddf0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ddd4:	4b37      	ldr	r3, [pc, #220]	; (800deb4 <mem_free+0xf8>)
 800ddd6:	f240 2273 	movw	r2, #627	; 0x273
 800ddda:	4937      	ldr	r1, [pc, #220]	; (800deb8 <mem_free+0xfc>)
 800dddc:	4837      	ldr	r0, [pc, #220]	; (800debc <mem_free+0x100>)
 800ddde:	f00d f89f 	bl	801af20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dde2:	f00c fee3 	bl	801abac <sys_arch_protect>
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f00c feed 	bl	801abc8 <sys_arch_unprotect>
    return;
 800ddee:	e05e      	b.n	800deae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3b08      	subs	r3, #8
 800ddf4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ddf6:	4b32      	ldr	r3, [pc, #200]	; (800dec0 <mem_free+0x104>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d306      	bcc.n	800de0e <mem_free+0x52>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f103 020c 	add.w	r2, r3, #12
 800de06:	4b2f      	ldr	r3, [pc, #188]	; (800dec4 <mem_free+0x108>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d90d      	bls.n	800de2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800de0e:	4b29      	ldr	r3, [pc, #164]	; (800deb4 <mem_free+0xf8>)
 800de10:	f240 227f 	movw	r2, #639	; 0x27f
 800de14:	492c      	ldr	r1, [pc, #176]	; (800dec8 <mem_free+0x10c>)
 800de16:	4829      	ldr	r0, [pc, #164]	; (800debc <mem_free+0x100>)
 800de18:	f00d f882 	bl	801af20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de1c:	f00c fec6 	bl	801abac <sys_arch_protect>
 800de20:	6138      	str	r0, [r7, #16]
 800de22:	6938      	ldr	r0, [r7, #16]
 800de24:	f00c fed0 	bl	801abc8 <sys_arch_unprotect>
    return;
 800de28:	e041      	b.n	800deae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de2a:	4828      	ldr	r0, [pc, #160]	; (800decc <mem_free+0x110>)
 800de2c:	f00c fe7c 	bl	801ab28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	791b      	ldrb	r3, [r3, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d110      	bne.n	800de5a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800de38:	4b1e      	ldr	r3, [pc, #120]	; (800deb4 <mem_free+0xf8>)
 800de3a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800de3e:	4924      	ldr	r1, [pc, #144]	; (800ded0 <mem_free+0x114>)
 800de40:	481e      	ldr	r0, [pc, #120]	; (800debc <mem_free+0x100>)
 800de42:	f00d f86d 	bl	801af20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800de46:	4821      	ldr	r0, [pc, #132]	; (800decc <mem_free+0x110>)
 800de48:	f00c fe7d 	bl	801ab46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de4c:	f00c feae 	bl	801abac <sys_arch_protect>
 800de50:	6178      	str	r0, [r7, #20]
 800de52:	6978      	ldr	r0, [r7, #20]
 800de54:	f00c feb8 	bl	801abc8 <sys_arch_unprotect>
    return;
 800de58:	e029      	b.n	800deae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800de5a:	69f8      	ldr	r0, [r7, #28]
 800de5c:	f7ff ff72 	bl	800dd44 <mem_link_valid>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d110      	bne.n	800de88 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800de66:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <mem_free+0xf8>)
 800de68:	f240 2295 	movw	r2, #661	; 0x295
 800de6c:	4919      	ldr	r1, [pc, #100]	; (800ded4 <mem_free+0x118>)
 800de6e:	4813      	ldr	r0, [pc, #76]	; (800debc <mem_free+0x100>)
 800de70:	f00d f856 	bl	801af20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800de74:	4815      	ldr	r0, [pc, #84]	; (800decc <mem_free+0x110>)
 800de76:	f00c fe66 	bl	801ab46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de7a:	f00c fe97 	bl	801abac <sys_arch_protect>
 800de7e:	61b8      	str	r0, [r7, #24]
 800de80:	69b8      	ldr	r0, [r7, #24]
 800de82:	f00c fea1 	bl	801abc8 <sys_arch_unprotect>
    return;
 800de86:	e012      	b.n	800deae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	2200      	movs	r2, #0
 800de8c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <mem_free+0x11c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	69fa      	ldr	r2, [r7, #28]
 800de94:	429a      	cmp	r2, r3
 800de96:	d202      	bcs.n	800de9e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800de98:	4a0f      	ldr	r2, [pc, #60]	; (800ded8 <mem_free+0x11c>)
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800de9e:	69f8      	ldr	r0, [r7, #28]
 800dea0:	f7ff fe60 	bl	800db64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dea4:	4809      	ldr	r0, [pc, #36]	; (800decc <mem_free+0x110>)
 800dea6:	f00c fe4e 	bl	801ab46 <sys_mutex_unlock>
 800deaa:	e000      	b.n	800deae <mem_free+0xf2>
    return;
 800deac:	bf00      	nop
}
 800deae:	3720      	adds	r7, #32
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	0801c994 	.word	0x0801c994
 800deb8:	0801ca84 	.word	0x0801ca84
 800debc:	0801c9dc 	.word	0x0801c9dc
 800dec0:	24009d68 	.word	0x24009d68
 800dec4:	24009d6c 	.word	0x24009d6c
 800dec8:	0801caa8 	.word	0x0801caa8
 800decc:	24009d70 	.word	0x24009d70
 800ded0:	0801cac4 	.word	0x0801cac4
 800ded4:	0801caec 	.word	0x0801caec
 800ded8:	24009d74 	.word	0x24009d74

0800dedc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dee8:	887b      	ldrh	r3, [r7, #2]
 800deea:	3303      	adds	r3, #3
 800deec:	b29b      	uxth	r3, r3
 800deee:	f023 0303 	bic.w	r3, r3, #3
 800def2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800def4:	8bfb      	ldrh	r3, [r7, #30]
 800def6:	2b0b      	cmp	r3, #11
 800def8:	d801      	bhi.n	800defe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800defa:	230c      	movs	r3, #12
 800defc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800defe:	8bfb      	ldrh	r3, [r7, #30]
 800df00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df04:	d803      	bhi.n	800df0e <mem_trim+0x32>
 800df06:	8bfa      	ldrh	r2, [r7, #30]
 800df08:	887b      	ldrh	r3, [r7, #2]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d201      	bcs.n	800df12 <mem_trim+0x36>
    return NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	e0d8      	b.n	800e0c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800df12:	4b6e      	ldr	r3, [pc, #440]	; (800e0cc <mem_trim+0x1f0>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d304      	bcc.n	800df26 <mem_trim+0x4a>
 800df1c:	4b6c      	ldr	r3, [pc, #432]	; (800e0d0 <mem_trim+0x1f4>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	429a      	cmp	r2, r3
 800df24:	d306      	bcc.n	800df34 <mem_trim+0x58>
 800df26:	4b6b      	ldr	r3, [pc, #428]	; (800e0d4 <mem_trim+0x1f8>)
 800df28:	f240 22d1 	movw	r2, #721	; 0x2d1
 800df2c:	496a      	ldr	r1, [pc, #424]	; (800e0d8 <mem_trim+0x1fc>)
 800df2e:	486b      	ldr	r0, [pc, #428]	; (800e0dc <mem_trim+0x200>)
 800df30:	f00c fff6 	bl	801af20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800df34:	4b65      	ldr	r3, [pc, #404]	; (800e0cc <mem_trim+0x1f0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d304      	bcc.n	800df48 <mem_trim+0x6c>
 800df3e:	4b64      	ldr	r3, [pc, #400]	; (800e0d0 <mem_trim+0x1f4>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	429a      	cmp	r2, r3
 800df46:	d307      	bcc.n	800df58 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800df48:	f00c fe30 	bl	801abac <sys_arch_protect>
 800df4c:	60b8      	str	r0, [r7, #8]
 800df4e:	68b8      	ldr	r0, [r7, #8]
 800df50:	f00c fe3a 	bl	801abc8 <sys_arch_unprotect>
    return rmem;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	e0b5      	b.n	800e0c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3b08      	subs	r3, #8
 800df5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800df5e:	69b8      	ldr	r0, [r7, #24]
 800df60:	f7ff fdee 	bl	800db40 <mem_to_ptr>
 800df64:	4603      	mov	r3, r0
 800df66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	881a      	ldrh	r2, [r3, #0]
 800df6c:	8afb      	ldrh	r3, [r7, #22]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	b29b      	uxth	r3, r3
 800df72:	3b08      	subs	r3, #8
 800df74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800df76:	8bfa      	ldrh	r2, [r7, #30]
 800df78:	8abb      	ldrh	r3, [r7, #20]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d906      	bls.n	800df8c <mem_trim+0xb0>
 800df7e:	4b55      	ldr	r3, [pc, #340]	; (800e0d4 <mem_trim+0x1f8>)
 800df80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800df84:	4956      	ldr	r1, [pc, #344]	; (800e0e0 <mem_trim+0x204>)
 800df86:	4855      	ldr	r0, [pc, #340]	; (800e0dc <mem_trim+0x200>)
 800df88:	f00c ffca 	bl	801af20 <iprintf>
  if (newsize > size) {
 800df8c:	8bfa      	ldrh	r2, [r7, #30]
 800df8e:	8abb      	ldrh	r3, [r7, #20]
 800df90:	429a      	cmp	r2, r3
 800df92:	d901      	bls.n	800df98 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800df94:	2300      	movs	r3, #0
 800df96:	e095      	b.n	800e0c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800df98:	8bfa      	ldrh	r2, [r7, #30]
 800df9a:	8abb      	ldrh	r3, [r7, #20]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d101      	bne.n	800dfa4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	e08f      	b.n	800e0c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dfa4:	484f      	ldr	r0, [pc, #316]	; (800e0e4 <mem_trim+0x208>)
 800dfa6:	f00c fdbf 	bl	801ab28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	881b      	ldrh	r3, [r3, #0]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7ff fdb4 	bl	800db1c <ptr_to_mem>
 800dfb4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	791b      	ldrb	r3, [r3, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d13f      	bne.n	800e03e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dfc6:	d106      	bne.n	800dfd6 <mem_trim+0xfa>
 800dfc8:	4b42      	ldr	r3, [pc, #264]	; (800e0d4 <mem_trim+0x1f8>)
 800dfca:	f240 22f5 	movw	r2, #757	; 0x2f5
 800dfce:	4946      	ldr	r1, [pc, #280]	; (800e0e8 <mem_trim+0x20c>)
 800dfd0:	4842      	ldr	r0, [pc, #264]	; (800e0dc <mem_trim+0x200>)
 800dfd2:	f00c ffa5 	bl	801af20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dfdc:	8afa      	ldrh	r2, [r7, #22]
 800dfde:	8bfb      	ldrh	r3, [r7, #30]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dfe8:	4b40      	ldr	r3, [pc, #256]	; (800e0ec <mem_trim+0x210>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d106      	bne.n	800e000 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800dff2:	89fb      	ldrh	r3, [r7, #14]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7ff fd91 	bl	800db1c <ptr_to_mem>
 800dffa:	4603      	mov	r3, r0
 800dffc:	4a3b      	ldr	r2, [pc, #236]	; (800e0ec <mem_trim+0x210>)
 800dffe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fd8a 	bl	800db1c <ptr_to_mem>
 800e008:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	2200      	movs	r2, #0
 800e00e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	89ba      	ldrh	r2, [r7, #12]
 800e014:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	8afa      	ldrh	r2, [r7, #22]
 800e01a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	89fa      	ldrh	r2, [r7, #14]
 800e020:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e02a:	d047      	beq.n	800e0bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fd73 	bl	800db1c <ptr_to_mem>
 800e036:	4602      	mov	r2, r0
 800e038:	89fb      	ldrh	r3, [r7, #14]
 800e03a:	8053      	strh	r3, [r2, #2]
 800e03c:	e03e      	b.n	800e0bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e03e:	8bfb      	ldrh	r3, [r7, #30]
 800e040:	f103 0214 	add.w	r2, r3, #20
 800e044:	8abb      	ldrh	r3, [r7, #20]
 800e046:	429a      	cmp	r2, r3
 800e048:	d838      	bhi.n	800e0bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e04a:	8afa      	ldrh	r2, [r7, #22]
 800e04c:	8bfb      	ldrh	r3, [r7, #30]
 800e04e:	4413      	add	r3, r2
 800e050:	b29b      	uxth	r3, r3
 800e052:	3308      	adds	r3, #8
 800e054:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e05e:	d106      	bne.n	800e06e <mem_trim+0x192>
 800e060:	4b1c      	ldr	r3, [pc, #112]	; (800e0d4 <mem_trim+0x1f8>)
 800e062:	f240 3216 	movw	r2, #790	; 0x316
 800e066:	4920      	ldr	r1, [pc, #128]	; (800e0e8 <mem_trim+0x20c>)
 800e068:	481c      	ldr	r0, [pc, #112]	; (800e0dc <mem_trim+0x200>)
 800e06a:	f00c ff59 	bl	801af20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff fd53 	bl	800db1c <ptr_to_mem>
 800e076:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e078:	4b1c      	ldr	r3, [pc, #112]	; (800e0ec <mem_trim+0x210>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d202      	bcs.n	800e088 <mem_trim+0x1ac>
      lfree = mem2;
 800e082:	4a1a      	ldr	r2, [pc, #104]	; (800e0ec <mem_trim+0x210>)
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2200      	movs	r2, #0
 800e08c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	881a      	ldrh	r2, [r3, #0]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	8afa      	ldrh	r2, [r7, #22]
 800e09a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	89fa      	ldrh	r2, [r7, #14]
 800e0a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0aa:	d007      	beq.n	800e0bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	881b      	ldrh	r3, [r3, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fd33 	bl	800db1c <ptr_to_mem>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	89fb      	ldrh	r3, [r7, #14]
 800e0ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e0bc:	4809      	ldr	r0, [pc, #36]	; (800e0e4 <mem_trim+0x208>)
 800e0be:	f00c fd42 	bl	801ab46 <sys_mutex_unlock>
  return rmem;
 800e0c2:	687b      	ldr	r3, [r7, #4]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	24009d68 	.word	0x24009d68
 800e0d0:	24009d6c 	.word	0x24009d6c
 800e0d4:	0801c994 	.word	0x0801c994
 800e0d8:	0801cb20 	.word	0x0801cb20
 800e0dc:	0801c9dc 	.word	0x0801c9dc
 800e0e0:	0801cb38 	.word	0x0801cb38
 800e0e4:	24009d70 	.word	0x24009d70
 800e0e8:	0801cb58 	.word	0x0801cb58
 800e0ec:	24009d74 	.word	0x24009d74

0800e0f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e0fa:	88fb      	ldrh	r3, [r7, #6]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <mem_malloc+0x14>
    return NULL;
 800e100:	2300      	movs	r3, #0
 800e102:	e0e2      	b.n	800e2ca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	3303      	adds	r3, #3
 800e108:	b29b      	uxth	r3, r3
 800e10a:	f023 0303 	bic.w	r3, r3, #3
 800e10e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e110:	8bbb      	ldrh	r3, [r7, #28]
 800e112:	2b0b      	cmp	r3, #11
 800e114:	d801      	bhi.n	800e11a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e116:	230c      	movs	r3, #12
 800e118:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e11a:	8bbb      	ldrh	r3, [r7, #28]
 800e11c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e120:	d803      	bhi.n	800e12a <mem_malloc+0x3a>
 800e122:	8bba      	ldrh	r2, [r7, #28]
 800e124:	88fb      	ldrh	r3, [r7, #6]
 800e126:	429a      	cmp	r2, r3
 800e128:	d201      	bcs.n	800e12e <mem_malloc+0x3e>
    return NULL;
 800e12a:	2300      	movs	r3, #0
 800e12c:	e0cd      	b.n	800e2ca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e12e:	4869      	ldr	r0, [pc, #420]	; (800e2d4 <mem_malloc+0x1e4>)
 800e130:	f00c fcfa 	bl	801ab28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e134:	4b68      	ldr	r3, [pc, #416]	; (800e2d8 <mem_malloc+0x1e8>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff fd01 	bl	800db40 <mem_to_ptr>
 800e13e:	4603      	mov	r3, r0
 800e140:	83fb      	strh	r3, [r7, #30]
 800e142:	e0b7      	b.n	800e2b4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e144:	8bfb      	ldrh	r3, [r7, #30]
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff fce8 	bl	800db1c <ptr_to_mem>
 800e14c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	791b      	ldrb	r3, [r3, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 80a7 	bne.w	800e2a6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	461a      	mov	r2, r3
 800e15e:	8bfb      	ldrh	r3, [r7, #30]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	f1a3 0208 	sub.w	r2, r3, #8
 800e166:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e168:	429a      	cmp	r2, r3
 800e16a:	f0c0 809c 	bcc.w	800e2a6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	461a      	mov	r2, r3
 800e174:	8bfb      	ldrh	r3, [r7, #30]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	f1a3 0208 	sub.w	r2, r3, #8
 800e17c:	8bbb      	ldrh	r3, [r7, #28]
 800e17e:	3314      	adds	r3, #20
 800e180:	429a      	cmp	r2, r3
 800e182:	d333      	bcc.n	800e1ec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e184:	8bfa      	ldrh	r2, [r7, #30]
 800e186:	8bbb      	ldrh	r3, [r7, #28]
 800e188:	4413      	add	r3, r2
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	3308      	adds	r3, #8
 800e18e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e190:	8a7b      	ldrh	r3, [r7, #18]
 800e192:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e196:	d106      	bne.n	800e1a6 <mem_malloc+0xb6>
 800e198:	4b50      	ldr	r3, [pc, #320]	; (800e2dc <mem_malloc+0x1ec>)
 800e19a:	f240 3287 	movw	r2, #903	; 0x387
 800e19e:	4950      	ldr	r1, [pc, #320]	; (800e2e0 <mem_malloc+0x1f0>)
 800e1a0:	4850      	ldr	r0, [pc, #320]	; (800e2e4 <mem_malloc+0x1f4>)
 800e1a2:	f00c febd 	bl	801af20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e1a6:	8a7b      	ldrh	r3, [r7, #18]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff fcb7 	bl	800db1c <ptr_to_mem>
 800e1ae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	881a      	ldrh	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	8bfa      	ldrh	r2, [r7, #30]
 800e1c2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	8a7a      	ldrh	r2, [r7, #18]
 800e1c8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1d8:	d00b      	beq.n	800e1f2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7ff fc9c 	bl	800db1c <ptr_to_mem>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	8a7b      	ldrh	r3, [r7, #18]
 800e1e8:	8053      	strh	r3, [r2, #2]
 800e1ea:	e002      	b.n	800e1f2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e1f2:	4b39      	ldr	r3, [pc, #228]	; (800e2d8 <mem_malloc+0x1e8>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d127      	bne.n	800e24c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e1fc:	4b36      	ldr	r3, [pc, #216]	; (800e2d8 <mem_malloc+0x1e8>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e202:	e005      	b.n	800e210 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7ff fc87 	bl	800db1c <ptr_to_mem>
 800e20e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	791b      	ldrb	r3, [r3, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <mem_malloc+0x132>
 800e218:	4b33      	ldr	r3, [pc, #204]	; (800e2e8 <mem_malloc+0x1f8>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d1f0      	bne.n	800e204 <mem_malloc+0x114>
          }
          lfree = cur;
 800e222:	4a2d      	ldr	r2, [pc, #180]	; (800e2d8 <mem_malloc+0x1e8>)
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e228:	4b2b      	ldr	r3, [pc, #172]	; (800e2d8 <mem_malloc+0x1e8>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4b2e      	ldr	r3, [pc, #184]	; (800e2e8 <mem_malloc+0x1f8>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d00b      	beq.n	800e24c <mem_malloc+0x15c>
 800e234:	4b28      	ldr	r3, [pc, #160]	; (800e2d8 <mem_malloc+0x1e8>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	791b      	ldrb	r3, [r3, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d006      	beq.n	800e24c <mem_malloc+0x15c>
 800e23e:	4b27      	ldr	r3, [pc, #156]	; (800e2dc <mem_malloc+0x1ec>)
 800e240:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e244:	4929      	ldr	r1, [pc, #164]	; (800e2ec <mem_malloc+0x1fc>)
 800e246:	4827      	ldr	r0, [pc, #156]	; (800e2e4 <mem_malloc+0x1f4>)
 800e248:	f00c fe6a 	bl	801af20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e24c:	4821      	ldr	r0, [pc, #132]	; (800e2d4 <mem_malloc+0x1e4>)
 800e24e:	f00c fc7a 	bl	801ab46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e252:	8bba      	ldrh	r2, [r7, #28]
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	4413      	add	r3, r2
 800e258:	3308      	adds	r3, #8
 800e25a:	4a23      	ldr	r2, [pc, #140]	; (800e2e8 <mem_malloc+0x1f8>)
 800e25c:	6812      	ldr	r2, [r2, #0]
 800e25e:	4293      	cmp	r3, r2
 800e260:	d906      	bls.n	800e270 <mem_malloc+0x180>
 800e262:	4b1e      	ldr	r3, [pc, #120]	; (800e2dc <mem_malloc+0x1ec>)
 800e264:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e268:	4921      	ldr	r1, [pc, #132]	; (800e2f0 <mem_malloc+0x200>)
 800e26a:	481e      	ldr	r0, [pc, #120]	; (800e2e4 <mem_malloc+0x1f4>)
 800e26c:	f00c fe58 	bl	801af20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	f003 0303 	and.w	r3, r3, #3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d006      	beq.n	800e288 <mem_malloc+0x198>
 800e27a:	4b18      	ldr	r3, [pc, #96]	; (800e2dc <mem_malloc+0x1ec>)
 800e27c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e280:	491c      	ldr	r1, [pc, #112]	; (800e2f4 <mem_malloc+0x204>)
 800e282:	4818      	ldr	r0, [pc, #96]	; (800e2e4 <mem_malloc+0x1f4>)
 800e284:	f00c fe4c 	bl	801af20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f003 0303 	and.w	r3, r3, #3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <mem_malloc+0x1b0>
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <mem_malloc+0x1ec>)
 800e294:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e298:	4917      	ldr	r1, [pc, #92]	; (800e2f8 <mem_malloc+0x208>)
 800e29a:	4812      	ldr	r0, [pc, #72]	; (800e2e4 <mem_malloc+0x1f4>)
 800e29c:	f00c fe40 	bl	801af20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	e011      	b.n	800e2ca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e2a6:	8bfb      	ldrh	r3, [r7, #30]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fc37 	bl	800db1c <ptr_to_mem>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e2b4:	8bfa      	ldrh	r2, [r7, #30]
 800e2b6:	8bbb      	ldrh	r3, [r7, #28]
 800e2b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	f4ff af41 	bcc.w	800e144 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e2c2:	4804      	ldr	r0, [pc, #16]	; (800e2d4 <mem_malloc+0x1e4>)
 800e2c4:	f00c fc3f 	bl	801ab46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3720      	adds	r7, #32
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	24009d70 	.word	0x24009d70
 800e2d8:	24009d74 	.word	0x24009d74
 800e2dc:	0801c994 	.word	0x0801c994
 800e2e0:	0801cb58 	.word	0x0801cb58
 800e2e4:	0801c9dc 	.word	0x0801c9dc
 800e2e8:	24009d6c 	.word	0x24009d6c
 800e2ec:	0801cb6c 	.word	0x0801cb6c
 800e2f0:	0801cb88 	.word	0x0801cb88
 800e2f4:	0801cbb8 	.word	0x0801cbb8
 800e2f8:	0801cbe8 	.word	0x0801cbe8

0800e2fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	3303      	adds	r3, #3
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e318:	2300      	movs	r3, #0
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e011      	b.n	800e342 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	461a      	mov	r2, r3
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4413      	add	r3, r2
 800e33a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	885b      	ldrh	r3, [r3, #2]
 800e346:	461a      	mov	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	4293      	cmp	r3, r2
 800e34c:	dbe7      	blt.n	800e31e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e34e:	bf00      	nop
 800e350:	bf00      	nop
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e362:	2300      	movs	r3, #0
 800e364:	80fb      	strh	r3, [r7, #6]
 800e366:	e009      	b.n	800e37c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e368:	88fb      	ldrh	r3, [r7, #6]
 800e36a:	4a08      	ldr	r2, [pc, #32]	; (800e38c <memp_init+0x30>)
 800e36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ffc3 	bl	800e2fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e376:	88fb      	ldrh	r3, [r7, #6]
 800e378:	3301      	adds	r3, #1
 800e37a:	80fb      	strh	r3, [r7, #6]
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	2b0c      	cmp	r3, #12
 800e380:	d9f2      	bls.n	800e368 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e382:	bf00      	nop
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	0801f7c0 	.word	0x0801f7c0

0800e390 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e398:	f00c fc08 	bl	801abac <sys_arch_protect>
 800e39c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d015      	beq.n	800e3d8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	6812      	ldr	r2, [r2, #0]
 800e3b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f003 0303 	and.w	r3, r3, #3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d006      	beq.n	800e3ce <do_memp_malloc_pool+0x3e>
 800e3c0:	4b09      	ldr	r3, [pc, #36]	; (800e3e8 <do_memp_malloc_pool+0x58>)
 800e3c2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e3c6:	4909      	ldr	r1, [pc, #36]	; (800e3ec <do_memp_malloc_pool+0x5c>)
 800e3c8:	4809      	ldr	r0, [pc, #36]	; (800e3f0 <do_memp_malloc_pool+0x60>)
 800e3ca:	f00c fda9 	bl	801af20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f00c fbfa 	bl	801abc8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	e003      	b.n	800e3e0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f00c fbf5 	bl	801abc8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	0801cc0c 	.word	0x0801cc0c
 800e3ec:	0801cc3c 	.word	0x0801cc3c
 800e3f0:	0801cc60 	.word	0x0801cc60

0800e3f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d106      	bne.n	800e410 <memp_malloc_pool+0x1c>
 800e402:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <memp_malloc_pool+0x38>)
 800e404:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e408:	4909      	ldr	r1, [pc, #36]	; (800e430 <memp_malloc_pool+0x3c>)
 800e40a:	480a      	ldr	r0, [pc, #40]	; (800e434 <memp_malloc_pool+0x40>)
 800e40c:	f00c fd88 	bl	801af20 <iprintf>
  if (desc == NULL) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <memp_malloc_pool+0x26>
    return NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	e003      	b.n	800e422 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff ffb8 	bl	800e390 <do_memp_malloc_pool>
 800e420:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	0801cc0c 	.word	0x0801cc0c
 800e430:	0801cc88 	.word	0x0801cc88
 800e434:	0801cc60 	.word	0x0801cc60

0800e438 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b0c      	cmp	r3, #12
 800e446:	d908      	bls.n	800e45a <memp_malloc+0x22>
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <memp_malloc+0x3c>)
 800e44a:	f240 1257 	movw	r2, #343	; 0x157
 800e44e:	490a      	ldr	r1, [pc, #40]	; (800e478 <memp_malloc+0x40>)
 800e450:	480a      	ldr	r0, [pc, #40]	; (800e47c <memp_malloc+0x44>)
 800e452:	f00c fd65 	bl	801af20 <iprintf>
 800e456:	2300      	movs	r3, #0
 800e458:	e008      	b.n	800e46c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e45a:	79fb      	ldrb	r3, [r7, #7]
 800e45c:	4a08      	ldr	r2, [pc, #32]	; (800e480 <memp_malloc+0x48>)
 800e45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff ff94 	bl	800e390 <do_memp_malloc_pool>
 800e468:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e46a:	68fb      	ldr	r3, [r7, #12]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	0801cc0c 	.word	0x0801cc0c
 800e478:	0801cc9c 	.word	0x0801cc9c
 800e47c:	0801cc60 	.word	0x0801cc60
 800e480:	0801f7c0 	.word	0x0801f7c0

0800e484 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	2b00      	cmp	r3, #0
 800e496:	d006      	beq.n	800e4a6 <do_memp_free_pool+0x22>
 800e498:	4b0d      	ldr	r3, [pc, #52]	; (800e4d0 <do_memp_free_pool+0x4c>)
 800e49a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e49e:	490d      	ldr	r1, [pc, #52]	; (800e4d4 <do_memp_free_pool+0x50>)
 800e4a0:	480d      	ldr	r0, [pc, #52]	; (800e4d8 <do_memp_free_pool+0x54>)
 800e4a2:	f00c fd3d 	bl	801af20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e4aa:	f00c fb7f 	bl	801abac <sys_arch_protect>
 800e4ae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e4c2:	68b8      	ldr	r0, [r7, #8]
 800e4c4:	f00c fb80 	bl	801abc8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e4c8:	bf00      	nop
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	0801cc0c 	.word	0x0801cc0c
 800e4d4:	0801ccbc 	.word	0x0801ccbc
 800e4d8:	0801cc60 	.word	0x0801cc60

0800e4dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d106      	bne.n	800e4fa <memp_free_pool+0x1e>
 800e4ec:	4b0a      	ldr	r3, [pc, #40]	; (800e518 <memp_free_pool+0x3c>)
 800e4ee:	f240 1295 	movw	r2, #405	; 0x195
 800e4f2:	490a      	ldr	r1, [pc, #40]	; (800e51c <memp_free_pool+0x40>)
 800e4f4:	480a      	ldr	r0, [pc, #40]	; (800e520 <memp_free_pool+0x44>)
 800e4f6:	f00c fd13 	bl	801af20 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <memp_free_pool+0x34>
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d004      	beq.n	800e510 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff ffbb 	bl	800e484 <do_memp_free_pool>
 800e50e:	e000      	b.n	800e512 <memp_free_pool+0x36>
    return;
 800e510:	bf00      	nop
}
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	0801cc0c 	.word	0x0801cc0c
 800e51c:	0801cc88 	.word	0x0801cc88
 800e520:	0801cc60 	.word	0x0801cc60

0800e524 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	6039      	str	r1, [r7, #0]
 800e52e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	2b0c      	cmp	r3, #12
 800e534:	d907      	bls.n	800e546 <memp_free+0x22>
 800e536:	4b0c      	ldr	r3, [pc, #48]	; (800e568 <memp_free+0x44>)
 800e538:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e53c:	490b      	ldr	r1, [pc, #44]	; (800e56c <memp_free+0x48>)
 800e53e:	480c      	ldr	r0, [pc, #48]	; (800e570 <memp_free+0x4c>)
 800e540:	f00c fcee 	bl	801af20 <iprintf>
 800e544:	e00c      	b.n	800e560 <memp_free+0x3c>

  if (mem == NULL) {
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d008      	beq.n	800e55e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	4a09      	ldr	r2, [pc, #36]	; (800e574 <memp_free+0x50>)
 800e550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff ff94 	bl	800e484 <do_memp_free_pool>
 800e55c:	e000      	b.n	800e560 <memp_free+0x3c>
    return;
 800e55e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	0801cc0c 	.word	0x0801cc0c
 800e56c:	0801ccdc 	.word	0x0801ccdc
 800e570:	0801cc60 	.word	0x0801cc60
 800e574:	0801f7c0 	.word	0x0801f7c0

0800e578 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e578:	b480      	push	{r7}
 800e57a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e57c:	bf00      	nop
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
	...

0800e588 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d108      	bne.n	800e5ae <netif_add+0x26>
 800e59c:	4b5b      	ldr	r3, [pc, #364]	; (800e70c <netif_add+0x184>)
 800e59e:	f240 1227 	movw	r2, #295	; 0x127
 800e5a2:	495b      	ldr	r1, [pc, #364]	; (800e710 <netif_add+0x188>)
 800e5a4:	485b      	ldr	r0, [pc, #364]	; (800e714 <netif_add+0x18c>)
 800e5a6:	f00c fcbb 	bl	801af20 <iprintf>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e0a9      	b.n	800e702 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d108      	bne.n	800e5c6 <netif_add+0x3e>
 800e5b4:	4b55      	ldr	r3, [pc, #340]	; (800e70c <netif_add+0x184>)
 800e5b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e5ba:	4957      	ldr	r1, [pc, #348]	; (800e718 <netif_add+0x190>)
 800e5bc:	4855      	ldr	r0, [pc, #340]	; (800e714 <netif_add+0x18c>)
 800e5be:	f00c fcaf 	bl	801af20 <iprintf>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e09d      	b.n	800e702 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e5cc:	4b53      	ldr	r3, [pc, #332]	; (800e71c <netif_add+0x194>)
 800e5ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e5d6:	4b51      	ldr	r3, [pc, #324]	; (800e71c <netif_add+0x194>)
 800e5d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d101      	bne.n	800e5e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e5e0:	4b4e      	ldr	r3, [pc, #312]	; (800e71c <netif_add+0x194>)
 800e5e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	4a49      	ldr	r2, [pc, #292]	; (800e720 <netif_add+0x198>)
 800e5fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3324      	adds	r3, #36	; 0x24
 800e60e:	2204      	movs	r2, #4
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f00c fc21 	bl	801ae5a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6a3a      	ldr	r2, [r7, #32]
 800e622:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e624:	4b3f      	ldr	r3, [pc, #252]	; (800e724 <netif_add+0x19c>)
 800e626:	781a      	ldrb	r2, [r3, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e632:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f914 	bl	800e868 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	4798      	blx	r3
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <netif_add+0xc8>
    return NULL;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e058      	b.n	800e702 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e656:	2bff      	cmp	r3, #255	; 0xff
 800e658:	d103      	bne.n	800e662 <netif_add+0xda>
        netif->num = 0;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e666:	4b30      	ldr	r3, [pc, #192]	; (800e728 <netif_add+0x1a0>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	e02b      	b.n	800e6c6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	429a      	cmp	r2, r3
 800e674:	d106      	bne.n	800e684 <netif_add+0xfc>
 800e676:	4b25      	ldr	r3, [pc, #148]	; (800e70c <netif_add+0x184>)
 800e678:	f240 128b 	movw	r2, #395	; 0x18b
 800e67c:	492b      	ldr	r1, [pc, #172]	; (800e72c <netif_add+0x1a4>)
 800e67e:	4825      	ldr	r0, [pc, #148]	; (800e714 <netif_add+0x18c>)
 800e680:	f00c fc4e 	bl	801af20 <iprintf>
        num_netifs++;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	3301      	adds	r3, #1
 800e688:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2bff      	cmp	r3, #255	; 0xff
 800e68e:	dd06      	ble.n	800e69e <netif_add+0x116>
 800e690:	4b1e      	ldr	r3, [pc, #120]	; (800e70c <netif_add+0x184>)
 800e692:	f240 128d 	movw	r2, #397	; 0x18d
 800e696:	4926      	ldr	r1, [pc, #152]	; (800e730 <netif_add+0x1a8>)
 800e698:	481e      	ldr	r0, [pc, #120]	; (800e714 <netif_add+0x18c>)
 800e69a:	f00c fc41 	bl	801af20 <iprintf>
        if (netif2->num == netif->num) {
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d108      	bne.n	800e6c0 <netif_add+0x138>
          netif->num++;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e6be:	e005      	b.n	800e6cc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	617b      	str	r3, [r7, #20]
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1d0      	bne.n	800e66e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1be      	bne.n	800e650 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6d8:	2bfe      	cmp	r3, #254	; 0xfe
 800e6da:	d103      	bne.n	800e6e4 <netif_add+0x15c>
    netif_num = 0;
 800e6dc:	4b11      	ldr	r3, [pc, #68]	; (800e724 <netif_add+0x19c>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]
 800e6e2:	e006      	b.n	800e6f2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <netif_add+0x19c>)
 800e6f0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e6f2:	4b0d      	ldr	r3, [pc, #52]	; (800e728 <netif_add+0x1a0>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e6fa:	4a0b      	ldr	r2, [pc, #44]	; (800e728 <netif_add+0x1a0>)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e700:	68fb      	ldr	r3, [r7, #12]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	0801ccf8 	.word	0x0801ccf8
 800e710:	0801cd8c 	.word	0x0801cd8c
 800e714:	0801cd48 	.word	0x0801cd48
 800e718:	0801cda8 	.word	0x0801cda8
 800e71c:	0801f844 	.word	0x0801f844
 800e720:	0800eb4b 	.word	0x0800eb4b
 800e724:	24009dac 	.word	0x24009dac
 800e728:	2400d704 	.word	0x2400d704
 800e72c:	0801cdcc 	.word	0x0801cdcc
 800e730:	0801cde0 	.word	0x0801cde0

0800e734 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e73e:	6839      	ldr	r1, [r7, #0]
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f002 fd99 	bl	8011278 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f007 fe9f 	bl	801648c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d106      	bne.n	800e778 <netif_do_set_ipaddr+0x20>
 800e76a:	4b1d      	ldr	r3, [pc, #116]	; (800e7e0 <netif_do_set_ipaddr+0x88>)
 800e76c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e770:	491c      	ldr	r1, [pc, #112]	; (800e7e4 <netif_do_set_ipaddr+0x8c>)
 800e772:	481d      	ldr	r0, [pc, #116]	; (800e7e8 <netif_do_set_ipaddr+0x90>)
 800e774:	f00c fbd4 	bl	801af20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <netif_do_set_ipaddr+0x34>
 800e77e:	4b18      	ldr	r3, [pc, #96]	; (800e7e0 <netif_do_set_ipaddr+0x88>)
 800e780:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e784:	4917      	ldr	r1, [pc, #92]	; (800e7e4 <netif_do_set_ipaddr+0x8c>)
 800e786:	4818      	ldr	r0, [pc, #96]	; (800e7e8 <netif_do_set_ipaddr+0x90>)
 800e788:	f00c fbca 	bl	801af20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3304      	adds	r3, #4
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	d01c      	beq.n	800e7d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e7aa:	f107 0314 	add.w	r3, r7, #20
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff ffbf 	bl	800e734 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d002      	beq.n	800e7c2 <netif_do_set_ipaddr+0x6a>
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	e000      	b.n	800e7c4 <netif_do_set_ipaddr+0x6c>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 f8d2 	bl	800e974 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e000      	b.n	800e7d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	0801ccf8 	.word	0x0801ccf8
 800e7e4:	0801ce10 	.word	0x0801ce10
 800e7e8:	0801cd48 	.word	0x0801cd48

0800e7ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3308      	adds	r3, #8
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d00a      	beq.n	800e81c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d002      	beq.n	800e812 <netif_do_set_netmask+0x26>
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	e000      	b.n	800e814 <netif_do_set_netmask+0x28>
 800e812:	2300      	movs	r3, #0
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e818:	2301      	movs	r3, #1
 800e81a:	e000      	b.n	800e81e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b085      	sub	sp, #20
 800e82e:	af00      	add	r7, sp, #0
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	330c      	adds	r3, #12
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	429a      	cmp	r2, r3
 800e842:	d00a      	beq.n	800e85a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <netif_do_set_gw+0x26>
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	e000      	b.n	800e852 <netif_do_set_gw+0x28>
 800e850:	2300      	movs	r3, #0
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e856:	2301      	movs	r3, #1
 800e858:	e000      	b.n	800e85c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3714      	adds	r7, #20
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e87a:	2300      	movs	r3, #0
 800e87c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e884:	4b1c      	ldr	r3, [pc, #112]	; (800e8f8 <netif_set_addr+0x90>)
 800e886:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e88e:	4b1a      	ldr	r3, [pc, #104]	; (800e8f8 <netif_set_addr+0x90>)
 800e890:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e898:	4b17      	ldr	r3, [pc, #92]	; (800e8f8 <netif_set_addr+0x90>)
 800e89a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <netif_set_addr+0x42>
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d101      	bne.n	800e8ae <netif_set_addr+0x46>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <netif_set_addr+0x48>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d006      	beq.n	800e8c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8b8:	f107 0310 	add.w	r3, r7, #16
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f7ff ff49 	bl	800e758 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	6879      	ldr	r1, [r7, #4]
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f7ff ff8e 	bl	800e7ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e8d0:	69ba      	ldr	r2, [r7, #24]
 800e8d2:	6839      	ldr	r1, [r7, #0]
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff ffa8 	bl	800e82a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d106      	bne.n	800e8ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8e0:	f107 0310 	add.w	r3, r7, #16
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	68b9      	ldr	r1, [r7, #8]
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f7ff ff35 	bl	800e758 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e8ee:	bf00      	nop
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	0801f844 	.word	0x0801f844

0800e8fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e904:	4a04      	ldr	r2, [pc, #16]	; (800e918 <netif_set_default+0x1c>)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e90a:	bf00      	nop
 800e90c:	370c      	adds	r7, #12
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	2400d708 	.word	0x2400d708

0800e91c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d107      	bne.n	800e93a <netif_set_up+0x1e>
 800e92a:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <netif_set_up+0x4c>)
 800e92c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e930:	490e      	ldr	r1, [pc, #56]	; (800e96c <netif_set_up+0x50>)
 800e932:	480f      	ldr	r0, [pc, #60]	; (800e970 <netif_set_up+0x54>)
 800e934:	f00c faf4 	bl	801af20 <iprintf>
 800e938:	e013      	b.n	800e962 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10c      	bne.n	800e962 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e94e:	f043 0301 	orr.w	r3, r3, #1
 800e952:	b2da      	uxtb	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e95a:	2103      	movs	r1, #3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f809 	bl	800e974 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	0801ccf8 	.word	0x0801ccf8
 800e96c:	0801ce80 	.word	0x0801ce80
 800e970:	0801cd48 	.word	0x0801cd48

0800e974 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <netif_issue_reports+0x20>
 800e986:	4b18      	ldr	r3, [pc, #96]	; (800e9e8 <netif_issue_reports+0x74>)
 800e988:	f240 326d 	movw	r2, #877	; 0x36d
 800e98c:	4917      	ldr	r1, [pc, #92]	; (800e9ec <netif_issue_reports+0x78>)
 800e98e:	4818      	ldr	r0, [pc, #96]	; (800e9f0 <netif_issue_reports+0x7c>)
 800e990:	f00c fac6 	bl	801af20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e99a:	f003 0304 	and.w	r3, r3, #4
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d01e      	beq.n	800e9e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d017      	beq.n	800e9e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d013      	beq.n	800e9e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00e      	beq.n	800e9e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9ca:	f003 0308 	and.w	r3, r3, #8
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d007      	beq.n	800e9e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f00a fb59 	bl	8019090 <etharp_request>
 800e9de:	e000      	b.n	800e9e2 <netif_issue_reports+0x6e>
    return;
 800e9e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	0801ccf8 	.word	0x0801ccf8
 800e9ec:	0801ce9c 	.word	0x0801ce9c
 800e9f0:	0801cd48 	.word	0x0801cd48

0800e9f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d107      	bne.n	800ea12 <netif_set_down+0x1e>
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <netif_set_down+0x58>)
 800ea04:	f240 329b 	movw	r2, #923	; 0x39b
 800ea08:	4911      	ldr	r1, [pc, #68]	; (800ea50 <netif_set_down+0x5c>)
 800ea0a:	4812      	ldr	r0, [pc, #72]	; (800ea54 <netif_set_down+0x60>)
 800ea0c:	f00c fa88 	bl	801af20 <iprintf>
 800ea10:	e019      	b.n	800ea46 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d012      	beq.n	800ea46 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea26:	f023 0301 	bic.w	r3, r3, #1
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea38:	f003 0308 	and.w	r3, r3, #8
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f009 fedf 	bl	8018804 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	0801ccf8 	.word	0x0801ccf8
 800ea50:	0801cec0 	.word	0x0801cec0
 800ea54:	0801cd48 	.word	0x0801cd48

0800ea58 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d107      	bne.n	800ea76 <netif_set_link_up+0x1e>
 800ea66:	4b15      	ldr	r3, [pc, #84]	; (800eabc <netif_set_link_up+0x64>)
 800ea68:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ea6c:	4914      	ldr	r1, [pc, #80]	; (800eac0 <netif_set_link_up+0x68>)
 800ea6e:	4815      	ldr	r0, [pc, #84]	; (800eac4 <netif_set_link_up+0x6c>)
 800ea70:	f00c fa56 	bl	801af20 <iprintf>
 800ea74:	e01e      	b.n	800eab4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d117      	bne.n	800eab4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea8a:	f043 0304 	orr.w	r3, r3, #4
 800ea8e:	b2da      	uxtb	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f008 f924 	bl	8016ce4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea9c:	2103      	movs	r1, #3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff ff68 	bl	800e974 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <netif_set_link_up+0x5c>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	69db      	ldr	r3, [r3, #28]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	0801ccf8 	.word	0x0801ccf8
 800eac0:	0801cee0 	.word	0x0801cee0
 800eac4:	0801cd48 	.word	0x0801cd48

0800eac8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d107      	bne.n	800eae6 <netif_set_link_down+0x1e>
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <netif_set_link_down+0x54>)
 800ead8:	f240 4206 	movw	r2, #1030	; 0x406
 800eadc:	4910      	ldr	r1, [pc, #64]	; (800eb20 <netif_set_link_down+0x58>)
 800eade:	4811      	ldr	r0, [pc, #68]	; (800eb24 <netif_set_link_down+0x5c>)
 800eae0:	f00c fa1e 	bl	801af20 <iprintf>
 800eae4:	e017      	b.n	800eb16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d010      	beq.n	800eb16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eafa:	f023 0304 	bic.w	r3, r3, #4
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <netif_set_link_down+0x4e>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	0801ccf8 	.word	0x0801ccf8
 800eb20:	0801cf04 	.word	0x0801cf04
 800eb24:	0801cd48 	.word	0x0801cd48

0800eb28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	61da      	str	r2, [r3, #28]
  }
}
 800eb3e:	bf00      	nop
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	60b9      	str	r1, [r7, #8]
 800eb54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eb56:	f06f 030b 	mvn.w	r3, #11
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
	...

0800eb68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d013      	beq.n	800eba0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eb78:	4b0d      	ldr	r3, [pc, #52]	; (800ebb0 <netif_get_by_index+0x48>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	e00c      	b.n	800eb9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb86:	3301      	adds	r3, #1
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	79fa      	ldrb	r2, [r7, #7]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d101      	bne.n	800eb94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	e006      	b.n	800eba2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	60fb      	str	r3, [r7, #12]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1ef      	bne.n	800eb80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	2400d704 	.word	0x2400d704

0800ebb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ebba:	f00b fff7 	bl	801abac <sys_arch_protect>
 800ebbe:	6038      	str	r0, [r7, #0]
 800ebc0:	4b0d      	ldr	r3, [pc, #52]	; (800ebf8 <pbuf_free_ooseq+0x44>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f00b fffe 	bl	801abc8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebcc:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <pbuf_free_ooseq+0x48>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	607b      	str	r3, [r7, #4]
 800ebd2:	e00a      	b.n	800ebea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f002 fb89 	bl	80112f4 <tcp_free_ooseq>
      return;
 800ebe2:	e005      	b.n	800ebf0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1f1      	bne.n	800ebd4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	2400d70c 	.word	0x2400d70c
 800ebfc:	2400d714 	.word	0x2400d714

0800ec00 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ec08:	f7ff ffd4 	bl	800ebb4 <pbuf_free_ooseq>
}
 800ec0c:	bf00      	nop
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ec1a:	f00b ffc7 	bl	801abac <sys_arch_protect>
 800ec1e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ec20:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ec26:	4b0e      	ldr	r3, [pc, #56]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec28:	2201      	movs	r2, #1
 800ec2a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f00b ffcb 	bl	801abc8 <sys_arch_unprotect>

  if (!queued) {
 800ec32:	78fb      	ldrb	r3, [r7, #3]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10f      	bne.n	800ec58 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ec38:	2100      	movs	r1, #0
 800ec3a:	480a      	ldr	r0, [pc, #40]	; (800ec64 <pbuf_pool_is_empty+0x50>)
 800ec3c:	f7fe fdcc 	bl	800d7d8 <tcpip_try_callback>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <pbuf_pool_is_empty+0x44>
 800ec46:	f00b ffb1 	bl	801abac <sys_arch_protect>
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	4b04      	ldr	r3, [pc, #16]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	701a      	strb	r2, [r3, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f00b ffb8 	bl	801abc8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	2400d70c 	.word	0x2400d70c
 800ec64:	0800ec01 	.word	0x0800ec01

0800ec68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	4611      	mov	r1, r2
 800ec74:	461a      	mov	r2, r3
 800ec76:	460b      	mov	r3, r1
 800ec78:	80fb      	strh	r3, [r7, #6]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	88fa      	ldrh	r2, [r7, #6]
 800ec8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	88ba      	ldrh	r2, [r7, #4]
 800ec94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec96:	8b3b      	ldrh	r3, [r7, #24]
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	7f3a      	ldrb	r2, [r7, #28]
 800eca2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2201      	movs	r2, #1
 800eca8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	73da      	strb	r2, [r3, #15]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08c      	sub	sp, #48	; 0x30
 800ecc0:	af02      	add	r7, sp, #8
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	71fb      	strb	r3, [r7, #7]
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	80bb      	strh	r3, [r7, #4]
 800ecca:	4613      	mov	r3, r2
 800eccc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ecd2:	887b      	ldrh	r3, [r7, #2]
 800ecd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecd8:	d07f      	beq.n	800edda <pbuf_alloc+0x11e>
 800ecda:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecde:	f300 80c8 	bgt.w	800ee72 <pbuf_alloc+0x1b6>
 800ece2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ece6:	d010      	beq.n	800ed0a <pbuf_alloc+0x4e>
 800ece8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ecec:	f300 80c1 	bgt.w	800ee72 <pbuf_alloc+0x1b6>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d002      	beq.n	800ecfa <pbuf_alloc+0x3e>
 800ecf4:	2b41      	cmp	r3, #65	; 0x41
 800ecf6:	f040 80bc 	bne.w	800ee72 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ecfa:	887a      	ldrh	r2, [r7, #2]
 800ecfc:	88bb      	ldrh	r3, [r7, #4]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	2000      	movs	r0, #0
 800ed02:	f000 f8d1 	bl	800eea8 <pbuf_alloc_reference>
 800ed06:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ed08:	e0bd      	b.n	800ee86 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ed12:	88bb      	ldrh	r3, [r7, #4]
 800ed14:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ed16:	200c      	movs	r0, #12
 800ed18:	f7ff fb8e 	bl	800e438 <memp_malloc>
 800ed1c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d109      	bne.n	800ed38 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ed24:	f7ff ff76 	bl	800ec14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ed2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed30:	f000 faa8 	bl	800f284 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ed34:	2300      	movs	r3, #0
 800ed36:	e0a7      	b.n	800ee88 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ed38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed3a:	3303      	adds	r3, #3
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	f023 0303 	bic.w	r3, r3, #3
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	8b7a      	ldrh	r2, [r7, #26]
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	bf28      	it	cs
 800ed50:	4613      	movcs	r3, r2
 800ed52:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ed54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed56:	3310      	adds	r3, #16
 800ed58:	693a      	ldr	r2, [r7, #16]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3303      	adds	r3, #3
 800ed5e:	f023 0303 	bic.w	r3, r3, #3
 800ed62:	4618      	mov	r0, r3
 800ed64:	89f9      	ldrh	r1, [r7, #14]
 800ed66:	8b7a      	ldrh	r2, [r7, #26]
 800ed68:	2300      	movs	r3, #0
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	887b      	ldrh	r3, [r7, #2]
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	460b      	mov	r3, r1
 800ed72:	4601      	mov	r1, r0
 800ed74:	6938      	ldr	r0, [r7, #16]
 800ed76:	f7ff ff77 	bl	800ec68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	f003 0303 	and.w	r3, r3, #3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <pbuf_alloc+0xd8>
 800ed86:	4b42      	ldr	r3, [pc, #264]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ed88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed8c:	4941      	ldr	r1, [pc, #260]	; (800ee94 <pbuf_alloc+0x1d8>)
 800ed8e:	4842      	ldr	r0, [pc, #264]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ed90:	f00c f8c6 	bl	801af20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed96:	3303      	adds	r3, #3
 800ed98:	f023 0303 	bic.w	r3, r3, #3
 800ed9c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800eda0:	d106      	bne.n	800edb0 <pbuf_alloc+0xf4>
 800eda2:	4b3b      	ldr	r3, [pc, #236]	; (800ee90 <pbuf_alloc+0x1d4>)
 800eda4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800eda8:	493c      	ldr	r1, [pc, #240]	; (800ee9c <pbuf_alloc+0x1e0>)
 800edaa:	483b      	ldr	r0, [pc, #236]	; (800ee98 <pbuf_alloc+0x1dc>)
 800edac:	f00c f8b8 	bl	801af20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	627b      	str	r3, [r7, #36]	; 0x24
 800edba:	e002      	b.n	800edc2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800edc6:	8b7a      	ldrh	r2, [r7, #26]
 800edc8:	89fb      	ldrh	r3, [r7, #14]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800edd2:	8b7b      	ldrh	r3, [r7, #26]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d19e      	bne.n	800ed16 <pbuf_alloc+0x5a>
      break;
 800edd8:	e055      	b.n	800ee86 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800edda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eddc:	3303      	adds	r3, #3
 800edde:	b29b      	uxth	r3, r3
 800ede0:	f023 0303 	bic.w	r3, r3, #3
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	88bb      	ldrh	r3, [r7, #4]
 800ede8:	3303      	adds	r3, #3
 800edea:	b29b      	uxth	r3, r3
 800edec:	f023 0303 	bic.w	r3, r3, #3
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	4413      	add	r3, r2
 800edf4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800edf6:	8b3b      	ldrh	r3, [r7, #24]
 800edf8:	3310      	adds	r3, #16
 800edfa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800edfc:	8b3a      	ldrh	r2, [r7, #24]
 800edfe:	88bb      	ldrh	r3, [r7, #4]
 800ee00:	3303      	adds	r3, #3
 800ee02:	f023 0303 	bic.w	r3, r3, #3
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d306      	bcc.n	800ee18 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ee0a:	8afa      	ldrh	r2, [r7, #22]
 800ee0c:	88bb      	ldrh	r3, [r7, #4]
 800ee0e:	3303      	adds	r3, #3
 800ee10:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d201      	bcs.n	800ee1c <pbuf_alloc+0x160>
        return NULL;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e035      	b.n	800ee88 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ee1c:	8afb      	ldrh	r3, [r7, #22]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff f966 	bl	800e0f0 <mem_malloc>
 800ee24:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <pbuf_alloc+0x174>
        return NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e02b      	b.n	800ee88 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ee30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee32:	3310      	adds	r3, #16
 800ee34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee36:	4413      	add	r3, r2
 800ee38:	3303      	adds	r3, #3
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	4618      	mov	r0, r3
 800ee40:	88b9      	ldrh	r1, [r7, #4]
 800ee42:	88ba      	ldrh	r2, [r7, #4]
 800ee44:	2300      	movs	r3, #0
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	887b      	ldrh	r3, [r7, #2]
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	4601      	mov	r1, r0
 800ee50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee52:	f7ff ff09 	bl	800ec68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d010      	beq.n	800ee84 <pbuf_alloc+0x1c8>
 800ee62:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ee64:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ee68:	490d      	ldr	r1, [pc, #52]	; (800eea0 <pbuf_alloc+0x1e4>)
 800ee6a:	480b      	ldr	r0, [pc, #44]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ee6c:	f00c f858 	bl	801af20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ee70:	e008      	b.n	800ee84 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ee72:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ee74:	f240 1227 	movw	r2, #295	; 0x127
 800ee78:	490a      	ldr	r1, [pc, #40]	; (800eea4 <pbuf_alloc+0x1e8>)
 800ee7a:	4807      	ldr	r0, [pc, #28]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ee7c:	f00c f850 	bl	801af20 <iprintf>
      return NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e001      	b.n	800ee88 <pbuf_alloc+0x1cc>
      break;
 800ee84:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3728      	adds	r7, #40	; 0x28
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	0801cf28 	.word	0x0801cf28
 800ee94:	0801cf58 	.word	0x0801cf58
 800ee98:	0801cf88 	.word	0x0801cf88
 800ee9c:	0801cfb0 	.word	0x0801cfb0
 800eea0:	0801cfe4 	.word	0x0801cfe4
 800eea4:	0801d010 	.word	0x0801d010

0800eea8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af02      	add	r7, sp, #8
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	807b      	strh	r3, [r7, #2]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eeb8:	883b      	ldrh	r3, [r7, #0]
 800eeba:	2b41      	cmp	r3, #65	; 0x41
 800eebc:	d009      	beq.n	800eed2 <pbuf_alloc_reference+0x2a>
 800eebe:	883b      	ldrh	r3, [r7, #0]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d006      	beq.n	800eed2 <pbuf_alloc_reference+0x2a>
 800eec4:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <pbuf_alloc_reference+0x5c>)
 800eec6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800eeca:	490f      	ldr	r1, [pc, #60]	; (800ef08 <pbuf_alloc_reference+0x60>)
 800eecc:	480f      	ldr	r0, [pc, #60]	; (800ef0c <pbuf_alloc_reference+0x64>)
 800eece:	f00c f827 	bl	801af20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eed2:	200b      	movs	r0, #11
 800eed4:	f7ff fab0 	bl	800e438 <memp_malloc>
 800eed8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eee0:	2300      	movs	r3, #0
 800eee2:	e00b      	b.n	800eefc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eee4:	8879      	ldrh	r1, [r7, #2]
 800eee6:	887a      	ldrh	r2, [r7, #2]
 800eee8:	2300      	movs	r3, #0
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	883b      	ldrh	r3, [r7, #0]
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	460b      	mov	r3, r1
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7ff feb7 	bl	800ec68 <pbuf_init_alloced_pbuf>
  return p;
 800eefa:	68fb      	ldr	r3, [r7, #12]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0801cf28 	.word	0x0801cf28
 800ef08:	0801d02c 	.word	0x0801d02c
 800ef0c:	0801cf88 	.word	0x0801cf88

0800ef10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af02      	add	r7, sp, #8
 800ef16:	607b      	str	r3, [r7, #4]
 800ef18:	4603      	mov	r3, r0
 800ef1a:	73fb      	strb	r3, [r7, #15]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	81bb      	strh	r3, [r7, #12]
 800ef20:	4613      	mov	r3, r2
 800ef22:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ef28:	8a7b      	ldrh	r3, [r7, #18]
 800ef2a:	3303      	adds	r3, #3
 800ef2c:	f023 0203 	bic.w	r2, r3, #3
 800ef30:	89bb      	ldrh	r3, [r7, #12]
 800ef32:	441a      	add	r2, r3
 800ef34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d901      	bls.n	800ef3e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e018      	b.n	800ef70 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d007      	beq.n	800ef54 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ef44:	8a7b      	ldrh	r3, [r7, #18]
 800ef46:	3303      	adds	r3, #3
 800ef48:	f023 0303 	bic.w	r3, r3, #3
 800ef4c:	6a3a      	ldr	r2, [r7, #32]
 800ef4e:	4413      	add	r3, r2
 800ef50:	617b      	str	r3, [r7, #20]
 800ef52:	e001      	b.n	800ef58 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ef54:	2300      	movs	r3, #0
 800ef56:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	89b9      	ldrh	r1, [r7, #12]
 800ef5c:	89ba      	ldrh	r2, [r7, #12]
 800ef5e:	2302      	movs	r3, #2
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	897b      	ldrh	r3, [r7, #10]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	460b      	mov	r3, r1
 800ef68:	6979      	ldr	r1, [r7, #20]
 800ef6a:	f7ff fe7d 	bl	800ec68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ef6e:	687b      	ldr	r3, [r7, #4]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d106      	bne.n	800ef98 <pbuf_realloc+0x20>
 800ef8a:	4b3a      	ldr	r3, [pc, #232]	; (800f074 <pbuf_realloc+0xfc>)
 800ef8c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ef90:	4939      	ldr	r1, [pc, #228]	; (800f078 <pbuf_realloc+0x100>)
 800ef92:	483a      	ldr	r0, [pc, #232]	; (800f07c <pbuf_realloc+0x104>)
 800ef94:	f00b ffc4 	bl	801af20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	887a      	ldrh	r2, [r7, #2]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d263      	bcs.n	800f06a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	891a      	ldrh	r2, [r3, #8]
 800efa6:	887b      	ldrh	r3, [r7, #2]
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800efac:	887b      	ldrh	r3, [r7, #2]
 800efae:	817b      	strh	r3, [r7, #10]
  q = p;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800efb4:	e018      	b.n	800efe8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	895b      	ldrh	r3, [r3, #10]
 800efba:	897a      	ldrh	r2, [r7, #10]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	891a      	ldrh	r2, [r3, #8]
 800efc4:	893b      	ldrh	r3, [r7, #8]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	b29a      	uxth	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <pbuf_realloc+0x70>
 800efda:	4b26      	ldr	r3, [pc, #152]	; (800f074 <pbuf_realloc+0xfc>)
 800efdc:	f240 12af 	movw	r2, #431	; 0x1af
 800efe0:	4927      	ldr	r1, [pc, #156]	; (800f080 <pbuf_realloc+0x108>)
 800efe2:	4826      	ldr	r0, [pc, #152]	; (800f07c <pbuf_realloc+0x104>)
 800efe4:	f00b ff9c 	bl	801af20 <iprintf>
  while (rem_len > q->len) {
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	895b      	ldrh	r3, [r3, #10]
 800efec:	897a      	ldrh	r2, [r7, #10]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d8e1      	bhi.n	800efb6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	7b1b      	ldrb	r3, [r3, #12]
 800eff6:	f003 030f 	and.w	r3, r3, #15
 800effa:	2b00      	cmp	r3, #0
 800effc:	d121      	bne.n	800f042 <pbuf_realloc+0xca>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	895b      	ldrh	r3, [r3, #10]
 800f002:	897a      	ldrh	r2, [r7, #10]
 800f004:	429a      	cmp	r2, r3
 800f006:	d01c      	beq.n	800f042 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	7b5b      	ldrb	r3, [r3, #13]
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d116      	bne.n	800f042 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	685a      	ldr	r2, [r3, #4]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	897b      	ldrh	r3, [r7, #10]
 800f020:	4413      	add	r3, r2
 800f022:	b29b      	uxth	r3, r3
 800f024:	4619      	mov	r1, r3
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f7fe ff58 	bl	800dedc <mem_trim>
 800f02c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <pbuf_realloc+0xca>
 800f034:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <pbuf_realloc+0xfc>)
 800f036:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f03a:	4912      	ldr	r1, [pc, #72]	; (800f084 <pbuf_realloc+0x10c>)
 800f03c:	480f      	ldr	r0, [pc, #60]	; (800f07c <pbuf_realloc+0x104>)
 800f03e:	f00b ff6f 	bl	801af20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	897a      	ldrh	r2, [r7, #10]
 800f046:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	895a      	ldrh	r2, [r3, #10]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f911 	bl	800f284 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e000      	b.n	800f06c <pbuf_realloc+0xf4>
    return;
 800f06a:	bf00      	nop

}
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	0801cf28 	.word	0x0801cf28
 800f078:	0801d040 	.word	0x0801d040
 800f07c:	0801cf88 	.word	0x0801cf88
 800f080:	0801d058 	.word	0x0801d058
 800f084:	0801d070 	.word	0x0801d070

0800f088 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4613      	mov	r3, r2
 800f094:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <pbuf_add_header_impl+0x22>
 800f09c:	4b2b      	ldr	r3, [pc, #172]	; (800f14c <pbuf_add_header_impl+0xc4>)
 800f09e:	f240 12df 	movw	r2, #479	; 0x1df
 800f0a2:	492b      	ldr	r1, [pc, #172]	; (800f150 <pbuf_add_header_impl+0xc8>)
 800f0a4:	482b      	ldr	r0, [pc, #172]	; (800f154 <pbuf_add_header_impl+0xcc>)
 800f0a6:	f00b ff3b 	bl	801af20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <pbuf_add_header_impl+0x30>
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0b6:	d301      	bcc.n	800f0bc <pbuf_add_header_impl+0x34>
    return 1;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e043      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e03e      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	891a      	ldrh	r2, [r3, #8]
 800f0ce:	8a7b      	ldrh	r3, [r7, #18]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	8a7a      	ldrh	r2, [r7, #18]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d901      	bls.n	800f0de <pbuf_add_header_impl+0x56>
    return 1;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e032      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	7b1b      	ldrb	r3, [r3, #12]
 800f0e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f0e4:	8a3b      	ldrh	r3, [r7, #16]
 800f0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00c      	beq.n	800f108 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	425b      	negs	r3, r3
 800f0f6:	4413      	add	r3, r2
 800f0f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3310      	adds	r3, #16
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	429a      	cmp	r2, r3
 800f102:	d20d      	bcs.n	800f120 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f104:	2301      	movs	r3, #1
 800f106:	e01d      	b.n	800f144 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d006      	beq.n	800f11c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	425b      	negs	r3, r3
 800f116:	4413      	add	r3, r2
 800f118:	617b      	str	r3, [r7, #20]
 800f11a:	e001      	b.n	800f120 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e011      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	895a      	ldrh	r2, [r3, #10]
 800f12a:	8a7b      	ldrh	r3, [r7, #18]
 800f12c:	4413      	add	r3, r2
 800f12e:	b29a      	uxth	r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	891a      	ldrh	r2, [r3, #8]
 800f138:	8a7b      	ldrh	r3, [r7, #18]
 800f13a:	4413      	add	r3, r2
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	811a      	strh	r2, [r3, #8]


  return 0;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3718      	adds	r7, #24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	0801cf28 	.word	0x0801cf28
 800f150:	0801d08c 	.word	0x0801d08c
 800f154:	0801cf88 	.word	0x0801cf88

0800f158 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f162:	2200      	movs	r2, #0
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7ff ff8e 	bl	800f088 <pbuf_add_header_impl>
 800f16c:	4603      	mov	r3, r0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d106      	bne.n	800f196 <pbuf_remove_header+0x1e>
 800f188:	4b20      	ldr	r3, [pc, #128]	; (800f20c <pbuf_remove_header+0x94>)
 800f18a:	f240 224b 	movw	r2, #587	; 0x24b
 800f18e:	4920      	ldr	r1, [pc, #128]	; (800f210 <pbuf_remove_header+0x98>)
 800f190:	4820      	ldr	r0, [pc, #128]	; (800f214 <pbuf_remove_header+0x9c>)
 800f192:	f00b fec5 	bl	801af20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d003      	beq.n	800f1a4 <pbuf_remove_header+0x2c>
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a2:	d301      	bcc.n	800f1a8 <pbuf_remove_header+0x30>
    return 1;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e02c      	b.n	800f202 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <pbuf_remove_header+0x3a>
    return 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e027      	b.n	800f202 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	895b      	ldrh	r3, [r3, #10]
 800f1ba:	89fa      	ldrh	r2, [r7, #14]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d908      	bls.n	800f1d2 <pbuf_remove_header+0x5a>
 800f1c0:	4b12      	ldr	r3, [pc, #72]	; (800f20c <pbuf_remove_header+0x94>)
 800f1c2:	f240 2255 	movw	r2, #597	; 0x255
 800f1c6:	4914      	ldr	r1, [pc, #80]	; (800f218 <pbuf_remove_header+0xa0>)
 800f1c8:	4812      	ldr	r0, [pc, #72]	; (800f214 <pbuf_remove_header+0x9c>)
 800f1ca:	f00b fea9 	bl	801af20 <iprintf>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e017      	b.n	800f202 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	441a      	add	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	895a      	ldrh	r2, [r3, #10]
 800f1e8:	89fb      	ldrh	r3, [r7, #14]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	891a      	ldrh	r2, [r3, #8]
 800f1f6:	89fb      	ldrh	r3, [r7, #14]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	0801cf28 	.word	0x0801cf28
 800f210:	0801d08c 	.word	0x0801d08c
 800f214:	0801cf88 	.word	0x0801cf88
 800f218:	0801d098 	.word	0x0801d098

0800f21c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	807b      	strh	r3, [r7, #2]
 800f228:	4613      	mov	r3, r2
 800f22a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f22c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f230:	2b00      	cmp	r3, #0
 800f232:	da08      	bge.n	800f246 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f238:	425b      	negs	r3, r3
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7ff ff9b 	bl	800f178 <pbuf_remove_header>
 800f242:	4603      	mov	r3, r0
 800f244:	e007      	b.n	800f256 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f24a:	787a      	ldrb	r2, [r7, #1]
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff1a 	bl	800f088 <pbuf_add_header_impl>
 800f254:	4603      	mov	r3, r0
  }
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	460b      	mov	r3, r1
 800f268:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f26a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f26e:	2201      	movs	r2, #1
 800f270:	4619      	mov	r1, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff ffd2 	bl	800f21c <pbuf_header_impl>
 800f278:	4603      	mov	r3, r0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b088      	sub	sp, #32
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10b      	bne.n	800f2aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d106      	bne.n	800f2a6 <pbuf_free+0x22>
 800f298:	4b3b      	ldr	r3, [pc, #236]	; (800f388 <pbuf_free+0x104>)
 800f29a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f29e:	493b      	ldr	r1, [pc, #236]	; (800f38c <pbuf_free+0x108>)
 800f2a0:	483b      	ldr	r0, [pc, #236]	; (800f390 <pbuf_free+0x10c>)
 800f2a2:	f00b fe3d 	bl	801af20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	e069      	b.n	800f37e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f2ae:	e062      	b.n	800f376 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f2b0:	f00b fc7c 	bl	801abac <sys_arch_protect>
 800f2b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	7b9b      	ldrb	r3, [r3, #14]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <pbuf_free+0x48>
 800f2be:	4b32      	ldr	r3, [pc, #200]	; (800f388 <pbuf_free+0x104>)
 800f2c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f2c4:	4933      	ldr	r1, [pc, #204]	; (800f394 <pbuf_free+0x110>)
 800f2c6:	4832      	ldr	r0, [pc, #200]	; (800f390 <pbuf_free+0x10c>)
 800f2c8:	f00b fe2a 	bl	801af20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7b9b      	ldrb	r3, [r3, #14]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	739a      	strb	r2, [r3, #14]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7b9b      	ldrb	r3, [r3, #14]
 800f2dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f2de:	69b8      	ldr	r0, [r7, #24]
 800f2e0:	f00b fc72 	bl	801abc8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d143      	bne.n	800f372 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7b1b      	ldrb	r3, [r3, #12]
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7b5b      	ldrb	r3, [r3, #13]
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d011      	beq.n	800f32a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <pbuf_free+0x9c>
 800f312:	4b1d      	ldr	r3, [pc, #116]	; (800f388 <pbuf_free+0x104>)
 800f314:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f318:	491f      	ldr	r1, [pc, #124]	; (800f398 <pbuf_free+0x114>)
 800f31a:	481d      	ldr	r0, [pc, #116]	; (800f390 <pbuf_free+0x10c>)
 800f31c:	f00b fe00 	bl	801af20 <iprintf>
        pc->custom_free_function(p);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	4798      	blx	r3
 800f328:	e01d      	b.n	800f366 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f32a:	7bfb      	ldrb	r3, [r7, #15]
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d104      	bne.n	800f33a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	200c      	movs	r0, #12
 800f334:	f7ff f8f6 	bl	800e524 <memp_free>
 800f338:	e015      	b.n	800f366 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f33a:	7bfb      	ldrb	r3, [r7, #15]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d104      	bne.n	800f34a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	200b      	movs	r0, #11
 800f344:	f7ff f8ee 	bl	800e524 <memp_free>
 800f348:	e00d      	b.n	800f366 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f34a:	7bfb      	ldrb	r3, [r7, #15]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <pbuf_free+0xd4>
          mem_free(p);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fe fd33 	bl	800ddbc <mem_free>
 800f356:	e006      	b.n	800f366 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f358:	4b0b      	ldr	r3, [pc, #44]	; (800f388 <pbuf_free+0x104>)
 800f35a:	f240 320f 	movw	r2, #783	; 0x30f
 800f35e:	490f      	ldr	r1, [pc, #60]	; (800f39c <pbuf_free+0x118>)
 800f360:	480b      	ldr	r0, [pc, #44]	; (800f390 <pbuf_free+0x10c>)
 800f362:	f00b fddd 	bl	801af20 <iprintf>
        }
      }
      count++;
 800f366:	7ffb      	ldrb	r3, [r7, #31]
 800f368:	3301      	adds	r3, #1
 800f36a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	607b      	str	r3, [r7, #4]
 800f370:	e001      	b.n	800f376 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f372:	2300      	movs	r3, #0
 800f374:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d199      	bne.n	800f2b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f37c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0801cf28 	.word	0x0801cf28
 800f38c:	0801d08c 	.word	0x0801d08c
 800f390:	0801cf88 	.word	0x0801cf88
 800f394:	0801d0b8 	.word	0x0801d0b8
 800f398:	0801d0d0 	.word	0x0801d0d0
 800f39c:	0801d0f4 	.word	0x0801d0f4

0800f3a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f3ac:	e005      	b.n	800f3ba <pbuf_clen+0x1a>
    ++len;
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1f6      	bne.n	800f3ae <pbuf_clen+0xe>
  }
  return len;
 800f3c0:	89fb      	ldrh	r3, [r7, #14]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d016      	beq.n	800f40c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f3de:	f00b fbe5 	bl	801abac <sys_arch_protect>
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7b9b      	ldrb	r3, [r3, #14]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	739a      	strb	r2, [r3, #14]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f00b fbe9 	bl	801abc8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7b9b      	ldrb	r3, [r3, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <pbuf_ref+0x3c>
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <pbuf_ref+0x44>)
 800f400:	f240 3242 	movw	r2, #834	; 0x342
 800f404:	4904      	ldr	r1, [pc, #16]	; (800f418 <pbuf_ref+0x48>)
 800f406:	4805      	ldr	r0, [pc, #20]	; (800f41c <pbuf_ref+0x4c>)
 800f408:	f00b fd8a 	bl	801af20 <iprintf>
  }
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	0801cf28 	.word	0x0801cf28
 800f418:	0801d108 	.word	0x0801d108
 800f41c:	0801cf88 	.word	0x0801cf88

0800f420 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <pbuf_cat+0x16>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d107      	bne.n	800f446 <pbuf_cat+0x26>
 800f436:	4b20      	ldr	r3, [pc, #128]	; (800f4b8 <pbuf_cat+0x98>)
 800f438:	f240 3259 	movw	r2, #857	; 0x359
 800f43c:	491f      	ldr	r1, [pc, #124]	; (800f4bc <pbuf_cat+0x9c>)
 800f43e:	4820      	ldr	r0, [pc, #128]	; (800f4c0 <pbuf_cat+0xa0>)
 800f440:	f00b fd6e 	bl	801af20 <iprintf>
 800f444:	e034      	b.n	800f4b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	60fb      	str	r3, [r7, #12]
 800f44a:	e00a      	b.n	800f462 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	891a      	ldrh	r2, [r3, #8]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	891b      	ldrh	r3, [r3, #8]
 800f454:	4413      	add	r3, r2
 800f456:	b29a      	uxth	r2, r3
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	60fb      	str	r3, [r7, #12]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1f0      	bne.n	800f44c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	891a      	ldrh	r2, [r3, #8]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	895b      	ldrh	r3, [r3, #10]
 800f472:	429a      	cmp	r2, r3
 800f474:	d006      	beq.n	800f484 <pbuf_cat+0x64>
 800f476:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <pbuf_cat+0x98>)
 800f478:	f240 3262 	movw	r2, #866	; 0x362
 800f47c:	4911      	ldr	r1, [pc, #68]	; (800f4c4 <pbuf_cat+0xa4>)
 800f47e:	4810      	ldr	r0, [pc, #64]	; (800f4c0 <pbuf_cat+0xa0>)
 800f480:	f00b fd4e 	bl	801af20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <pbuf_cat+0x7a>
 800f48c:	4b0a      	ldr	r3, [pc, #40]	; (800f4b8 <pbuf_cat+0x98>)
 800f48e:	f240 3263 	movw	r2, #867	; 0x363
 800f492:	490d      	ldr	r1, [pc, #52]	; (800f4c8 <pbuf_cat+0xa8>)
 800f494:	480a      	ldr	r0, [pc, #40]	; (800f4c0 <pbuf_cat+0xa0>)
 800f496:	f00b fd43 	bl	801af20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	891a      	ldrh	r2, [r3, #8]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	891b      	ldrh	r3, [r3, #8]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	0801cf28 	.word	0x0801cf28
 800f4bc:	0801d11c 	.word	0x0801d11c
 800f4c0:	0801cf88 	.word	0x0801cf88
 800f4c4:	0801d154 	.word	0x0801d154
 800f4c8:	0801d184 	.word	0x0801d184

0800f4cc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffa1 	bl	800f420 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f4de:	6838      	ldr	r0, [r7, #0]
 800f4e0:	f7ff ff76 	bl	800f3d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b086      	sub	sp, #24
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	617b      	str	r3, [r7, #20]
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <pbuf_copy+0x2a>
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d005      	beq.n	800f516 <pbuf_copy+0x2a>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	891a      	ldrh	r2, [r3, #8]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	891b      	ldrh	r3, [r3, #8]
 800f512:	429a      	cmp	r2, r3
 800f514:	d209      	bcs.n	800f52a <pbuf_copy+0x3e>
 800f516:	4b57      	ldr	r3, [pc, #348]	; (800f674 <pbuf_copy+0x188>)
 800f518:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f51c:	4956      	ldr	r1, [pc, #344]	; (800f678 <pbuf_copy+0x18c>)
 800f51e:	4857      	ldr	r0, [pc, #348]	; (800f67c <pbuf_copy+0x190>)
 800f520:	f00b fcfe 	bl	801af20 <iprintf>
 800f524:	f06f 030f 	mvn.w	r3, #15
 800f528:	e09f      	b.n	800f66a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	895b      	ldrh	r3, [r3, #10]
 800f52e:	461a      	mov	r2, r3
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	895b      	ldrh	r3, [r3, #10]
 800f538:	4619      	mov	r1, r3
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	1acb      	subs	r3, r1, r3
 800f53e:	429a      	cmp	r2, r3
 800f540:	d306      	bcc.n	800f550 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	895b      	ldrh	r3, [r3, #10]
 800f546:	461a      	mov	r2, r3
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	e005      	b.n	800f55c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	895b      	ldrh	r3, [r3, #10]
 800f554:	461a      	mov	r2, r3
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	18d0      	adds	r0, r2, r3
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	4413      	add	r3, r2
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	4619      	mov	r1, r3
 800f570:	f00b fc65 	bl	801ae3e <memcpy>
    offset_to += len;
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f57c:	693a      	ldr	r2, [r7, #16]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	4413      	add	r3, r2
 800f582:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	461a      	mov	r2, r3
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d906      	bls.n	800f59e <pbuf_copy+0xb2>
 800f590:	4b38      	ldr	r3, [pc, #224]	; (800f674 <pbuf_copy+0x188>)
 800f592:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f596:	493a      	ldr	r1, [pc, #232]	; (800f680 <pbuf_copy+0x194>)
 800f598:	4838      	ldr	r0, [pc, #224]	; (800f67c <pbuf_copy+0x190>)
 800f59a:	f00b fcc1 	bl	801af20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	895b      	ldrh	r3, [r3, #10]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d906      	bls.n	800f5b8 <pbuf_copy+0xcc>
 800f5aa:	4b32      	ldr	r3, [pc, #200]	; (800f674 <pbuf_copy+0x188>)
 800f5ac:	f240 32da 	movw	r2, #986	; 0x3da
 800f5b0:	4934      	ldr	r1, [pc, #208]	; (800f684 <pbuf_copy+0x198>)
 800f5b2:	4832      	ldr	r0, [pc, #200]	; (800f67c <pbuf_copy+0x190>)
 800f5b4:	f00b fcb4 	bl	801af20 <iprintf>
    if (offset_from >= p_from->len) {
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	895b      	ldrh	r3, [r3, #10]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d304      	bcc.n	800f5ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	895b      	ldrh	r3, [r3, #10]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d114      	bne.n	800f604 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10c      	bne.n	800f604 <pbuf_copy+0x118>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d009      	beq.n	800f604 <pbuf_copy+0x118>
 800f5f0:	4b20      	ldr	r3, [pc, #128]	; (800f674 <pbuf_copy+0x188>)
 800f5f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f5f6:	4924      	ldr	r1, [pc, #144]	; (800f688 <pbuf_copy+0x19c>)
 800f5f8:	4820      	ldr	r0, [pc, #128]	; (800f67c <pbuf_copy+0x190>)
 800f5fa:	f00b fc91 	bl	801af20 <iprintf>
 800f5fe:	f06f 030f 	mvn.w	r3, #15
 800f602:	e032      	b.n	800f66a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d013      	beq.n	800f632 <pbuf_copy+0x146>
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	895a      	ldrh	r2, [r3, #10]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	891b      	ldrh	r3, [r3, #8]
 800f612:	429a      	cmp	r2, r3
 800f614:	d10d      	bne.n	800f632 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d009      	beq.n	800f632 <pbuf_copy+0x146>
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <pbuf_copy+0x188>)
 800f620:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f624:	4919      	ldr	r1, [pc, #100]	; (800f68c <pbuf_copy+0x1a0>)
 800f626:	4815      	ldr	r0, [pc, #84]	; (800f67c <pbuf_copy+0x190>)
 800f628:	f00b fc7a 	bl	801af20 <iprintf>
 800f62c:	f06f 0305 	mvn.w	r3, #5
 800f630:	e01b      	b.n	800f66a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d013      	beq.n	800f660 <pbuf_copy+0x174>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	895a      	ldrh	r2, [r3, #10]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	891b      	ldrh	r3, [r3, #8]
 800f640:	429a      	cmp	r2, r3
 800f642:	d10d      	bne.n	800f660 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d009      	beq.n	800f660 <pbuf_copy+0x174>
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <pbuf_copy+0x188>)
 800f64e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f652:	490e      	ldr	r1, [pc, #56]	; (800f68c <pbuf_copy+0x1a0>)
 800f654:	4809      	ldr	r0, [pc, #36]	; (800f67c <pbuf_copy+0x190>)
 800f656:	f00b fc63 	bl	801af20 <iprintf>
 800f65a:	f06f 0305 	mvn.w	r3, #5
 800f65e:	e004      	b.n	800f66a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	f47f af61 	bne.w	800f52a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	0801cf28 	.word	0x0801cf28
 800f678:	0801d1d0 	.word	0x0801d1d0
 800f67c:	0801cf88 	.word	0x0801cf88
 800f680:	0801d200 	.word	0x0801d200
 800f684:	0801d218 	.word	0x0801d218
 800f688:	0801d234 	.word	0x0801d234
 800f68c:	0801d244 	.word	0x0801d244

0800f690 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b088      	sub	sp, #32
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	4611      	mov	r1, r2
 800f69c:	461a      	mov	r2, r3
 800f69e:	460b      	mov	r3, r1
 800f6a0:	80fb      	strh	r3, [r7, #6]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d108      	bne.n	800f6c6 <pbuf_copy_partial+0x36>
 800f6b4:	4b2b      	ldr	r3, [pc, #172]	; (800f764 <pbuf_copy_partial+0xd4>)
 800f6b6:	f240 420a 	movw	r2, #1034	; 0x40a
 800f6ba:	492b      	ldr	r1, [pc, #172]	; (800f768 <pbuf_copy_partial+0xd8>)
 800f6bc:	482b      	ldr	r0, [pc, #172]	; (800f76c <pbuf_copy_partial+0xdc>)
 800f6be:	f00b fc2f 	bl	801af20 <iprintf>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e04a      	b.n	800f75c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d108      	bne.n	800f6de <pbuf_copy_partial+0x4e>
 800f6cc:	4b25      	ldr	r3, [pc, #148]	; (800f764 <pbuf_copy_partial+0xd4>)
 800f6ce:	f240 420b 	movw	r2, #1035	; 0x40b
 800f6d2:	4927      	ldr	r1, [pc, #156]	; (800f770 <pbuf_copy_partial+0xe0>)
 800f6d4:	4825      	ldr	r0, [pc, #148]	; (800f76c <pbuf_copy_partial+0xdc>)
 800f6d6:	f00b fc23 	bl	801af20 <iprintf>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e03e      	b.n	800f75c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	61fb      	str	r3, [r7, #28]
 800f6e2:	e034      	b.n	800f74e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f6e4:	88bb      	ldrh	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <pbuf_copy_partial+0x70>
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	895b      	ldrh	r3, [r3, #10]
 800f6ee:	88ba      	ldrh	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d305      	bcc.n	800f700 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	895b      	ldrh	r3, [r3, #10]
 800f6f8:	88ba      	ldrh	r2, [r7, #4]
 800f6fa:	1ad3      	subs	r3, r2, r3
 800f6fc:	80bb      	strh	r3, [r7, #4]
 800f6fe:	e023      	b.n	800f748 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	895a      	ldrh	r2, [r3, #10]
 800f704:	88bb      	ldrh	r3, [r7, #4]
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f70a:	8b3a      	ldrh	r2, [r7, #24]
 800f70c:	88fb      	ldrh	r3, [r7, #6]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d901      	bls.n	800f716 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f716:	8b7b      	ldrh	r3, [r7, #26]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	18d0      	adds	r0, r2, r3
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	685a      	ldr	r2, [r3, #4]
 800f720:	88bb      	ldrh	r3, [r7, #4]
 800f722:	4413      	add	r3, r2
 800f724:	8b3a      	ldrh	r2, [r7, #24]
 800f726:	4619      	mov	r1, r3
 800f728:	f00b fb89 	bl	801ae3e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f72c:	8afa      	ldrh	r2, [r7, #22]
 800f72e:	8b3b      	ldrh	r3, [r7, #24]
 800f730:	4413      	add	r3, r2
 800f732:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f734:	8b7a      	ldrh	r2, [r7, #26]
 800f736:	8b3b      	ldrh	r3, [r7, #24]
 800f738:	4413      	add	r3, r2
 800f73a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f73c:	88fa      	ldrh	r2, [r7, #6]
 800f73e:	8b3b      	ldrh	r3, [r7, #24]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	61fb      	str	r3, [r7, #28]
 800f74e:	88fb      	ldrh	r3, [r7, #6]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <pbuf_copy_partial+0xca>
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1c4      	bne.n	800f6e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f75a:	8afb      	ldrh	r3, [r7, #22]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3720      	adds	r7, #32
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	0801cf28 	.word	0x0801cf28
 800f768:	0801d270 	.word	0x0801d270
 800f76c:	0801cf88 	.word	0x0801cf88
 800f770:	0801d290 	.word	0x0801d290

0800f774 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	4603      	mov	r3, r0
 800f77c:	603a      	str	r2, [r7, #0]
 800f77e:	71fb      	strb	r3, [r7, #7]
 800f780:	460b      	mov	r3, r1
 800f782:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	8919      	ldrh	r1, [r3, #8]
 800f788:	88ba      	ldrh	r2, [r7, #4]
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff fa95 	bl	800ecbc <pbuf_alloc>
 800f792:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d101      	bne.n	800f79e <pbuf_clone+0x2a>
    return NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e011      	b.n	800f7c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f79e:	6839      	ldr	r1, [r7, #0]
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f7ff fea3 	bl	800f4ec <pbuf_copy>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f7aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d006      	beq.n	800f7c0 <pbuf_clone+0x4c>
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <pbuf_clone+0x58>)
 800f7b4:	f240 5224 	movw	r2, #1316	; 0x524
 800f7b8:	4905      	ldr	r1, [pc, #20]	; (800f7d0 <pbuf_clone+0x5c>)
 800f7ba:	4806      	ldr	r0, [pc, #24]	; (800f7d4 <pbuf_clone+0x60>)
 800f7bc:	f00b fbb0 	bl	801af20 <iprintf>
  return q;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	0801cf28 	.word	0x0801cf28
 800f7d0:	0801d39c 	.word	0x0801d39c
 800f7d4:	0801cf88 	.word	0x0801cf88

0800f7d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f7dc:	f00b fbb8 	bl	801af50 <rand>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	4b01      	ldr	r3, [pc, #4]	; (800f7f8 <tcp_init+0x20>)
 800f7f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7f4:	bf00      	nop
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	24000028 	.word	0x24000028

0800f7fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7d1b      	ldrb	r3, [r3, #20]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d105      	bne.n	800f818 <tcp_free+0x1c>
 800f80c:	4b06      	ldr	r3, [pc, #24]	; (800f828 <tcp_free+0x2c>)
 800f80e:	22d4      	movs	r2, #212	; 0xd4
 800f810:	4906      	ldr	r1, [pc, #24]	; (800f82c <tcp_free+0x30>)
 800f812:	4807      	ldr	r0, [pc, #28]	; (800f830 <tcp_free+0x34>)
 800f814:	f00b fb84 	bl	801af20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	2001      	movs	r0, #1
 800f81c:	f7fe fe82 	bl	800e524 <memp_free>
}
 800f820:	bf00      	nop
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	0801d428 	.word	0x0801d428
 800f82c:	0801d458 	.word	0x0801d458
 800f830:	0801d46c 	.word	0x0801d46c

0800f834 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	7d1b      	ldrb	r3, [r3, #20]
 800f840:	2b01      	cmp	r3, #1
 800f842:	d105      	bne.n	800f850 <tcp_free_listen+0x1c>
 800f844:	4b06      	ldr	r3, [pc, #24]	; (800f860 <tcp_free_listen+0x2c>)
 800f846:	22df      	movs	r2, #223	; 0xdf
 800f848:	4906      	ldr	r1, [pc, #24]	; (800f864 <tcp_free_listen+0x30>)
 800f84a:	4807      	ldr	r0, [pc, #28]	; (800f868 <tcp_free_listen+0x34>)
 800f84c:	f00b fb68 	bl	801af20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f850:	6879      	ldr	r1, [r7, #4]
 800f852:	2002      	movs	r0, #2
 800f854:	f7fe fe66 	bl	800e524 <memp_free>
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	0801d428 	.word	0x0801d428
 800f864:	0801d494 	.word	0x0801d494
 800f868:	0801d46c 	.word	0x0801d46c

0800f86c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f870:	f000 ffdc 	bl	801082c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f874:	4b07      	ldr	r3, [pc, #28]	; (800f894 <tcp_tmr+0x28>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	3301      	adds	r3, #1
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	4b05      	ldr	r3, [pc, #20]	; (800f894 <tcp_tmr+0x28>)
 800f87e:	701a      	strb	r2, [r3, #0]
 800f880:	4b04      	ldr	r3, [pc, #16]	; (800f894 <tcp_tmr+0x28>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f88c:	f000 fc8e 	bl	80101ac <tcp_slowtmr>
  }
}
 800f890:	bf00      	nop
 800f892:	bd80      	pop	{r7, pc}
 800f894:	24009dad 	.word	0x24009dad

0800f898 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d105      	bne.n	800f8b4 <tcp_remove_listener+0x1c>
 800f8a8:	4b0d      	ldr	r3, [pc, #52]	; (800f8e0 <tcp_remove_listener+0x48>)
 800f8aa:	22ff      	movs	r2, #255	; 0xff
 800f8ac:	490d      	ldr	r1, [pc, #52]	; (800f8e4 <tcp_remove_listener+0x4c>)
 800f8ae:	480e      	ldr	r0, [pc, #56]	; (800f8e8 <tcp_remove_listener+0x50>)
 800f8b0:	f00b fb36 	bl	801af20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	60fb      	str	r3, [r7, #12]
 800f8b8:	e00a      	b.n	800f8d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d102      	bne.n	800f8ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	60fb      	str	r3, [r7, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1f1      	bne.n	800f8ba <tcp_remove_listener+0x22>
    }
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	bf00      	nop
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801d428 	.word	0x0801d428
 800f8e4:	0801d4b0 	.word	0x0801d4b0
 800f8e8:	0801d46c 	.word	0x0801d46c

0800f8ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <tcp_listen_closed+0x1c>
 800f8fa:	4b14      	ldr	r3, [pc, #80]	; (800f94c <tcp_listen_closed+0x60>)
 800f8fc:	f240 1211 	movw	r2, #273	; 0x111
 800f900:	4913      	ldr	r1, [pc, #76]	; (800f950 <tcp_listen_closed+0x64>)
 800f902:	4814      	ldr	r0, [pc, #80]	; (800f954 <tcp_listen_closed+0x68>)
 800f904:	f00b fb0c 	bl	801af20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	7d1b      	ldrb	r3, [r3, #20]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d006      	beq.n	800f91e <tcp_listen_closed+0x32>
 800f910:	4b0e      	ldr	r3, [pc, #56]	; (800f94c <tcp_listen_closed+0x60>)
 800f912:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f916:	4910      	ldr	r1, [pc, #64]	; (800f958 <tcp_listen_closed+0x6c>)
 800f918:	480e      	ldr	r0, [pc, #56]	; (800f954 <tcp_listen_closed+0x68>)
 800f91a:	f00b fb01 	bl	801af20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f91e:	2301      	movs	r3, #1
 800f920:	60fb      	str	r3, [r7, #12]
 800f922:	e00b      	b.n	800f93c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f924:	4a0d      	ldr	r2, [pc, #52]	; (800f95c <tcp_listen_closed+0x70>)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	f7ff ffb1 	bl	800f898 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3301      	adds	r3, #1
 800f93a:	60fb      	str	r3, [r7, #12]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d9f0      	bls.n	800f924 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f942:	bf00      	nop
 800f944:	bf00      	nop
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	0801d428 	.word	0x0801d428
 800f950:	0801d4d8 	.word	0x0801d4d8
 800f954:	0801d46c 	.word	0x0801d46c
 800f958:	0801d4e4 	.word	0x0801d4e4
 800f95c:	0801f80c 	.word	0x0801f80c

0800f960 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f960:	b5b0      	push	{r4, r5, r7, lr}
 800f962:	b088      	sub	sp, #32
 800f964:	af04      	add	r7, sp, #16
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <tcp_close_shutdown+0x20>
 800f972:	4b63      	ldr	r3, [pc, #396]	; (800fb00 <tcp_close_shutdown+0x1a0>)
 800f974:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f978:	4962      	ldr	r1, [pc, #392]	; (800fb04 <tcp_close_shutdown+0x1a4>)
 800f97a:	4863      	ldr	r0, [pc, #396]	; (800fb08 <tcp_close_shutdown+0x1a8>)
 800f97c:	f00b fad0 	bl	801af20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f980:	78fb      	ldrb	r3, [r7, #3]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d066      	beq.n	800fa54 <tcp_close_shutdown+0xf4>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	7d1b      	ldrb	r3, [r3, #20]
 800f98a:	2b04      	cmp	r3, #4
 800f98c:	d003      	beq.n	800f996 <tcp_close_shutdown+0x36>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	7d1b      	ldrb	r3, [r3, #20]
 800f992:	2b07      	cmp	r3, #7
 800f994:	d15e      	bne.n	800fa54 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d104      	bne.n	800f9a8 <tcp_close_shutdown+0x48>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f9a6:	d055      	beq.n	800fa54 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	8b5b      	ldrh	r3, [r3, #26]
 800f9ac:	f003 0310 	and.w	r3, r3, #16
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <tcp_close_shutdown+0x62>
 800f9b4:	4b52      	ldr	r3, [pc, #328]	; (800fb00 <tcp_close_shutdown+0x1a0>)
 800f9b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f9ba:	4954      	ldr	r1, [pc, #336]	; (800fb0c <tcp_close_shutdown+0x1ac>)
 800f9bc:	4852      	ldr	r0, [pc, #328]	; (800fb08 <tcp_close_shutdown+0x1a8>)
 800f9be:	f00b faaf 	bl	801af20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f9ca:	687d      	ldr	r5, [r7, #4]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	8ad2      	ldrh	r2, [r2, #22]
 800f9d4:	6879      	ldr	r1, [r7, #4]
 800f9d6:	8b09      	ldrh	r1, [r1, #24]
 800f9d8:	9102      	str	r1, [sp, #8]
 800f9da:	9201      	str	r2, [sp, #4]
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	462b      	mov	r3, r5
 800f9e0:	4622      	mov	r2, r4
 800f9e2:	4601      	mov	r1, r0
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f005 fced 	bl	80153c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 face 	bl	8010f8c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f9f0:	4b47      	ldr	r3, [pc, #284]	; (800fb10 <tcp_close_shutdown+0x1b0>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d105      	bne.n	800fa06 <tcp_close_shutdown+0xa6>
 800f9fa:	4b45      	ldr	r3, [pc, #276]	; (800fb10 <tcp_close_shutdown+0x1b0>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	4a43      	ldr	r2, [pc, #268]	; (800fb10 <tcp_close_shutdown+0x1b0>)
 800fa02:	6013      	str	r3, [r2, #0]
 800fa04:	e013      	b.n	800fa2e <tcp_close_shutdown+0xce>
 800fa06:	4b42      	ldr	r3, [pc, #264]	; (800fb10 <tcp_close_shutdown+0x1b0>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	e00c      	b.n	800fa28 <tcp_close_shutdown+0xc8>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d104      	bne.n	800fa22 <tcp_close_shutdown+0xc2>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	68da      	ldr	r2, [r3, #12]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	60da      	str	r2, [r3, #12]
 800fa20:	e005      	b.n	800fa2e <tcp_close_shutdown+0xce>
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	60fb      	str	r3, [r7, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1ef      	bne.n	800fa0e <tcp_close_shutdown+0xae>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	4b37      	ldr	r3, [pc, #220]	; (800fb14 <tcp_close_shutdown+0x1b4>)
 800fa36:	2201      	movs	r2, #1
 800fa38:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fa3a:	4b37      	ldr	r3, [pc, #220]	; (800fb18 <tcp_close_shutdown+0x1b8>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d102      	bne.n	800fa4a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fa44:	f003 ff62 	bl	801390c <tcp_trigger_input_pcb_close>
 800fa48:	e002      	b.n	800fa50 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7ff fed6 	bl	800f7fc <tcp_free>
      }
      return ERR_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	e050      	b.n	800faf6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	7d1b      	ldrb	r3, [r3, #20]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d03b      	beq.n	800fad4 <tcp_close_shutdown+0x174>
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	dc44      	bgt.n	800faea <tcp_close_shutdown+0x18a>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <tcp_close_shutdown+0x10a>
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d02a      	beq.n	800fabe <tcp_close_shutdown+0x15e>
 800fa68:	e03f      	b.n	800faea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	8adb      	ldrh	r3, [r3, #22]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d021      	beq.n	800fab6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa72:	4b2a      	ldr	r3, [pc, #168]	; (800fb1c <tcp_close_shutdown+0x1bc>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d105      	bne.n	800fa88 <tcp_close_shutdown+0x128>
 800fa7c:	4b27      	ldr	r3, [pc, #156]	; (800fb1c <tcp_close_shutdown+0x1bc>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	4a26      	ldr	r2, [pc, #152]	; (800fb1c <tcp_close_shutdown+0x1bc>)
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	e013      	b.n	800fab0 <tcp_close_shutdown+0x150>
 800fa88:	4b24      	ldr	r3, [pc, #144]	; (800fb1c <tcp_close_shutdown+0x1bc>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60bb      	str	r3, [r7, #8]
 800fa8e:	e00c      	b.n	800faaa <tcp_close_shutdown+0x14a>
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d104      	bne.n	800faa4 <tcp_close_shutdown+0x144>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68da      	ldr	r2, [r3, #12]
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	e005      	b.n	800fab0 <tcp_close_shutdown+0x150>
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	60bb      	str	r3, [r7, #8]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1ef      	bne.n	800fa90 <tcp_close_shutdown+0x130>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7ff fea0 	bl	800f7fc <tcp_free>
      break;
 800fabc:	e01a      	b.n	800faf4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7ff ff14 	bl	800f8ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fac4:	6879      	ldr	r1, [r7, #4]
 800fac6:	4816      	ldr	r0, [pc, #88]	; (800fb20 <tcp_close_shutdown+0x1c0>)
 800fac8:	f001 fab0 	bl	801102c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7ff feb1 	bl	800f834 <tcp_free_listen>
      break;
 800fad2:	e00f      	b.n	800faf4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fad4:	6879      	ldr	r1, [r7, #4]
 800fad6:	480e      	ldr	r0, [pc, #56]	; (800fb10 <tcp_close_shutdown+0x1b0>)
 800fad8:	f001 faa8 	bl	801102c <tcp_pcb_remove>
 800fadc:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <tcp_close_shutdown+0x1b4>)
 800fade:	2201      	movs	r2, #1
 800fae0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff fe8a 	bl	800f7fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fae8:	e004      	b.n	800faf4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f81a 	bl	800fb24 <tcp_close_shutdown_fin>
 800faf0:	4603      	mov	r3, r0
 800faf2:	e000      	b.n	800faf6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bdb0      	pop	{r4, r5, r7, pc}
 800fafe:	bf00      	nop
 800fb00:	0801d428 	.word	0x0801d428
 800fb04:	0801d4fc 	.word	0x0801d4fc
 800fb08:	0801d46c 	.word	0x0801d46c
 800fb0c:	0801d51c 	.word	0x0801d51c
 800fb10:	2400d714 	.word	0x2400d714
 800fb14:	2400d710 	.word	0x2400d710
 800fb18:	2400d728 	.word	0x2400d728
 800fb1c:	2400d720 	.word	0x2400d720
 800fb20:	2400d71c 	.word	0x2400d71c

0800fb24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d106      	bne.n	800fb40 <tcp_close_shutdown_fin+0x1c>
 800fb32:	4b2e      	ldr	r3, [pc, #184]	; (800fbec <tcp_close_shutdown_fin+0xc8>)
 800fb34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fb38:	492d      	ldr	r1, [pc, #180]	; (800fbf0 <tcp_close_shutdown_fin+0xcc>)
 800fb3a:	482e      	ldr	r0, [pc, #184]	; (800fbf4 <tcp_close_shutdown_fin+0xd0>)
 800fb3c:	f00b f9f0 	bl	801af20 <iprintf>

  switch (pcb->state) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	7d1b      	ldrb	r3, [r3, #20]
 800fb44:	2b07      	cmp	r3, #7
 800fb46:	d020      	beq.n	800fb8a <tcp_close_shutdown_fin+0x66>
 800fb48:	2b07      	cmp	r3, #7
 800fb4a:	dc2b      	bgt.n	800fba4 <tcp_close_shutdown_fin+0x80>
 800fb4c:	2b03      	cmp	r3, #3
 800fb4e:	d002      	beq.n	800fb56 <tcp_close_shutdown_fin+0x32>
 800fb50:	2b04      	cmp	r3, #4
 800fb52:	d00d      	beq.n	800fb70 <tcp_close_shutdown_fin+0x4c>
 800fb54:	e026      	b.n	800fba4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f004 fd42 	bl	80145e0 <tcp_send_fin>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d11f      	bne.n	800fba8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2205      	movs	r2, #5
 800fb6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb6e:	e01b      	b.n	800fba8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f004 fd35 	bl	80145e0 <tcp_send_fin>
 800fb76:	4603      	mov	r3, r0
 800fb78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d114      	bne.n	800fbac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2205      	movs	r2, #5
 800fb86:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb88:	e010      	b.n	800fbac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f004 fd28 	bl	80145e0 <tcp_send_fin>
 800fb90:	4603      	mov	r3, r0
 800fb92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d109      	bne.n	800fbb0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2209      	movs	r2, #9
 800fba0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fba2:	e005      	b.n	800fbb0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e01c      	b.n	800fbe2 <tcp_close_shutdown_fin+0xbe>
      break;
 800fba8:	bf00      	nop
 800fbaa:	e002      	b.n	800fbb2 <tcp_close_shutdown_fin+0x8e>
      break;
 800fbac:	bf00      	nop
 800fbae:	e000      	b.n	800fbb2 <tcp_close_shutdown_fin+0x8e>
      break;
 800fbb0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d103      	bne.n	800fbc2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f004 fe4e 	bl	801485c <tcp_output>
 800fbc0:	e00d      	b.n	800fbde <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbca:	d108      	bne.n	800fbde <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	8b5b      	ldrh	r3, [r3, #26]
 800fbd0:	f043 0308 	orr.w	r3, r3, #8
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e001      	b.n	800fbe2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	0801d428 	.word	0x0801d428
 800fbf0:	0801d4d8 	.word	0x0801d4d8
 800fbf4:	0801d46c 	.word	0x0801d46c

0800fbf8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d109      	bne.n	800fc1a <tcp_close+0x22>
 800fc06:	4b0f      	ldr	r3, [pc, #60]	; (800fc44 <tcp_close+0x4c>)
 800fc08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fc0c:	490e      	ldr	r1, [pc, #56]	; (800fc48 <tcp_close+0x50>)
 800fc0e:	480f      	ldr	r0, [pc, #60]	; (800fc4c <tcp_close+0x54>)
 800fc10:	f00b f986 	bl	801af20 <iprintf>
 800fc14:	f06f 030f 	mvn.w	r3, #15
 800fc18:	e00f      	b.n	800fc3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	7d1b      	ldrb	r3, [r3, #20]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d006      	beq.n	800fc30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	8b5b      	ldrh	r3, [r3, #26]
 800fc26:	f043 0310 	orr.w	r3, r3, #16
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fc30:	2101      	movs	r1, #1
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff fe94 	bl	800f960 <tcp_close_shutdown>
 800fc38:	4603      	mov	r3, r0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	0801d428 	.word	0x0801d428
 800fc48:	0801d538 	.word	0x0801d538
 800fc4c:	0801d46c 	.word	0x0801d46c

0800fc50 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d109      	bne.n	800fc76 <tcp_shutdown+0x26>
 800fc62:	4b26      	ldr	r3, [pc, #152]	; (800fcfc <tcp_shutdown+0xac>)
 800fc64:	f240 2207 	movw	r2, #519	; 0x207
 800fc68:	4925      	ldr	r1, [pc, #148]	; (800fd00 <tcp_shutdown+0xb0>)
 800fc6a:	4826      	ldr	r0, [pc, #152]	; (800fd04 <tcp_shutdown+0xb4>)
 800fc6c:	f00b f958 	bl	801af20 <iprintf>
 800fc70:	f06f 030f 	mvn.w	r3, #15
 800fc74:	e03d      	b.n	800fcf2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	7d1b      	ldrb	r3, [r3, #20]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d102      	bne.n	800fc84 <tcp_shutdown+0x34>
    return ERR_CONN;
 800fc7e:	f06f 030a 	mvn.w	r3, #10
 800fc82:	e036      	b.n	800fcf2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d01b      	beq.n	800fcc2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	8b5b      	ldrh	r3, [r3, #26]
 800fc8e:	f043 0310 	orr.w	r3, r3, #16
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d005      	beq.n	800fcaa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800fc9e:	2101      	movs	r1, #1
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f7ff fe5d 	bl	800f960 <tcp_close_shutdown>
 800fca6:	4603      	mov	r3, r0
 800fca8:	e023      	b.n	800fcf2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d007      	beq.n	800fcc2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff fae4 	bl	800f284 <pbuf_free>
      pcb->refused_data = NULL;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d013      	beq.n	800fcf0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	2b04      	cmp	r3, #4
 800fcce:	dc02      	bgt.n	800fcd6 <tcp_shutdown+0x86>
 800fcd0:	2b03      	cmp	r3, #3
 800fcd2:	da02      	bge.n	800fcda <tcp_shutdown+0x8a>
 800fcd4:	e009      	b.n	800fcea <tcp_shutdown+0x9a>
 800fcd6:	2b07      	cmp	r3, #7
 800fcd8:	d107      	bne.n	800fcea <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	4619      	mov	r1, r3
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff fe3d 	bl	800f960 <tcp_close_shutdown>
 800fce6:	4603      	mov	r3, r0
 800fce8:	e003      	b.n	800fcf2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fcea:	f06f 030a 	mvn.w	r3, #10
 800fcee:	e000      	b.n	800fcf2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	0801d428 	.word	0x0801d428
 800fd00:	0801d550 	.word	0x0801d550
 800fd04:	0801d46c 	.word	0x0801d46c

0800fd08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08e      	sub	sp, #56	; 0x38
 800fd0c:	af04      	add	r7, sp, #16
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d107      	bne.n	800fd28 <tcp_abandon+0x20>
 800fd18:	4b52      	ldr	r3, [pc, #328]	; (800fe64 <tcp_abandon+0x15c>)
 800fd1a:	f240 223d 	movw	r2, #573	; 0x23d
 800fd1e:	4952      	ldr	r1, [pc, #328]	; (800fe68 <tcp_abandon+0x160>)
 800fd20:	4852      	ldr	r0, [pc, #328]	; (800fe6c <tcp_abandon+0x164>)
 800fd22:	f00b f8fd 	bl	801af20 <iprintf>
 800fd26:	e099      	b.n	800fe5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	7d1b      	ldrb	r3, [r3, #20]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d106      	bne.n	800fd3e <tcp_abandon+0x36>
 800fd30:	4b4c      	ldr	r3, [pc, #304]	; (800fe64 <tcp_abandon+0x15c>)
 800fd32:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fd36:	494e      	ldr	r1, [pc, #312]	; (800fe70 <tcp_abandon+0x168>)
 800fd38:	484c      	ldr	r0, [pc, #304]	; (800fe6c <tcp_abandon+0x164>)
 800fd3a:	f00b f8f1 	bl	801af20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7d1b      	ldrb	r3, [r3, #20]
 800fd42:	2b0a      	cmp	r3, #10
 800fd44:	d107      	bne.n	800fd56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fd46:	6879      	ldr	r1, [r7, #4]
 800fd48:	484a      	ldr	r0, [pc, #296]	; (800fe74 <tcp_abandon+0x16c>)
 800fd4a:	f001 f96f 	bl	801102c <tcp_pcb_remove>
    tcp_free(pcb);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7ff fd54 	bl	800f7fc <tcp_free>
 800fd54:	e082      	b.n	800fe5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fd56:	2300      	movs	r3, #0
 800fd58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d126      	bne.n	800fdce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8adb      	ldrh	r3, [r3, #22]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d02e      	beq.n	800fde6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd88:	4b3b      	ldr	r3, [pc, #236]	; (800fe78 <tcp_abandon+0x170>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d105      	bne.n	800fd9e <tcp_abandon+0x96>
 800fd92:	4b39      	ldr	r3, [pc, #228]	; (800fe78 <tcp_abandon+0x170>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	4a37      	ldr	r2, [pc, #220]	; (800fe78 <tcp_abandon+0x170>)
 800fd9a:	6013      	str	r3, [r2, #0]
 800fd9c:	e013      	b.n	800fdc6 <tcp_abandon+0xbe>
 800fd9e:	4b36      	ldr	r3, [pc, #216]	; (800fe78 <tcp_abandon+0x170>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	61fb      	str	r3, [r7, #28]
 800fda4:	e00c      	b.n	800fdc0 <tcp_abandon+0xb8>
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d104      	bne.n	800fdba <tcp_abandon+0xb2>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	68da      	ldr	r2, [r3, #12]
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	60da      	str	r2, [r3, #12]
 800fdb8:	e005      	b.n	800fdc6 <tcp_abandon+0xbe>
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	61fb      	str	r3, [r7, #28]
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1ef      	bne.n	800fda6 <tcp_abandon+0x9e>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	60da      	str	r2, [r3, #12]
 800fdcc:	e00b      	b.n	800fde6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	8adb      	ldrh	r3, [r3, #22]
 800fdd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	4828      	ldr	r0, [pc, #160]	; (800fe7c <tcp_abandon+0x174>)
 800fddc:	f001 f926 	bl	801102c <tcp_pcb_remove>
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <tcp_abandon+0x178>)
 800fde2:	2201      	movs	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d004      	beq.n	800fdf8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f000 fdfa 	bl	80109ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe04:	4618      	mov	r0, r3
 800fe06:	f000 fdf1 	bl	80109ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d004      	beq.n	800fe1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 fde8 	bl	80109ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00e      	beq.n	800fe40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	3304      	adds	r3, #4
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	8b12      	ldrh	r2, [r2, #24]
 800fe2c:	9202      	str	r2, [sp, #8]
 800fe2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe30:	9201      	str	r2, [sp, #4]
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	460b      	mov	r3, r1
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	69b9      	ldr	r1, [r7, #24]
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f005 fac2 	bl	80153c4 <tcp_rst>
    }
    last_state = pcb->state;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	7d1b      	ldrb	r3, [r3, #20]
 800fe44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff fcd8 	bl	800f7fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d004      	beq.n	800fe5c <tcp_abandon+0x154>
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	f06f 010c 	mvn.w	r1, #12
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	4798      	blx	r3
  }
}
 800fe5c:	3728      	adds	r7, #40	; 0x28
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801d428 	.word	0x0801d428
 800fe68:	0801d56c 	.word	0x0801d56c
 800fe6c:	0801d46c 	.word	0x0801d46c
 800fe70:	0801d588 	.word	0x0801d588
 800fe74:	2400d724 	.word	0x2400d724
 800fe78:	2400d720 	.word	0x2400d720
 800fe7c:	2400d714 	.word	0x2400d714
 800fe80:	2400d710 	.word	0x2400d710

0800fe84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff ff3a 	bl	800fd08 <tcp_abandon>
}
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b088      	sub	sp, #32
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	4613      	mov	r3, r2
 800fea8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800feaa:	2304      	movs	r3, #4
 800feac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800feb4:	4b3e      	ldr	r3, [pc, #248]	; (800ffb0 <tcp_bind+0x114>)
 800feb6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d109      	bne.n	800fed2 <tcp_bind+0x36>
 800febe:	4b3d      	ldr	r3, [pc, #244]	; (800ffb4 <tcp_bind+0x118>)
 800fec0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800fec4:	493c      	ldr	r1, [pc, #240]	; (800ffb8 <tcp_bind+0x11c>)
 800fec6:	483d      	ldr	r0, [pc, #244]	; (800ffbc <tcp_bind+0x120>)
 800fec8:	f00b f82a 	bl	801af20 <iprintf>
 800fecc:	f06f 030f 	mvn.w	r3, #15
 800fed0:	e06a      	b.n	800ffa8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	7d1b      	ldrb	r3, [r3, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <tcp_bind+0x52>
 800feda:	4b36      	ldr	r3, [pc, #216]	; (800ffb4 <tcp_bind+0x118>)
 800fedc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fee0:	4937      	ldr	r1, [pc, #220]	; (800ffc0 <tcp_bind+0x124>)
 800fee2:	4836      	ldr	r0, [pc, #216]	; (800ffbc <tcp_bind+0x120>)
 800fee4:	f00b f81c 	bl	801af20 <iprintf>
 800fee8:	f06f 0305 	mvn.w	r3, #5
 800feec:	e05c      	b.n	800ffa8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800feee:	88fb      	ldrh	r3, [r7, #6]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d109      	bne.n	800ff08 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fef4:	f000 f914 	bl	8010120 <tcp_new_port>
 800fef8:	4603      	mov	r3, r0
 800fefa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fefc:	88fb      	ldrh	r3, [r7, #6]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d135      	bne.n	800ff6e <tcp_bind+0xd2>
      return ERR_BUF;
 800ff02:	f06f 0301 	mvn.w	r3, #1
 800ff06:	e04f      	b.n	800ffa8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ff08:	2300      	movs	r3, #0
 800ff0a:	61fb      	str	r3, [r7, #28]
 800ff0c:	e02b      	b.n	800ff66 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ff0e:	4a2d      	ldr	r2, [pc, #180]	; (800ffc4 <tcp_bind+0x128>)
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	61bb      	str	r3, [r7, #24]
 800ff1a:	e01e      	b.n	800ff5a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	8adb      	ldrh	r3, [r3, #22]
 800ff20:	88fa      	ldrh	r2, [r7, #6]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d116      	bne.n	800ff54 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ff26:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d010      	beq.n	800ff4e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00c      	beq.n	800ff4e <tcp_bind+0xb2>
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d009      	beq.n	800ff4e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d102      	bne.n	800ff54 <tcp_bind+0xb8>
              return ERR_USE;
 800ff4e:	f06f 0307 	mvn.w	r3, #7
 800ff52:	e029      	b.n	800ffa8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	61bb      	str	r3, [r7, #24]
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1dd      	bne.n	800ff1c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	3301      	adds	r3, #1
 800ff64:	61fb      	str	r3, [r7, #28]
 800ff66:	69fa      	ldr	r2, [r7, #28]
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	dbcf      	blt.n	800ff0e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00c      	beq.n	800ff8e <tcp_bind+0xf2>
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d008      	beq.n	800ff8e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <tcp_bind+0xec>
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	e000      	b.n	800ff8a <tcp_bind+0xee>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	88fa      	ldrh	r2, [r7, #6]
 800ff92:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ff94:	4b0c      	ldr	r3, [pc, #48]	; (800ffc8 <tcp_bind+0x12c>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	60da      	str	r2, [r3, #12]
 800ff9c:	4a0a      	ldr	r2, [pc, #40]	; (800ffc8 <tcp_bind+0x12c>)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6013      	str	r3, [r2, #0]
 800ffa2:	f005 fbd1 	bl	8015748 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3720      	adds	r7, #32
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	0801f844 	.word	0x0801f844
 800ffb4:	0801d428 	.word	0x0801d428
 800ffb8:	0801d5bc 	.word	0x0801d5bc
 800ffbc:	0801d46c 	.word	0x0801d46c
 800ffc0:	0801d5d4 	.word	0x0801d5d4
 800ffc4:	0801f80c 	.word	0x0801f80c
 800ffc8:	2400d720 	.word	0x2400d720

0800ffcc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d106      	bne.n	800ffe8 <tcp_update_rcv_ann_wnd+0x1c>
 800ffda:	4b25      	ldr	r3, [pc, #148]	; (8010070 <tcp_update_rcv_ann_wnd+0xa4>)
 800ffdc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ffe0:	4924      	ldr	r1, [pc, #144]	; (8010074 <tcp_update_rcv_ann_wnd+0xa8>)
 800ffe2:	4825      	ldr	r0, [pc, #148]	; (8010078 <tcp_update_rcv_ann_wnd+0xac>)
 800ffe4:	f00a ff9c 	bl	801af20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fff0:	4413      	add	r3, r2
 800fff2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fffc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010000:	bf28      	it	cs
 8010002:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010006:	b292      	uxth	r2, r2
 8010008:	4413      	add	r3, r2
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	db08      	blt.n	8010024 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	e020      	b.n	8010066 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	dd03      	ble.n	801003a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010038:	e014      	b.n	8010064 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801004c:	d306      	bcc.n	801005c <tcp_update_rcv_ann_wnd+0x90>
 801004e:	4b08      	ldr	r3, [pc, #32]	; (8010070 <tcp_update_rcv_ann_wnd+0xa4>)
 8010050:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010054:	4909      	ldr	r1, [pc, #36]	; (801007c <tcp_update_rcv_ann_wnd+0xb0>)
 8010056:	4808      	ldr	r0, [pc, #32]	; (8010078 <tcp_update_rcv_ann_wnd+0xac>)
 8010058:	f00a ff62 	bl	801af20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010064:	2300      	movs	r3, #0
  }
}
 8010066:	4618      	mov	r0, r3
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	0801d428 	.word	0x0801d428
 8010074:	0801d684 	.word	0x0801d684
 8010078:	0801d46c 	.word	0x0801d46c
 801007c:	0801d6a8 	.word	0x0801d6a8

08010080 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	460b      	mov	r3, r1
 801008a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d107      	bne.n	80100a2 <tcp_recved+0x22>
 8010092:	4b1f      	ldr	r3, [pc, #124]	; (8010110 <tcp_recved+0x90>)
 8010094:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010098:	491e      	ldr	r1, [pc, #120]	; (8010114 <tcp_recved+0x94>)
 801009a:	481f      	ldr	r0, [pc, #124]	; (8010118 <tcp_recved+0x98>)
 801009c:	f00a ff40 	bl	801af20 <iprintf>
 80100a0:	e032      	b.n	8010108 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	7d1b      	ldrb	r3, [r3, #20]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d106      	bne.n	80100b8 <tcp_recved+0x38>
 80100aa:	4b19      	ldr	r3, [pc, #100]	; (8010110 <tcp_recved+0x90>)
 80100ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80100b0:	491a      	ldr	r1, [pc, #104]	; (801011c <tcp_recved+0x9c>)
 80100b2:	4819      	ldr	r0, [pc, #100]	; (8010118 <tcp_recved+0x98>)
 80100b4:	f00a ff34 	bl	801af20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100bc:	887b      	ldrh	r3, [r7, #2]
 80100be:	4413      	add	r3, r2
 80100c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80100c2:	89fb      	ldrh	r3, [r7, #14]
 80100c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80100c8:	d804      	bhi.n	80100d4 <tcp_recved+0x54>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100ce:	89fa      	ldrh	r2, [r7, #14]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d204      	bcs.n	80100de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80100da:	851a      	strh	r2, [r3, #40]	; 0x28
 80100dc:	e002      	b.n	80100e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	89fa      	ldrh	r2, [r7, #14]
 80100e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff ff71 	bl	800ffcc <tcp_update_rcv_ann_wnd>
 80100ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80100f2:	d309      	bcc.n	8010108 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	8b5b      	ldrh	r3, [r3, #26]
 80100f8:	f043 0302 	orr.w	r3, r3, #2
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f004 fbaa 	bl	801485c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	0801d428 	.word	0x0801d428
 8010114:	0801d6c4 	.word	0x0801d6c4
 8010118:	0801d46c 	.word	0x0801d46c
 801011c:	0801d6dc 	.word	0x0801d6dc

08010120 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010120:	b480      	push	{r7}
 8010122:	b083      	sub	sp, #12
 8010124:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801012a:	4b1e      	ldr	r3, [pc, #120]	; (80101a4 <tcp_new_port+0x84>)
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	3301      	adds	r3, #1
 8010130:	b29a      	uxth	r2, r3
 8010132:	4b1c      	ldr	r3, [pc, #112]	; (80101a4 <tcp_new_port+0x84>)
 8010134:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010136:	4b1b      	ldr	r3, [pc, #108]	; (80101a4 <tcp_new_port+0x84>)
 8010138:	881b      	ldrh	r3, [r3, #0]
 801013a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801013e:	4293      	cmp	r3, r2
 8010140:	d103      	bne.n	801014a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010142:	4b18      	ldr	r3, [pc, #96]	; (80101a4 <tcp_new_port+0x84>)
 8010144:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010148:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801014a:	2300      	movs	r3, #0
 801014c:	71fb      	strb	r3, [r7, #7]
 801014e:	e01e      	b.n	801018e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	4a15      	ldr	r2, [pc, #84]	; (80101a8 <tcp_new_port+0x88>)
 8010154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	603b      	str	r3, [r7, #0]
 801015c:	e011      	b.n	8010182 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	8ada      	ldrh	r2, [r3, #22]
 8010162:	4b10      	ldr	r3, [pc, #64]	; (80101a4 <tcp_new_port+0x84>)
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	d108      	bne.n	801017c <tcp_new_port+0x5c>
        n++;
 801016a:	88bb      	ldrh	r3, [r7, #4]
 801016c:	3301      	adds	r3, #1
 801016e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010170:	88bb      	ldrh	r3, [r7, #4]
 8010172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010176:	d3d8      	bcc.n	801012a <tcp_new_port+0xa>
          return 0;
 8010178:	2300      	movs	r3, #0
 801017a:	e00d      	b.n	8010198 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	603b      	str	r3, [r7, #0]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1ea      	bne.n	801015e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010188:	79fb      	ldrb	r3, [r7, #7]
 801018a:	3301      	adds	r3, #1
 801018c:	71fb      	strb	r3, [r7, #7]
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b03      	cmp	r3, #3
 8010192:	d9dd      	bls.n	8010150 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010194:	4b03      	ldr	r3, [pc, #12]	; (80101a4 <tcp_new_port+0x84>)
 8010196:	881b      	ldrh	r3, [r3, #0]
}
 8010198:	4618      	mov	r0, r3
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr
 80101a4:	24000028 	.word	0x24000028
 80101a8:	0801f80c 	.word	0x0801f80c

080101ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80101ac:	b5b0      	push	{r4, r5, r7, lr}
 80101ae:	b090      	sub	sp, #64	; 0x40
 80101b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80101b8:	4b94      	ldr	r3, [pc, #592]	; (801040c <tcp_slowtmr+0x260>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3301      	adds	r3, #1
 80101be:	4a93      	ldr	r2, [pc, #588]	; (801040c <tcp_slowtmr+0x260>)
 80101c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80101c2:	4b93      	ldr	r3, [pc, #588]	; (8010410 <tcp_slowtmr+0x264>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	3301      	adds	r3, #1
 80101c8:	b2da      	uxtb	r2, r3
 80101ca:	4b91      	ldr	r3, [pc, #580]	; (8010410 <tcp_slowtmr+0x264>)
 80101cc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80101d2:	4b90      	ldr	r3, [pc, #576]	; (8010414 <tcp_slowtmr+0x268>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80101d8:	e29d      	b.n	8010716 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	7d1b      	ldrb	r3, [r3, #20]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d106      	bne.n	80101f0 <tcp_slowtmr+0x44>
 80101e2:	4b8d      	ldr	r3, [pc, #564]	; (8010418 <tcp_slowtmr+0x26c>)
 80101e4:	f240 42be 	movw	r2, #1214	; 0x4be
 80101e8:	498c      	ldr	r1, [pc, #560]	; (801041c <tcp_slowtmr+0x270>)
 80101ea:	488d      	ldr	r0, [pc, #564]	; (8010420 <tcp_slowtmr+0x274>)
 80101ec:	f00a fe98 	bl	801af20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80101f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f2:	7d1b      	ldrb	r3, [r3, #20]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d106      	bne.n	8010206 <tcp_slowtmr+0x5a>
 80101f8:	4b87      	ldr	r3, [pc, #540]	; (8010418 <tcp_slowtmr+0x26c>)
 80101fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80101fe:	4989      	ldr	r1, [pc, #548]	; (8010424 <tcp_slowtmr+0x278>)
 8010200:	4887      	ldr	r0, [pc, #540]	; (8010420 <tcp_slowtmr+0x274>)
 8010202:	f00a fe8d 	bl	801af20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	7d1b      	ldrb	r3, [r3, #20]
 801020a:	2b0a      	cmp	r3, #10
 801020c:	d106      	bne.n	801021c <tcp_slowtmr+0x70>
 801020e:	4b82      	ldr	r3, [pc, #520]	; (8010418 <tcp_slowtmr+0x26c>)
 8010210:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010214:	4984      	ldr	r1, [pc, #528]	; (8010428 <tcp_slowtmr+0x27c>)
 8010216:	4882      	ldr	r0, [pc, #520]	; (8010420 <tcp_slowtmr+0x274>)
 8010218:	f00a fe82 	bl	801af20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801021c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021e:	7f9a      	ldrb	r2, [r3, #30]
 8010220:	4b7b      	ldr	r3, [pc, #492]	; (8010410 <tcp_slowtmr+0x264>)
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	429a      	cmp	r2, r3
 8010226:	d105      	bne.n	8010234 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010232:	e270      	b.n	8010716 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010234:	4b76      	ldr	r3, [pc, #472]	; (8010410 <tcp_slowtmr+0x264>)
 8010236:	781a      	ldrb	r2, [r3, #0]
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024a:	7d1b      	ldrb	r3, [r3, #20]
 801024c:	2b02      	cmp	r3, #2
 801024e:	d10a      	bne.n	8010266 <tcp_slowtmr+0xba>
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010256:	2b05      	cmp	r3, #5
 8010258:	d905      	bls.n	8010266 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801025a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801025e:	3301      	adds	r3, #1
 8010260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010264:	e11e      	b.n	80104a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801026c:	2b0b      	cmp	r3, #11
 801026e:	d905      	bls.n	801027c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010274:	3301      	adds	r3, #1
 8010276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801027a:	e113      	b.n	80104a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801027c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010282:	2b00      	cmp	r3, #0
 8010284:	d075      	beq.n	8010372 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028a:	2b00      	cmp	r3, #0
 801028c:	d006      	beq.n	801029c <tcp_slowtmr+0xf0>
 801028e:	4b62      	ldr	r3, [pc, #392]	; (8010418 <tcp_slowtmr+0x26c>)
 8010290:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010294:	4965      	ldr	r1, [pc, #404]	; (801042c <tcp_slowtmr+0x280>)
 8010296:	4862      	ldr	r0, [pc, #392]	; (8010420 <tcp_slowtmr+0x274>)
 8010298:	f00a fe42 	bl	801af20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d106      	bne.n	80102b2 <tcp_slowtmr+0x106>
 80102a4:	4b5c      	ldr	r3, [pc, #368]	; (8010418 <tcp_slowtmr+0x26c>)
 80102a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80102aa:	4961      	ldr	r1, [pc, #388]	; (8010430 <tcp_slowtmr+0x284>)
 80102ac:	485c      	ldr	r0, [pc, #368]	; (8010420 <tcp_slowtmr+0x274>)
 80102ae:	f00a fe37 	bl	801af20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80102b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102b8:	2b0b      	cmp	r3, #11
 80102ba:	d905      	bls.n	80102c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80102bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102c0:	3301      	adds	r3, #1
 80102c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102c6:	e0ed      	b.n	80104a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80102ce:	3b01      	subs	r3, #1
 80102d0:	4a58      	ldr	r2, [pc, #352]	; (8010434 <tcp_slowtmr+0x288>)
 80102d2:	5cd3      	ldrb	r3, [r2, r3]
 80102d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80102d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102dc:	7c7a      	ldrb	r2, [r7, #17]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d907      	bls.n	80102f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80102e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102e8:	3301      	adds	r3, #1
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80102f8:	7c7a      	ldrb	r2, [r7, #17]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	f200 80d2 	bhi.w	80104a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010300:	2301      	movs	r3, #1
 8010302:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801030a:	2b00      	cmp	r3, #0
 801030c:	d108      	bne.n	8010320 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801030e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010310:	f005 f94c 	bl	80155ac <tcp_zero_window_probe>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d014      	beq.n	8010344 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801031a:	2300      	movs	r3, #0
 801031c:	623b      	str	r3, [r7, #32]
 801031e:	e011      	b.n	8010344 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010326:	4619      	mov	r1, r3
 8010328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801032a:	f004 f811 	bl	8014350 <tcp_split_unsent_seg>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d107      	bne.n	8010344 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010336:	f004 fa91 	bl	801485c <tcp_output>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	2b00      	cmp	r3, #0
 8010348:	f000 80ac 	beq.w	80104a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801034c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034e:	2200      	movs	r2, #0
 8010350:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801035a:	2b06      	cmp	r3, #6
 801035c:	f200 80a2 	bhi.w	80104a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010366:	3301      	adds	r3, #1
 8010368:	b2da      	uxtb	r2, r3
 801036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010370:	e098      	b.n	80104a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010374:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010378:	2b00      	cmp	r3, #0
 801037a:	db0f      	blt.n	801039c <tcp_slowtmr+0x1f0>
 801037c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010382:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010386:	4293      	cmp	r3, r2
 8010388:	d008      	beq.n	801039c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010390:	b29b      	uxth	r3, r3
 8010392:	3301      	adds	r3, #1
 8010394:	b29b      	uxth	r3, r3
 8010396:	b21a      	sxth	r2, r3
 8010398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80103a8:	429a      	cmp	r2, r3
 80103aa:	db7b      	blt.n	80104a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80103ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103ae:	f004 fd47 	bl	8014e40 <tcp_rexmit_rto_prepare>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d007      	beq.n	80103c8 <tcp_slowtmr+0x21c>
 80103b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d171      	bne.n	80104a4 <tcp_slowtmr+0x2f8>
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d06d      	beq.n	80104a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80103c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ca:	7d1b      	ldrb	r3, [r3, #20]
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d03a      	beq.n	8010446 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80103d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103d6:	2b0c      	cmp	r3, #12
 80103d8:	bf28      	it	cs
 80103da:	230c      	movcs	r3, #12
 80103dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103e4:	10db      	asrs	r3, r3, #3
 80103e6:	b21b      	sxth	r3, r3
 80103e8:	461a      	mov	r2, r3
 80103ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103f0:	4413      	add	r3, r2
 80103f2:	7efa      	ldrb	r2, [r7, #27]
 80103f4:	4910      	ldr	r1, [pc, #64]	; (8010438 <tcp_slowtmr+0x28c>)
 80103f6:	5c8a      	ldrb	r2, [r1, r2]
 80103f8:	4093      	lsls	r3, r2
 80103fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010402:	4293      	cmp	r3, r2
 8010404:	dc1a      	bgt.n	801043c <tcp_slowtmr+0x290>
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	b21a      	sxth	r2, r3
 801040a:	e019      	b.n	8010440 <tcp_slowtmr+0x294>
 801040c:	2400d718 	.word	0x2400d718
 8010410:	24009dae 	.word	0x24009dae
 8010414:	2400d714 	.word	0x2400d714
 8010418:	0801d428 	.word	0x0801d428
 801041c:	0801d76c 	.word	0x0801d76c
 8010420:	0801d46c 	.word	0x0801d46c
 8010424:	0801d798 	.word	0x0801d798
 8010428:	0801d7c4 	.word	0x0801d7c4
 801042c:	0801d7f4 	.word	0x0801d7f4
 8010430:	0801d828 	.word	0x0801d828
 8010434:	0801f804 	.word	0x0801f804
 8010438:	0801f7f4 	.word	0x0801f7f4
 801043c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	2200      	movs	r2, #0
 801044a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010454:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010458:	4293      	cmp	r3, r2
 801045a:	bf28      	it	cs
 801045c:	4613      	movcs	r3, r2
 801045e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010460:	8a7b      	ldrh	r3, [r7, #18]
 8010462:	085b      	lsrs	r3, r3, #1
 8010464:	b29a      	uxth	r2, r3
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	b29b      	uxth	r3, r3
 801047a:	429a      	cmp	r2, r3
 801047c:	d206      	bcs.n	801048c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010482:	005b      	lsls	r3, r3, #1
 8010484:	b29a      	uxth	r2, r3
 8010486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010498:	2200      	movs	r2, #0
 801049a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801049e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104a0:	f004 fd3e 	bl	8014f20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a6:	7d1b      	ldrb	r3, [r3, #20]
 80104a8:	2b06      	cmp	r3, #6
 80104aa:	d111      	bne.n	80104d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80104ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ae:	8b5b      	ldrh	r3, [r3, #26]
 80104b0:	f003 0310 	and.w	r3, r3, #16
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00b      	beq.n	80104d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104b8:	4b9c      	ldr	r3, [pc, #624]	; (801072c <tcp_slowtmr+0x580>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	6a1b      	ldr	r3, [r3, #32]
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	2b28      	cmp	r3, #40	; 0x28
 80104c4:	d904      	bls.n	80104d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80104c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ca:	3301      	adds	r3, #1
 80104cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	7a5b      	ldrb	r3, [r3, #9]
 80104d4:	f003 0308 	and.w	r3, r3, #8
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d04a      	beq.n	8010572 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104e0:	2b04      	cmp	r3, #4
 80104e2:	d003      	beq.n	80104ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80104e8:	2b07      	cmp	r3, #7
 80104ea:	d142      	bne.n	8010572 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104ec:	4b8f      	ldr	r3, [pc, #572]	; (801072c <tcp_slowtmr+0x580>)
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f2:	6a1b      	ldr	r3, [r3, #32]
 80104f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80104fc:	4b8c      	ldr	r3, [pc, #560]	; (8010730 <tcp_slowtmr+0x584>)
 80104fe:	440b      	add	r3, r1
 8010500:	498c      	ldr	r1, [pc, #560]	; (8010734 <tcp_slowtmr+0x588>)
 8010502:	fba1 1303 	umull	r1, r3, r1, r3
 8010506:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010508:	429a      	cmp	r2, r3
 801050a:	d90a      	bls.n	8010522 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801050c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010510:	3301      	adds	r3, #1
 8010512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801051a:	3301      	adds	r3, #1
 801051c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010520:	e027      	b.n	8010572 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010522:	4b82      	ldr	r3, [pc, #520]	; (801072c <tcp_slowtmr+0x580>)
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010538:	4618      	mov	r0, r3
 801053a:	4b7f      	ldr	r3, [pc, #508]	; (8010738 <tcp_slowtmr+0x58c>)
 801053c:	fb03 f300 	mul.w	r3, r3, r0
 8010540:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010542:	497c      	ldr	r1, [pc, #496]	; (8010734 <tcp_slowtmr+0x588>)
 8010544:	fba1 1303 	umull	r1, r3, r1, r3
 8010548:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801054a:	429a      	cmp	r2, r3
 801054c:	d911      	bls.n	8010572 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801054e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010550:	f004 ffec 	bl	801552c <tcp_keepalive>
 8010554:	4603      	mov	r3, r0
 8010556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801055a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801055e:	2b00      	cmp	r3, #0
 8010560:	d107      	bne.n	8010572 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010568:	3301      	adds	r3, #1
 801056a:	b2da      	uxtb	r2, r3
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010576:	2b00      	cmp	r3, #0
 8010578:	d011      	beq.n	801059e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801057a:	4b6c      	ldr	r3, [pc, #432]	; (801072c <tcp_slowtmr+0x580>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	1ad2      	subs	r2, r2, r3
 8010584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010586:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801058a:	4619      	mov	r1, r3
 801058c:	460b      	mov	r3, r1
 801058e:	005b      	lsls	r3, r3, #1
 8010590:	440b      	add	r3, r1
 8010592:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010594:	429a      	cmp	r2, r3
 8010596:	d302      	bcc.n	801059e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801059a:	f000 feab 	bl	80112f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a0:	7d1b      	ldrb	r3, [r3, #20]
 80105a2:	2b03      	cmp	r3, #3
 80105a4:	d10b      	bne.n	80105be <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105a6:	4b61      	ldr	r3, [pc, #388]	; (801072c <tcp_slowtmr+0x580>)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	1ad3      	subs	r3, r2, r3
 80105b0:	2b28      	cmp	r3, #40	; 0x28
 80105b2:	d904      	bls.n	80105be <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80105b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105b8:	3301      	adds	r3, #1
 80105ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	7d1b      	ldrb	r3, [r3, #20]
 80105c2:	2b09      	cmp	r3, #9
 80105c4:	d10b      	bne.n	80105de <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80105c6:	4b59      	ldr	r3, [pc, #356]	; (801072c <tcp_slowtmr+0x580>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	2bf0      	cmp	r3, #240	; 0xf0
 80105d2:	d904      	bls.n	80105de <tcp_slowtmr+0x432>
        ++pcb_remove;
 80105d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105d8:	3301      	adds	r3, #1
 80105da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80105de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d060      	beq.n	80106a8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80105ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105f0:	f000 fccc 	bl	8010f8c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d010      	beq.n	801061c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80105fa:	4b50      	ldr	r3, [pc, #320]	; (801073c <tcp_slowtmr+0x590>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010600:	429a      	cmp	r2, r3
 8010602:	d106      	bne.n	8010612 <tcp_slowtmr+0x466>
 8010604:	4b4e      	ldr	r3, [pc, #312]	; (8010740 <tcp_slowtmr+0x594>)
 8010606:	f240 526d 	movw	r2, #1389	; 0x56d
 801060a:	494e      	ldr	r1, [pc, #312]	; (8010744 <tcp_slowtmr+0x598>)
 801060c:	484e      	ldr	r0, [pc, #312]	; (8010748 <tcp_slowtmr+0x59c>)
 801060e:	f00a fc87 	bl	801af20 <iprintf>
        prev->next = pcb->next;
 8010612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010614:	68da      	ldr	r2, [r3, #12]
 8010616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010618:	60da      	str	r2, [r3, #12]
 801061a:	e00f      	b.n	801063c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801061c:	4b47      	ldr	r3, [pc, #284]	; (801073c <tcp_slowtmr+0x590>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010622:	429a      	cmp	r2, r3
 8010624:	d006      	beq.n	8010634 <tcp_slowtmr+0x488>
 8010626:	4b46      	ldr	r3, [pc, #280]	; (8010740 <tcp_slowtmr+0x594>)
 8010628:	f240 5271 	movw	r2, #1393	; 0x571
 801062c:	4947      	ldr	r1, [pc, #284]	; (801074c <tcp_slowtmr+0x5a0>)
 801062e:	4846      	ldr	r0, [pc, #280]	; (8010748 <tcp_slowtmr+0x59c>)
 8010630:	f00a fc76 	bl	801af20 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	4a40      	ldr	r2, [pc, #256]	; (801073c <tcp_slowtmr+0x590>)
 801063a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801063c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010640:	2b00      	cmp	r3, #0
 8010642:	d013      	beq.n	801066c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801064c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	3304      	adds	r3, #4
 8010652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010654:	8ad2      	ldrh	r2, [r2, #22]
 8010656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010658:	8b09      	ldrh	r1, [r1, #24]
 801065a:	9102      	str	r1, [sp, #8]
 801065c:	9201      	str	r2, [sp, #4]
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	462b      	mov	r3, r5
 8010662:	4622      	mov	r2, r4
 8010664:	4601      	mov	r1, r0
 8010666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010668:	f004 feac 	bl	80153c4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	691b      	ldr	r3, [r3, #16]
 8010670:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010674:	7d1b      	ldrb	r3, [r3, #20]
 8010676:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010682:	6838      	ldr	r0, [r7, #0]
 8010684:	f7ff f8ba 	bl	800f7fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010688:	4b31      	ldr	r3, [pc, #196]	; (8010750 <tcp_slowtmr+0x5a4>)
 801068a:	2200      	movs	r2, #0
 801068c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d004      	beq.n	801069e <tcp_slowtmr+0x4f2>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f06f 010c 	mvn.w	r1, #12
 801069a:	68b8      	ldr	r0, [r7, #8]
 801069c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801069e:	4b2c      	ldr	r3, [pc, #176]	; (8010750 <tcp_slowtmr+0x5a4>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d037      	beq.n	8010716 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80106a6:	e592      	b.n	80101ce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80106b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b4:	7f1b      	ldrb	r3, [r3, #28]
 80106b6:	3301      	adds	r3, #1
 80106b8:	b2da      	uxtb	r2, r3
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80106be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c0:	7f1a      	ldrb	r2, [r3, #28]
 80106c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c4:	7f5b      	ldrb	r3, [r3, #29]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d325      	bcc.n	8010716 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	2200      	movs	r2, #0
 80106ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80106d0:	4b1f      	ldr	r3, [pc, #124]	; (8010750 <tcp_slowtmr+0x5a4>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80106d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00b      	beq.n	80106f8 <tcp_slowtmr+0x54c>
 80106e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106e8:	6912      	ldr	r2, [r2, #16]
 80106ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106ec:	4610      	mov	r0, r2
 80106ee:	4798      	blx	r3
 80106f0:	4603      	mov	r3, r0
 80106f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80106f6:	e002      	b.n	80106fe <tcp_slowtmr+0x552>
 80106f8:	2300      	movs	r3, #0
 80106fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80106fe:	4b14      	ldr	r3, [pc, #80]	; (8010750 <tcp_slowtmr+0x5a4>)
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d000      	beq.n	8010708 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010706:	e562      	b.n	80101ce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010708:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801070c:	2b00      	cmp	r3, #0
 801070e:	d102      	bne.n	8010716 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010712:	f004 f8a3 	bl	801485c <tcp_output>
  while (pcb != NULL) {
 8010716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010718:	2b00      	cmp	r3, #0
 801071a:	f47f ad5e 	bne.w	80101da <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801071e:	2300      	movs	r3, #0
 8010720:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010722:	4b0c      	ldr	r3, [pc, #48]	; (8010754 <tcp_slowtmr+0x5a8>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010728:	e069      	b.n	80107fe <tcp_slowtmr+0x652>
 801072a:	bf00      	nop
 801072c:	2400d718 	.word	0x2400d718
 8010730:	000a4cb8 	.word	0x000a4cb8
 8010734:	10624dd3 	.word	0x10624dd3
 8010738:	000124f8 	.word	0x000124f8
 801073c:	2400d714 	.word	0x2400d714
 8010740:	0801d428 	.word	0x0801d428
 8010744:	0801d860 	.word	0x0801d860
 8010748:	0801d46c 	.word	0x0801d46c
 801074c:	0801d88c 	.word	0x0801d88c
 8010750:	2400d710 	.word	0x2400d710
 8010754:	2400d724 	.word	0x2400d724
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075a:	7d1b      	ldrb	r3, [r3, #20]
 801075c:	2b0a      	cmp	r3, #10
 801075e:	d006      	beq.n	801076e <tcp_slowtmr+0x5c2>
 8010760:	4b2b      	ldr	r3, [pc, #172]	; (8010810 <tcp_slowtmr+0x664>)
 8010762:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010766:	492b      	ldr	r1, [pc, #172]	; (8010814 <tcp_slowtmr+0x668>)
 8010768:	482b      	ldr	r0, [pc, #172]	; (8010818 <tcp_slowtmr+0x66c>)
 801076a:	f00a fbd9 	bl	801af20 <iprintf>
    pcb_remove = 0;
 801076e:	2300      	movs	r3, #0
 8010770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010774:	4b29      	ldr	r3, [pc, #164]	; (801081c <tcp_slowtmr+0x670>)
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	6a1b      	ldr	r3, [r3, #32]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	2bf0      	cmp	r3, #240	; 0xf0
 8010780:	d904      	bls.n	801078c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010786:	3301      	adds	r3, #1
 8010788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801078c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010790:	2b00      	cmp	r3, #0
 8010792:	d02f      	beq.n	80107f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010796:	f000 fbf9 	bl	8010f8c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	2b00      	cmp	r3, #0
 801079e:	d010      	beq.n	80107c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80107a0:	4b1f      	ldr	r3, [pc, #124]	; (8010820 <tcp_slowtmr+0x674>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d106      	bne.n	80107b8 <tcp_slowtmr+0x60c>
 80107aa:	4b19      	ldr	r3, [pc, #100]	; (8010810 <tcp_slowtmr+0x664>)
 80107ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80107b0:	491c      	ldr	r1, [pc, #112]	; (8010824 <tcp_slowtmr+0x678>)
 80107b2:	4819      	ldr	r0, [pc, #100]	; (8010818 <tcp_slowtmr+0x66c>)
 80107b4:	f00a fbb4 	bl	801af20 <iprintf>
        prev->next = pcb->next;
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	68da      	ldr	r2, [r3, #12]
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	60da      	str	r2, [r3, #12]
 80107c0:	e00f      	b.n	80107e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80107c2:	4b17      	ldr	r3, [pc, #92]	; (8010820 <tcp_slowtmr+0x674>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d006      	beq.n	80107da <tcp_slowtmr+0x62e>
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <tcp_slowtmr+0x664>)
 80107ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80107d2:	4915      	ldr	r1, [pc, #84]	; (8010828 <tcp_slowtmr+0x67c>)
 80107d4:	4810      	ldr	r0, [pc, #64]	; (8010818 <tcp_slowtmr+0x66c>)
 80107d6:	f00a fba3 	bl	801af20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	4a10      	ldr	r2, [pc, #64]	; (8010820 <tcp_slowtmr+0x674>)
 80107e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80107e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80107e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80107ec:	69f8      	ldr	r0, [r7, #28]
 80107ee:	f7ff f805 	bl	800f7fc <tcp_free>
 80107f2:	e004      	b.n	80107fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80107f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1a9      	bne.n	8010758 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop
 8010808:	3730      	adds	r7, #48	; 0x30
 801080a:	46bd      	mov	sp, r7
 801080c:	bdb0      	pop	{r4, r5, r7, pc}
 801080e:	bf00      	nop
 8010810:	0801d428 	.word	0x0801d428
 8010814:	0801d8b8 	.word	0x0801d8b8
 8010818:	0801d46c 	.word	0x0801d46c
 801081c:	2400d718 	.word	0x2400d718
 8010820:	2400d724 	.word	0x2400d724
 8010824:	0801d8e8 	.word	0x0801d8e8
 8010828:	0801d910 	.word	0x0801d910

0801082c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010832:	4b2d      	ldr	r3, [pc, #180]	; (80108e8 <tcp_fasttmr+0xbc>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	3301      	adds	r3, #1
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <tcp_fasttmr+0xbc>)
 801083c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801083e:	4b2b      	ldr	r3, [pc, #172]	; (80108ec <tcp_fasttmr+0xc0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010844:	e048      	b.n	80108d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	7f9a      	ldrb	r2, [r3, #30]
 801084a:	4b27      	ldr	r3, [pc, #156]	; (80108e8 <tcp_fasttmr+0xbc>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	429a      	cmp	r2, r3
 8010850:	d03f      	beq.n	80108d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010852:	4b25      	ldr	r3, [pc, #148]	; (80108e8 <tcp_fasttmr+0xbc>)
 8010854:	781a      	ldrb	r2, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	8b5b      	ldrh	r3, [r3, #26]
 801085e:	f003 0301 	and.w	r3, r3, #1
 8010862:	2b00      	cmp	r3, #0
 8010864:	d010      	beq.n	8010888 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8b5b      	ldrh	r3, [r3, #26]
 801086a:	f043 0302 	orr.w	r3, r3, #2
 801086e:	b29a      	uxth	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f003 fff1 	bl	801485c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8b5b      	ldrh	r3, [r3, #26]
 801087e:	f023 0303 	bic.w	r3, r3, #3
 8010882:	b29a      	uxth	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	8b5b      	ldrh	r3, [r3, #26]
 801088c:	f003 0308 	and.w	r3, r3, #8
 8010890:	2b00      	cmp	r3, #0
 8010892:	d009      	beq.n	80108a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	8b5b      	ldrh	r3, [r3, #26]
 8010898:	f023 0308 	bic.w	r3, r3, #8
 801089c:	b29a      	uxth	r2, r3
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff f93e 	bl	800fb24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00a      	beq.n	80108cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80108b6:	4b0e      	ldr	r3, [pc, #56]	; (80108f0 <tcp_fasttmr+0xc4>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 f819 	bl	80108f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80108c2:	4b0b      	ldr	r3, [pc, #44]	; (80108f0 <tcp_fasttmr+0xc4>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d000      	beq.n	80108cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80108ca:	e7b8      	b.n	801083e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	607b      	str	r3, [r7, #4]
 80108d0:	e002      	b.n	80108d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d1b3      	bne.n	8010846 <tcp_fasttmr+0x1a>
    }
  }
}
 80108de:	bf00      	nop
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	24009dae 	.word	0x24009dae
 80108ec:	2400d714 	.word	0x2400d714
 80108f0:	2400d710 	.word	0x2400d710

080108f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80108f4:	b590      	push	{r4, r7, lr}
 80108f6:	b085      	sub	sp, #20
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d109      	bne.n	8010916 <tcp_process_refused_data+0x22>
 8010902:	4b37      	ldr	r3, [pc, #220]	; (80109e0 <tcp_process_refused_data+0xec>)
 8010904:	f240 6209 	movw	r2, #1545	; 0x609
 8010908:	4936      	ldr	r1, [pc, #216]	; (80109e4 <tcp_process_refused_data+0xf0>)
 801090a:	4837      	ldr	r0, [pc, #220]	; (80109e8 <tcp_process_refused_data+0xf4>)
 801090c:	f00a fb08 	bl	801af20 <iprintf>
 8010910:	f06f 030f 	mvn.w	r3, #15
 8010914:	e060      	b.n	80109d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801091a:	7b5b      	ldrb	r3, [r3, #13]
 801091c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010922:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00b      	beq.n	801094c <tcp_process_refused_data+0x58>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6918      	ldr	r0, [r3, #16]
 801093e:	2300      	movs	r3, #0
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	6879      	ldr	r1, [r7, #4]
 8010944:	47a0      	blx	r4
 8010946:	4603      	mov	r3, r0
 8010948:	73fb      	strb	r3, [r7, #15]
 801094a:	e007      	b.n	801095c <tcp_process_refused_data+0x68>
 801094c:	2300      	movs	r3, #0
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	6879      	ldr	r1, [r7, #4]
 8010952:	2000      	movs	r0, #0
 8010954:	f000 f8a4 	bl	8010aa0 <tcp_recv_null>
 8010958:	4603      	mov	r3, r0
 801095a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801095c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d12a      	bne.n	80109ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010964:	7bbb      	ldrb	r3, [r7, #14]
 8010966:	f003 0320 	and.w	r3, r3, #32
 801096a:	2b00      	cmp	r3, #0
 801096c:	d033      	beq.n	80109d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010972:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010976:	d005      	beq.n	8010984 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801097c:	3301      	adds	r3, #1
 801097e:	b29a      	uxth	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00b      	beq.n	80109a6 <tcp_process_refused_data+0xb2>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6918      	ldr	r0, [r3, #16]
 8010998:	2300      	movs	r3, #0
 801099a:	2200      	movs	r2, #0
 801099c:	6879      	ldr	r1, [r7, #4]
 801099e:	47a0      	blx	r4
 80109a0:	4603      	mov	r3, r0
 80109a2:	73fb      	strb	r3, [r7, #15]
 80109a4:	e001      	b.n	80109aa <tcp_process_refused_data+0xb6>
 80109a6:	2300      	movs	r3, #0
 80109a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80109aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109ae:	f113 0f0d 	cmn.w	r3, #13
 80109b2:	d110      	bne.n	80109d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80109b4:	f06f 030c 	mvn.w	r3, #12
 80109b8:	e00e      	b.n	80109d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80109ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109be:	f113 0f0d 	cmn.w	r3, #13
 80109c2:	d102      	bne.n	80109ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80109c4:	f06f 030c 	mvn.w	r3, #12
 80109c8:	e006      	b.n	80109d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80109d0:	f06f 0304 	mvn.w	r3, #4
 80109d4:	e000      	b.n	80109d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}
 80109e0:	0801d428 	.word	0x0801d428
 80109e4:	0801d938 	.word	0x0801d938
 80109e8:	0801d46c 	.word	0x0801d46c

080109ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80109f4:	e007      	b.n	8010a06 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 f80a 	bl	8010a16 <tcp_seg_free>
    seg = next;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1f4      	bne.n	80109f6 <tcp_segs_free+0xa>
  }
}
 8010a0c:	bf00      	nop
 8010a0e:	bf00      	nop
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b082      	sub	sp, #8
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00c      	beq.n	8010a3e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d004      	beq.n	8010a36 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fe fc27 	bl	800f284 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010a36:	6879      	ldr	r1, [r7, #4]
 8010a38:	2003      	movs	r0, #3
 8010a3a:	f7fd fd73 	bl	800e524 <memp_free>
  }
}
 8010a3e:	bf00      	nop
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
	...

08010a48 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <tcp_seg_copy+0x1c>
 8010a56:	4b0f      	ldr	r3, [pc, #60]	; (8010a94 <tcp_seg_copy+0x4c>)
 8010a58:	f240 6282 	movw	r2, #1666	; 0x682
 8010a5c:	490e      	ldr	r1, [pc, #56]	; (8010a98 <tcp_seg_copy+0x50>)
 8010a5e:	480f      	ldr	r0, [pc, #60]	; (8010a9c <tcp_seg_copy+0x54>)
 8010a60:	f00a fa5e 	bl	801af20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010a64:	2003      	movs	r0, #3
 8010a66:	f7fd fce7 	bl	800e438 <memp_malloc>
 8010a6a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d101      	bne.n	8010a76 <tcp_seg_copy+0x2e>
    return NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	e00a      	b.n	8010a8c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010a76:	2210      	movs	r2, #16
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f00a f9df 	bl	801ae3e <memcpy>
  pbuf_ref(cseg->p);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fe fca3 	bl	800f3d0 <pbuf_ref>
  return cseg;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	0801d428 	.word	0x0801d428
 8010a98:	0801d97c 	.word	0x0801d97c
 8010a9c:	0801d46c 	.word	0x0801d46c

08010aa0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
 8010aac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d109      	bne.n	8010ac8 <tcp_recv_null+0x28>
 8010ab4:	4b12      	ldr	r3, [pc, #72]	; (8010b00 <tcp_recv_null+0x60>)
 8010ab6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010aba:	4912      	ldr	r1, [pc, #72]	; (8010b04 <tcp_recv_null+0x64>)
 8010abc:	4812      	ldr	r0, [pc, #72]	; (8010b08 <tcp_recv_null+0x68>)
 8010abe:	f00a fa2f 	bl	801af20 <iprintf>
 8010ac2:	f06f 030f 	mvn.w	r3, #15
 8010ac6:	e016      	b.n	8010af6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d009      	beq.n	8010ae2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	891b      	ldrh	r3, [r3, #8]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	68b8      	ldr	r0, [r7, #8]
 8010ad6:	f7ff fad3 	bl	8010080 <tcp_recved>
    pbuf_free(p);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7fe fbd2 	bl	800f284 <pbuf_free>
 8010ae0:	e008      	b.n	8010af4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d104      	bne.n	8010af4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010aea:	68b8      	ldr	r0, [r7, #8]
 8010aec:	f7ff f884 	bl	800fbf8 <tcp_close>
 8010af0:	4603      	mov	r3, r0
 8010af2:	e000      	b.n	8010af6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3710      	adds	r7, #16
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	0801d428 	.word	0x0801d428
 8010b04:	0801d998 	.word	0x0801d998
 8010b08:	0801d46c 	.word	0x0801d46c

08010b0c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b086      	sub	sp, #24
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	db01      	blt.n	8010b22 <tcp_kill_prio+0x16>
 8010b1e:	79fb      	ldrb	r3, [r7, #7]
 8010b20:	e000      	b.n	8010b24 <tcp_kill_prio+0x18>
 8010b22:	237f      	movs	r3, #127	; 0x7f
 8010b24:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010b26:	7afb      	ldrb	r3, [r7, #11]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d034      	beq.n	8010b96 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010b2c:	7afb      	ldrb	r3, [r7, #11]
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b3a:	4b19      	ldr	r3, [pc, #100]	; (8010ba0 <tcp_kill_prio+0x94>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	e01f      	b.n	8010b82 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	7d5b      	ldrb	r3, [r3, #21]
 8010b46:	7afa      	ldrb	r2, [r7, #11]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d80c      	bhi.n	8010b66 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010b50:	7afa      	ldrb	r2, [r7, #11]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d112      	bne.n	8010b7c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b56:	4b13      	ldr	r3, [pc, #76]	; (8010ba4 <tcp_kill_prio+0x98>)
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	6a1b      	ldr	r3, [r3, #32]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d80a      	bhi.n	8010b7c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010b66:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <tcp_kill_prio+0x98>)
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	6a1b      	ldr	r3, [r3, #32]
 8010b6e:	1ad3      	subs	r3, r2, r3
 8010b70:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	7d5b      	ldrb	r3, [r3, #21]
 8010b7a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	617b      	str	r3, [r7, #20]
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1dc      	bne.n	8010b42 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d004      	beq.n	8010b98 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010b8e:	6938      	ldr	r0, [r7, #16]
 8010b90:	f7ff f978 	bl	800fe84 <tcp_abort>
 8010b94:	e000      	b.n	8010b98 <tcp_kill_prio+0x8c>
    return;
 8010b96:	bf00      	nop
  }
}
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	2400d714 	.word	0x2400d714
 8010ba4:	2400d718 	.word	0x2400d718

08010ba8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	2b08      	cmp	r3, #8
 8010bb6:	d009      	beq.n	8010bcc <tcp_kill_state+0x24>
 8010bb8:	79fb      	ldrb	r3, [r7, #7]
 8010bba:	2b09      	cmp	r3, #9
 8010bbc:	d006      	beq.n	8010bcc <tcp_kill_state+0x24>
 8010bbe:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <tcp_kill_state+0x80>)
 8010bc0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010bc4:	4919      	ldr	r1, [pc, #100]	; (8010c2c <tcp_kill_state+0x84>)
 8010bc6:	481a      	ldr	r0, [pc, #104]	; (8010c30 <tcp_kill_state+0x88>)
 8010bc8:	f00a f9aa 	bl	801af20 <iprintf>

  inactivity = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bd4:	4b17      	ldr	r3, [pc, #92]	; (8010c34 <tcp_kill_state+0x8c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	617b      	str	r3, [r7, #20]
 8010bda:	e017      	b.n	8010c0c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	79fa      	ldrb	r2, [r7, #7]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d10f      	bne.n	8010c06 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010be6:	4b14      	ldr	r3, [pc, #80]	; (8010c38 <tcp_kill_state+0x90>)
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d807      	bhi.n	8010c06 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010bf6:	4b10      	ldr	r3, [pc, #64]	; (8010c38 <tcp_kill_state+0x90>)
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	617b      	str	r3, [r7, #20]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1e4      	bne.n	8010bdc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d003      	beq.n	8010c20 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010c18:	2100      	movs	r1, #0
 8010c1a:	6938      	ldr	r0, [r7, #16]
 8010c1c:	f7ff f874 	bl	800fd08 <tcp_abandon>
  }
}
 8010c20:	bf00      	nop
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	0801d428 	.word	0x0801d428
 8010c2c:	0801d9b4 	.word	0x0801d9b4
 8010c30:	0801d46c 	.word	0x0801d46c
 8010c34:	2400d714 	.word	0x2400d714
 8010c38:	2400d718 	.word	0x2400d718

08010c3c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010c46:	2300      	movs	r3, #0
 8010c48:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c4a:	4b12      	ldr	r3, [pc, #72]	; (8010c94 <tcp_kill_timewait+0x58>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	e012      	b.n	8010c78 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c52:	4b11      	ldr	r3, [pc, #68]	; (8010c98 <tcp_kill_timewait+0x5c>)
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6a1b      	ldr	r3, [r3, #32]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d807      	bhi.n	8010c72 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010c62:	4b0d      	ldr	r3, [pc, #52]	; (8010c98 <tcp_kill_timewait+0x5c>)
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1e9      	bne.n	8010c52 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d002      	beq.n	8010c8a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010c84:	68b8      	ldr	r0, [r7, #8]
 8010c86:	f7ff f8fd 	bl	800fe84 <tcp_abort>
  }
}
 8010c8a:	bf00      	nop
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	2400d724 	.word	0x2400d724
 8010c98:	2400d718 	.word	0x2400d718

08010c9c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010ca2:	4b10      	ldr	r3, [pc, #64]	; (8010ce4 <tcp_handle_closepend+0x48>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010ca8:	e014      	b.n	8010cd4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	8b5b      	ldrh	r3, [r3, #26]
 8010cb4:	f003 0308 	and.w	r3, r3, #8
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d009      	beq.n	8010cd0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	8b5b      	ldrh	r3, [r3, #26]
 8010cc0:	f023 0308 	bic.w	r3, r3, #8
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7fe ff2a 	bl	800fb24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1e7      	bne.n	8010caa <tcp_handle_closepend+0xe>
  }
}
 8010cda:	bf00      	nop
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	2400d714 	.word	0x2400d714

08010ce8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010cf2:	2001      	movs	r0, #1
 8010cf4:	f7fd fba0 	bl	800e438 <memp_malloc>
 8010cf8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d126      	bne.n	8010d4e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010d00:	f7ff ffcc 	bl	8010c9c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010d04:	f7ff ff9a 	bl	8010c3c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d08:	2001      	movs	r0, #1
 8010d0a:	f7fd fb95 	bl	800e438 <memp_malloc>
 8010d0e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d11b      	bne.n	8010d4e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010d16:	2009      	movs	r0, #9
 8010d18:	f7ff ff46 	bl	8010ba8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d1c:	2001      	movs	r0, #1
 8010d1e:	f7fd fb8b 	bl	800e438 <memp_malloc>
 8010d22:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d111      	bne.n	8010d4e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010d2a:	2008      	movs	r0, #8
 8010d2c:	f7ff ff3c 	bl	8010ba8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d30:	2001      	movs	r0, #1
 8010d32:	f7fd fb81 	bl	800e438 <memp_malloc>
 8010d36:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d107      	bne.n	8010d4e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010d3e:	79fb      	ldrb	r3, [r7, #7]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff fee3 	bl	8010b0c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d46:	2001      	movs	r0, #1
 8010d48:	f7fd fb76 	bl	800e438 <memp_malloc>
 8010d4c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d03f      	beq.n	8010dd4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010d54:	229c      	movs	r2, #156	; 0x9c
 8010d56:	2100      	movs	r1, #0
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f00a f87e 	bl	801ae5a <memset>
    pcb->prio = prio;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	79fa      	ldrb	r2, [r7, #7]
 8010d62:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010d6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	22ff      	movs	r2, #255	; 0xff
 8010d82:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010d8a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2206      	movs	r2, #6
 8010d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2206      	movs	r2, #6
 8010d98:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010da0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2201      	movs	r2, #1
 8010da6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010daa:	4b0d      	ldr	r3, [pc, #52]	; (8010de0 <tcp_alloc+0xf8>)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010db2:	4b0c      	ldr	r3, [pc, #48]	; (8010de4 <tcp_alloc+0xfc>)
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010dc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	4a08      	ldr	r2, [pc, #32]	; (8010de8 <tcp_alloc+0x100>)
 8010dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4a07      	ldr	r2, [pc, #28]	; (8010dec <tcp_alloc+0x104>)
 8010dd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	2400d718 	.word	0x2400d718
 8010de4:	24009dae 	.word	0x24009dae
 8010de8:	08010aa1 	.word	0x08010aa1
 8010dec:	006ddd00 	.word	0x006ddd00

08010df0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010dfa:	2040      	movs	r0, #64	; 0x40
 8010dfc:	f7ff ff74 	bl	8010ce8 <tcp_alloc>
 8010e00:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010e02:	68fb      	ldr	r3, [r7, #12]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3710      	adds	r7, #16
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	683a      	ldr	r2, [r7, #0]
 8010e20:	611a      	str	r2, [r3, #16]
  }
}
 8010e22:	bf00      	nop
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
	...

08010e30 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00e      	beq.n	8010e5e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	7d1b      	ldrb	r3, [r3, #20]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d106      	bne.n	8010e56 <tcp_recv+0x26>
 8010e48:	4b07      	ldr	r3, [pc, #28]	; (8010e68 <tcp_recv+0x38>)
 8010e4a:	f240 72df 	movw	r2, #2015	; 0x7df
 8010e4e:	4907      	ldr	r1, [pc, #28]	; (8010e6c <tcp_recv+0x3c>)
 8010e50:	4807      	ldr	r0, [pc, #28]	; (8010e70 <tcp_recv+0x40>)
 8010e52:	f00a f865 	bl	801af20 <iprintf>
    pcb->recv = recv;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010e5e:	bf00      	nop
 8010e60:	3708      	adds	r7, #8
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	0801d428 	.word	0x0801d428
 8010e6c:	0801d9c4 	.word	0x0801d9c4
 8010e70:	0801d46c 	.word	0x0801d46c

08010e74 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00e      	beq.n	8010ea2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	7d1b      	ldrb	r3, [r3, #20]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d106      	bne.n	8010e9a <tcp_sent+0x26>
 8010e8c:	4b07      	ldr	r3, [pc, #28]	; (8010eac <tcp_sent+0x38>)
 8010e8e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010e92:	4907      	ldr	r1, [pc, #28]	; (8010eb0 <tcp_sent+0x3c>)
 8010e94:	4807      	ldr	r0, [pc, #28]	; (8010eb4 <tcp_sent+0x40>)
 8010e96:	f00a f843 	bl	801af20 <iprintf>
    pcb->sent = sent;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010ea2:	bf00      	nop
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801d428 	.word	0x0801d428
 8010eb0:	0801d9ec 	.word	0x0801d9ec
 8010eb4:	0801d46c 	.word	0x0801d46c

08010eb8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00e      	beq.n	8010ee6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	7d1b      	ldrb	r3, [r3, #20]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d106      	bne.n	8010ede <tcp_err+0x26>
 8010ed0:	4b07      	ldr	r3, [pc, #28]	; (8010ef0 <tcp_err+0x38>)
 8010ed2:	f640 020d 	movw	r2, #2061	; 0x80d
 8010ed6:	4907      	ldr	r1, [pc, #28]	; (8010ef4 <tcp_err+0x3c>)
 8010ed8:	4807      	ldr	r0, [pc, #28]	; (8010ef8 <tcp_err+0x40>)
 8010eda:	f00a f821 	bl	801af20 <iprintf>
    pcb->errf = err;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	683a      	ldr	r2, [r7, #0]
 8010ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010ee6:	bf00      	nop
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	0801d428 	.word	0x0801d428
 8010ef4:	0801da14 	.word	0x0801da14
 8010ef8:	0801d46c 	.word	0x0801d46c

08010efc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b085      	sub	sp, #20
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d008      	beq.n	8010f1e <tcp_accept+0x22>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	7d1b      	ldrb	r3, [r3, #20]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d104      	bne.n	8010f1e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	619a      	str	r2, [r3, #24]
  }
}
 8010f1e:	bf00      	nop
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
	...

08010f2c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	4613      	mov	r3, r2
 8010f38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d107      	bne.n	8010f50 <tcp_poll+0x24>
 8010f40:	4b0e      	ldr	r3, [pc, #56]	; (8010f7c <tcp_poll+0x50>)
 8010f42:	f640 023d 	movw	r2, #2109	; 0x83d
 8010f46:	490e      	ldr	r1, [pc, #56]	; (8010f80 <tcp_poll+0x54>)
 8010f48:	480e      	ldr	r0, [pc, #56]	; (8010f84 <tcp_poll+0x58>)
 8010f4a:	f009 ffe9 	bl	801af20 <iprintf>
 8010f4e:	e011      	b.n	8010f74 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	7d1b      	ldrb	r3, [r3, #20]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d106      	bne.n	8010f66 <tcp_poll+0x3a>
 8010f58:	4b08      	ldr	r3, [pc, #32]	; (8010f7c <tcp_poll+0x50>)
 8010f5a:	f640 023e 	movw	r2, #2110	; 0x83e
 8010f5e:	490a      	ldr	r1, [pc, #40]	; (8010f88 <tcp_poll+0x5c>)
 8010f60:	4808      	ldr	r0, [pc, #32]	; (8010f84 <tcp_poll+0x58>)
 8010f62:	f009 ffdd 	bl	801af20 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	79fa      	ldrb	r2, [r7, #7]
 8010f72:	775a      	strb	r2, [r3, #29]
}
 8010f74:	3710      	adds	r7, #16
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	0801d428 	.word	0x0801d428
 8010f80:	0801da3c 	.word	0x0801da3c
 8010f84:	0801d46c 	.word	0x0801d46c
 8010f88:	0801da54 	.word	0x0801da54

08010f8c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d107      	bne.n	8010faa <tcp_pcb_purge+0x1e>
 8010f9a:	4b21      	ldr	r3, [pc, #132]	; (8011020 <tcp_pcb_purge+0x94>)
 8010f9c:	f640 0251 	movw	r2, #2129	; 0x851
 8010fa0:	4920      	ldr	r1, [pc, #128]	; (8011024 <tcp_pcb_purge+0x98>)
 8010fa2:	4821      	ldr	r0, [pc, #132]	; (8011028 <tcp_pcb_purge+0x9c>)
 8010fa4:	f009 ffbc 	bl	801af20 <iprintf>
 8010fa8:	e037      	b.n	801101a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7d1b      	ldrb	r3, [r3, #20]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d033      	beq.n	801101a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010fb6:	2b0a      	cmp	r3, #10
 8010fb8:	d02f      	beq.n	801101a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d02b      	beq.n	801101a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d007      	beq.n	8010fda <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe f958 	bl	800f284 <pbuf_free>
      pcb->refused_data = NULL;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 f986 	bl	80112f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fcf9 	bl	80109ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff fcf4 	bl	80109ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	66da      	str	r2, [r3, #108]	; 0x6c
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2200      	movs	r2, #0
 8011016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801101a:	3708      	adds	r7, #8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	0801d428 	.word	0x0801d428
 8011024:	0801da74 	.word	0x0801da74
 8011028:	0801d46c 	.word	0x0801d46c

0801102c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d106      	bne.n	801104a <tcp_pcb_remove+0x1e>
 801103c:	4b3e      	ldr	r3, [pc, #248]	; (8011138 <tcp_pcb_remove+0x10c>)
 801103e:	f640 0283 	movw	r2, #2179	; 0x883
 8011042:	493e      	ldr	r1, [pc, #248]	; (801113c <tcp_pcb_remove+0x110>)
 8011044:	483e      	ldr	r0, [pc, #248]	; (8011140 <tcp_pcb_remove+0x114>)
 8011046:	f009 ff6b 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <tcp_pcb_remove+0x32>
 8011050:	4b39      	ldr	r3, [pc, #228]	; (8011138 <tcp_pcb_remove+0x10c>)
 8011052:	f640 0284 	movw	r2, #2180	; 0x884
 8011056:	493b      	ldr	r1, [pc, #236]	; (8011144 <tcp_pcb_remove+0x118>)
 8011058:	4839      	ldr	r0, [pc, #228]	; (8011140 <tcp_pcb_remove+0x114>)
 801105a:	f009 ff61 	bl	801af20 <iprintf>

  TCP_RMV(pcblist, pcb);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	429a      	cmp	r2, r3
 8011066:	d105      	bne.n	8011074 <tcp_pcb_remove+0x48>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	68da      	ldr	r2, [r3, #12]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	601a      	str	r2, [r3, #0]
 8011072:	e013      	b.n	801109c <tcp_pcb_remove+0x70>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	60fb      	str	r3, [r7, #12]
 801107a:	e00c      	b.n	8011096 <tcp_pcb_remove+0x6a>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	683a      	ldr	r2, [r7, #0]
 8011082:	429a      	cmp	r2, r3
 8011084:	d104      	bne.n	8011090 <tcp_pcb_remove+0x64>
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	68da      	ldr	r2, [r3, #12]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	60da      	str	r2, [r3, #12]
 801108e:	e005      	b.n	801109c <tcp_pcb_remove+0x70>
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	60fb      	str	r3, [r7, #12]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1ef      	bne.n	801107c <tcp_pcb_remove+0x50>
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	2200      	movs	r2, #0
 80110a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80110a2:	6838      	ldr	r0, [r7, #0]
 80110a4:	f7ff ff72 	bl	8010f8c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	7d1b      	ldrb	r3, [r3, #20]
 80110ac:	2b0a      	cmp	r3, #10
 80110ae:	d013      	beq.n	80110d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d00f      	beq.n	80110d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	8b5b      	ldrh	r3, [r3, #26]
 80110bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d009      	beq.n	80110d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	8b5b      	ldrh	r3, [r3, #26]
 80110c8:	f043 0302 	orr.w	r3, r3, #2
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80110d2:	6838      	ldr	r0, [r7, #0]
 80110d4:	f003 fbc2 	bl	801485c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	7d1b      	ldrb	r3, [r3, #20]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d020      	beq.n	8011122 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d006      	beq.n	80110f6 <tcp_pcb_remove+0xca>
 80110e8:	4b13      	ldr	r3, [pc, #76]	; (8011138 <tcp_pcb_remove+0x10c>)
 80110ea:	f640 0293 	movw	r2, #2195	; 0x893
 80110ee:	4916      	ldr	r1, [pc, #88]	; (8011148 <tcp_pcb_remove+0x11c>)
 80110f0:	4813      	ldr	r0, [pc, #76]	; (8011140 <tcp_pcb_remove+0x114>)
 80110f2:	f009 ff15 	bl	801af20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d006      	beq.n	801110c <tcp_pcb_remove+0xe0>
 80110fe:	4b0e      	ldr	r3, [pc, #56]	; (8011138 <tcp_pcb_remove+0x10c>)
 8011100:	f640 0294 	movw	r2, #2196	; 0x894
 8011104:	4911      	ldr	r1, [pc, #68]	; (801114c <tcp_pcb_remove+0x120>)
 8011106:	480e      	ldr	r0, [pc, #56]	; (8011140 <tcp_pcb_remove+0x114>)
 8011108:	f009 ff0a 	bl	801af20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011110:	2b00      	cmp	r3, #0
 8011112:	d006      	beq.n	8011122 <tcp_pcb_remove+0xf6>
 8011114:	4b08      	ldr	r3, [pc, #32]	; (8011138 <tcp_pcb_remove+0x10c>)
 8011116:	f640 0296 	movw	r2, #2198	; 0x896
 801111a:	490d      	ldr	r1, [pc, #52]	; (8011150 <tcp_pcb_remove+0x124>)
 801111c:	4808      	ldr	r0, [pc, #32]	; (8011140 <tcp_pcb_remove+0x114>)
 801111e:	f009 feff 	bl	801af20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	2200      	movs	r2, #0
 8011126:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	2200      	movs	r2, #0
 801112c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801112e:	bf00      	nop
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	0801d428 	.word	0x0801d428
 801113c:	0801da90 	.word	0x0801da90
 8011140:	0801d46c 	.word	0x0801d46c
 8011144:	0801daac 	.word	0x0801daac
 8011148:	0801dacc 	.word	0x0801dacc
 801114c:	0801dae4 	.word	0x0801dae4
 8011150:	0801db00 	.word	0x0801db00

08011154 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_next_iss+0x1c>
 8011162:	4b0a      	ldr	r3, [pc, #40]	; (801118c <tcp_next_iss+0x38>)
 8011164:	f640 02af 	movw	r2, #2223	; 0x8af
 8011168:	4909      	ldr	r1, [pc, #36]	; (8011190 <tcp_next_iss+0x3c>)
 801116a:	480a      	ldr	r0, [pc, #40]	; (8011194 <tcp_next_iss+0x40>)
 801116c:	f009 fed8 	bl	801af20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011170:	4b09      	ldr	r3, [pc, #36]	; (8011198 <tcp_next_iss+0x44>)
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	4b09      	ldr	r3, [pc, #36]	; (801119c <tcp_next_iss+0x48>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4413      	add	r3, r2
 801117a:	4a07      	ldr	r2, [pc, #28]	; (8011198 <tcp_next_iss+0x44>)
 801117c:	6013      	str	r3, [r2, #0]
  return iss;
 801117e:	4b06      	ldr	r3, [pc, #24]	; (8011198 <tcp_next_iss+0x44>)
 8011180:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	0801d428 	.word	0x0801d428
 8011190:	0801db18 	.word	0x0801db18
 8011194:	0801d46c 	.word	0x0801d46c
 8011198:	2400002c 	.word	0x2400002c
 801119c:	2400d718 	.word	0x2400d718

080111a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	4603      	mov	r3, r0
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
 80111ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d106      	bne.n	80111c2 <tcp_eff_send_mss_netif+0x22>
 80111b4:	4b14      	ldr	r3, [pc, #80]	; (8011208 <tcp_eff_send_mss_netif+0x68>)
 80111b6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80111ba:	4914      	ldr	r1, [pc, #80]	; (801120c <tcp_eff_send_mss_netif+0x6c>)
 80111bc:	4814      	ldr	r0, [pc, #80]	; (8011210 <tcp_eff_send_mss_netif+0x70>)
 80111be:	f009 feaf 	bl	801af20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80111c8:	89fb      	ldrh	r3, [r7, #14]
 80111ca:	e019      	b.n	8011200 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80111d2:	8afb      	ldrh	r3, [r7, #22]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d012      	beq.n	80111fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80111d8:	2328      	movs	r3, #40	; 0x28
 80111da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80111dc:	8afa      	ldrh	r2, [r7, #22]
 80111de:	8abb      	ldrh	r3, [r7, #20]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d904      	bls.n	80111ee <tcp_eff_send_mss_netif+0x4e>
 80111e4:	8afa      	ldrh	r2, [r7, #22]
 80111e6:	8abb      	ldrh	r3, [r7, #20]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	e000      	b.n	80111f0 <tcp_eff_send_mss_netif+0x50>
 80111ee:	2300      	movs	r3, #0
 80111f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80111f2:	8a7a      	ldrh	r2, [r7, #18]
 80111f4:	89fb      	ldrh	r3, [r7, #14]
 80111f6:	4293      	cmp	r3, r2
 80111f8:	bf28      	it	cs
 80111fa:	4613      	movcs	r3, r2
 80111fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80111fe:	89fb      	ldrh	r3, [r7, #14]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	0801d428 	.word	0x0801d428
 801120c:	0801db34 	.word	0x0801db34
 8011210:	0801d46c 	.word	0x0801d46c

08011214 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d119      	bne.n	801125c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011228:	4b10      	ldr	r3, [pc, #64]	; (801126c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801122a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801122e:	4910      	ldr	r1, [pc, #64]	; (8011270 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011230:	4810      	ldr	r0, [pc, #64]	; (8011274 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011232:	f009 fe75 	bl	801af20 <iprintf>

  while (pcb != NULL) {
 8011236:	e011      	b.n	801125c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	429a      	cmp	r2, r3
 8011242:	d108      	bne.n	8011256 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f7fe fe1a 	bl	800fe84 <tcp_abort>
      pcb = next;
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	60fb      	str	r3, [r7, #12]
 8011254:	e002      	b.n	801125c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1ea      	bne.n	8011238 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011262:	bf00      	nop
 8011264:	bf00      	nop
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	0801d428 	.word	0x0801d428
 8011270:	0801db5c 	.word	0x0801db5c
 8011274:	0801d46c 	.word	0x0801d46c

08011278 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d02a      	beq.n	80112de <tcp_netif_ip_addr_changed+0x66>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d026      	beq.n	80112de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011290:	4b15      	ldr	r3, [pc, #84]	; (80112e8 <tcp_netif_ip_addr_changed+0x70>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4619      	mov	r1, r3
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f7ff ffbc 	bl	8011214 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801129c:	4b13      	ldr	r3, [pc, #76]	; (80112ec <tcp_netif_ip_addr_changed+0x74>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4619      	mov	r1, r3
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7ff ffb6 	bl	8011214 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d017      	beq.n	80112de <tcp_netif_ip_addr_changed+0x66>
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d013      	beq.n	80112de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112b6:	4b0e      	ldr	r3, [pc, #56]	; (80112f0 <tcp_netif_ip_addr_changed+0x78>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e00c      	b.n	80112d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d103      	bne.n	80112d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1ef      	bne.n	80112be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80112de:	bf00      	nop
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	2400d714 	.word	0x2400d714
 80112ec:	2400d720 	.word	0x2400d720
 80112f0:	2400d71c 	.word	0x2400d71c

080112f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011300:	2b00      	cmp	r3, #0
 8011302:	d007      	beq.n	8011314 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff fb6f 	bl	80109ec <tcp_segs_free>
    pcb->ooseq = NULL;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801131c:	b590      	push	{r4, r7, lr}
 801131e:	b08d      	sub	sp, #52	; 0x34
 8011320:	af04      	add	r7, sp, #16
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d105      	bne.n	8011338 <tcp_input+0x1c>
 801132c:	4b9b      	ldr	r3, [pc, #620]	; (801159c <tcp_input+0x280>)
 801132e:	2283      	movs	r2, #131	; 0x83
 8011330:	499b      	ldr	r1, [pc, #620]	; (80115a0 <tcp_input+0x284>)
 8011332:	489c      	ldr	r0, [pc, #624]	; (80115a4 <tcp_input+0x288>)
 8011334:	f009 fdf4 	bl	801af20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	4a9a      	ldr	r2, [pc, #616]	; (80115a8 <tcp_input+0x28c>)
 801133e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	895b      	ldrh	r3, [r3, #10]
 8011344:	2b13      	cmp	r3, #19
 8011346:	f240 83c4 	bls.w	8011ad2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801134a:	4b98      	ldr	r3, [pc, #608]	; (80115ac <tcp_input+0x290>)
 801134c:	695b      	ldr	r3, [r3, #20]
 801134e:	4a97      	ldr	r2, [pc, #604]	; (80115ac <tcp_input+0x290>)
 8011350:	6812      	ldr	r2, [r2, #0]
 8011352:	4611      	mov	r1, r2
 8011354:	4618      	mov	r0, r3
 8011356:	f008 fb15 	bl	8019984 <ip4_addr_isbroadcast_u32>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	f040 83ba 	bne.w	8011ad6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011362:	4b92      	ldr	r3, [pc, #584]	; (80115ac <tcp_input+0x290>)
 8011364:	695b      	ldr	r3, [r3, #20]
 8011366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801136a:	2be0      	cmp	r3, #224	; 0xe0
 801136c:	f000 83b3 	beq.w	8011ad6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011370:	4b8d      	ldr	r3, [pc, #564]	; (80115a8 <tcp_input+0x28c>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	b29b      	uxth	r3, r3
 8011378:	4618      	mov	r0, r3
 801137a:	f7fc facd 	bl	800d918 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	0b1b      	lsrs	r3, r3, #12
 8011382:	b29b      	uxth	r3, r3
 8011384:	b2db      	uxtb	r3, r3
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801138a:	7cbb      	ldrb	r3, [r7, #18]
 801138c:	2b13      	cmp	r3, #19
 801138e:	f240 83a4 	bls.w	8011ada <tcp_input+0x7be>
 8011392:	7cbb      	ldrb	r3, [r7, #18]
 8011394:	b29a      	uxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	891b      	ldrh	r3, [r3, #8]
 801139a:	429a      	cmp	r2, r3
 801139c:	f200 839d 	bhi.w	8011ada <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80113a0:	7cbb      	ldrb	r3, [r7, #18]
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	3b14      	subs	r3, #20
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	4b81      	ldr	r3, [pc, #516]	; (80115b0 <tcp_input+0x294>)
 80113aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80113ac:	4b81      	ldr	r3, [pc, #516]	; (80115b4 <tcp_input+0x298>)
 80113ae:	2200      	movs	r2, #0
 80113b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	895a      	ldrh	r2, [r3, #10]
 80113b6:	7cbb      	ldrb	r3, [r7, #18]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d309      	bcc.n	80113d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80113be:	4b7c      	ldr	r3, [pc, #496]	; (80115b0 <tcp_input+0x294>)
 80113c0:	881a      	ldrh	r2, [r3, #0]
 80113c2:	4b7d      	ldr	r3, [pc, #500]	; (80115b8 <tcp_input+0x29c>)
 80113c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80113c6:	7cbb      	ldrb	r3, [r7, #18]
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7fd fed4 	bl	800f178 <pbuf_remove_header>
 80113d0:	e04e      	b.n	8011470 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d105      	bne.n	80113e6 <tcp_input+0xca>
 80113da:	4b70      	ldr	r3, [pc, #448]	; (801159c <tcp_input+0x280>)
 80113dc:	22c2      	movs	r2, #194	; 0xc2
 80113de:	4977      	ldr	r1, [pc, #476]	; (80115bc <tcp_input+0x2a0>)
 80113e0:	4870      	ldr	r0, [pc, #448]	; (80115a4 <tcp_input+0x288>)
 80113e2:	f009 fd9d 	bl	801af20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80113e6:	2114      	movs	r1, #20
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7fd fec5 	bl	800f178 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	895a      	ldrh	r2, [r3, #10]
 80113f2:	4b71      	ldr	r3, [pc, #452]	; (80115b8 <tcp_input+0x29c>)
 80113f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80113f6:	4b6e      	ldr	r3, [pc, #440]	; (80115b0 <tcp_input+0x294>)
 80113f8:	881a      	ldrh	r2, [r3, #0]
 80113fa:	4b6f      	ldr	r3, [pc, #444]	; (80115b8 <tcp_input+0x29c>)
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011402:	4b6d      	ldr	r3, [pc, #436]	; (80115b8 <tcp_input+0x29c>)
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	4619      	mov	r1, r3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7fd feb5 	bl	800f178 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	895b      	ldrh	r3, [r3, #10]
 8011414:	8a3a      	ldrh	r2, [r7, #16]
 8011416:	429a      	cmp	r2, r3
 8011418:	f200 8361 	bhi.w	8011ade <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	4a64      	ldr	r2, [pc, #400]	; (80115b4 <tcp_input+0x298>)
 8011424:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	8a3a      	ldrh	r2, [r7, #16]
 801142c:	4611      	mov	r1, r2
 801142e:	4618      	mov	r0, r3
 8011430:	f7fd fea2 	bl	800f178 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	891a      	ldrh	r2, [r3, #8]
 8011438:	8a3b      	ldrh	r3, [r7, #16]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	b29a      	uxth	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	895b      	ldrh	r3, [r3, #10]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d005      	beq.n	8011456 <tcp_input+0x13a>
 801144a:	4b54      	ldr	r3, [pc, #336]	; (801159c <tcp_input+0x280>)
 801144c:	22df      	movs	r2, #223	; 0xdf
 801144e:	495c      	ldr	r1, [pc, #368]	; (80115c0 <tcp_input+0x2a4>)
 8011450:	4854      	ldr	r0, [pc, #336]	; (80115a4 <tcp_input+0x288>)
 8011452:	f009 fd65 	bl	801af20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	891a      	ldrh	r2, [r3, #8]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	891b      	ldrh	r3, [r3, #8]
 8011460:	429a      	cmp	r2, r3
 8011462:	d005      	beq.n	8011470 <tcp_input+0x154>
 8011464:	4b4d      	ldr	r3, [pc, #308]	; (801159c <tcp_input+0x280>)
 8011466:	22e0      	movs	r2, #224	; 0xe0
 8011468:	4956      	ldr	r1, [pc, #344]	; (80115c4 <tcp_input+0x2a8>)
 801146a:	484e      	ldr	r0, [pc, #312]	; (80115a4 <tcp_input+0x288>)
 801146c:	f009 fd58 	bl	801af20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011470:	4b4d      	ldr	r3, [pc, #308]	; (80115a8 <tcp_input+0x28c>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	b29b      	uxth	r3, r3
 8011478:	4a4b      	ldr	r2, [pc, #300]	; (80115a8 <tcp_input+0x28c>)
 801147a:	6814      	ldr	r4, [r2, #0]
 801147c:	4618      	mov	r0, r3
 801147e:	f7fc fa4b 	bl	800d918 <lwip_htons>
 8011482:	4603      	mov	r3, r0
 8011484:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011486:	4b48      	ldr	r3, [pc, #288]	; (80115a8 <tcp_input+0x28c>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	885b      	ldrh	r3, [r3, #2]
 801148c:	b29b      	uxth	r3, r3
 801148e:	4a46      	ldr	r2, [pc, #280]	; (80115a8 <tcp_input+0x28c>)
 8011490:	6814      	ldr	r4, [r2, #0]
 8011492:	4618      	mov	r0, r3
 8011494:	f7fc fa40 	bl	800d918 <lwip_htons>
 8011498:	4603      	mov	r3, r0
 801149a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801149c:	4b42      	ldr	r3, [pc, #264]	; (80115a8 <tcp_input+0x28c>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	4a41      	ldr	r2, [pc, #260]	; (80115a8 <tcp_input+0x28c>)
 80114a4:	6814      	ldr	r4, [r2, #0]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fc fa4b 	bl	800d942 <lwip_htonl>
 80114ac:	4603      	mov	r3, r0
 80114ae:	6063      	str	r3, [r4, #4]
 80114b0:	6863      	ldr	r3, [r4, #4]
 80114b2:	4a45      	ldr	r2, [pc, #276]	; (80115c8 <tcp_input+0x2ac>)
 80114b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80114b6:	4b3c      	ldr	r3, [pc, #240]	; (80115a8 <tcp_input+0x28c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	4a3a      	ldr	r2, [pc, #232]	; (80115a8 <tcp_input+0x28c>)
 80114be:	6814      	ldr	r4, [r2, #0]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fc fa3e 	bl	800d942 <lwip_htonl>
 80114c6:	4603      	mov	r3, r0
 80114c8:	60a3      	str	r3, [r4, #8]
 80114ca:	68a3      	ldr	r3, [r4, #8]
 80114cc:	4a3f      	ldr	r2, [pc, #252]	; (80115cc <tcp_input+0x2b0>)
 80114ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80114d0:	4b35      	ldr	r3, [pc, #212]	; (80115a8 <tcp_input+0x28c>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	89db      	ldrh	r3, [r3, #14]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4a33      	ldr	r2, [pc, #204]	; (80115a8 <tcp_input+0x28c>)
 80114da:	6814      	ldr	r4, [r2, #0]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fc fa1b 	bl	800d918 <lwip_htons>
 80114e2:	4603      	mov	r3, r0
 80114e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80114e6:	4b30      	ldr	r3, [pc, #192]	; (80115a8 <tcp_input+0x28c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	899b      	ldrh	r3, [r3, #12]
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fc fa12 	bl	800d918 <lwip_htons>
 80114f4:	4603      	mov	r3, r0
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114fc:	b2da      	uxtb	r2, r3
 80114fe:	4b34      	ldr	r3, [pc, #208]	; (80115d0 <tcp_input+0x2b4>)
 8011500:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	891a      	ldrh	r2, [r3, #8]
 8011506:	4b33      	ldr	r3, [pc, #204]	; (80115d4 <tcp_input+0x2b8>)
 8011508:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801150a:	4b31      	ldr	r3, [pc, #196]	; (80115d0 <tcp_input+0x2b4>)
 801150c:	781b      	ldrb	r3, [r3, #0]
 801150e:	f003 0303 	and.w	r3, r3, #3
 8011512:	2b00      	cmp	r3, #0
 8011514:	d00c      	beq.n	8011530 <tcp_input+0x214>
    tcplen++;
 8011516:	4b2f      	ldr	r3, [pc, #188]	; (80115d4 <tcp_input+0x2b8>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	3301      	adds	r3, #1
 801151c:	b29a      	uxth	r2, r3
 801151e:	4b2d      	ldr	r3, [pc, #180]	; (80115d4 <tcp_input+0x2b8>)
 8011520:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	891a      	ldrh	r2, [r3, #8]
 8011526:	4b2b      	ldr	r3, [pc, #172]	; (80115d4 <tcp_input+0x2b8>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	429a      	cmp	r2, r3
 801152c:	f200 82d9 	bhi.w	8011ae2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011534:	4b28      	ldr	r3, [pc, #160]	; (80115d8 <tcp_input+0x2bc>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	61fb      	str	r3, [r7, #28]
 801153a:	e09d      	b.n	8011678 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	7d1b      	ldrb	r3, [r3, #20]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d105      	bne.n	8011550 <tcp_input+0x234>
 8011544:	4b15      	ldr	r3, [pc, #84]	; (801159c <tcp_input+0x280>)
 8011546:	22fb      	movs	r2, #251	; 0xfb
 8011548:	4924      	ldr	r1, [pc, #144]	; (80115dc <tcp_input+0x2c0>)
 801154a:	4816      	ldr	r0, [pc, #88]	; (80115a4 <tcp_input+0x288>)
 801154c:	f009 fce8 	bl	801af20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
 8011554:	2b0a      	cmp	r3, #10
 8011556:	d105      	bne.n	8011564 <tcp_input+0x248>
 8011558:	4b10      	ldr	r3, [pc, #64]	; (801159c <tcp_input+0x280>)
 801155a:	22fc      	movs	r2, #252	; 0xfc
 801155c:	4920      	ldr	r1, [pc, #128]	; (80115e0 <tcp_input+0x2c4>)
 801155e:	4811      	ldr	r0, [pc, #68]	; (80115a4 <tcp_input+0x288>)
 8011560:	f009 fcde 	bl	801af20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	7d1b      	ldrb	r3, [r3, #20]
 8011568:	2b01      	cmp	r3, #1
 801156a:	d105      	bne.n	8011578 <tcp_input+0x25c>
 801156c:	4b0b      	ldr	r3, [pc, #44]	; (801159c <tcp_input+0x280>)
 801156e:	22fd      	movs	r2, #253	; 0xfd
 8011570:	491c      	ldr	r1, [pc, #112]	; (80115e4 <tcp_input+0x2c8>)
 8011572:	480c      	ldr	r0, [pc, #48]	; (80115a4 <tcp_input+0x288>)
 8011574:	f009 fcd4 	bl	801af20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	7a1b      	ldrb	r3, [r3, #8]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d033      	beq.n	80115e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	7a1a      	ldrb	r2, [r3, #8]
 8011584:	4b09      	ldr	r3, [pc, #36]	; (80115ac <tcp_input+0x290>)
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801158c:	3301      	adds	r3, #1
 801158e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011590:	429a      	cmp	r2, r3
 8011592:	d029      	beq.n	80115e8 <tcp_input+0x2cc>
      prev = pcb;
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	61bb      	str	r3, [r7, #24]
      continue;
 8011598:	e06b      	b.n	8011672 <tcp_input+0x356>
 801159a:	bf00      	nop
 801159c:	0801db90 	.word	0x0801db90
 80115a0:	0801dbc4 	.word	0x0801dbc4
 80115a4:	0801dbdc 	.word	0x0801dbdc
 80115a8:	24009dc0 	.word	0x24009dc0
 80115ac:	2400a634 	.word	0x2400a634
 80115b0:	24009dc4 	.word	0x24009dc4
 80115b4:	24009dc8 	.word	0x24009dc8
 80115b8:	24009dc6 	.word	0x24009dc6
 80115bc:	0801dc04 	.word	0x0801dc04
 80115c0:	0801dc14 	.word	0x0801dc14
 80115c4:	0801dc20 	.word	0x0801dc20
 80115c8:	24009dd0 	.word	0x24009dd0
 80115cc:	24009dd4 	.word	0x24009dd4
 80115d0:	24009ddc 	.word	0x24009ddc
 80115d4:	24009dda 	.word	0x24009dda
 80115d8:	2400d714 	.word	0x2400d714
 80115dc:	0801dc40 	.word	0x0801dc40
 80115e0:	0801dc68 	.word	0x0801dc68
 80115e4:	0801dc94 	.word	0x0801dc94
    }

    if (pcb->remote_port == tcphdr->src &&
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	8b1a      	ldrh	r2, [r3, #24]
 80115ec:	4b94      	ldr	r3, [pc, #592]	; (8011840 <tcp_input+0x524>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d13a      	bne.n	801166e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	8ada      	ldrh	r2, [r3, #22]
 80115fc:	4b90      	ldr	r3, [pc, #576]	; (8011840 <tcp_input+0x524>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	885b      	ldrh	r3, [r3, #2]
 8011602:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011604:	429a      	cmp	r2, r3
 8011606:	d132      	bne.n	801166e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	4b8d      	ldr	r3, [pc, #564]	; (8011844 <tcp_input+0x528>)
 801160e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011610:	429a      	cmp	r2, r3
 8011612:	d12c      	bne.n	801166e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	4b8a      	ldr	r3, [pc, #552]	; (8011844 <tcp_input+0x528>)
 801161a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801161c:	429a      	cmp	r2, r3
 801161e:	d126      	bne.n	801166e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	69fa      	ldr	r2, [r7, #28]
 8011626:	429a      	cmp	r2, r3
 8011628:	d106      	bne.n	8011638 <tcp_input+0x31c>
 801162a:	4b87      	ldr	r3, [pc, #540]	; (8011848 <tcp_input+0x52c>)
 801162c:	f240 120d 	movw	r2, #269	; 0x10d
 8011630:	4986      	ldr	r1, [pc, #536]	; (801184c <tcp_input+0x530>)
 8011632:	4887      	ldr	r0, [pc, #540]	; (8011850 <tcp_input+0x534>)
 8011634:	f009 fc74 	bl	801af20 <iprintf>
      if (prev != NULL) {
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00a      	beq.n	8011654 <tcp_input+0x338>
        prev->next = pcb->next;
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	68da      	ldr	r2, [r3, #12]
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011646:	4b83      	ldr	r3, [pc, #524]	; (8011854 <tcp_input+0x538>)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801164e:	4a81      	ldr	r2, [pc, #516]	; (8011854 <tcp_input+0x538>)
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	69fa      	ldr	r2, [r7, #28]
 801165a:	429a      	cmp	r2, r3
 801165c:	d111      	bne.n	8011682 <tcp_input+0x366>
 801165e:	4b7a      	ldr	r3, [pc, #488]	; (8011848 <tcp_input+0x52c>)
 8011660:	f240 1215 	movw	r2, #277	; 0x115
 8011664:	497c      	ldr	r1, [pc, #496]	; (8011858 <tcp_input+0x53c>)
 8011666:	487a      	ldr	r0, [pc, #488]	; (8011850 <tcp_input+0x534>)
 8011668:	f009 fc5a 	bl	801af20 <iprintf>
      break;
 801166c:	e009      	b.n	8011682 <tcp_input+0x366>
    }
    prev = pcb;
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	61fb      	str	r3, [r7, #28]
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	2b00      	cmp	r3, #0
 801167c:	f47f af5e 	bne.w	801153c <tcp_input+0x220>
 8011680:	e000      	b.n	8011684 <tcp_input+0x368>
      break;
 8011682:	bf00      	nop
  }

  if (pcb == NULL) {
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	f040 8095 	bne.w	80117b6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801168c:	4b73      	ldr	r3, [pc, #460]	; (801185c <tcp_input+0x540>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	61fb      	str	r3, [r7, #28]
 8011692:	e03f      	b.n	8011714 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	7d1b      	ldrb	r3, [r3, #20]
 8011698:	2b0a      	cmp	r3, #10
 801169a:	d006      	beq.n	80116aa <tcp_input+0x38e>
 801169c:	4b6a      	ldr	r3, [pc, #424]	; (8011848 <tcp_input+0x52c>)
 801169e:	f240 121f 	movw	r2, #287	; 0x11f
 80116a2:	496f      	ldr	r1, [pc, #444]	; (8011860 <tcp_input+0x544>)
 80116a4:	486a      	ldr	r0, [pc, #424]	; (8011850 <tcp_input+0x534>)
 80116a6:	f009 fc3b 	bl	801af20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	7a1b      	ldrb	r3, [r3, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d009      	beq.n	80116c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	7a1a      	ldrb	r2, [r3, #8]
 80116b6:	4b63      	ldr	r3, [pc, #396]	; (8011844 <tcp_input+0x528>)
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80116be:	3301      	adds	r3, #1
 80116c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d122      	bne.n	801170c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	8b1a      	ldrh	r2, [r3, #24]
 80116ca:	4b5d      	ldr	r3, [pc, #372]	; (8011840 <tcp_input+0x524>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d11b      	bne.n	801170e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	8ada      	ldrh	r2, [r3, #22]
 80116da:	4b59      	ldr	r3, [pc, #356]	; (8011840 <tcp_input+0x524>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	885b      	ldrh	r3, [r3, #2]
 80116e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d113      	bne.n	801170e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	685a      	ldr	r2, [r3, #4]
 80116ea:	4b56      	ldr	r3, [pc, #344]	; (8011844 <tcp_input+0x528>)
 80116ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d10d      	bne.n	801170e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	4b53      	ldr	r3, [pc, #332]	; (8011844 <tcp_input+0x528>)
 80116f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d107      	bne.n	801170e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80116fe:	69f8      	ldr	r0, [r7, #28]
 8011700:	f000 fb54 	bl	8011dac <tcp_timewait_input>
        }
        pbuf_free(p);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7fd fdbd 	bl	800f284 <pbuf_free>
        return;
 801170a:	e1f0      	b.n	8011aee <tcp_input+0x7d2>
        continue;
 801170c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	61fb      	str	r3, [r7, #28]
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d1bc      	bne.n	8011694 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801171a:	2300      	movs	r3, #0
 801171c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801171e:	4b51      	ldr	r3, [pc, #324]	; (8011864 <tcp_input+0x548>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	e02a      	b.n	801177c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	7a1b      	ldrb	r3, [r3, #8]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00c      	beq.n	8011748 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	7a1a      	ldrb	r2, [r3, #8]
 8011732:	4b44      	ldr	r3, [pc, #272]	; (8011844 <tcp_input+0x528>)
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801173a:	3301      	adds	r3, #1
 801173c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801173e:	429a      	cmp	r2, r3
 8011740:	d002      	beq.n	8011748 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	61bb      	str	r3, [r7, #24]
        continue;
 8011746:	e016      	b.n	8011776 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	8ada      	ldrh	r2, [r3, #22]
 801174c:	4b3c      	ldr	r3, [pc, #240]	; (8011840 <tcp_input+0x524>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	885b      	ldrh	r3, [r3, #2]
 8011752:	b29b      	uxth	r3, r3
 8011754:	429a      	cmp	r2, r3
 8011756:	d10c      	bne.n	8011772 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	4b39      	ldr	r3, [pc, #228]	; (8011844 <tcp_input+0x528>)
 801175e:	695b      	ldr	r3, [r3, #20]
 8011760:	429a      	cmp	r2, r3
 8011762:	d00f      	beq.n	8011784 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00d      	beq.n	8011786 <tcp_input+0x46a>
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d009      	beq.n	8011786 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	617b      	str	r3, [r7, #20]
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1d1      	bne.n	8011726 <tcp_input+0x40a>
 8011782:	e000      	b.n	8011786 <tcp_input+0x46a>
            break;
 8011784:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d014      	beq.n	80117b6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801178c:	69bb      	ldr	r3, [r7, #24]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00a      	beq.n	80117a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	68da      	ldr	r2, [r3, #12]
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801179a:	4b32      	ldr	r3, [pc, #200]	; (8011864 <tcp_input+0x548>)
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80117a2:	4a30      	ldr	r2, [pc, #192]	; (8011864 <tcp_input+0x548>)
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80117a8:	6978      	ldr	r0, [r7, #20]
 80117aa:	f000 fa01 	bl	8011bb0 <tcp_listen_input>
      }
      pbuf_free(p);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7fd fd68 	bl	800f284 <pbuf_free>
      return;
 80117b4:	e19b      	b.n	8011aee <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	f000 8160 	beq.w	8011a7e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80117be:	4b2a      	ldr	r3, [pc, #168]	; (8011868 <tcp_input+0x54c>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	891a      	ldrh	r2, [r3, #8]
 80117c8:	4b27      	ldr	r3, [pc, #156]	; (8011868 <tcp_input+0x54c>)
 80117ca:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80117cc:	4a26      	ldr	r2, [pc, #152]	; (8011868 <tcp_input+0x54c>)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80117d2:	4b1b      	ldr	r3, [pc, #108]	; (8011840 <tcp_input+0x524>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4a24      	ldr	r2, [pc, #144]	; (8011868 <tcp_input+0x54c>)
 80117d8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80117da:	4b24      	ldr	r3, [pc, #144]	; (801186c <tcp_input+0x550>)
 80117dc:	2200      	movs	r2, #0
 80117de:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80117e0:	4b23      	ldr	r3, [pc, #140]	; (8011870 <tcp_input+0x554>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80117e6:	4b23      	ldr	r3, [pc, #140]	; (8011874 <tcp_input+0x558>)
 80117e8:	2200      	movs	r2, #0
 80117ea:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80117ec:	4b22      	ldr	r3, [pc, #136]	; (8011878 <tcp_input+0x55c>)
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	f003 0308 	and.w	r3, r3, #8
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d006      	beq.n	8011806 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7b5b      	ldrb	r3, [r3, #13]
 80117fc:	f043 0301 	orr.w	r3, r3, #1
 8011800:	b2da      	uxtb	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801180a:	2b00      	cmp	r3, #0
 801180c:	d038      	beq.n	8011880 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801180e:	69f8      	ldr	r0, [r7, #28]
 8011810:	f7ff f870 	bl	80108f4 <tcp_process_refused_data>
 8011814:	4603      	mov	r3, r0
 8011816:	f113 0f0d 	cmn.w	r3, #13
 801181a:	d007      	beq.n	801182c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011820:	2b00      	cmp	r3, #0
 8011822:	d02d      	beq.n	8011880 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011824:	4b15      	ldr	r3, [pc, #84]	; (801187c <tcp_input+0x560>)
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d029      	beq.n	8011880 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011830:	2b00      	cmp	r3, #0
 8011832:	f040 8104 	bne.w	8011a3e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011836:	69f8      	ldr	r0, [r7, #28]
 8011838:	f003 fe16 	bl	8015468 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801183c:	e0ff      	b.n	8011a3e <tcp_input+0x722>
 801183e:	bf00      	nop
 8011840:	24009dc0 	.word	0x24009dc0
 8011844:	2400a634 	.word	0x2400a634
 8011848:	0801db90 	.word	0x0801db90
 801184c:	0801dcbc 	.word	0x0801dcbc
 8011850:	0801dbdc 	.word	0x0801dbdc
 8011854:	2400d714 	.word	0x2400d714
 8011858:	0801dce8 	.word	0x0801dce8
 801185c:	2400d724 	.word	0x2400d724
 8011860:	0801dd14 	.word	0x0801dd14
 8011864:	2400d71c 	.word	0x2400d71c
 8011868:	24009db0 	.word	0x24009db0
 801186c:	24009de0 	.word	0x24009de0
 8011870:	24009ddd 	.word	0x24009ddd
 8011874:	24009dd8 	.word	0x24009dd8
 8011878:	24009ddc 	.word	0x24009ddc
 801187c:	24009dda 	.word	0x24009dda
      }
    }
    tcp_input_pcb = pcb;
 8011880:	4a9c      	ldr	r2, [pc, #624]	; (8011af4 <tcp_input+0x7d8>)
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011886:	69f8      	ldr	r0, [r7, #28]
 8011888:	f000 fb0a 	bl	8011ea0 <tcp_process>
 801188c:	4603      	mov	r3, r0
 801188e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011894:	f113 0f0d 	cmn.w	r3, #13
 8011898:	f000 80d3 	beq.w	8011a42 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801189c:	4b96      	ldr	r3, [pc, #600]	; (8011af8 <tcp_input+0x7dc>)
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	f003 0308 	and.w	r3, r3, #8
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d015      	beq.n	80118d4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d008      	beq.n	80118c4 <tcp_input+0x5a8>
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118b8:	69fa      	ldr	r2, [r7, #28]
 80118ba:	6912      	ldr	r2, [r2, #16]
 80118bc:	f06f 010d 	mvn.w	r1, #13
 80118c0:	4610      	mov	r0, r2
 80118c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118c4:	69f9      	ldr	r1, [r7, #28]
 80118c6:	488d      	ldr	r0, [pc, #564]	; (8011afc <tcp_input+0x7e0>)
 80118c8:	f7ff fbb0 	bl	801102c <tcp_pcb_remove>
        tcp_free(pcb);
 80118cc:	69f8      	ldr	r0, [r7, #28]
 80118ce:	f7fd ff95 	bl	800f7fc <tcp_free>
 80118d2:	e0c1      	b.n	8011a58 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80118d4:	2300      	movs	r3, #0
 80118d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80118d8:	4b89      	ldr	r3, [pc, #548]	; (8011b00 <tcp_input+0x7e4>)
 80118da:	881b      	ldrh	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01d      	beq.n	801191c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80118e0:	4b87      	ldr	r3, [pc, #540]	; (8011b00 <tcp_input+0x7e4>)
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <tcp_input+0x5ea>
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118f6:	69fa      	ldr	r2, [r7, #28]
 80118f8:	6910      	ldr	r0, [r2, #16]
 80118fa:	89fa      	ldrh	r2, [r7, #14]
 80118fc:	69f9      	ldr	r1, [r7, #28]
 80118fe:	4798      	blx	r3
 8011900:	4603      	mov	r3, r0
 8011902:	74fb      	strb	r3, [r7, #19]
 8011904:	e001      	b.n	801190a <tcp_input+0x5ee>
 8011906:	2300      	movs	r3, #0
 8011908:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801190a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801190e:	f113 0f0d 	cmn.w	r3, #13
 8011912:	f000 8098 	beq.w	8011a46 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011916:	4b7a      	ldr	r3, [pc, #488]	; (8011b00 <tcp_input+0x7e4>)
 8011918:	2200      	movs	r2, #0
 801191a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801191c:	69f8      	ldr	r0, [r7, #28]
 801191e:	f000 f907 	bl	8011b30 <tcp_input_delayed_close>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	f040 8090 	bne.w	8011a4a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801192a:	4b76      	ldr	r3, [pc, #472]	; (8011b04 <tcp_input+0x7e8>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d041      	beq.n	80119b6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <tcp_input+0x62c>
 801193a:	4b73      	ldr	r3, [pc, #460]	; (8011b08 <tcp_input+0x7ec>)
 801193c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011940:	4972      	ldr	r1, [pc, #456]	; (8011b0c <tcp_input+0x7f0>)
 8011942:	4873      	ldr	r0, [pc, #460]	; (8011b10 <tcp_input+0x7f4>)
 8011944:	f009 faec 	bl	801af20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	8b5b      	ldrh	r3, [r3, #26]
 801194c:	f003 0310 	and.w	r3, r3, #16
 8011950:	2b00      	cmp	r3, #0
 8011952:	d008      	beq.n	8011966 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011954:	4b6b      	ldr	r3, [pc, #428]	; (8011b04 <tcp_input+0x7e8>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	4618      	mov	r0, r3
 801195a:	f7fd fc93 	bl	800f284 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801195e:	69f8      	ldr	r0, [r7, #28]
 8011960:	f7fe fa90 	bl	800fe84 <tcp_abort>
            goto aborted;
 8011964:	e078      	b.n	8011a58 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00c      	beq.n	801198a <tcp_input+0x66e>
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	6918      	ldr	r0, [r3, #16]
 801197a:	4b62      	ldr	r3, [pc, #392]	; (8011b04 <tcp_input+0x7e8>)
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	2300      	movs	r3, #0
 8011980:	69f9      	ldr	r1, [r7, #28]
 8011982:	47a0      	blx	r4
 8011984:	4603      	mov	r3, r0
 8011986:	74fb      	strb	r3, [r7, #19]
 8011988:	e008      	b.n	801199c <tcp_input+0x680>
 801198a:	4b5e      	ldr	r3, [pc, #376]	; (8011b04 <tcp_input+0x7e8>)
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	2300      	movs	r3, #0
 8011990:	69f9      	ldr	r1, [r7, #28]
 8011992:	2000      	movs	r0, #0
 8011994:	f7ff f884 	bl	8010aa0 <tcp_recv_null>
 8011998:	4603      	mov	r3, r0
 801199a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801199c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119a0:	f113 0f0d 	cmn.w	r3, #13
 80119a4:	d053      	beq.n	8011a4e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80119a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d003      	beq.n	80119b6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80119ae:	4b55      	ldr	r3, [pc, #340]	; (8011b04 <tcp_input+0x7e8>)
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80119b6:	4b50      	ldr	r3, [pc, #320]	; (8011af8 <tcp_input+0x7dc>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 0320 	and.w	r3, r3, #32
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d030      	beq.n	8011a24 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d009      	beq.n	80119de <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119ce:	7b5a      	ldrb	r2, [r3, #13]
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119d4:	f042 0220 	orr.w	r2, r2, #32
 80119d8:	b2d2      	uxtb	r2, r2
 80119da:	735a      	strb	r2, [r3, #13]
 80119dc:	e022      	b.n	8011a24 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80119e6:	d005      	beq.n	80119f4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119ec:	3301      	adds	r3, #1
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00b      	beq.n	8011a16 <tcp_input+0x6fa>
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	6918      	ldr	r0, [r3, #16]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	69f9      	ldr	r1, [r7, #28]
 8011a0e:	47a0      	blx	r4
 8011a10:	4603      	mov	r3, r0
 8011a12:	74fb      	strb	r3, [r7, #19]
 8011a14:	e001      	b.n	8011a1a <tcp_input+0x6fe>
 8011a16:	2300      	movs	r3, #0
 8011a18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a1e:	f113 0f0d 	cmn.w	r3, #13
 8011a22:	d016      	beq.n	8011a52 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a24:	4b33      	ldr	r3, [pc, #204]	; (8011af4 <tcp_input+0x7d8>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a2a:	69f8      	ldr	r0, [r7, #28]
 8011a2c:	f000 f880 	bl	8011b30 <tcp_input_delayed_close>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10f      	bne.n	8011a56 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a36:	69f8      	ldr	r0, [r7, #28]
 8011a38:	f002 ff10 	bl	801485c <tcp_output>
 8011a3c:	e00c      	b.n	8011a58 <tcp_input+0x73c>
        goto aborted;
 8011a3e:	bf00      	nop
 8011a40:	e00a      	b.n	8011a58 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a42:	bf00      	nop
 8011a44:	e008      	b.n	8011a58 <tcp_input+0x73c>
              goto aborted;
 8011a46:	bf00      	nop
 8011a48:	e006      	b.n	8011a58 <tcp_input+0x73c>
          goto aborted;
 8011a4a:	bf00      	nop
 8011a4c:	e004      	b.n	8011a58 <tcp_input+0x73c>
            goto aborted;
 8011a4e:	bf00      	nop
 8011a50:	e002      	b.n	8011a58 <tcp_input+0x73c>
              goto aborted;
 8011a52:	bf00      	nop
 8011a54:	e000      	b.n	8011a58 <tcp_input+0x73c>
          goto aborted;
 8011a56:	bf00      	nop
    tcp_input_pcb = NULL;
 8011a58:	4b26      	ldr	r3, [pc, #152]	; (8011af4 <tcp_input+0x7d8>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011a5e:	4b29      	ldr	r3, [pc, #164]	; (8011b04 <tcp_input+0x7e8>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011a64:	4b2b      	ldr	r3, [pc, #172]	; (8011b14 <tcp_input+0x7f8>)
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d03f      	beq.n	8011aec <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011a6c:	4b29      	ldr	r3, [pc, #164]	; (8011b14 <tcp_input+0x7f8>)
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fd fc07 	bl	800f284 <pbuf_free>
      inseg.p = NULL;
 8011a76:	4b27      	ldr	r3, [pc, #156]	; (8011b14 <tcp_input+0x7f8>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011a7c:	e036      	b.n	8011aec <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011a7e:	4b26      	ldr	r3, [pc, #152]	; (8011b18 <tcp_input+0x7fc>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	899b      	ldrh	r3, [r3, #12]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fb ff46 	bl	800d918 <lwip_htons>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	f003 0304 	and.w	r3, r3, #4
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d118      	bne.n	8011aca <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a98:	4b20      	ldr	r3, [pc, #128]	; (8011b1c <tcp_input+0x800>)
 8011a9a:	6819      	ldr	r1, [r3, #0]
 8011a9c:	4b20      	ldr	r3, [pc, #128]	; (8011b20 <tcp_input+0x804>)
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	4b20      	ldr	r3, [pc, #128]	; (8011b24 <tcp_input+0x808>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011aa8:	4b1b      	ldr	r3, [pc, #108]	; (8011b18 <tcp_input+0x7fc>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aac:	885b      	ldrh	r3, [r3, #2]
 8011aae:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ab0:	4a19      	ldr	r2, [pc, #100]	; (8011b18 <tcp_input+0x7fc>)
 8011ab2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ab4:	8812      	ldrh	r2, [r2, #0]
 8011ab6:	b292      	uxth	r2, r2
 8011ab8:	9202      	str	r2, [sp, #8]
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	4b1a      	ldr	r3, [pc, #104]	; (8011b28 <tcp_input+0x80c>)
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	4b1a      	ldr	r3, [pc, #104]	; (8011b2c <tcp_input+0x810>)
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	f003 fc7d 	bl	80153c4 <tcp_rst>
    pbuf_free(p);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7fd fbda 	bl	800f284 <pbuf_free>
  return;
 8011ad0:	e00c      	b.n	8011aec <tcp_input+0x7d0>
    goto dropped;
 8011ad2:	bf00      	nop
 8011ad4:	e006      	b.n	8011ae4 <tcp_input+0x7c8>
    goto dropped;
 8011ad6:	bf00      	nop
 8011ad8:	e004      	b.n	8011ae4 <tcp_input+0x7c8>
    goto dropped;
 8011ada:	bf00      	nop
 8011adc:	e002      	b.n	8011ae4 <tcp_input+0x7c8>
      goto dropped;
 8011ade:	bf00      	nop
 8011ae0:	e000      	b.n	8011ae4 <tcp_input+0x7c8>
      goto dropped;
 8011ae2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7fd fbcd 	bl	800f284 <pbuf_free>
 8011aea:	e000      	b.n	8011aee <tcp_input+0x7d2>
  return;
 8011aec:	bf00      	nop
}
 8011aee:	3724      	adds	r7, #36	; 0x24
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd90      	pop	{r4, r7, pc}
 8011af4:	2400d728 	.word	0x2400d728
 8011af8:	24009ddd 	.word	0x24009ddd
 8011afc:	2400d714 	.word	0x2400d714
 8011b00:	24009dd8 	.word	0x24009dd8
 8011b04:	24009de0 	.word	0x24009de0
 8011b08:	0801db90 	.word	0x0801db90
 8011b0c:	0801dd44 	.word	0x0801dd44
 8011b10:	0801dbdc 	.word	0x0801dbdc
 8011b14:	24009db0 	.word	0x24009db0
 8011b18:	24009dc0 	.word	0x24009dc0
 8011b1c:	24009dd4 	.word	0x24009dd4
 8011b20:	24009dda 	.word	0x24009dda
 8011b24:	24009dd0 	.word	0x24009dd0
 8011b28:	2400a644 	.word	0x2400a644
 8011b2c:	2400a648 	.word	0x2400a648

08011b30 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <tcp_input_delayed_close+0x1c>
 8011b3e:	4b17      	ldr	r3, [pc, #92]	; (8011b9c <tcp_input_delayed_close+0x6c>)
 8011b40:	f240 225a 	movw	r2, #602	; 0x25a
 8011b44:	4916      	ldr	r1, [pc, #88]	; (8011ba0 <tcp_input_delayed_close+0x70>)
 8011b46:	4817      	ldr	r0, [pc, #92]	; (8011ba4 <tcp_input_delayed_close+0x74>)
 8011b48:	f009 f9ea 	bl	801af20 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011b4c:	4b16      	ldr	r3, [pc, #88]	; (8011ba8 <tcp_input_delayed_close+0x78>)
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	f003 0310 	and.w	r3, r3, #16
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d01c      	beq.n	8011b92 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	8b5b      	ldrh	r3, [r3, #26]
 8011b5c:	f003 0310 	and.w	r3, r3, #16
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d10d      	bne.n	8011b80 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d008      	beq.n	8011b80 <tcp_input_delayed_close+0x50>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	6912      	ldr	r2, [r2, #16]
 8011b78:	f06f 010e 	mvn.w	r1, #14
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	480a      	ldr	r0, [pc, #40]	; (8011bac <tcp_input_delayed_close+0x7c>)
 8011b84:	f7ff fa52 	bl	801102c <tcp_pcb_remove>
    tcp_free(pcb);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7fd fe37 	bl	800f7fc <tcp_free>
    return 1;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e000      	b.n	8011b94 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	0801db90 	.word	0x0801db90
 8011ba0:	0801dd60 	.word	0x0801dd60
 8011ba4:	0801dbdc 	.word	0x0801dbdc
 8011ba8:	24009ddd 	.word	0x24009ddd
 8011bac:	2400d714 	.word	0x2400d714

08011bb0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b08b      	sub	sp, #44	; 0x2c
 8011bb4:	af04      	add	r7, sp, #16
 8011bb6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011bb8:	4b6f      	ldr	r3, [pc, #444]	; (8011d78 <tcp_listen_input+0x1c8>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f003 0304 	and.w	r3, r3, #4
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f040 80d2 	bne.w	8011d6a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d106      	bne.n	8011bda <tcp_listen_input+0x2a>
 8011bcc:	4b6b      	ldr	r3, [pc, #428]	; (8011d7c <tcp_listen_input+0x1cc>)
 8011bce:	f240 2281 	movw	r2, #641	; 0x281
 8011bd2:	496b      	ldr	r1, [pc, #428]	; (8011d80 <tcp_listen_input+0x1d0>)
 8011bd4:	486b      	ldr	r0, [pc, #428]	; (8011d84 <tcp_listen_input+0x1d4>)
 8011bd6:	f009 f9a3 	bl	801af20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011bda:	4b67      	ldr	r3, [pc, #412]	; (8011d78 <tcp_listen_input+0x1c8>)
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	f003 0310 	and.w	r3, r3, #16
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d019      	beq.n	8011c1a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011be6:	4b68      	ldr	r3, [pc, #416]	; (8011d88 <tcp_listen_input+0x1d8>)
 8011be8:	6819      	ldr	r1, [r3, #0]
 8011bea:	4b68      	ldr	r3, [pc, #416]	; (8011d8c <tcp_listen_input+0x1dc>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	4b67      	ldr	r3, [pc, #412]	; (8011d90 <tcp_listen_input+0x1e0>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bf6:	4b67      	ldr	r3, [pc, #412]	; (8011d94 <tcp_listen_input+0x1e4>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bfa:	885b      	ldrh	r3, [r3, #2]
 8011bfc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bfe:	4a65      	ldr	r2, [pc, #404]	; (8011d94 <tcp_listen_input+0x1e4>)
 8011c00:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c02:	8812      	ldrh	r2, [r2, #0]
 8011c04:	b292      	uxth	r2, r2
 8011c06:	9202      	str	r2, [sp, #8]
 8011c08:	9301      	str	r3, [sp, #4]
 8011c0a:	4b63      	ldr	r3, [pc, #396]	; (8011d98 <tcp_listen_input+0x1e8>)
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	4b63      	ldr	r3, [pc, #396]	; (8011d9c <tcp_listen_input+0x1ec>)
 8011c10:	4602      	mov	r2, r0
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f003 fbd6 	bl	80153c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c18:	e0a9      	b.n	8011d6e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011c1a:	4b57      	ldr	r3, [pc, #348]	; (8011d78 <tcp_listen_input+0x1c8>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	f003 0302 	and.w	r3, r3, #2
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 80a3 	beq.w	8011d6e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	7d5b      	ldrb	r3, [r3, #21]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff f85b 	bl	8010ce8 <tcp_alloc>
 8011c32:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d111      	bne.n	8011c5e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	699b      	ldr	r3, [r3, #24]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d00a      	beq.n	8011c58 <tcp_listen_input+0xa8>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	699b      	ldr	r3, [r3, #24]
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	6910      	ldr	r0, [r2, #16]
 8011c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4e:	2100      	movs	r1, #0
 8011c50:	4798      	blx	r3
 8011c52:	4603      	mov	r3, r0
 8011c54:	73bb      	strb	r3, [r7, #14]
      return;
 8011c56:	e08b      	b.n	8011d70 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c58:	23f0      	movs	r3, #240	; 0xf0
 8011c5a:	73bb      	strb	r3, [r7, #14]
      return;
 8011c5c:	e088      	b.n	8011d70 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011c5e:	4b50      	ldr	r3, [pc, #320]	; (8011da0 <tcp_listen_input+0x1f0>)
 8011c60:	695a      	ldr	r2, [r3, #20]
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011c66:	4b4e      	ldr	r3, [pc, #312]	; (8011da0 <tcp_listen_input+0x1f0>)
 8011c68:	691a      	ldr	r2, [r3, #16]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	8ada      	ldrh	r2, [r3, #22]
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011c76:	4b47      	ldr	r3, [pc, #284]	; (8011d94 <tcp_listen_input+0x1e4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2203      	movs	r2, #3
 8011c86:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011c88:	4b41      	ldr	r3, [pc, #260]	; (8011d90 <tcp_listen_input+0x1e0>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	1c5a      	adds	r2, r3, #1
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011c9a:	6978      	ldr	r0, [r7, #20]
 8011c9c:	f7ff fa5a 	bl	8011154 <tcp_next_iss>
 8011ca0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	693a      	ldr	r2, [r7, #16]
 8011ca6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	693a      	ldr	r2, [r7, #16]
 8011cb2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	693a      	ldr	r2, [r7, #16]
 8011cb8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011cba:	4b35      	ldr	r3, [pc, #212]	; (8011d90 <tcp_listen_input+0x1e0>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	1e5a      	subs	r2, r3, #1
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	691a      	ldr	r2, [r3, #16]
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	7a5b      	ldrb	r3, [r3, #9]
 8011cd6:	f003 030c 	and.w	r3, r3, #12
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	7a1a      	ldrb	r2, [r3, #8]
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011ce8:	4b2e      	ldr	r3, [pc, #184]	; (8011da4 <tcp_listen_input+0x1f4>)
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	60da      	str	r2, [r3, #12]
 8011cf0:	4a2c      	ldr	r2, [pc, #176]	; (8011da4 <tcp_listen_input+0x1f4>)
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	6013      	str	r3, [r2, #0]
 8011cf6:	f003 fd27 	bl	8015748 <tcp_timer_needed>
 8011cfa:	4b2b      	ldr	r3, [pc, #172]	; (8011da8 <tcp_listen_input+0x1f8>)
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011d00:	6978      	ldr	r0, [r7, #20]
 8011d02:	f001 fd8d 	bl	8013820 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011d06:	4b23      	ldr	r3, [pc, #140]	; (8011d94 <tcp_listen_input+0x1e4>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	89db      	ldrh	r3, [r3, #14]
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	3304      	adds	r3, #4
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f007 fb77 	bl	801941c <ip4_route>
 8011d2e:	4601      	mov	r1, r0
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	3304      	adds	r3, #4
 8011d34:	461a      	mov	r2, r3
 8011d36:	4620      	mov	r0, r4
 8011d38:	f7ff fa32 	bl	80111a0 <tcp_eff_send_mss_netif>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011d44:	2112      	movs	r1, #18
 8011d46:	6978      	ldr	r0, [r7, #20]
 8011d48:	f002 fc9a 	bl	8014680 <tcp_enqueue_flags>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d004      	beq.n	8011d62 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011d58:	2100      	movs	r1, #0
 8011d5a:	6978      	ldr	r0, [r7, #20]
 8011d5c:	f7fd ffd4 	bl	800fd08 <tcp_abandon>
      return;
 8011d60:	e006      	b.n	8011d70 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011d62:	6978      	ldr	r0, [r7, #20]
 8011d64:	f002 fd7a 	bl	801485c <tcp_output>
  return;
 8011d68:	e001      	b.n	8011d6e <tcp_listen_input+0x1be>
    return;
 8011d6a:	bf00      	nop
 8011d6c:	e000      	b.n	8011d70 <tcp_listen_input+0x1c0>
  return;
 8011d6e:	bf00      	nop
}
 8011d70:	371c      	adds	r7, #28
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd90      	pop	{r4, r7, pc}
 8011d76:	bf00      	nop
 8011d78:	24009ddc 	.word	0x24009ddc
 8011d7c:	0801db90 	.word	0x0801db90
 8011d80:	0801dd88 	.word	0x0801dd88
 8011d84:	0801dbdc 	.word	0x0801dbdc
 8011d88:	24009dd4 	.word	0x24009dd4
 8011d8c:	24009dda 	.word	0x24009dda
 8011d90:	24009dd0 	.word	0x24009dd0
 8011d94:	24009dc0 	.word	0x24009dc0
 8011d98:	2400a644 	.word	0x2400a644
 8011d9c:	2400a648 	.word	0x2400a648
 8011da0:	2400a634 	.word	0x2400a634
 8011da4:	2400d714 	.word	0x2400d714
 8011da8:	2400d710 	.word	0x2400d710

08011dac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af04      	add	r7, sp, #16
 8011db2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011db4:	4b2f      	ldr	r3, [pc, #188]	; (8011e74 <tcp_timewait_input+0xc8>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	f003 0304 	and.w	r3, r3, #4
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d153      	bne.n	8011e68 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d106      	bne.n	8011dd4 <tcp_timewait_input+0x28>
 8011dc6:	4b2c      	ldr	r3, [pc, #176]	; (8011e78 <tcp_timewait_input+0xcc>)
 8011dc8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011dcc:	492b      	ldr	r1, [pc, #172]	; (8011e7c <tcp_timewait_input+0xd0>)
 8011dce:	482c      	ldr	r0, [pc, #176]	; (8011e80 <tcp_timewait_input+0xd4>)
 8011dd0:	f009 f8a6 	bl	801af20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011dd4:	4b27      	ldr	r3, [pc, #156]	; (8011e74 <tcp_timewait_input+0xc8>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f003 0302 	and.w	r3, r3, #2
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d02a      	beq.n	8011e36 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011de0:	4b28      	ldr	r3, [pc, #160]	; (8011e84 <tcp_timewait_input+0xd8>)
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	db2d      	blt.n	8011e4a <tcp_timewait_input+0x9e>
 8011dee:	4b25      	ldr	r3, [pc, #148]	; (8011e84 <tcp_timewait_input+0xd8>)
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df6:	6879      	ldr	r1, [r7, #4]
 8011df8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011dfa:	440b      	add	r3, r1
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	dc23      	bgt.n	8011e4a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e02:	4b21      	ldr	r3, [pc, #132]	; (8011e88 <tcp_timewait_input+0xdc>)
 8011e04:	6819      	ldr	r1, [r3, #0]
 8011e06:	4b21      	ldr	r3, [pc, #132]	; (8011e8c <tcp_timewait_input+0xe0>)
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	4b1d      	ldr	r3, [pc, #116]	; (8011e84 <tcp_timewait_input+0xd8>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e12:	4b1f      	ldr	r3, [pc, #124]	; (8011e90 <tcp_timewait_input+0xe4>)
 8011e14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e16:	885b      	ldrh	r3, [r3, #2]
 8011e18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e1a:	4a1d      	ldr	r2, [pc, #116]	; (8011e90 <tcp_timewait_input+0xe4>)
 8011e1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e1e:	8812      	ldrh	r2, [r2, #0]
 8011e20:	b292      	uxth	r2, r2
 8011e22:	9202      	str	r2, [sp, #8]
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	4b1b      	ldr	r3, [pc, #108]	; (8011e94 <tcp_timewait_input+0xe8>)
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	4b1b      	ldr	r3, [pc, #108]	; (8011e98 <tcp_timewait_input+0xec>)
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f003 fac8 	bl	80153c4 <tcp_rst>
      return;
 8011e34:	e01b      	b.n	8011e6e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011e36:	4b0f      	ldr	r3, [pc, #60]	; (8011e74 <tcp_timewait_input+0xc8>)
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	f003 0301 	and.w	r3, r3, #1
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d003      	beq.n	8011e4a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011e42:	4b16      	ldr	r3, [pc, #88]	; (8011e9c <tcp_timewait_input+0xf0>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011e4a:	4b10      	ldr	r3, [pc, #64]	; (8011e8c <tcp_timewait_input+0xe0>)
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00c      	beq.n	8011e6c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	8b5b      	ldrh	r3, [r3, #26]
 8011e56:	f043 0302 	orr.w	r3, r3, #2
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f002 fcfb 	bl	801485c <tcp_output>
  }
  return;
 8011e66:	e001      	b.n	8011e6c <tcp_timewait_input+0xc0>
    return;
 8011e68:	bf00      	nop
 8011e6a:	e000      	b.n	8011e6e <tcp_timewait_input+0xc2>
  return;
 8011e6c:	bf00      	nop
}
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	24009ddc 	.word	0x24009ddc
 8011e78:	0801db90 	.word	0x0801db90
 8011e7c:	0801dda8 	.word	0x0801dda8
 8011e80:	0801dbdc 	.word	0x0801dbdc
 8011e84:	24009dd0 	.word	0x24009dd0
 8011e88:	24009dd4 	.word	0x24009dd4
 8011e8c:	24009dda 	.word	0x24009dda
 8011e90:	24009dc0 	.word	0x24009dc0
 8011e94:	2400a644 	.word	0x2400a644
 8011e98:	2400a648 	.word	0x2400a648
 8011e9c:	2400d718 	.word	0x2400d718

08011ea0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011ea0:	b590      	push	{r4, r7, lr}
 8011ea2:	b08d      	sub	sp, #52	; 0x34
 8011ea4:	af04      	add	r7, sp, #16
 8011ea6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_process+0x24>
 8011eb6:	4ba5      	ldr	r3, [pc, #660]	; (801214c <tcp_process+0x2ac>)
 8011eb8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011ebc:	49a4      	ldr	r1, [pc, #656]	; (8012150 <tcp_process+0x2b0>)
 8011ebe:	48a5      	ldr	r0, [pc, #660]	; (8012154 <tcp_process+0x2b4>)
 8011ec0:	f009 f82e 	bl	801af20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011ec4:	4ba4      	ldr	r3, [pc, #656]	; (8012158 <tcp_process+0x2b8>)
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	f003 0304 	and.w	r3, r3, #4
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d04e      	beq.n	8011f6e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7d1b      	ldrb	r3, [r3, #20]
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d108      	bne.n	8011eea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011edc:	4b9f      	ldr	r3, [pc, #636]	; (801215c <tcp_process+0x2bc>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d123      	bne.n	8011f2c <tcp_process+0x8c>
        acceptable = 1;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	76fb      	strb	r3, [r7, #27]
 8011ee8:	e020      	b.n	8011f2c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011eee:	4b9c      	ldr	r3, [pc, #624]	; (8012160 <tcp_process+0x2c0>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d102      	bne.n	8011efc <tcp_process+0x5c>
        acceptable = 1;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	76fb      	strb	r3, [r7, #27]
 8011efa:	e017      	b.n	8011f2c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011efc:	4b98      	ldr	r3, [pc, #608]	; (8012160 <tcp_process+0x2c0>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	db10      	blt.n	8011f2c <tcp_process+0x8c>
 8011f0a:	4b95      	ldr	r3, [pc, #596]	; (8012160 <tcp_process+0x2c0>)
 8011f0c:	681a      	ldr	r2, [r3, #0]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f12:	6879      	ldr	r1, [r7, #4]
 8011f14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f16:	440b      	add	r3, r1
 8011f18:	1ad3      	subs	r3, r2, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	dc06      	bgt.n	8011f2c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	8b5b      	ldrh	r3, [r3, #26]
 8011f22:	f043 0302 	orr.w	r3, r3, #2
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011f2c:	7efb      	ldrb	r3, [r7, #27]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d01b      	beq.n	8011f6a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	7d1b      	ldrb	r3, [r3, #20]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d106      	bne.n	8011f48 <tcp_process+0xa8>
 8011f3a:	4b84      	ldr	r3, [pc, #528]	; (801214c <tcp_process+0x2ac>)
 8011f3c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011f40:	4988      	ldr	r1, [pc, #544]	; (8012164 <tcp_process+0x2c4>)
 8011f42:	4884      	ldr	r0, [pc, #528]	; (8012154 <tcp_process+0x2b4>)
 8011f44:	f008 ffec 	bl	801af20 <iprintf>
      recv_flags |= TF_RESET;
 8011f48:	4b87      	ldr	r3, [pc, #540]	; (8012168 <tcp_process+0x2c8>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	f043 0308 	orr.w	r3, r3, #8
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	4b85      	ldr	r3, [pc, #532]	; (8012168 <tcp_process+0x2c8>)
 8011f54:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	8b5b      	ldrh	r3, [r3, #26]
 8011f5a:	f023 0301 	bic.w	r3, r3, #1
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011f64:	f06f 030d 	mvn.w	r3, #13
 8011f68:	e37a      	b.n	8012660 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e378      	b.n	8012660 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f6e:	4b7a      	ldr	r3, [pc, #488]	; (8012158 <tcp_process+0x2b8>)
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	f003 0302 	and.w	r3, r3, #2
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d010      	beq.n	8011f9c <tcp_process+0xfc>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	7d1b      	ldrb	r3, [r3, #20]
 8011f7e:	2b02      	cmp	r3, #2
 8011f80:	d00c      	beq.n	8011f9c <tcp_process+0xfc>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	2b03      	cmp	r3, #3
 8011f88:	d008      	beq.n	8011f9c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	8b5b      	ldrh	r3, [r3, #26]
 8011f8e:	f043 0302 	orr.w	r3, r3, #2
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	e361      	b.n	8012660 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	8b5b      	ldrh	r3, [r3, #26]
 8011fa0:	f003 0310 	and.w	r3, r3, #16
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d103      	bne.n	8011fb0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011fa8:	4b70      	ldr	r3, [pc, #448]	; (801216c <tcp_process+0x2cc>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f001 fc2d 	bl	8013820 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	7d1b      	ldrb	r3, [r3, #20]
 8011fca:	3b02      	subs	r3, #2
 8011fcc:	2b07      	cmp	r3, #7
 8011fce:	f200 8337 	bhi.w	8012640 <tcp_process+0x7a0>
 8011fd2:	a201      	add	r2, pc, #4	; (adr r2, 8011fd8 <tcp_process+0x138>)
 8011fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd8:	08011ff9 	.word	0x08011ff9
 8011fdc:	08012229 	.word	0x08012229
 8011fe0:	080123a1 	.word	0x080123a1
 8011fe4:	080123cb 	.word	0x080123cb
 8011fe8:	080124ef 	.word	0x080124ef
 8011fec:	080123a1 	.word	0x080123a1
 8011ff0:	0801257b 	.word	0x0801257b
 8011ff4:	0801260b 	.word	0x0801260b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011ff8:	4b57      	ldr	r3, [pc, #348]	; (8012158 <tcp_process+0x2b8>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	f003 0310 	and.w	r3, r3, #16
 8012000:	2b00      	cmp	r3, #0
 8012002:	f000 80e4 	beq.w	80121ce <tcp_process+0x32e>
 8012006:	4b54      	ldr	r3, [pc, #336]	; (8012158 <tcp_process+0x2b8>)
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	f003 0302 	and.w	r3, r3, #2
 801200e:	2b00      	cmp	r3, #0
 8012010:	f000 80dd 	beq.w	80121ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012018:	1c5a      	adds	r2, r3, #1
 801201a:	4b50      	ldr	r3, [pc, #320]	; (801215c <tcp_process+0x2bc>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	429a      	cmp	r2, r3
 8012020:	f040 80d5 	bne.w	80121ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012024:	4b4e      	ldr	r3, [pc, #312]	; (8012160 <tcp_process+0x2c0>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	1c5a      	adds	r2, r3, #1
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012036:	4b49      	ldr	r3, [pc, #292]	; (801215c <tcp_process+0x2bc>)
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801203e:	4b4c      	ldr	r3, [pc, #304]	; (8012170 <tcp_process+0x2d0>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	89db      	ldrh	r3, [r3, #14]
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012058:	4b41      	ldr	r3, [pc, #260]	; (8012160 <tcp_process+0x2c0>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	1e5a      	subs	r2, r3, #1
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2204      	movs	r2, #4
 8012066:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3304      	adds	r3, #4
 8012070:	4618      	mov	r0, r3
 8012072:	f007 f9d3 	bl	801941c <ip4_route>
 8012076:	4601      	mov	r1, r0
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	461a      	mov	r2, r3
 801207e:	4620      	mov	r0, r4
 8012080:	f7ff f88e 	bl	80111a0 <tcp_eff_send_mss_netif>
 8012084:	4603      	mov	r3, r0
 8012086:	461a      	mov	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012090:	009a      	lsls	r2, r3, #2
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	f241 111c 	movw	r1, #4380	; 0x111c
 801209c:	428b      	cmp	r3, r1
 801209e:	bf38      	it	cc
 80120a0:	460b      	movcc	r3, r1
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d204      	bcs.n	80120b0 <tcp_process+0x210>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	e00d      	b.n	80120cc <tcp_process+0x22c>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d904      	bls.n	80120c8 <tcp_process+0x228>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	e001      	b.n	80120cc <tcp_process+0x22c>
 80120c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d106      	bne.n	80120ea <tcp_process+0x24a>
 80120dc:	4b1b      	ldr	r3, [pc, #108]	; (801214c <tcp_process+0x2ac>)
 80120de:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80120e2:	4924      	ldr	r1, [pc, #144]	; (8012174 <tcp_process+0x2d4>)
 80120e4:	481b      	ldr	r0, [pc, #108]	; (8012154 <tcp_process+0x2b4>)
 80120e6:	f008 ff1b 	bl	801af20 <iprintf>
        --pcb->snd_queuelen;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120f0:	3b01      	subs	r3, #1
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d111      	bne.n	801212a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801210a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <tcp_process+0x280>
 8012112:	4b0e      	ldr	r3, [pc, #56]	; (801214c <tcp_process+0x2ac>)
 8012114:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012118:	4917      	ldr	r1, [pc, #92]	; (8012178 <tcp_process+0x2d8>)
 801211a:	480e      	ldr	r0, [pc, #56]	; (8012154 <tcp_process+0x2b4>)
 801211c:	f008 ff00 	bl	801af20 <iprintf>
          pcb->unsent = rseg->next;
 8012120:	69fb      	ldr	r3, [r7, #28]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	66da      	str	r2, [r3, #108]	; 0x6c
 8012128:	e003      	b.n	8012132 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012132:	69f8      	ldr	r0, [r7, #28]
 8012134:	f7fe fc6f 	bl	8010a16 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801213c:	2b00      	cmp	r3, #0
 801213e:	d11d      	bne.n	801217c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012146:	861a      	strh	r2, [r3, #48]	; 0x30
 8012148:	e01f      	b.n	801218a <tcp_process+0x2ea>
 801214a:	bf00      	nop
 801214c:	0801db90 	.word	0x0801db90
 8012150:	0801ddc8 	.word	0x0801ddc8
 8012154:	0801dbdc 	.word	0x0801dbdc
 8012158:	24009ddc 	.word	0x24009ddc
 801215c:	24009dd4 	.word	0x24009dd4
 8012160:	24009dd0 	.word	0x24009dd0
 8012164:	0801dde4 	.word	0x0801dde4
 8012168:	24009ddd 	.word	0x24009ddd
 801216c:	2400d718 	.word	0x2400d718
 8012170:	24009dc0 	.word	0x24009dc0
 8012174:	0801de04 	.word	0x0801de04
 8012178:	0801de1c 	.word	0x0801de1c
        } else {
          pcb->rtime = 0;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00a      	beq.n	80121aa <tcp_process+0x30a>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	6910      	ldr	r0, [r2, #16]
 801219e:	2200      	movs	r2, #0
 80121a0:	6879      	ldr	r1, [r7, #4]
 80121a2:	4798      	blx	r3
 80121a4:	4603      	mov	r3, r0
 80121a6:	76bb      	strb	r3, [r7, #26]
 80121a8:	e001      	b.n	80121ae <tcp_process+0x30e>
 80121aa:	2300      	movs	r3, #0
 80121ac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80121ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121b2:	f113 0f0d 	cmn.w	r3, #13
 80121b6:	d102      	bne.n	80121be <tcp_process+0x31e>
          return ERR_ABRT;
 80121b8:	f06f 030c 	mvn.w	r3, #12
 80121bc:	e250      	b.n	8012660 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	8b5b      	ldrh	r3, [r3, #26]
 80121c2:	f043 0302 	orr.w	r3, r3, #2
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80121cc:	e23a      	b.n	8012644 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80121ce:	4b9d      	ldr	r3, [pc, #628]	; (8012444 <tcp_process+0x5a4>)
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	f003 0310 	and.w	r3, r3, #16
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f000 8234 	beq.w	8012644 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121dc:	4b9a      	ldr	r3, [pc, #616]	; (8012448 <tcp_process+0x5a8>)
 80121de:	6819      	ldr	r1, [r3, #0]
 80121e0:	4b9a      	ldr	r3, [pc, #616]	; (801244c <tcp_process+0x5ac>)
 80121e2:	881b      	ldrh	r3, [r3, #0]
 80121e4:	461a      	mov	r2, r3
 80121e6:	4b9a      	ldr	r3, [pc, #616]	; (8012450 <tcp_process+0x5b0>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121ec:	4b99      	ldr	r3, [pc, #612]	; (8012454 <tcp_process+0x5b4>)
 80121ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121f0:	885b      	ldrh	r3, [r3, #2]
 80121f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121f4:	4a97      	ldr	r2, [pc, #604]	; (8012454 <tcp_process+0x5b4>)
 80121f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121f8:	8812      	ldrh	r2, [r2, #0]
 80121fa:	b292      	uxth	r2, r2
 80121fc:	9202      	str	r2, [sp, #8]
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	4b95      	ldr	r3, [pc, #596]	; (8012458 <tcp_process+0x5b8>)
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4b95      	ldr	r3, [pc, #596]	; (801245c <tcp_process+0x5bc>)
 8012206:	4602      	mov	r2, r0
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f003 f8db 	bl	80153c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012214:	2b05      	cmp	r3, #5
 8012216:	f200 8215 	bhi.w	8012644 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f002 fea5 	bl	8014f70 <tcp_rexmit_rto>
      break;
 8012226:	e20d      	b.n	8012644 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012228:	4b86      	ldr	r3, [pc, #536]	; (8012444 <tcp_process+0x5a4>)
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	f003 0310 	and.w	r3, r3, #16
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 80a1 	beq.w	8012378 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012236:	4b84      	ldr	r3, [pc, #528]	; (8012448 <tcp_process+0x5a8>)
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	3b01      	subs	r3, #1
 8012242:	2b00      	cmp	r3, #0
 8012244:	db7e      	blt.n	8012344 <tcp_process+0x4a4>
 8012246:	4b80      	ldr	r3, [pc, #512]	; (8012448 <tcp_process+0x5a8>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	2b00      	cmp	r3, #0
 8012252:	dc77      	bgt.n	8012344 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2204      	movs	r2, #4
 8012258:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801225e:	2b00      	cmp	r3, #0
 8012260:	d102      	bne.n	8012268 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012262:	23fa      	movs	r3, #250	; 0xfa
 8012264:	76bb      	strb	r3, [r7, #26]
 8012266:	e01d      	b.n	80122a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801226c:	699b      	ldr	r3, [r3, #24]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d106      	bne.n	8012280 <tcp_process+0x3e0>
 8012272:	4b7b      	ldr	r3, [pc, #492]	; (8012460 <tcp_process+0x5c0>)
 8012274:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012278:	497a      	ldr	r1, [pc, #488]	; (8012464 <tcp_process+0x5c4>)
 801227a:	487b      	ldr	r0, [pc, #492]	; (8012468 <tcp_process+0x5c8>)
 801227c:	f008 fe50 	bl	801af20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00a      	beq.n	80122a0 <tcp_process+0x400>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801228e:	699b      	ldr	r3, [r3, #24]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	6910      	ldr	r0, [r2, #16]
 8012294:	2200      	movs	r2, #0
 8012296:	6879      	ldr	r1, [r7, #4]
 8012298:	4798      	blx	r3
 801229a:	4603      	mov	r3, r0
 801229c:	76bb      	strb	r3, [r7, #26]
 801229e:	e001      	b.n	80122a4 <tcp_process+0x404>
 80122a0:	23f0      	movs	r3, #240	; 0xf0
 80122a2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80122a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00a      	beq.n	80122c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80122ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80122b0:	f113 0f0d 	cmn.w	r3, #13
 80122b4:	d002      	beq.n	80122bc <tcp_process+0x41c>
              tcp_abort(pcb);
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7fd fde4 	bl	800fe84 <tcp_abort>
            }
            return ERR_ABRT;
 80122bc:	f06f 030c 	mvn.w	r3, #12
 80122c0:	e1ce      	b.n	8012660 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 fae0 	bl	8012888 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80122c8:	4b68      	ldr	r3, [pc, #416]	; (801246c <tcp_process+0x5cc>)
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d005      	beq.n	80122dc <tcp_process+0x43c>
            recv_acked--;
 80122d0:	4b66      	ldr	r3, [pc, #408]	; (801246c <tcp_process+0x5cc>)
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	4b64      	ldr	r3, [pc, #400]	; (801246c <tcp_process+0x5cc>)
 80122da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122e0:	009a      	lsls	r2, r3, #2
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122e6:	005b      	lsls	r3, r3, #1
 80122e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80122ec:	428b      	cmp	r3, r1
 80122ee:	bf38      	it	cc
 80122f0:	460b      	movcc	r3, r1
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d204      	bcs.n	8012300 <tcp_process+0x460>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	e00d      	b.n	801231c <tcp_process+0x47c>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012304:	005b      	lsls	r3, r3, #1
 8012306:	f241 121c 	movw	r2, #4380	; 0x111c
 801230a:	4293      	cmp	r3, r2
 801230c:	d904      	bls.n	8012318 <tcp_process+0x478>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	b29b      	uxth	r3, r3
 8012316:	e001      	b.n	801231c <tcp_process+0x47c>
 8012318:	f241 131c 	movw	r3, #4380	; 0x111c
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012322:	4b53      	ldr	r3, [pc, #332]	; (8012470 <tcp_process+0x5d0>)
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	f003 0320 	and.w	r3, r3, #32
 801232a:	2b00      	cmp	r3, #0
 801232c:	d037      	beq.n	801239e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	8b5b      	ldrh	r3, [r3, #26]
 8012332:	f043 0302 	orr.w	r3, r3, #2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2207      	movs	r2, #7
 8012340:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012342:	e02c      	b.n	801239e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012344:	4b40      	ldr	r3, [pc, #256]	; (8012448 <tcp_process+0x5a8>)
 8012346:	6819      	ldr	r1, [r3, #0]
 8012348:	4b40      	ldr	r3, [pc, #256]	; (801244c <tcp_process+0x5ac>)
 801234a:	881b      	ldrh	r3, [r3, #0]
 801234c:	461a      	mov	r2, r3
 801234e:	4b40      	ldr	r3, [pc, #256]	; (8012450 <tcp_process+0x5b0>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012354:	4b3f      	ldr	r3, [pc, #252]	; (8012454 <tcp_process+0x5b4>)
 8012356:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012358:	885b      	ldrh	r3, [r3, #2]
 801235a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801235c:	4a3d      	ldr	r2, [pc, #244]	; (8012454 <tcp_process+0x5b4>)
 801235e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012360:	8812      	ldrh	r2, [r2, #0]
 8012362:	b292      	uxth	r2, r2
 8012364:	9202      	str	r2, [sp, #8]
 8012366:	9301      	str	r3, [sp, #4]
 8012368:	4b3b      	ldr	r3, [pc, #236]	; (8012458 <tcp_process+0x5b8>)
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	4b3b      	ldr	r3, [pc, #236]	; (801245c <tcp_process+0x5bc>)
 801236e:	4602      	mov	r2, r0
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f003 f827 	bl	80153c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012376:	e167      	b.n	8012648 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012378:	4b32      	ldr	r3, [pc, #200]	; (8012444 <tcp_process+0x5a4>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	f003 0302 	and.w	r3, r3, #2
 8012380:	2b00      	cmp	r3, #0
 8012382:	f000 8161 	beq.w	8012648 <tcp_process+0x7a8>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238a:	1e5a      	subs	r2, r3, #1
 801238c:	4b30      	ldr	r3, [pc, #192]	; (8012450 <tcp_process+0x5b0>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	429a      	cmp	r2, r3
 8012392:	f040 8159 	bne.w	8012648 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f002 fe0c 	bl	8014fb4 <tcp_rexmit>
      break;
 801239c:	e154      	b.n	8012648 <tcp_process+0x7a8>
 801239e:	e153      	b.n	8012648 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f000 fa71 	bl	8012888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80123a6:	4b32      	ldr	r3, [pc, #200]	; (8012470 <tcp_process+0x5d0>)
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	f003 0320 	and.w	r3, r3, #32
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f000 814c 	beq.w	801264c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	8b5b      	ldrh	r3, [r3, #26]
 80123b8:	f043 0302 	orr.w	r3, r3, #2
 80123bc:	b29a      	uxth	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2207      	movs	r2, #7
 80123c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80123c8:	e140      	b.n	801264c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fa5c 	bl	8012888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80123d0:	4b27      	ldr	r3, [pc, #156]	; (8012470 <tcp_process+0x5d0>)
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 0320 	and.w	r3, r3, #32
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d071      	beq.n	80124c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123dc:	4b19      	ldr	r3, [pc, #100]	; (8012444 <tcp_process+0x5a4>)
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	f003 0310 	and.w	r3, r3, #16
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d060      	beq.n	80124aa <tcp_process+0x60a>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123ec:	4b16      	ldr	r3, [pc, #88]	; (8012448 <tcp_process+0x5a8>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d15a      	bne.n	80124aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d156      	bne.n	80124aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	8b5b      	ldrh	r3, [r3, #26]
 8012400:	f043 0302 	orr.w	r3, r3, #2
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7fe fdbe 	bl	8010f8c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012410:	4b18      	ldr	r3, [pc, #96]	; (8012474 <tcp_process+0x5d4>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	429a      	cmp	r2, r3
 8012418:	d105      	bne.n	8012426 <tcp_process+0x586>
 801241a:	4b16      	ldr	r3, [pc, #88]	; (8012474 <tcp_process+0x5d4>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	4a14      	ldr	r2, [pc, #80]	; (8012474 <tcp_process+0x5d4>)
 8012422:	6013      	str	r3, [r2, #0]
 8012424:	e02e      	b.n	8012484 <tcp_process+0x5e4>
 8012426:	4b13      	ldr	r3, [pc, #76]	; (8012474 <tcp_process+0x5d4>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	617b      	str	r3, [r7, #20]
 801242c:	e027      	b.n	801247e <tcp_process+0x5de>
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	429a      	cmp	r2, r3
 8012436:	d11f      	bne.n	8012478 <tcp_process+0x5d8>
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	68da      	ldr	r2, [r3, #12]
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	60da      	str	r2, [r3, #12]
 8012440:	e020      	b.n	8012484 <tcp_process+0x5e4>
 8012442:	bf00      	nop
 8012444:	24009ddc 	.word	0x24009ddc
 8012448:	24009dd4 	.word	0x24009dd4
 801244c:	24009dda 	.word	0x24009dda
 8012450:	24009dd0 	.word	0x24009dd0
 8012454:	24009dc0 	.word	0x24009dc0
 8012458:	2400a644 	.word	0x2400a644
 801245c:	2400a648 	.word	0x2400a648
 8012460:	0801db90 	.word	0x0801db90
 8012464:	0801de30 	.word	0x0801de30
 8012468:	0801dbdc 	.word	0x0801dbdc
 801246c:	24009dd8 	.word	0x24009dd8
 8012470:	24009ddd 	.word	0x24009ddd
 8012474:	2400d714 	.word	0x2400d714
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	617b      	str	r3, [r7, #20]
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1d4      	bne.n	801242e <tcp_process+0x58e>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	60da      	str	r2, [r3, #12]
 801248a:	4b77      	ldr	r3, [pc, #476]	; (8012668 <tcp_process+0x7c8>)
 801248c:	2201      	movs	r2, #1
 801248e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	220a      	movs	r2, #10
 8012494:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012496:	4b75      	ldr	r3, [pc, #468]	; (801266c <tcp_process+0x7cc>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	60da      	str	r2, [r3, #12]
 801249e:	4a73      	ldr	r2, [pc, #460]	; (801266c <tcp_process+0x7cc>)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6013      	str	r3, [r2, #0]
 80124a4:	f003 f950 	bl	8015748 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80124a8:	e0d2      	b.n	8012650 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	8b5b      	ldrh	r3, [r3, #26]
 80124ae:	f043 0302 	orr.w	r3, r3, #2
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2208      	movs	r2, #8
 80124bc:	751a      	strb	r2, [r3, #20]
      break;
 80124be:	e0c7      	b.n	8012650 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124c0:	4b6b      	ldr	r3, [pc, #428]	; (8012670 <tcp_process+0x7d0>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	f003 0310 	and.w	r3, r3, #16
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	f000 80c1 	beq.w	8012650 <tcp_process+0x7b0>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124d2:	4b68      	ldr	r3, [pc, #416]	; (8012674 <tcp_process+0x7d4>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	f040 80ba 	bne.w	8012650 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f040 80b5 	bne.w	8012650 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2206      	movs	r2, #6
 80124ea:	751a      	strb	r2, [r3, #20]
      break;
 80124ec:	e0b0      	b.n	8012650 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f9ca 	bl	8012888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80124f4:	4b60      	ldr	r3, [pc, #384]	; (8012678 <tcp_process+0x7d8>)
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	f003 0320 	and.w	r3, r3, #32
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 80a9 	beq.w	8012654 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8b5b      	ldrh	r3, [r3, #26]
 8012506:	f043 0302 	orr.w	r3, r3, #2
 801250a:	b29a      	uxth	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7fe fd3b 	bl	8010f8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012516:	4b59      	ldr	r3, [pc, #356]	; (801267c <tcp_process+0x7dc>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	429a      	cmp	r2, r3
 801251e:	d105      	bne.n	801252c <tcp_process+0x68c>
 8012520:	4b56      	ldr	r3, [pc, #344]	; (801267c <tcp_process+0x7dc>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	4a55      	ldr	r2, [pc, #340]	; (801267c <tcp_process+0x7dc>)
 8012528:	6013      	str	r3, [r2, #0]
 801252a:	e013      	b.n	8012554 <tcp_process+0x6b4>
 801252c:	4b53      	ldr	r3, [pc, #332]	; (801267c <tcp_process+0x7dc>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	613b      	str	r3, [r7, #16]
 8012532:	e00c      	b.n	801254e <tcp_process+0x6ae>
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	429a      	cmp	r2, r3
 801253c:	d104      	bne.n	8012548 <tcp_process+0x6a8>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	68da      	ldr	r2, [r3, #12]
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	60da      	str	r2, [r3, #12]
 8012546:	e005      	b.n	8012554 <tcp_process+0x6b4>
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	613b      	str	r3, [r7, #16]
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1ef      	bne.n	8012534 <tcp_process+0x694>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2200      	movs	r2, #0
 8012558:	60da      	str	r2, [r3, #12]
 801255a:	4b43      	ldr	r3, [pc, #268]	; (8012668 <tcp_process+0x7c8>)
 801255c:	2201      	movs	r2, #1
 801255e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	220a      	movs	r2, #10
 8012564:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012566:	4b41      	ldr	r3, [pc, #260]	; (801266c <tcp_process+0x7cc>)
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	60da      	str	r2, [r3, #12]
 801256e:	4a3f      	ldr	r2, [pc, #252]	; (801266c <tcp_process+0x7cc>)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6013      	str	r3, [r2, #0]
 8012574:	f003 f8e8 	bl	8015748 <tcp_timer_needed>
      }
      break;
 8012578:	e06c      	b.n	8012654 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f984 	bl	8012888 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012580:	4b3b      	ldr	r3, [pc, #236]	; (8012670 <tcp_process+0x7d0>)
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	f003 0310 	and.w	r3, r3, #16
 8012588:	2b00      	cmp	r3, #0
 801258a:	d065      	beq.n	8012658 <tcp_process+0x7b8>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012590:	4b38      	ldr	r3, [pc, #224]	; (8012674 <tcp_process+0x7d4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	429a      	cmp	r2, r3
 8012596:	d15f      	bne.n	8012658 <tcp_process+0x7b8>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801259c:	2b00      	cmp	r3, #0
 801259e:	d15b      	bne.n	8012658 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7fe fcf3 	bl	8010f8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80125a6:	4b35      	ldr	r3, [pc, #212]	; (801267c <tcp_process+0x7dc>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d105      	bne.n	80125bc <tcp_process+0x71c>
 80125b0:	4b32      	ldr	r3, [pc, #200]	; (801267c <tcp_process+0x7dc>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	4a31      	ldr	r2, [pc, #196]	; (801267c <tcp_process+0x7dc>)
 80125b8:	6013      	str	r3, [r2, #0]
 80125ba:	e013      	b.n	80125e4 <tcp_process+0x744>
 80125bc:	4b2f      	ldr	r3, [pc, #188]	; (801267c <tcp_process+0x7dc>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	60fb      	str	r3, [r7, #12]
 80125c2:	e00c      	b.n	80125de <tcp_process+0x73e>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d104      	bne.n	80125d8 <tcp_process+0x738>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	68da      	ldr	r2, [r3, #12]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	60da      	str	r2, [r3, #12]
 80125d6:	e005      	b.n	80125e4 <tcp_process+0x744>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	60fb      	str	r3, [r7, #12]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d1ef      	bne.n	80125c4 <tcp_process+0x724>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	60da      	str	r2, [r3, #12]
 80125ea:	4b1f      	ldr	r3, [pc, #124]	; (8012668 <tcp_process+0x7c8>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	220a      	movs	r2, #10
 80125f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80125f6:	4b1d      	ldr	r3, [pc, #116]	; (801266c <tcp_process+0x7cc>)
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	60da      	str	r2, [r3, #12]
 80125fe:	4a1b      	ldr	r2, [pc, #108]	; (801266c <tcp_process+0x7cc>)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6013      	str	r3, [r2, #0]
 8012604:	f003 f8a0 	bl	8015748 <tcp_timer_needed>
      }
      break;
 8012608:	e026      	b.n	8012658 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f93c 	bl	8012888 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012610:	4b17      	ldr	r3, [pc, #92]	; (8012670 <tcp_process+0x7d0>)
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	f003 0310 	and.w	r3, r3, #16
 8012618:	2b00      	cmp	r3, #0
 801261a:	d01f      	beq.n	801265c <tcp_process+0x7bc>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012620:	4b14      	ldr	r3, [pc, #80]	; (8012674 <tcp_process+0x7d4>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	429a      	cmp	r2, r3
 8012626:	d119      	bne.n	801265c <tcp_process+0x7bc>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262c:	2b00      	cmp	r3, #0
 801262e:	d115      	bne.n	801265c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012630:	4b11      	ldr	r3, [pc, #68]	; (8012678 <tcp_process+0x7d8>)
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	f043 0310 	orr.w	r3, r3, #16
 8012638:	b2da      	uxtb	r2, r3
 801263a:	4b0f      	ldr	r3, [pc, #60]	; (8012678 <tcp_process+0x7d8>)
 801263c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801263e:	e00d      	b.n	801265c <tcp_process+0x7bc>
    default:
      break;
 8012640:	bf00      	nop
 8012642:	e00c      	b.n	801265e <tcp_process+0x7be>
      break;
 8012644:	bf00      	nop
 8012646:	e00a      	b.n	801265e <tcp_process+0x7be>
      break;
 8012648:	bf00      	nop
 801264a:	e008      	b.n	801265e <tcp_process+0x7be>
      break;
 801264c:	bf00      	nop
 801264e:	e006      	b.n	801265e <tcp_process+0x7be>
      break;
 8012650:	bf00      	nop
 8012652:	e004      	b.n	801265e <tcp_process+0x7be>
      break;
 8012654:	bf00      	nop
 8012656:	e002      	b.n	801265e <tcp_process+0x7be>
      break;
 8012658:	bf00      	nop
 801265a:	e000      	b.n	801265e <tcp_process+0x7be>
      break;
 801265c:	bf00      	nop
  }
  return ERR_OK;
 801265e:	2300      	movs	r3, #0
}
 8012660:	4618      	mov	r0, r3
 8012662:	3724      	adds	r7, #36	; 0x24
 8012664:	46bd      	mov	sp, r7
 8012666:	bd90      	pop	{r4, r7, pc}
 8012668:	2400d710 	.word	0x2400d710
 801266c:	2400d724 	.word	0x2400d724
 8012670:	24009ddc 	.word	0x24009ddc
 8012674:	24009dd4 	.word	0x24009dd4
 8012678:	24009ddd 	.word	0x24009ddd
 801267c:	2400d714 	.word	0x2400d714

08012680 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012680:	b590      	push	{r4, r7, lr}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d106      	bne.n	801269e <tcp_oos_insert_segment+0x1e>
 8012690:	4b3b      	ldr	r3, [pc, #236]	; (8012780 <tcp_oos_insert_segment+0x100>)
 8012692:	f240 421f 	movw	r2, #1055	; 0x41f
 8012696:	493b      	ldr	r1, [pc, #236]	; (8012784 <tcp_oos_insert_segment+0x104>)
 8012698:	483b      	ldr	r0, [pc, #236]	; (8012788 <tcp_oos_insert_segment+0x108>)
 801269a:	f008 fc41 	bl	801af20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	899b      	ldrh	r3, [r3, #12]
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fb f936 	bl	800d918 <lwip_htons>
 80126ac:	4603      	mov	r3, r0
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	f003 0301 	and.w	r3, r3, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d028      	beq.n	801270a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80126b8:	6838      	ldr	r0, [r7, #0]
 80126ba:	f7fe f997 	bl	80109ec <tcp_segs_free>
    next = NULL;
 80126be:	2300      	movs	r3, #0
 80126c0:	603b      	str	r3, [r7, #0]
 80126c2:	e056      	b.n	8012772 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	899b      	ldrh	r3, [r3, #12]
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7fb f923 	bl	800d918 <lwip_htons>
 80126d2:	4603      	mov	r3, r0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	f003 0301 	and.w	r3, r3, #1
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00d      	beq.n	80126fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	899b      	ldrh	r3, [r3, #12]
 80126e4:	b29c      	uxth	r4, r3
 80126e6:	2001      	movs	r0, #1
 80126e8:	f7fb f916 	bl	800d918 <lwip_htons>
 80126ec:	4603      	mov	r3, r0
 80126ee:	461a      	mov	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	4322      	orrs	r2, r4
 80126f6:	b292      	uxth	r2, r2
 80126f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f7fe f986 	bl	8010a16 <tcp_seg_free>
    while (next &&
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00e      	beq.n	801272e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	891b      	ldrh	r3, [r3, #8]
 8012714:	461a      	mov	r2, r3
 8012716:	4b1d      	ldr	r3, [pc, #116]	; (801278c <tcp_oos_insert_segment+0x10c>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	441a      	add	r2, r3
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	6839      	ldr	r1, [r7, #0]
 8012724:	8909      	ldrh	r1, [r1, #8]
 8012726:	440b      	add	r3, r1
 8012728:	1ad3      	subs	r3, r2, r3
    while (next &&
 801272a:	2b00      	cmp	r3, #0
 801272c:	daca      	bge.n	80126c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d01e      	beq.n	8012772 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	891b      	ldrh	r3, [r3, #8]
 8012738:	461a      	mov	r2, r3
 801273a:	4b14      	ldr	r3, [pc, #80]	; (801278c <tcp_oos_insert_segment+0x10c>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	441a      	add	r2, r3
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012748:	2b00      	cmp	r3, #0
 801274a:	dd12      	ble.n	8012772 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	b29a      	uxth	r2, r3
 8012754:	4b0d      	ldr	r3, [pc, #52]	; (801278c <tcp_oos_insert_segment+0x10c>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	b29b      	uxth	r3, r3
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	b29a      	uxth	r2, r3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	685a      	ldr	r2, [r3, #4]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	891b      	ldrh	r3, [r3, #8]
 801276a:	4619      	mov	r1, r3
 801276c:	4610      	mov	r0, r2
 801276e:	f7fc fc03 	bl	800ef78 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	683a      	ldr	r2, [r7, #0]
 8012776:	601a      	str	r2, [r3, #0]
}
 8012778:	bf00      	nop
 801277a:	3714      	adds	r7, #20
 801277c:	46bd      	mov	sp, r7
 801277e:	bd90      	pop	{r4, r7, pc}
 8012780:	0801db90 	.word	0x0801db90
 8012784:	0801de50 	.word	0x0801de50
 8012788:	0801dbdc 	.word	0x0801dbdc
 801278c:	24009dd0 	.word	0x24009dd0

08012790 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012790:	b5b0      	push	{r4, r5, r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801279e:	e03e      	b.n	801281e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fc fdf6 	bl	800f3a0 <pbuf_clen>
 80127b4:	4603      	mov	r3, r0
 80127b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127be:	8a7a      	ldrh	r2, [r7, #18]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d906      	bls.n	80127d2 <tcp_free_acked_segments+0x42>
 80127c4:	4b2a      	ldr	r3, [pc, #168]	; (8012870 <tcp_free_acked_segments+0xe0>)
 80127c6:	f240 4257 	movw	r2, #1111	; 0x457
 80127ca:	492a      	ldr	r1, [pc, #168]	; (8012874 <tcp_free_acked_segments+0xe4>)
 80127cc:	482a      	ldr	r0, [pc, #168]	; (8012878 <tcp_free_acked_segments+0xe8>)
 80127ce:	f008 fba7 	bl	801af20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80127d8:	8a7b      	ldrh	r3, [r7, #18]
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	b29a      	uxth	r2, r3
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	891a      	ldrh	r2, [r3, #8]
 80127e8:	4b24      	ldr	r3, [pc, #144]	; (801287c <tcp_free_acked_segments+0xec>)
 80127ea:	881b      	ldrh	r3, [r3, #0]
 80127ec:	4413      	add	r3, r2
 80127ee:	b29a      	uxth	r2, r3
 80127f0:	4b22      	ldr	r3, [pc, #136]	; (801287c <tcp_free_acked_segments+0xec>)
 80127f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80127f4:	6978      	ldr	r0, [r7, #20]
 80127f6:	f7fe f90e 	bl	8010a16 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00c      	beq.n	801281e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d109      	bne.n	801281e <tcp_free_acked_segments+0x8e>
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d106      	bne.n	801281e <tcp_free_acked_segments+0x8e>
 8012810:	4b17      	ldr	r3, [pc, #92]	; (8012870 <tcp_free_acked_segments+0xe0>)
 8012812:	f240 4261 	movw	r2, #1121	; 0x461
 8012816:	491a      	ldr	r1, [pc, #104]	; (8012880 <tcp_free_acked_segments+0xf0>)
 8012818:	4817      	ldr	r0, [pc, #92]	; (8012878 <tcp_free_acked_segments+0xe8>)
 801281a:	f008 fb81 	bl	801af20 <iprintf>
  while (seg_list != NULL &&
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d020      	beq.n	8012866 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	4618      	mov	r0, r3
 801282c:	f7fb f889 	bl	800d942 <lwip_htonl>
 8012830:	4604      	mov	r4, r0
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	891b      	ldrh	r3, [r3, #8]
 8012836:	461d      	mov	r5, r3
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	899b      	ldrh	r3, [r3, #12]
 801283e:	b29b      	uxth	r3, r3
 8012840:	4618      	mov	r0, r3
 8012842:	f7fb f869 	bl	800d918 <lwip_htons>
 8012846:	4603      	mov	r3, r0
 8012848:	b2db      	uxtb	r3, r3
 801284a:	f003 0303 	and.w	r3, r3, #3
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <tcp_free_acked_segments+0xc6>
 8012852:	2301      	movs	r3, #1
 8012854:	e000      	b.n	8012858 <tcp_free_acked_segments+0xc8>
 8012856:	2300      	movs	r3, #0
 8012858:	442b      	add	r3, r5
 801285a:	18e2      	adds	r2, r4, r3
 801285c:	4b09      	ldr	r3, [pc, #36]	; (8012884 <tcp_free_acked_segments+0xf4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012862:	2b00      	cmp	r3, #0
 8012864:	dd9c      	ble.n	80127a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012866:	68bb      	ldr	r3, [r7, #8]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bdb0      	pop	{r4, r5, r7, pc}
 8012870:	0801db90 	.word	0x0801db90
 8012874:	0801de78 	.word	0x0801de78
 8012878:	0801dbdc 	.word	0x0801dbdc
 801287c:	24009dd8 	.word	0x24009dd8
 8012880:	0801dea0 	.word	0x0801dea0
 8012884:	24009dd4 	.word	0x24009dd4

08012888 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012888:	b5b0      	push	{r4, r5, r7, lr}
 801288a:	b094      	sub	sp, #80	; 0x50
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d106      	bne.n	80128a8 <tcp_receive+0x20>
 801289a:	4ba6      	ldr	r3, [pc, #664]	; (8012b34 <tcp_receive+0x2ac>)
 801289c:	f240 427b 	movw	r2, #1147	; 0x47b
 80128a0:	49a5      	ldr	r1, [pc, #660]	; (8012b38 <tcp_receive+0x2b0>)
 80128a2:	48a6      	ldr	r0, [pc, #664]	; (8012b3c <tcp_receive+0x2b4>)
 80128a4:	f008 fb3c 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	7d1b      	ldrb	r3, [r3, #20]
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d806      	bhi.n	80128be <tcp_receive+0x36>
 80128b0:	4ba0      	ldr	r3, [pc, #640]	; (8012b34 <tcp_receive+0x2ac>)
 80128b2:	f240 427c 	movw	r2, #1148	; 0x47c
 80128b6:	49a2      	ldr	r1, [pc, #648]	; (8012b40 <tcp_receive+0x2b8>)
 80128b8:	48a0      	ldr	r0, [pc, #640]	; (8012b3c <tcp_receive+0x2b4>)
 80128ba:	f008 fb31 	bl	801af20 <iprintf>

  if (flags & TCP_ACK) {
 80128be:	4ba1      	ldr	r3, [pc, #644]	; (8012b44 <tcp_receive+0x2bc>)
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	f003 0310 	and.w	r3, r3, #16
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 8263 	beq.w	8012d92 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128d2:	461a      	mov	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128d8:	4413      	add	r3, r2
 80128da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128e0:	4b99      	ldr	r3, [pc, #612]	; (8012b48 <tcp_receive+0x2c0>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	1ad3      	subs	r3, r2, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	db1b      	blt.n	8012922 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128ee:	4b96      	ldr	r3, [pc, #600]	; (8012b48 <tcp_receive+0x2c0>)
 80128f0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d106      	bne.n	8012904 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80128fa:	4b94      	ldr	r3, [pc, #592]	; (8012b4c <tcp_receive+0x2c4>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	2b00      	cmp	r3, #0
 8012902:	db0e      	blt.n	8012922 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012908:	4b90      	ldr	r3, [pc, #576]	; (8012b4c <tcp_receive+0x2c4>)
 801290a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801290c:	429a      	cmp	r2, r3
 801290e:	d125      	bne.n	801295c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012910:	4b8f      	ldr	r3, [pc, #572]	; (8012b50 <tcp_receive+0x2c8>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	89db      	ldrh	r3, [r3, #14]
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801291e:	429a      	cmp	r2, r3
 8012920:	d91c      	bls.n	801295c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012922:	4b8b      	ldr	r3, [pc, #556]	; (8012b50 <tcp_receive+0x2c8>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	89db      	ldrh	r3, [r3, #14]
 8012928:	b29a      	uxth	r2, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801293c:	429a      	cmp	r2, r3
 801293e:	d205      	bcs.n	801294c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801294c:	4b7e      	ldr	r3, [pc, #504]	; (8012b48 <tcp_receive+0x2c0>)
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012954:	4b7d      	ldr	r3, [pc, #500]	; (8012b4c <tcp_receive+0x2c4>)
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801295c:	4b7b      	ldr	r3, [pc, #492]	; (8012b4c <tcp_receive+0x2c4>)
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012964:	1ad3      	subs	r3, r2, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	dc58      	bgt.n	8012a1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801296a:	4b7a      	ldr	r3, [pc, #488]	; (8012b54 <tcp_receive+0x2cc>)
 801296c:	881b      	ldrh	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d14b      	bne.n	8012a0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801297c:	4413      	add	r3, r2
 801297e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012980:	429a      	cmp	r2, r3
 8012982:	d142      	bne.n	8012a0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801298a:	2b00      	cmp	r3, #0
 801298c:	db3d      	blt.n	8012a0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012992:	4b6e      	ldr	r3, [pc, #440]	; (8012b4c <tcp_receive+0x2c4>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d137      	bne.n	8012a0a <tcp_receive+0x182>
              found_dupack = 1;
 801299a:	2301      	movs	r3, #1
 801299c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129a4:	2bff      	cmp	r3, #255	; 0xff
 80129a6:	d007      	beq.n	80129b8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129ae:	3301      	adds	r3, #1
 80129b0:	b2da      	uxtb	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129be:	2b03      	cmp	r3, #3
 80129c0:	d91b      	bls.n	80129fa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129cc:	4413      	add	r3, r2
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d30a      	bcc.n	80129f0 <tcp_receive+0x168>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e4:	4413      	add	r3, r2
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80129ee:	e004      	b.n	80129fa <tcp_receive+0x172>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	d902      	bls.n	8012a0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f002 fb41 	bl	801508c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f040 8160 	bne.w	8012cd2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2200      	movs	r2, #0
 8012a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012a1a:	e15a      	b.n	8012cd2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012a1c:	4b4b      	ldr	r3, [pc, #300]	; (8012b4c <tcp_receive+0x2c4>)
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a24:	1ad3      	subs	r3, r2, r3
 8012a26:	3b01      	subs	r3, #1
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f2c0 814d 	blt.w	8012cc8 <tcp_receive+0x440>
 8012a2e:	4b47      	ldr	r3, [pc, #284]	; (8012b4c <tcp_receive+0x2c4>)
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a36:	1ad3      	subs	r3, r2, r3
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f300 8145 	bgt.w	8012cc8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	8b5b      	ldrh	r3, [r3, #26]
 8012a42:	f003 0304 	and.w	r3, r3, #4
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d010      	beq.n	8012a6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8b5b      	ldrh	r3, [r3, #26]
 8012a4e:	f023 0304 	bic.w	r3, r3, #4
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a7a:	10db      	asrs	r3, r3, #3
 8012a7c:	b21b      	sxth	r3, r3
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	4413      	add	r3, r2
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	b21a      	sxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012a94:	4b2d      	ldr	r3, [pc, #180]	; (8012b4c <tcp_receive+0x2c4>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012aac:	4b27      	ldr	r3, [pc, #156]	; (8012b4c <tcp_receive+0x2c4>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	7d1b      	ldrb	r3, [r3, #20]
 8012ab8:	2b03      	cmp	r3, #3
 8012aba:	f240 8096 	bls.w	8012bea <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d244      	bcs.n	8012b58 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8b5b      	ldrh	r3, [r3, #26]
 8012ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <tcp_receive+0x256>
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <tcp_receive+0x258>
 8012ade:	2302      	movs	r3, #2
 8012ae0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012ae4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012aee:	fb12 f303 	smulbb	r3, r2, r3
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012af6:	4293      	cmp	r3, r2
 8012af8:	bf28      	it	cs
 8012afa:	4613      	movcs	r3, r2
 8012afc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b06:	4413      	add	r3, r2
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d309      	bcc.n	8012b28 <tcp_receive+0x2a0>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b1c:	4413      	add	r3, r2
 8012b1e:	b29a      	uxth	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b26:	e060      	b.n	8012bea <tcp_receive+0x362>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b32:	e05a      	b.n	8012bea <tcp_receive+0x362>
 8012b34:	0801db90 	.word	0x0801db90
 8012b38:	0801dec0 	.word	0x0801dec0
 8012b3c:	0801dbdc 	.word	0x0801dbdc
 8012b40:	0801dedc 	.word	0x0801dedc
 8012b44:	24009ddc 	.word	0x24009ddc
 8012b48:	24009dd0 	.word	0x24009dd0
 8012b4c:	24009dd4 	.word	0x24009dd4
 8012b50:	24009dc0 	.word	0x24009dc0
 8012b54:	24009dda 	.word	0x24009dda
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012b60:	4413      	add	r3, r2
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d309      	bcc.n	8012b82 <tcp_receive+0x2fa>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012b76:	4413      	add	r3, r2
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012b80:	e004      	b.n	8012b8c <tcp_receive+0x304>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d326      	bcc.n	8012bea <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ba8:	1ad3      	subs	r3, r2, r3
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bbc:	4413      	add	r3, r2
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d30a      	bcc.n	8012be0 <tcp_receive+0x358>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bd4:	4413      	add	r3, r2
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bde:	e004      	b.n	8012bea <tcp_receive+0x362>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012be6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bf2:	4a98      	ldr	r2, [pc, #608]	; (8012e54 <tcp_receive+0x5cc>)
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f7ff fdcb 	bl	8012790 <tcp_free_acked_segments>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c08:	4a93      	ldr	r2, [pc, #588]	; (8012e58 <tcp_receive+0x5d0>)
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7ff fdc0 	bl	8012790 <tcp_free_acked_segments>
 8012c10:	4602      	mov	r2, r0
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d104      	bne.n	8012c28 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c24:	861a      	strh	r2, [r3, #48]	; 0x30
 8012c26:	e002      	b.n	8012c2e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2200      	movs	r2, #0
 8012c32:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d103      	bne.n	8012c44 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012c4a:	4b84      	ldr	r3, [pc, #528]	; (8012e5c <tcp_receive+0x5d4>)
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	4413      	add	r3, r2
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	8b5b      	ldrh	r3, [r3, #26]
 8012c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d035      	beq.n	8012cd0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d118      	bne.n	8012c9e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d00c      	beq.n	8012c8e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fa fe5e 	bl	800d942 <lwip_htonl>
 8012c86:	4603      	mov	r3, r0
 8012c88:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	dc20      	bgt.n	8012cd0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012c9c:	e018      	b.n	8012cd0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fa fe49 	bl	800d942 <lwip_htonl>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	1ae3      	subs	r3, r4, r3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dc0b      	bgt.n	8012cd0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	8b5b      	ldrh	r3, [r3, #26]
 8012cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cc6:	e003      	b.n	8012cd0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f002 fbcd 	bl	8015468 <tcp_send_empty_ack>
 8012cce:	e000      	b.n	8012cd2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cd0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d05b      	beq.n	8012d92 <tcp_receive+0x50a>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cde:	4b60      	ldr	r3, [pc, #384]	; (8012e60 <tcp_receive+0x5d8>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	da54      	bge.n	8012d92 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012ce8:	4b5e      	ldr	r3, [pc, #376]	; (8012e64 <tcp_receive+0x5dc>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	1ad3      	subs	r3, r2, r3
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012cfc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d06:	10db      	asrs	r3, r3, #3
 8012d08:	b21b      	sxth	r3, r3
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d20:	4413      	add	r3, r2
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	b21a      	sxth	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012d2a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	da05      	bge.n	8012d3e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d36:	425b      	negs	r3, r3
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012d3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d48:	109b      	asrs	r3, r3, #2
 8012d4a:	b21b      	sxth	r3, r3
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012d62:	4413      	add	r3, r2
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	b21a      	sxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d72:	10db      	asrs	r3, r3, #3
 8012d74:	b21b      	sxth	r3, r3
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	4413      	add	r3, r2
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	b21a      	sxth	r2, r3
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012d92:	4b35      	ldr	r3, [pc, #212]	; (8012e68 <tcp_receive+0x5e0>)
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f000 84e1 	beq.w	801375e <tcp_receive+0xed6>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	7d1b      	ldrb	r3, [r3, #20]
 8012da0:	2b06      	cmp	r3, #6
 8012da2:	f200 84dc 	bhi.w	801375e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012daa:	4b30      	ldr	r3, [pc, #192]	; (8012e6c <tcp_receive+0x5e4>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	3b01      	subs	r3, #1
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f2c0 808e 	blt.w	8012ed4 <tcp_receive+0x64c>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dbc:	4b2a      	ldr	r3, [pc, #168]	; (8012e68 <tcp_receive+0x5e0>)
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	4b2a      	ldr	r3, [pc, #168]	; (8012e6c <tcp_receive+0x5e4>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	440b      	add	r3, r1
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	3301      	adds	r3, #1
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	f300 8081 	bgt.w	8012ed4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012dd2:	4b27      	ldr	r3, [pc, #156]	; (8012e70 <tcp_receive+0x5e8>)
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ddc:	4b23      	ldr	r3, [pc, #140]	; (8012e6c <tcp_receive+0x5e4>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012de4:	4b22      	ldr	r3, [pc, #136]	; (8012e70 <tcp_receive+0x5e8>)
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d106      	bne.n	8012dfa <tcp_receive+0x572>
 8012dec:	4b21      	ldr	r3, [pc, #132]	; (8012e74 <tcp_receive+0x5ec>)
 8012dee:	f240 5294 	movw	r2, #1428	; 0x594
 8012df2:	4921      	ldr	r1, [pc, #132]	; (8012e78 <tcp_receive+0x5f0>)
 8012df4:	4821      	ldr	r0, [pc, #132]	; (8012e7c <tcp_receive+0x5f4>)
 8012df6:	f008 f893 	bl	801af20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d906      	bls.n	8012e12 <tcp_receive+0x58a>
 8012e04:	4b1b      	ldr	r3, [pc, #108]	; (8012e74 <tcp_receive+0x5ec>)
 8012e06:	f240 5295 	movw	r2, #1429	; 0x595
 8012e0a:	491d      	ldr	r1, [pc, #116]	; (8012e80 <tcp_receive+0x5f8>)
 8012e0c:	481b      	ldr	r0, [pc, #108]	; (8012e7c <tcp_receive+0x5f4>)
 8012e0e:	f008 f887 	bl	801af20 <iprintf>
      off = (u16_t)off32;
 8012e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012e18:	4b15      	ldr	r3, [pc, #84]	; (8012e70 <tcp_receive+0x5e8>)
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	891b      	ldrh	r3, [r3, #8]
 8012e1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d906      	bls.n	8012e34 <tcp_receive+0x5ac>
 8012e26:	4b13      	ldr	r3, [pc, #76]	; (8012e74 <tcp_receive+0x5ec>)
 8012e28:	f240 5297 	movw	r2, #1431	; 0x597
 8012e2c:	4915      	ldr	r1, [pc, #84]	; (8012e84 <tcp_receive+0x5fc>)
 8012e2e:	4813      	ldr	r0, [pc, #76]	; (8012e7c <tcp_receive+0x5f4>)
 8012e30:	f008 f876 	bl	801af20 <iprintf>
      inseg.len -= off;
 8012e34:	4b0e      	ldr	r3, [pc, #56]	; (8012e70 <tcp_receive+0x5e8>)
 8012e36:	891a      	ldrh	r2, [r3, #8]
 8012e38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e3c:	1ad3      	subs	r3, r2, r3
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	4b0b      	ldr	r3, [pc, #44]	; (8012e70 <tcp_receive+0x5e8>)
 8012e42:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012e44:	4b0a      	ldr	r3, [pc, #40]	; (8012e70 <tcp_receive+0x5e8>)
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	891a      	ldrh	r2, [r3, #8]
 8012e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012e52:	e029      	b.n	8012ea8 <tcp_receive+0x620>
 8012e54:	0801def8 	.word	0x0801def8
 8012e58:	0801df00 	.word	0x0801df00
 8012e5c:	24009dd8 	.word	0x24009dd8
 8012e60:	24009dd4 	.word	0x24009dd4
 8012e64:	2400d718 	.word	0x2400d718
 8012e68:	24009dda 	.word	0x24009dda
 8012e6c:	24009dd0 	.word	0x24009dd0
 8012e70:	24009db0 	.word	0x24009db0
 8012e74:	0801db90 	.word	0x0801db90
 8012e78:	0801df08 	.word	0x0801df08
 8012e7c:	0801dbdc 	.word	0x0801dbdc
 8012e80:	0801df18 	.word	0x0801df18
 8012e84:	0801df28 	.word	0x0801df28
        off -= p->len;
 8012e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e8a:	895b      	ldrh	r3, [r3, #10]
 8012e8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eaa:	895b      	ldrh	r3, [r3, #10]
 8012eac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d8e9      	bhi.n	8012e88 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012eb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012eb8:	4619      	mov	r1, r3
 8012eba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012ebc:	f7fc f95c 	bl	800f178 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec4:	4a91      	ldr	r2, [pc, #580]	; (801310c <tcp_receive+0x884>)
 8012ec6:	6013      	str	r3, [r2, #0]
 8012ec8:	4b91      	ldr	r3, [pc, #580]	; (8013110 <tcp_receive+0x888>)
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	4a8f      	ldr	r2, [pc, #572]	; (801310c <tcp_receive+0x884>)
 8012ece:	6812      	ldr	r2, [r2, #0]
 8012ed0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ed2:	e00d      	b.n	8012ef0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ed4:	4b8d      	ldr	r3, [pc, #564]	; (801310c <tcp_receive+0x884>)
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	da06      	bge.n	8012ef0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8b5b      	ldrh	r3, [r3, #26]
 8012ee6:	f043 0302 	orr.w	r3, r3, #2
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ef0:	4b86      	ldr	r3, [pc, #536]	; (801310c <tcp_receive+0x884>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f2c0 842a 	blt.w	8013754 <tcp_receive+0xecc>
 8012f00:	4b82      	ldr	r3, [pc, #520]	; (801310c <tcp_receive+0x884>)
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f08:	6879      	ldr	r1, [r7, #4]
 8012f0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f0c:	440b      	add	r3, r1
 8012f0e:	1ad3      	subs	r3, r2, r3
 8012f10:	3301      	adds	r3, #1
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f300 841e 	bgt.w	8013754 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f1c:	4b7b      	ldr	r3, [pc, #492]	; (801310c <tcp_receive+0x884>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	f040 829a 	bne.w	801345a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012f26:	4b7a      	ldr	r3, [pc, #488]	; (8013110 <tcp_receive+0x888>)
 8012f28:	891c      	ldrh	r4, [r3, #8]
 8012f2a:	4b79      	ldr	r3, [pc, #484]	; (8013110 <tcp_receive+0x888>)
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	899b      	ldrh	r3, [r3, #12]
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fa fcf0 	bl	800d918 <lwip_htons>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	f003 0303 	and.w	r3, r3, #3
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d001      	beq.n	8012f48 <tcp_receive+0x6c0>
 8012f44:	2301      	movs	r3, #1
 8012f46:	e000      	b.n	8012f4a <tcp_receive+0x6c2>
 8012f48:	2300      	movs	r3, #0
 8012f4a:	4423      	add	r3, r4
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	4b71      	ldr	r3, [pc, #452]	; (8013114 <tcp_receive+0x88c>)
 8012f50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f56:	4b6f      	ldr	r3, [pc, #444]	; (8013114 <tcp_receive+0x88c>)
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d275      	bcs.n	801304a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f5e:	4b6c      	ldr	r3, [pc, #432]	; (8013110 <tcp_receive+0x888>)
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	899b      	ldrh	r3, [r3, #12]
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7fa fcd6 	bl	800d918 <lwip_htons>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	b2db      	uxtb	r3, r3
 8012f70:	f003 0301 	and.w	r3, r3, #1
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d01f      	beq.n	8012fb8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012f78:	4b65      	ldr	r3, [pc, #404]	; (8013110 <tcp_receive+0x888>)
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	899b      	ldrh	r3, [r3, #12]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f86:	b21c      	sxth	r4, r3
 8012f88:	4b61      	ldr	r3, [pc, #388]	; (8013110 <tcp_receive+0x888>)
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	899b      	ldrh	r3, [r3, #12]
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fa fcc1 	bl	800d918 <lwip_htons>
 8012f96:	4603      	mov	r3, r0
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fa fcb8 	bl	800d918 <lwip_htons>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	b21b      	sxth	r3, r3
 8012fac:	4323      	orrs	r3, r4
 8012fae:	b21a      	sxth	r2, r3
 8012fb0:	4b57      	ldr	r3, [pc, #348]	; (8013110 <tcp_receive+0x888>)
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	b292      	uxth	r2, r2
 8012fb6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fbc:	4b54      	ldr	r3, [pc, #336]	; (8013110 <tcp_receive+0x888>)
 8012fbe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012fc0:	4b53      	ldr	r3, [pc, #332]	; (8013110 <tcp_receive+0x888>)
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	899b      	ldrh	r3, [r3, #12]
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fa fca5 	bl	800d918 <lwip_htons>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	f003 0302 	and.w	r3, r3, #2
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d005      	beq.n	8012fe6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012fda:	4b4d      	ldr	r3, [pc, #308]	; (8013110 <tcp_receive+0x888>)
 8012fdc:	891b      	ldrh	r3, [r3, #8]
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	4b4b      	ldr	r3, [pc, #300]	; (8013110 <tcp_receive+0x888>)
 8012fe4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012fe6:	4b4a      	ldr	r3, [pc, #296]	; (8013110 <tcp_receive+0x888>)
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	4a49      	ldr	r2, [pc, #292]	; (8013110 <tcp_receive+0x888>)
 8012fec:	8912      	ldrh	r2, [r2, #8]
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7fb ffc1 	bl	800ef78 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012ff6:	4b46      	ldr	r3, [pc, #280]	; (8013110 <tcp_receive+0x888>)
 8012ff8:	891c      	ldrh	r4, [r3, #8]
 8012ffa:	4b45      	ldr	r3, [pc, #276]	; (8013110 <tcp_receive+0x888>)
 8012ffc:	68db      	ldr	r3, [r3, #12]
 8012ffe:	899b      	ldrh	r3, [r3, #12]
 8013000:	b29b      	uxth	r3, r3
 8013002:	4618      	mov	r0, r3
 8013004:	f7fa fc88 	bl	800d918 <lwip_htons>
 8013008:	4603      	mov	r3, r0
 801300a:	b2db      	uxtb	r3, r3
 801300c:	f003 0303 	and.w	r3, r3, #3
 8013010:	2b00      	cmp	r3, #0
 8013012:	d001      	beq.n	8013018 <tcp_receive+0x790>
 8013014:	2301      	movs	r3, #1
 8013016:	e000      	b.n	801301a <tcp_receive+0x792>
 8013018:	2300      	movs	r3, #0
 801301a:	4423      	add	r3, r4
 801301c:	b29a      	uxth	r2, r3
 801301e:	4b3d      	ldr	r3, [pc, #244]	; (8013114 <tcp_receive+0x88c>)
 8013020:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013022:	4b3c      	ldr	r3, [pc, #240]	; (8013114 <tcp_receive+0x88c>)
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	461a      	mov	r2, r3
 8013028:	4b38      	ldr	r3, [pc, #224]	; (801310c <tcp_receive+0x884>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	441a      	add	r2, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013032:	6879      	ldr	r1, [r7, #4]
 8013034:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013036:	440b      	add	r3, r1
 8013038:	429a      	cmp	r2, r3
 801303a:	d006      	beq.n	801304a <tcp_receive+0x7c2>
 801303c:	4b36      	ldr	r3, [pc, #216]	; (8013118 <tcp_receive+0x890>)
 801303e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013042:	4936      	ldr	r1, [pc, #216]	; (801311c <tcp_receive+0x894>)
 8013044:	4836      	ldr	r0, [pc, #216]	; (8013120 <tcp_receive+0x898>)
 8013046:	f007 ff6b 	bl	801af20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801304e:	2b00      	cmp	r3, #0
 8013050:	f000 80e7 	beq.w	8013222 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013054:	4b2e      	ldr	r3, [pc, #184]	; (8013110 <tcp_receive+0x888>)
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	899b      	ldrh	r3, [r3, #12]
 801305a:	b29b      	uxth	r3, r3
 801305c:	4618      	mov	r0, r3
 801305e:	f7fa fc5b 	bl	800d918 <lwip_htons>
 8013062:	4603      	mov	r3, r0
 8013064:	b2db      	uxtb	r3, r3
 8013066:	f003 0301 	and.w	r3, r3, #1
 801306a:	2b00      	cmp	r3, #0
 801306c:	d010      	beq.n	8013090 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801306e:	e00a      	b.n	8013086 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013074:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f7fd fcc8 	bl	8010a16 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1f0      	bne.n	8013070 <tcp_receive+0x7e8>
 801308e:	e0c8      	b.n	8013222 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013094:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013096:	e052      	b.n	801313e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	899b      	ldrh	r3, [r3, #12]
 801309e:	b29b      	uxth	r3, r3
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7fa fc39 	bl	800d918 <lwip_htons>
 80130a6:	4603      	mov	r3, r0
 80130a8:	b2db      	uxtb	r3, r3
 80130aa:	f003 0301 	and.w	r3, r3, #1
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d03d      	beq.n	801312e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80130b2:	4b17      	ldr	r3, [pc, #92]	; (8013110 <tcp_receive+0x888>)
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	899b      	ldrh	r3, [r3, #12]
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7fa fc2c 	bl	800d918 <lwip_htons>
 80130c0:	4603      	mov	r3, r0
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d130      	bne.n	801312e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80130cc:	4b10      	ldr	r3, [pc, #64]	; (8013110 <tcp_receive+0x888>)
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	899b      	ldrh	r3, [r3, #12]
 80130d2:	b29c      	uxth	r4, r3
 80130d4:	2001      	movs	r0, #1
 80130d6:	f7fa fc1f 	bl	800d918 <lwip_htons>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	4b0c      	ldr	r3, [pc, #48]	; (8013110 <tcp_receive+0x888>)
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	4322      	orrs	r2, r4
 80130e4:	b292      	uxth	r2, r2
 80130e6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80130e8:	4b09      	ldr	r3, [pc, #36]	; (8013110 <tcp_receive+0x888>)
 80130ea:	891c      	ldrh	r4, [r3, #8]
 80130ec:	4b08      	ldr	r3, [pc, #32]	; (8013110 <tcp_receive+0x888>)
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	899b      	ldrh	r3, [r3, #12]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fa fc0f 	bl	800d918 <lwip_htons>
 80130fa:	4603      	mov	r3, r0
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	f003 0303 	and.w	r3, r3, #3
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00e      	beq.n	8013124 <tcp_receive+0x89c>
 8013106:	2301      	movs	r3, #1
 8013108:	e00d      	b.n	8013126 <tcp_receive+0x89e>
 801310a:	bf00      	nop
 801310c:	24009dd0 	.word	0x24009dd0
 8013110:	24009db0 	.word	0x24009db0
 8013114:	24009dda 	.word	0x24009dda
 8013118:	0801db90 	.word	0x0801db90
 801311c:	0801df38 	.word	0x0801df38
 8013120:	0801dbdc 	.word	0x0801dbdc
 8013124:	2300      	movs	r3, #0
 8013126:	4423      	add	r3, r4
 8013128:	b29a      	uxth	r2, r3
 801312a:	4b98      	ldr	r3, [pc, #608]	; (801338c <tcp_receive+0xb04>)
 801312c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013130:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013138:	6938      	ldr	r0, [r7, #16]
 801313a:	f7fd fc6c 	bl	8010a16 <tcp_seg_free>
            while (next &&
 801313e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00e      	beq.n	8013162 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013144:	4b91      	ldr	r3, [pc, #580]	; (801338c <tcp_receive+0xb04>)
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	461a      	mov	r2, r3
 801314a:	4b91      	ldr	r3, [pc, #580]	; (8013390 <tcp_receive+0xb08>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	441a      	add	r2, r3
 8013150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013158:	8909      	ldrh	r1, [r1, #8]
 801315a:	440b      	add	r3, r1
 801315c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801315e:	2b00      	cmp	r3, #0
 8013160:	da9a      	bge.n	8013098 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013164:	2b00      	cmp	r3, #0
 8013166:	d059      	beq.n	801321c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013168:	4b88      	ldr	r3, [pc, #544]	; (801338c <tcp_receive+0xb04>)
 801316a:	881b      	ldrh	r3, [r3, #0]
 801316c:	461a      	mov	r2, r3
 801316e:	4b88      	ldr	r3, [pc, #544]	; (8013390 <tcp_receive+0xb08>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	441a      	add	r2, r3
 8013174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801317c:	2b00      	cmp	r3, #0
 801317e:	dd4d      	ble.n	801321c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	b29a      	uxth	r2, r3
 8013188:	4b81      	ldr	r3, [pc, #516]	; (8013390 <tcp_receive+0xb08>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	b29b      	uxth	r3, r3
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	b29a      	uxth	r2, r3
 8013192:	4b80      	ldr	r3, [pc, #512]	; (8013394 <tcp_receive+0xb0c>)
 8013194:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013196:	4b7f      	ldr	r3, [pc, #508]	; (8013394 <tcp_receive+0xb0c>)
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	899b      	ldrh	r3, [r3, #12]
 801319c:	b29b      	uxth	r3, r3
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fa fbba 	bl	800d918 <lwip_htons>
 80131a4:	4603      	mov	r3, r0
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	f003 0302 	and.w	r3, r3, #2
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d005      	beq.n	80131bc <tcp_receive+0x934>
                inseg.len -= 1;
 80131b0:	4b78      	ldr	r3, [pc, #480]	; (8013394 <tcp_receive+0xb0c>)
 80131b2:	891b      	ldrh	r3, [r3, #8]
 80131b4:	3b01      	subs	r3, #1
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	4b76      	ldr	r3, [pc, #472]	; (8013394 <tcp_receive+0xb0c>)
 80131ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80131bc:	4b75      	ldr	r3, [pc, #468]	; (8013394 <tcp_receive+0xb0c>)
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	4a74      	ldr	r2, [pc, #464]	; (8013394 <tcp_receive+0xb0c>)
 80131c2:	8912      	ldrh	r2, [r2, #8]
 80131c4:	4611      	mov	r1, r2
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7fb fed6 	bl	800ef78 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80131cc:	4b71      	ldr	r3, [pc, #452]	; (8013394 <tcp_receive+0xb0c>)
 80131ce:	891c      	ldrh	r4, [r3, #8]
 80131d0:	4b70      	ldr	r3, [pc, #448]	; (8013394 <tcp_receive+0xb0c>)
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	899b      	ldrh	r3, [r3, #12]
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fa fb9d 	bl	800d918 <lwip_htons>
 80131de:	4603      	mov	r3, r0
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	f003 0303 	and.w	r3, r3, #3
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d001      	beq.n	80131ee <tcp_receive+0x966>
 80131ea:	2301      	movs	r3, #1
 80131ec:	e000      	b.n	80131f0 <tcp_receive+0x968>
 80131ee:	2300      	movs	r3, #0
 80131f0:	4423      	add	r3, r4
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	4b65      	ldr	r3, [pc, #404]	; (801338c <tcp_receive+0xb04>)
 80131f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80131f8:	4b64      	ldr	r3, [pc, #400]	; (801338c <tcp_receive+0xb04>)
 80131fa:	881b      	ldrh	r3, [r3, #0]
 80131fc:	461a      	mov	r2, r3
 80131fe:	4b64      	ldr	r3, [pc, #400]	; (8013390 <tcp_receive+0xb08>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	441a      	add	r2, r3
 8013204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	429a      	cmp	r2, r3
 801320c:	d006      	beq.n	801321c <tcp_receive+0x994>
 801320e:	4b62      	ldr	r3, [pc, #392]	; (8013398 <tcp_receive+0xb10>)
 8013210:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013214:	4961      	ldr	r1, [pc, #388]	; (801339c <tcp_receive+0xb14>)
 8013216:	4862      	ldr	r0, [pc, #392]	; (80133a0 <tcp_receive+0xb18>)
 8013218:	f007 fe82 	bl	801af20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013220:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013222:	4b5a      	ldr	r3, [pc, #360]	; (801338c <tcp_receive+0xb04>)
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	461a      	mov	r2, r3
 8013228:	4b59      	ldr	r3, [pc, #356]	; (8013390 <tcp_receive+0xb08>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	441a      	add	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013236:	4b55      	ldr	r3, [pc, #340]	; (801338c <tcp_receive+0xb04>)
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	429a      	cmp	r2, r3
 801323c:	d206      	bcs.n	801324c <tcp_receive+0x9c4>
 801323e:	4b56      	ldr	r3, [pc, #344]	; (8013398 <tcp_receive+0xb10>)
 8013240:	f240 6207 	movw	r2, #1543	; 0x607
 8013244:	4957      	ldr	r1, [pc, #348]	; (80133a4 <tcp_receive+0xb1c>)
 8013246:	4856      	ldr	r0, [pc, #344]	; (80133a0 <tcp_receive+0xb18>)
 8013248:	f007 fe6a 	bl	801af20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013250:	4b4e      	ldr	r3, [pc, #312]	; (801338c <tcp_receive+0xb04>)
 8013252:	881b      	ldrh	r3, [r3, #0]
 8013254:	1ad3      	subs	r3, r2, r3
 8013256:	b29a      	uxth	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7fc feb5 	bl	800ffcc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013262:	4b4c      	ldr	r3, [pc, #304]	; (8013394 <tcp_receive+0xb0c>)
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	891b      	ldrh	r3, [r3, #8]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d006      	beq.n	801327a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801326c:	4b49      	ldr	r3, [pc, #292]	; (8013394 <tcp_receive+0xb0c>)
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	4a4d      	ldr	r2, [pc, #308]	; (80133a8 <tcp_receive+0xb20>)
 8013272:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013274:	4b47      	ldr	r3, [pc, #284]	; (8013394 <tcp_receive+0xb0c>)
 8013276:	2200      	movs	r2, #0
 8013278:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801327a:	4b46      	ldr	r3, [pc, #280]	; (8013394 <tcp_receive+0xb0c>)
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	899b      	ldrh	r3, [r3, #12]
 8013280:	b29b      	uxth	r3, r3
 8013282:	4618      	mov	r0, r3
 8013284:	f7fa fb48 	bl	800d918 <lwip_htons>
 8013288:	4603      	mov	r3, r0
 801328a:	b2db      	uxtb	r3, r3
 801328c:	f003 0301 	and.w	r3, r3, #1
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 80b8 	beq.w	8013406 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013296:	4b45      	ldr	r3, [pc, #276]	; (80133ac <tcp_receive+0xb24>)
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	f043 0320 	orr.w	r3, r3, #32
 801329e:	b2da      	uxtb	r2, r3
 80132a0:	4b42      	ldr	r3, [pc, #264]	; (80133ac <tcp_receive+0xb24>)
 80132a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80132a4:	e0af      	b.n	8013406 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	4a36      	ldr	r2, [pc, #216]	; (8013390 <tcp_receive+0xb08>)
 80132b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	891b      	ldrh	r3, [r3, #8]
 80132bc:	461c      	mov	r4, r3
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	899b      	ldrh	r3, [r3, #12]
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fa fb26 	bl	800d918 <lwip_htons>
 80132cc:	4603      	mov	r3, r0
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	f003 0303 	and.w	r3, r3, #3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d001      	beq.n	80132dc <tcp_receive+0xa54>
 80132d8:	2301      	movs	r3, #1
 80132da:	e000      	b.n	80132de <tcp_receive+0xa56>
 80132dc:	2300      	movs	r3, #0
 80132de:	191a      	adds	r2, r3, r4
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e4:	441a      	add	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132ee:	461c      	mov	r4, r3
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	891b      	ldrh	r3, [r3, #8]
 80132f4:	461d      	mov	r5, r3
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	899b      	ldrh	r3, [r3, #12]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fa fb0a 	bl	800d918 <lwip_htons>
 8013304:	4603      	mov	r3, r0
 8013306:	b2db      	uxtb	r3, r3
 8013308:	f003 0303 	and.w	r3, r3, #3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <tcp_receive+0xa8c>
 8013310:	2301      	movs	r3, #1
 8013312:	e000      	b.n	8013316 <tcp_receive+0xa8e>
 8013314:	2300      	movs	r3, #0
 8013316:	442b      	add	r3, r5
 8013318:	429c      	cmp	r4, r3
 801331a:	d206      	bcs.n	801332a <tcp_receive+0xaa2>
 801331c:	4b1e      	ldr	r3, [pc, #120]	; (8013398 <tcp_receive+0xb10>)
 801331e:	f240 622b 	movw	r2, #1579	; 0x62b
 8013322:	4923      	ldr	r1, [pc, #140]	; (80133b0 <tcp_receive+0xb28>)
 8013324:	481e      	ldr	r0, [pc, #120]	; (80133a0 <tcp_receive+0xb18>)
 8013326:	f007 fdfb 	bl	801af20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	891b      	ldrh	r3, [r3, #8]
 801332e:	461c      	mov	r4, r3
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	899b      	ldrh	r3, [r3, #12]
 8013336:	b29b      	uxth	r3, r3
 8013338:	4618      	mov	r0, r3
 801333a:	f7fa faed 	bl	800d918 <lwip_htons>
 801333e:	4603      	mov	r3, r0
 8013340:	b2db      	uxtb	r3, r3
 8013342:	f003 0303 	and.w	r3, r3, #3
 8013346:	2b00      	cmp	r3, #0
 8013348:	d001      	beq.n	801334e <tcp_receive+0xac6>
 801334a:	2301      	movs	r3, #1
 801334c:	e000      	b.n	8013350 <tcp_receive+0xac8>
 801334e:	2300      	movs	r3, #0
 8013350:	1919      	adds	r1, r3, r4
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013356:	b28b      	uxth	r3, r1
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	b29a      	uxth	r2, r3
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7fc fe33 	bl	800ffcc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	891b      	ldrh	r3, [r3, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d028      	beq.n	80133c2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013370:	4b0d      	ldr	r3, [pc, #52]	; (80133a8 <tcp_receive+0xb20>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d01d      	beq.n	80133b4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013378:	4b0b      	ldr	r3, [pc, #44]	; (80133a8 <tcp_receive+0xb20>)
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	4619      	mov	r1, r3
 8013382:	4610      	mov	r0, r2
 8013384:	f7fc f84c 	bl	800f420 <pbuf_cat>
 8013388:	e018      	b.n	80133bc <tcp_receive+0xb34>
 801338a:	bf00      	nop
 801338c:	24009dda 	.word	0x24009dda
 8013390:	24009dd0 	.word	0x24009dd0
 8013394:	24009db0 	.word	0x24009db0
 8013398:	0801db90 	.word	0x0801db90
 801339c:	0801df70 	.word	0x0801df70
 80133a0:	0801dbdc 	.word	0x0801dbdc
 80133a4:	0801dfac 	.word	0x0801dfac
 80133a8:	24009de0 	.word	0x24009de0
 80133ac:	24009ddd 	.word	0x24009ddd
 80133b0:	0801dfcc 	.word	0x0801dfcc
            } else {
              recv_data = cseg->p;
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	4a70      	ldr	r2, [pc, #448]	; (801357c <tcp_receive+0xcf4>)
 80133ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	2200      	movs	r2, #0
 80133c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	899b      	ldrh	r3, [r3, #12]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fa faa4 	bl	800d918 <lwip_htons>
 80133d0:	4603      	mov	r3, r0
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	f003 0301 	and.w	r3, r3, #1
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00d      	beq.n	80133f8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80133dc:	4b68      	ldr	r3, [pc, #416]	; (8013580 <tcp_receive+0xcf8>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	f043 0320 	orr.w	r3, r3, #32
 80133e4:	b2da      	uxtb	r2, r3
 80133e6:	4b66      	ldr	r3, [pc, #408]	; (8013580 <tcp_receive+0xcf8>)
 80133e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	7d1b      	ldrb	r3, [r3, #20]
 80133ee:	2b04      	cmp	r3, #4
 80133f0:	d102      	bne.n	80133f8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2207      	movs	r2, #7
 80133f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	f7fd fb08 	bl	8010a16 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801340a:	2b00      	cmp	r3, #0
 801340c:	d008      	beq.n	8013420 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	685a      	ldr	r2, [r3, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801341a:	429a      	cmp	r2, r3
 801341c:	f43f af43 	beq.w	80132a6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	8b5b      	ldrh	r3, [r3, #26]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00e      	beq.n	801344a <tcp_receive+0xbc2>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8b5b      	ldrh	r3, [r3, #26]
 8013430:	f023 0301 	bic.w	r3, r3, #1
 8013434:	b29a      	uxth	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	835a      	strh	r2, [r3, #26]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	8b5b      	ldrh	r3, [r3, #26]
 801343e:	f043 0302 	orr.w	r3, r3, #2
 8013442:	b29a      	uxth	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013448:	e188      	b.n	801375c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	8b5b      	ldrh	r3, [r3, #26]
 801344e:	f043 0301 	orr.w	r3, r3, #1
 8013452:	b29a      	uxth	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013458:	e180      	b.n	801375c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013462:	4848      	ldr	r0, [pc, #288]	; (8013584 <tcp_receive+0xcfc>)
 8013464:	f7fd faf0 	bl	8010a48 <tcp_seg_copy>
 8013468:	4602      	mov	r2, r0
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	675a      	str	r2, [r3, #116]	; 0x74
 801346e:	e16d      	b.n	801374c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013470:	2300      	movs	r3, #0
 8013472:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013478:	63bb      	str	r3, [r7, #56]	; 0x38
 801347a:	e157      	b.n	801372c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	685a      	ldr	r2, [r3, #4]
 8013482:	4b41      	ldr	r3, [pc, #260]	; (8013588 <tcp_receive+0xd00>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	429a      	cmp	r2, r3
 8013488:	d11d      	bne.n	80134c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801348a:	4b3e      	ldr	r3, [pc, #248]	; (8013584 <tcp_receive+0xcfc>)
 801348c:	891a      	ldrh	r2, [r3, #8]
 801348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013490:	891b      	ldrh	r3, [r3, #8]
 8013492:	429a      	cmp	r2, r3
 8013494:	f240 814f 	bls.w	8013736 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013498:	483a      	ldr	r0, [pc, #232]	; (8013584 <tcp_receive+0xcfc>)
 801349a:	f7fd fad5 	bl	8010a48 <tcp_seg_copy>
 801349e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 8149 	beq.w	801373a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80134a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d003      	beq.n	80134b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80134ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b0:	697a      	ldr	r2, [r7, #20]
 80134b2:	601a      	str	r2, [r3, #0]
 80134b4:	e002      	b.n	80134bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80134bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80134be:	6978      	ldr	r0, [r7, #20]
 80134c0:	f7ff f8de 	bl	8012680 <tcp_oos_insert_segment>
                }
                break;
 80134c4:	e139      	b.n	801373a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80134c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d117      	bne.n	80134fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80134cc:	4b2e      	ldr	r3, [pc, #184]	; (8013588 <tcp_receive+0xd00>)
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	2b00      	cmp	r3, #0
 80134da:	da57      	bge.n	801358c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80134dc:	4829      	ldr	r0, [pc, #164]	; (8013584 <tcp_receive+0xcfc>)
 80134de:	f7fd fab3 	bl	8010a48 <tcp_seg_copy>
 80134e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f000 8129 	beq.w	801373e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	69ba      	ldr	r2, [r7, #24]
 80134f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80134f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80134f4:	69b8      	ldr	r0, [r7, #24]
 80134f6:	f7ff f8c3 	bl	8012680 <tcp_oos_insert_segment>
                  }
                  break;
 80134fa:	e120      	b.n	801373e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80134fc:	4b22      	ldr	r3, [pc, #136]	; (8013588 <tcp_receive+0xd00>)
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	1ad3      	subs	r3, r2, r3
 8013508:	3b01      	subs	r3, #1
 801350a:	2b00      	cmp	r3, #0
 801350c:	db3e      	blt.n	801358c <tcp_receive+0xd04>
 801350e:	4b1e      	ldr	r3, [pc, #120]	; (8013588 <tcp_receive+0xd00>)
 8013510:	681a      	ldr	r2, [r3, #0]
 8013512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	3301      	adds	r3, #1
 801351c:	2b00      	cmp	r3, #0
 801351e:	dc35      	bgt.n	801358c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013520:	4818      	ldr	r0, [pc, #96]	; (8013584 <tcp_receive+0xcfc>)
 8013522:	f7fd fa91 	bl	8010a48 <tcp_seg_copy>
 8013526:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	2b00      	cmp	r3, #0
 801352c:	f000 8109 	beq.w	8013742 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013538:	8912      	ldrh	r2, [r2, #8]
 801353a:	441a      	add	r2, r3
 801353c:	4b12      	ldr	r3, [pc, #72]	; (8013588 <tcp_receive+0xd00>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	2b00      	cmp	r3, #0
 8013544:	dd12      	ble.n	801356c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <tcp_receive+0xd00>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	b29a      	uxth	r2, r3
 801354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354e:	68db      	ldr	r3, [r3, #12]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	b29b      	uxth	r3, r3
 8013554:	1ad3      	subs	r3, r2, r3
 8013556:	b29a      	uxth	r2, r3
 8013558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355e:	685a      	ldr	r2, [r3, #4]
 8013560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013562:	891b      	ldrh	r3, [r3, #8]
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f7fb fd06 	bl	800ef78 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801356e:	69fa      	ldr	r2, [r7, #28]
 8013570:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013574:	69f8      	ldr	r0, [r7, #28]
 8013576:	f7ff f883 	bl	8012680 <tcp_oos_insert_segment>
                  }
                  break;
 801357a:	e0e2      	b.n	8013742 <tcp_receive+0xeba>
 801357c:	24009de0 	.word	0x24009de0
 8013580:	24009ddd 	.word	0x24009ddd
 8013584:	24009db0 	.word	0x24009db0
 8013588:	24009dd0 	.word	0x24009dd0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	f040 80c6 	bne.w	8013726 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801359a:	4b80      	ldr	r3, [pc, #512]	; (801379c <tcp_receive+0xf14>)
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f340 80bd 	ble.w	8013726 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	899b      	ldrh	r3, [r3, #12]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fa f9af 	bl	800d918 <lwip_htons>
 80135ba:	4603      	mov	r3, r0
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	f003 0301 	and.w	r3, r3, #1
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f040 80bf 	bne.w	8013746 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80135c8:	4875      	ldr	r0, [pc, #468]	; (80137a0 <tcp_receive+0xf18>)
 80135ca:	f7fd fa3d 	bl	8010a48 <tcp_seg_copy>
 80135ce:	4602      	mov	r2, r0
 80135d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80135d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	f000 80b6 	beq.w	801374a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135e6:	8912      	ldrh	r2, [r2, #8]
 80135e8:	441a      	add	r2, r3
 80135ea:	4b6c      	ldr	r3, [pc, #432]	; (801379c <tcp_receive+0xf14>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	dd12      	ble.n	801361a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80135f4:	4b69      	ldr	r3, [pc, #420]	; (801379c <tcp_receive+0xf14>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	b29b      	uxth	r3, r3
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	b29a      	uxth	r2, r3
 8013606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013608:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360c:	685a      	ldr	r2, [r3, #4]
 801360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013610:	891b      	ldrh	r3, [r3, #8]
 8013612:	4619      	mov	r1, r3
 8013614:	4610      	mov	r0, r2
 8013616:	f7fb fcaf 	bl	800ef78 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801361a:	4b62      	ldr	r3, [pc, #392]	; (80137a4 <tcp_receive+0xf1c>)
 801361c:	881b      	ldrh	r3, [r3, #0]
 801361e:	461a      	mov	r2, r3
 8013620:	4b5e      	ldr	r3, [pc, #376]	; (801379c <tcp_receive+0xf14>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	441a      	add	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362a:	6879      	ldr	r1, [r7, #4]
 801362c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801362e:	440b      	add	r3, r1
 8013630:	1ad3      	subs	r3, r2, r3
 8013632:	2b00      	cmp	r3, #0
 8013634:	f340 8089 	ble.w	801374a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	899b      	ldrh	r3, [r3, #12]
 8013640:	b29b      	uxth	r3, r3
 8013642:	4618      	mov	r0, r3
 8013644:	f7fa f968 	bl	800d918 <lwip_htons>
 8013648:	4603      	mov	r3, r0
 801364a:	b2db      	uxtb	r3, r3
 801364c:	f003 0301 	and.w	r3, r3, #1
 8013650:	2b00      	cmp	r3, #0
 8013652:	d022      	beq.n	801369a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	899b      	ldrh	r3, [r3, #12]
 801365c:	b29b      	uxth	r3, r3
 801365e:	b21b      	sxth	r3, r3
 8013660:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013664:	b21c      	sxth	r4, r3
 8013666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	899b      	ldrh	r3, [r3, #12]
 801366e:	b29b      	uxth	r3, r3
 8013670:	4618      	mov	r0, r3
 8013672:	f7fa f951 	bl	800d918 <lwip_htons>
 8013676:	4603      	mov	r3, r0
 8013678:	b2db      	uxtb	r3, r3
 801367a:	b29b      	uxth	r3, r3
 801367c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013680:	b29b      	uxth	r3, r3
 8013682:	4618      	mov	r0, r3
 8013684:	f7fa f948 	bl	800d918 <lwip_htons>
 8013688:	4603      	mov	r3, r0
 801368a:	b21b      	sxth	r3, r3
 801368c:	4323      	orrs	r3, r4
 801368e:	b21a      	sxth	r2, r3
 8013690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	b292      	uxth	r2, r2
 8013698:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801369e:	b29a      	uxth	r2, r3
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136a4:	4413      	add	r3, r2
 80136a6:	b299      	uxth	r1, r3
 80136a8:	4b3c      	ldr	r3, [pc, #240]	; (801379c <tcp_receive+0xf14>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	1a8a      	subs	r2, r1, r2
 80136b4:	b292      	uxth	r2, r2
 80136b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80136b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	685a      	ldr	r2, [r3, #4]
 80136be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	4619      	mov	r1, r3
 80136c6:	4610      	mov	r0, r2
 80136c8:	f7fb fc56 	bl	800ef78 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80136cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	891c      	ldrh	r4, [r3, #8]
 80136d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	899b      	ldrh	r3, [r3, #12]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	4618      	mov	r0, r3
 80136de:	f7fa f91b 	bl	800d918 <lwip_htons>
 80136e2:	4603      	mov	r3, r0
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	f003 0303 	and.w	r3, r3, #3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d001      	beq.n	80136f2 <tcp_receive+0xe6a>
 80136ee:	2301      	movs	r3, #1
 80136f0:	e000      	b.n	80136f4 <tcp_receive+0xe6c>
 80136f2:	2300      	movs	r3, #0
 80136f4:	4423      	add	r3, r4
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	4b2a      	ldr	r3, [pc, #168]	; (80137a4 <tcp_receive+0xf1c>)
 80136fa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80136fc:	4b29      	ldr	r3, [pc, #164]	; (80137a4 <tcp_receive+0xf1c>)
 80136fe:	881b      	ldrh	r3, [r3, #0]
 8013700:	461a      	mov	r2, r3
 8013702:	4b26      	ldr	r3, [pc, #152]	; (801379c <tcp_receive+0xf14>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	441a      	add	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370c:	6879      	ldr	r1, [r7, #4]
 801370e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013710:	440b      	add	r3, r1
 8013712:	429a      	cmp	r2, r3
 8013714:	d019      	beq.n	801374a <tcp_receive+0xec2>
 8013716:	4b24      	ldr	r3, [pc, #144]	; (80137a8 <tcp_receive+0xf20>)
 8013718:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801371c:	4923      	ldr	r1, [pc, #140]	; (80137ac <tcp_receive+0xf24>)
 801371e:	4824      	ldr	r0, [pc, #144]	; (80137b0 <tcp_receive+0xf28>)
 8013720:	f007 fbfe 	bl	801af20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013724:	e011      	b.n	801374a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	63bb      	str	r3, [r7, #56]	; 0x38
 801372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372e:	2b00      	cmp	r3, #0
 8013730:	f47f aea4 	bne.w	801347c <tcp_receive+0xbf4>
 8013734:	e00a      	b.n	801374c <tcp_receive+0xec4>
                break;
 8013736:	bf00      	nop
 8013738:	e008      	b.n	801374c <tcp_receive+0xec4>
                break;
 801373a:	bf00      	nop
 801373c:	e006      	b.n	801374c <tcp_receive+0xec4>
                  break;
 801373e:	bf00      	nop
 8013740:	e004      	b.n	801374c <tcp_receive+0xec4>
                  break;
 8013742:	bf00      	nop
 8013744:	e002      	b.n	801374c <tcp_receive+0xec4>
                  break;
 8013746:	bf00      	nop
 8013748:	e000      	b.n	801374c <tcp_receive+0xec4>
                break;
 801374a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f001 fe8b 	bl	8015468 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013752:	e003      	b.n	801375c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f001 fe87 	bl	8015468 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801375a:	e01a      	b.n	8013792 <tcp_receive+0xf0a>
 801375c:	e019      	b.n	8013792 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801375e:	4b0f      	ldr	r3, [pc, #60]	; (801379c <tcp_receive+0xf14>)
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	2b00      	cmp	r3, #0
 801376a:	db0a      	blt.n	8013782 <tcp_receive+0xefa>
 801376c:	4b0b      	ldr	r3, [pc, #44]	; (801379c <tcp_receive+0xf14>)
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013778:	440b      	add	r3, r1
 801377a:	1ad3      	subs	r3, r2, r3
 801377c:	3301      	adds	r3, #1
 801377e:	2b00      	cmp	r3, #0
 8013780:	dd07      	ble.n	8013792 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	8b5b      	ldrh	r3, [r3, #26]
 8013786:	f043 0302 	orr.w	r3, r3, #2
 801378a:	b29a      	uxth	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013790:	e7ff      	b.n	8013792 <tcp_receive+0xf0a>
 8013792:	bf00      	nop
 8013794:	3750      	adds	r7, #80	; 0x50
 8013796:	46bd      	mov	sp, r7
 8013798:	bdb0      	pop	{r4, r5, r7, pc}
 801379a:	bf00      	nop
 801379c:	24009dd0 	.word	0x24009dd0
 80137a0:	24009db0 	.word	0x24009db0
 80137a4:	24009dda 	.word	0x24009dda
 80137a8:	0801db90 	.word	0x0801db90
 80137ac:	0801df38 	.word	0x0801df38
 80137b0:	0801dbdc 	.word	0x0801dbdc

080137b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80137ba:	4b15      	ldr	r3, [pc, #84]	; (8013810 <tcp_get_next_optbyte+0x5c>)
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	b291      	uxth	r1, r2
 80137c2:	4a13      	ldr	r2, [pc, #76]	; (8013810 <tcp_get_next_optbyte+0x5c>)
 80137c4:	8011      	strh	r1, [r2, #0]
 80137c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80137c8:	4b12      	ldr	r3, [pc, #72]	; (8013814 <tcp_get_next_optbyte+0x60>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d004      	beq.n	80137da <tcp_get_next_optbyte+0x26>
 80137d0:	4b11      	ldr	r3, [pc, #68]	; (8013818 <tcp_get_next_optbyte+0x64>)
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	88fa      	ldrh	r2, [r7, #6]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d208      	bcs.n	80137ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80137da:	4b10      	ldr	r3, [pc, #64]	; (801381c <tcp_get_next_optbyte+0x68>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	3314      	adds	r3, #20
 80137e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80137e2:	88fb      	ldrh	r3, [r7, #6]
 80137e4:	683a      	ldr	r2, [r7, #0]
 80137e6:	4413      	add	r3, r2
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	e00b      	b.n	8013804 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80137ec:	88fb      	ldrh	r3, [r7, #6]
 80137ee:	b2da      	uxtb	r2, r3
 80137f0:	4b09      	ldr	r3, [pc, #36]	; (8013818 <tcp_get_next_optbyte+0x64>)
 80137f2:	881b      	ldrh	r3, [r3, #0]
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	1ad3      	subs	r3, r2, r3
 80137f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80137fa:	4b06      	ldr	r3, [pc, #24]	; (8013814 <tcp_get_next_optbyte+0x60>)
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	797b      	ldrb	r3, [r7, #5]
 8013800:	4413      	add	r3, r2
 8013802:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013804:	4618      	mov	r0, r3
 8013806:	370c      	adds	r7, #12
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	24009dcc 	.word	0x24009dcc
 8013814:	24009dc8 	.word	0x24009dc8
 8013818:	24009dc6 	.word	0x24009dc6
 801381c:	24009dc0 	.word	0x24009dc0

08013820 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b084      	sub	sp, #16
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d106      	bne.n	801383c <tcp_parseopt+0x1c>
 801382e:	4b32      	ldr	r3, [pc, #200]	; (80138f8 <tcp_parseopt+0xd8>)
 8013830:	f240 727d 	movw	r2, #1917	; 0x77d
 8013834:	4931      	ldr	r1, [pc, #196]	; (80138fc <tcp_parseopt+0xdc>)
 8013836:	4832      	ldr	r0, [pc, #200]	; (8013900 <tcp_parseopt+0xe0>)
 8013838:	f007 fb72 	bl	801af20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801383c:	4b31      	ldr	r3, [pc, #196]	; (8013904 <tcp_parseopt+0xe4>)
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d055      	beq.n	80138f0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013844:	4b30      	ldr	r3, [pc, #192]	; (8013908 <tcp_parseopt+0xe8>)
 8013846:	2200      	movs	r2, #0
 8013848:	801a      	strh	r2, [r3, #0]
 801384a:	e045      	b.n	80138d8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801384c:	f7ff ffb2 	bl	80137b4 <tcp_get_next_optbyte>
 8013850:	4603      	mov	r3, r0
 8013852:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013854:	7bfb      	ldrb	r3, [r7, #15]
 8013856:	2b02      	cmp	r3, #2
 8013858:	d006      	beq.n	8013868 <tcp_parseopt+0x48>
 801385a:	2b02      	cmp	r3, #2
 801385c:	dc2b      	bgt.n	80138b6 <tcp_parseopt+0x96>
 801385e:	2b00      	cmp	r3, #0
 8013860:	d041      	beq.n	80138e6 <tcp_parseopt+0xc6>
 8013862:	2b01      	cmp	r3, #1
 8013864:	d127      	bne.n	80138b6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013866:	e037      	b.n	80138d8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013868:	f7ff ffa4 	bl	80137b4 <tcp_get_next_optbyte>
 801386c:	4603      	mov	r3, r0
 801386e:	2b04      	cmp	r3, #4
 8013870:	d13b      	bne.n	80138ea <tcp_parseopt+0xca>
 8013872:	4b25      	ldr	r3, [pc, #148]	; (8013908 <tcp_parseopt+0xe8>)
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	3301      	adds	r3, #1
 8013878:	4a22      	ldr	r2, [pc, #136]	; (8013904 <tcp_parseopt+0xe4>)
 801387a:	8812      	ldrh	r2, [r2, #0]
 801387c:	4293      	cmp	r3, r2
 801387e:	da34      	bge.n	80138ea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013880:	f7ff ff98 	bl	80137b4 <tcp_get_next_optbyte>
 8013884:	4603      	mov	r3, r0
 8013886:	b29b      	uxth	r3, r3
 8013888:	021b      	lsls	r3, r3, #8
 801388a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801388c:	f7ff ff92 	bl	80137b4 <tcp_get_next_optbyte>
 8013890:	4603      	mov	r3, r0
 8013892:	b29a      	uxth	r2, r3
 8013894:	89bb      	ldrh	r3, [r7, #12]
 8013896:	4313      	orrs	r3, r2
 8013898:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801389a:	89bb      	ldrh	r3, [r7, #12]
 801389c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80138a0:	d804      	bhi.n	80138ac <tcp_parseopt+0x8c>
 80138a2:	89bb      	ldrh	r3, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d001      	beq.n	80138ac <tcp_parseopt+0x8c>
 80138a8:	89ba      	ldrh	r2, [r7, #12]
 80138aa:	e001      	b.n	80138b0 <tcp_parseopt+0x90>
 80138ac:	f44f 7206 	mov.w	r2, #536	; 0x218
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80138b4:	e010      	b.n	80138d8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80138b6:	f7ff ff7d 	bl	80137b4 <tcp_get_next_optbyte>
 80138ba:	4603      	mov	r3, r0
 80138bc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80138be:	7afb      	ldrb	r3, [r7, #11]
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d914      	bls.n	80138ee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80138c4:	7afb      	ldrb	r3, [r7, #11]
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	4b0f      	ldr	r3, [pc, #60]	; (8013908 <tcp_parseopt+0xe8>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	4413      	add	r3, r2
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	3b02      	subs	r3, #2
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	4b0c      	ldr	r3, [pc, #48]	; (8013908 <tcp_parseopt+0xe8>)
 80138d6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138d8:	4b0b      	ldr	r3, [pc, #44]	; (8013908 <tcp_parseopt+0xe8>)
 80138da:	881a      	ldrh	r2, [r3, #0]
 80138dc:	4b09      	ldr	r3, [pc, #36]	; (8013904 <tcp_parseopt+0xe4>)
 80138de:	881b      	ldrh	r3, [r3, #0]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d3b3      	bcc.n	801384c <tcp_parseopt+0x2c>
 80138e4:	e004      	b.n	80138f0 <tcp_parseopt+0xd0>
          return;
 80138e6:	bf00      	nop
 80138e8:	e002      	b.n	80138f0 <tcp_parseopt+0xd0>
            return;
 80138ea:	bf00      	nop
 80138ec:	e000      	b.n	80138f0 <tcp_parseopt+0xd0>
            return;
 80138ee:	bf00      	nop
      }
    }
  }
}
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	0801db90 	.word	0x0801db90
 80138fc:	0801dff4 	.word	0x0801dff4
 8013900:	0801dbdc 	.word	0x0801dbdc
 8013904:	24009dc4 	.word	0x24009dc4
 8013908:	24009dcc 	.word	0x24009dcc

0801390c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801390c:	b480      	push	{r7}
 801390e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013910:	4b05      	ldr	r3, [pc, #20]	; (8013928 <tcp_trigger_input_pcb_close+0x1c>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	f043 0310 	orr.w	r3, r3, #16
 8013918:	b2da      	uxtb	r2, r3
 801391a:	4b03      	ldr	r3, [pc, #12]	; (8013928 <tcp_trigger_input_pcb_close+0x1c>)
 801391c:	701a      	strb	r2, [r3, #0]
}
 801391e:	bf00      	nop
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr
 8013928:	24009ddd 	.word	0x24009ddd

0801392c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00a      	beq.n	8013954 <tcp_route+0x28>
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	7a1b      	ldrb	r3, [r3, #8]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d006      	beq.n	8013954 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	7a1b      	ldrb	r3, [r3, #8]
 801394a:	4618      	mov	r0, r3
 801394c:	f7fb f90c 	bl	800eb68 <netif_get_by_index>
 8013950:	4603      	mov	r3, r0
 8013952:	e003      	b.n	801395c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f005 fd61 	bl	801941c <ip4_route>
 801395a:	4603      	mov	r3, r0
  }
}
 801395c:	4618      	mov	r0, r3
 801395e:	3710      	adds	r7, #16
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}

08013964 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013964:	b590      	push	{r4, r7, lr}
 8013966:	b087      	sub	sp, #28
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	603b      	str	r3, [r7, #0]
 8013970:	4613      	mov	r3, r2
 8013972:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d105      	bne.n	8013986 <tcp_create_segment+0x22>
 801397a:	4b44      	ldr	r3, [pc, #272]	; (8013a8c <tcp_create_segment+0x128>)
 801397c:	22a3      	movs	r2, #163	; 0xa3
 801397e:	4944      	ldr	r1, [pc, #272]	; (8013a90 <tcp_create_segment+0x12c>)
 8013980:	4844      	ldr	r0, [pc, #272]	; (8013a94 <tcp_create_segment+0x130>)
 8013982:	f007 facd 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d105      	bne.n	8013998 <tcp_create_segment+0x34>
 801398c:	4b3f      	ldr	r3, [pc, #252]	; (8013a8c <tcp_create_segment+0x128>)
 801398e:	22a4      	movs	r2, #164	; 0xa4
 8013990:	4941      	ldr	r1, [pc, #260]	; (8013a98 <tcp_create_segment+0x134>)
 8013992:	4840      	ldr	r0, [pc, #256]	; (8013a94 <tcp_create_segment+0x130>)
 8013994:	f007 fac4 	bl	801af20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013998:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	f003 0304 	and.w	r3, r3, #4
 80139a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80139a6:	2003      	movs	r0, #3
 80139a8:	f7fa fd46 	bl	800e438 <memp_malloc>
 80139ac:	6138      	str	r0, [r7, #16]
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d104      	bne.n	80139be <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80139b4:	68b8      	ldr	r0, [r7, #8]
 80139b6:	f7fb fc65 	bl	800f284 <pbuf_free>
    return NULL;
 80139ba:	2300      	movs	r3, #0
 80139bc:	e061      	b.n	8013a82 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80139c4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	2200      	movs	r2, #0
 80139ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	68ba      	ldr	r2, [r7, #8]
 80139d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	891a      	ldrh	r2, [r3, #8]
 80139d6:	7dfb      	ldrb	r3, [r7, #23]
 80139d8:	b29b      	uxth	r3, r3
 80139da:	429a      	cmp	r2, r3
 80139dc:	d205      	bcs.n	80139ea <tcp_create_segment+0x86>
 80139de:	4b2b      	ldr	r3, [pc, #172]	; (8013a8c <tcp_create_segment+0x128>)
 80139e0:	22b0      	movs	r2, #176	; 0xb0
 80139e2:	492e      	ldr	r1, [pc, #184]	; (8013a9c <tcp_create_segment+0x138>)
 80139e4:	482b      	ldr	r0, [pc, #172]	; (8013a94 <tcp_create_segment+0x130>)
 80139e6:	f007 fa9b 	bl	801af20 <iprintf>
  seg->len = p->tot_len - optlen;
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	891a      	ldrh	r2, [r3, #8]
 80139ee:	7dfb      	ldrb	r3, [r7, #23]
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	1ad3      	subs	r3, r2, r3
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80139fa:	2114      	movs	r1, #20
 80139fc:	68b8      	ldr	r0, [r7, #8]
 80139fe:	f7fb fbab 	bl	800f158 <pbuf_add_header>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d004      	beq.n	8013a12 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013a08:	6938      	ldr	r0, [r7, #16]
 8013a0a:	f7fd f804 	bl	8010a16 <tcp_seg_free>
    return NULL;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	e037      	b.n	8013a82 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	685a      	ldr	r2, [r3, #4]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	8ada      	ldrh	r2, [r3, #22]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	68dc      	ldr	r4, [r3, #12]
 8013a24:	4610      	mov	r0, r2
 8013a26:	f7f9 ff77 	bl	800d918 <lwip_htons>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	8b1a      	ldrh	r2, [r3, #24]
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	68dc      	ldr	r4, [r3, #12]
 8013a36:	4610      	mov	r0, r2
 8013a38:	f7f9 ff6e 	bl	800d918 <lwip_htons>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	68dc      	ldr	r4, [r3, #12]
 8013a44:	6838      	ldr	r0, [r7, #0]
 8013a46:	f7f9 ff7c 	bl	800d942 <lwip_htonl>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013a4e:	7dfb      	ldrb	r3, [r7, #23]
 8013a50:	089b      	lsrs	r3, r3, #2
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	3305      	adds	r3, #5
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	031b      	lsls	r3, r3, #12
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	79fb      	ldrb	r3, [r7, #7]
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	4313      	orrs	r3, r2
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	68dc      	ldr	r4, [r3, #12]
 8013a6a:	4610      	mov	r0, r2
 8013a6c:	f7f9 ff54 	bl	800d918 <lwip_htons>
 8013a70:	4603      	mov	r3, r0
 8013a72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	749a      	strb	r2, [r3, #18]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013a80:	693b      	ldr	r3, [r7, #16]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	371c      	adds	r7, #28
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd90      	pop	{r4, r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	0801e010 	.word	0x0801e010
 8013a90:	0801e044 	.word	0x0801e044
 8013a94:	0801e064 	.word	0x0801e064
 8013a98:	0801e08c 	.word	0x0801e08c
 8013a9c:	0801e0b0 	.word	0x0801e0b0

08013aa0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b086      	sub	sp, #24
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	607b      	str	r3, [r7, #4]
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	73fb      	strb	r3, [r7, #15]
 8013aac:	460b      	mov	r3, r1
 8013aae:	81bb      	strh	r3, [r7, #12]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013ab4:	89bb      	ldrh	r3, [r7, #12]
 8013ab6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d105      	bne.n	8013aca <tcp_pbuf_prealloc+0x2a>
 8013abe:	4b30      	ldr	r3, [pc, #192]	; (8013b80 <tcp_pbuf_prealloc+0xe0>)
 8013ac0:	22e8      	movs	r2, #232	; 0xe8
 8013ac2:	4930      	ldr	r1, [pc, #192]	; (8013b84 <tcp_pbuf_prealloc+0xe4>)
 8013ac4:	4830      	ldr	r0, [pc, #192]	; (8013b88 <tcp_pbuf_prealloc+0xe8>)
 8013ac6:	f007 fa2b 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d105      	bne.n	8013adc <tcp_pbuf_prealloc+0x3c>
 8013ad0:	4b2b      	ldr	r3, [pc, #172]	; (8013b80 <tcp_pbuf_prealloc+0xe0>)
 8013ad2:	22e9      	movs	r2, #233	; 0xe9
 8013ad4:	492d      	ldr	r1, [pc, #180]	; (8013b8c <tcp_pbuf_prealloc+0xec>)
 8013ad6:	482c      	ldr	r0, [pc, #176]	; (8013b88 <tcp_pbuf_prealloc+0xe8>)
 8013ad8:	f007 fa22 	bl	801af20 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013adc:	89ba      	ldrh	r2, [r7, #12]
 8013ade:	897b      	ldrh	r3, [r7, #10]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d221      	bcs.n	8013b28 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013ae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013ae8:	f003 0302 	and.w	r3, r3, #2
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d111      	bne.n	8013b14 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013af0:	6a3b      	ldr	r3, [r7, #32]
 8013af2:	8b5b      	ldrh	r3, [r3, #26]
 8013af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d115      	bne.n	8013b28 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d007      	beq.n	8013b14 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013b04:	6a3b      	ldr	r3, [r7, #32]
 8013b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d103      	bne.n	8013b14 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013b0c:	6a3b      	ldr	r3, [r7, #32]
 8013b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d009      	beq.n	8013b28 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013b14:	89bb      	ldrh	r3, [r7, #12]
 8013b16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013b1a:	f023 0203 	bic.w	r2, r3, #3
 8013b1e:	897b      	ldrh	r3, [r7, #10]
 8013b20:	4293      	cmp	r3, r2
 8013b22:	bf28      	it	cs
 8013b24:	4613      	movcs	r3, r2
 8013b26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013b28:	8af9      	ldrh	r1, [r7, #22]
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
 8013b2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7fb f8c3 	bl	800ecbc <pbuf_alloc>
 8013b36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d101      	bne.n	8013b42 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	e019      	b.n	8013b76 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d006      	beq.n	8013b58 <tcp_pbuf_prealloc+0xb8>
 8013b4a:	4b0d      	ldr	r3, [pc, #52]	; (8013b80 <tcp_pbuf_prealloc+0xe0>)
 8013b4c:	f240 120b 	movw	r2, #267	; 0x10b
 8013b50:	490f      	ldr	r1, [pc, #60]	; (8013b90 <tcp_pbuf_prealloc+0xf0>)
 8013b52:	480d      	ldr	r0, [pc, #52]	; (8013b88 <tcp_pbuf_prealloc+0xe8>)
 8013b54:	f007 f9e4 	bl	801af20 <iprintf>
  *oversize = p->len - length;
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	895a      	ldrh	r2, [r3, #10]
 8013b5c:	89bb      	ldrh	r3, [r7, #12]
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	89ba      	ldrh	r2, [r7, #12]
 8013b6a:	811a      	strh	r2, [r3, #8]
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	891a      	ldrh	r2, [r3, #8]
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	815a      	strh	r2, [r3, #10]
  return p;
 8013b74:	693b      	ldr	r3, [r7, #16]
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3718      	adds	r7, #24
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	0801e010 	.word	0x0801e010
 8013b84:	0801e0c8 	.word	0x0801e0c8
 8013b88:	0801e064 	.word	0x0801e064
 8013b8c:	0801e0ec 	.word	0x0801e0ec
 8013b90:	0801e10c 	.word	0x0801e10c

08013b94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d106      	bne.n	8013bb4 <tcp_write_checks+0x20>
 8013ba6:	4b33      	ldr	r3, [pc, #204]	; (8013c74 <tcp_write_checks+0xe0>)
 8013ba8:	f240 1233 	movw	r2, #307	; 0x133
 8013bac:	4932      	ldr	r1, [pc, #200]	; (8013c78 <tcp_write_checks+0xe4>)
 8013bae:	4833      	ldr	r0, [pc, #204]	; (8013c7c <tcp_write_checks+0xe8>)
 8013bb0:	f007 f9b6 	bl	801af20 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	7d1b      	ldrb	r3, [r3, #20]
 8013bb8:	2b04      	cmp	r3, #4
 8013bba:	d00e      	beq.n	8013bda <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013bc0:	2b07      	cmp	r3, #7
 8013bc2:	d00a      	beq.n	8013bda <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013bc8:	2b02      	cmp	r3, #2
 8013bca:	d006      	beq.n	8013bda <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013bd0:	2b03      	cmp	r3, #3
 8013bd2:	d002      	beq.n	8013bda <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013bd4:	f06f 030a 	mvn.w	r3, #10
 8013bd8:	e048      	b.n	8013c6c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013bda:	887b      	ldrh	r3, [r7, #2]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <tcp_write_checks+0x50>
    return ERR_OK;
 8013be0:	2300      	movs	r3, #0
 8013be2:	e043      	b.n	8013c6c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013bea:	887a      	ldrh	r2, [r7, #2]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d909      	bls.n	8013c04 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	8b5b      	ldrh	r3, [r3, #26]
 8013bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8013c02:	e033      	b.n	8013c6c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c0a:	2b08      	cmp	r3, #8
 8013c0c:	d909      	bls.n	8013c22 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	8b5b      	ldrh	r3, [r3, #26]
 8013c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c20:	e024      	b.n	8013c6c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00f      	beq.n	8013c4c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d11a      	bne.n	8013c6a <tcp_write_checks+0xd6>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d116      	bne.n	8013c6a <tcp_write_checks+0xd6>
 8013c3c:	4b0d      	ldr	r3, [pc, #52]	; (8013c74 <tcp_write_checks+0xe0>)
 8013c3e:	f240 1255 	movw	r2, #341	; 0x155
 8013c42:	490f      	ldr	r1, [pc, #60]	; (8013c80 <tcp_write_checks+0xec>)
 8013c44:	480d      	ldr	r0, [pc, #52]	; (8013c7c <tcp_write_checks+0xe8>)
 8013c46:	f007 f96b 	bl	801af20 <iprintf>
 8013c4a:	e00e      	b.n	8013c6a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d103      	bne.n	8013c5c <tcp_write_checks+0xc8>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d006      	beq.n	8013c6a <tcp_write_checks+0xd6>
 8013c5c:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <tcp_write_checks+0xe0>)
 8013c5e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013c62:	4908      	ldr	r1, [pc, #32]	; (8013c84 <tcp_write_checks+0xf0>)
 8013c64:	4805      	ldr	r0, [pc, #20]	; (8013c7c <tcp_write_checks+0xe8>)
 8013c66:	f007 f95b 	bl	801af20 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3708      	adds	r7, #8
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0801e010 	.word	0x0801e010
 8013c78:	0801e120 	.word	0x0801e120
 8013c7c:	0801e064 	.word	0x0801e064
 8013c80:	0801e140 	.word	0x0801e140
 8013c84:	0801e17c 	.word	0x0801e17c

08013c88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013c88:	b590      	push	{r4, r7, lr}
 8013c8a:	b09b      	sub	sp, #108	; 0x6c
 8013c8c:	af04      	add	r7, sp, #16
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4611      	mov	r1, r2
 8013c94:	461a      	mov	r2, r3
 8013c96:	460b      	mov	r3, r1
 8013c98:	80fb      	strh	r3, [r7, #6]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013caa:	2300      	movs	r3, #0
 8013cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8013cae:	2300      	movs	r3, #0
 8013cb0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d109      	bne.n	8013ce4 <tcp_write+0x5c>
 8013cd0:	4ba4      	ldr	r3, [pc, #656]	; (8013f64 <tcp_write+0x2dc>)
 8013cd2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013cd6:	49a4      	ldr	r1, [pc, #656]	; (8013f68 <tcp_write+0x2e0>)
 8013cd8:	48a4      	ldr	r0, [pc, #656]	; (8013f6c <tcp_write+0x2e4>)
 8013cda:	f007 f921 	bl	801af20 <iprintf>
 8013cde:	f06f 030f 	mvn.w	r3, #15
 8013ce2:	e32a      	b.n	801433a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cea:	085b      	lsrs	r3, r3, #1
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	bf28      	it	cs
 8013cf6:	4613      	movcs	r3, r2
 8013cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d102      	bne.n	8013d06 <tcp_write+0x7e>
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d04:	e000      	b.n	8013d08 <tcp_write+0x80>
 8013d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d08:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d109      	bne.n	8013d24 <tcp_write+0x9c>
 8013d10:	4b94      	ldr	r3, [pc, #592]	; (8013f64 <tcp_write+0x2dc>)
 8013d12:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013d16:	4996      	ldr	r1, [pc, #600]	; (8013f70 <tcp_write+0x2e8>)
 8013d18:	4894      	ldr	r0, [pc, #592]	; (8013f6c <tcp_write+0x2e4>)
 8013d1a:	f007 f901 	bl	801af20 <iprintf>
 8013d1e:	f06f 030f 	mvn.w	r3, #15
 8013d22:	e30a      	b.n	801433a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013d24:	88fb      	ldrh	r3, [r7, #6]
 8013d26:	4619      	mov	r1, r3
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f7ff ff33 	bl	8013b94 <tcp_write_checks>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013d34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d002      	beq.n	8013d42 <tcp_write+0xba>
    return err;
 8013d3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013d40:	e2fb      	b.n	801433a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	f000 80f6 	beq.w	8013f48 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d60:	653b      	str	r3, [r7, #80]	; 0x50
 8013d62:	e002      	b.n	8013d6a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d1f8      	bne.n	8013d64 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d74:	7a9b      	ldrb	r3, [r3, #10]
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	f003 0304 	and.w	r3, r3, #4
 8013d7e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013d80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d84:	891b      	ldrh	r3, [r3, #8]
 8013d86:	4619      	mov	r1, r3
 8013d88:	8c3b      	ldrh	r3, [r7, #32]
 8013d8a:	440b      	add	r3, r1
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	da06      	bge.n	8013d9e <tcp_write+0x116>
 8013d90:	4b74      	ldr	r3, [pc, #464]	; (8013f64 <tcp_write+0x2dc>)
 8013d92:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013d96:	4977      	ldr	r1, [pc, #476]	; (8013f74 <tcp_write+0x2ec>)
 8013d98:	4874      	ldr	r0, [pc, #464]	; (8013f6c <tcp_write+0x2e4>)
 8013d9a:	f007 f8c1 	bl	801af20 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013da0:	891a      	ldrh	r2, [r3, #8]
 8013da2:	8c3b      	ldrh	r3, [r7, #32]
 8013da4:	4413      	add	r3, r2
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013db4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013db6:	8a7b      	ldrh	r3, [r7, #18]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d026      	beq.n	8013e0a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013dbc:	8a7b      	ldrh	r3, [r7, #18]
 8013dbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d206      	bcs.n	8013dd2 <tcp_write+0x14a>
 8013dc4:	4b67      	ldr	r3, [pc, #412]	; (8013f64 <tcp_write+0x2dc>)
 8013dc6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013dca:	496b      	ldr	r1, [pc, #428]	; (8013f78 <tcp_write+0x2f0>)
 8013dcc:	4867      	ldr	r0, [pc, #412]	; (8013f6c <tcp_write+0x2e4>)
 8013dce:	f007 f8a7 	bl	801af20 <iprintf>
      seg = last_unsent;
 8013dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013dd6:	8a7b      	ldrh	r3, [r7, #18]
 8013dd8:	88fa      	ldrh	r2, [r7, #6]
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	bf28      	it	cs
 8013dde:	4613      	movcs	r3, r2
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013de4:	4293      	cmp	r3, r2
 8013de6:	bf28      	it	cs
 8013de8:	4613      	movcs	r3, r2
 8013dea:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013dec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013df0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013df2:	4413      	add	r3, r2
 8013df4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013df8:	8a7a      	ldrh	r2, [r7, #18]
 8013dfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013dfc:	1ad3      	subs	r3, r2, r3
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013e02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e06:	1ad3      	subs	r3, r2, r3
 8013e08:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013e0a:	8a7b      	ldrh	r3, [r7, #18]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d00b      	beq.n	8013e28 <tcp_write+0x1a0>
 8013e10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e14:	88fb      	ldrh	r3, [r7, #6]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d006      	beq.n	8013e28 <tcp_write+0x1a0>
 8013e1a:	4b52      	ldr	r3, [pc, #328]	; (8013f64 <tcp_write+0x2dc>)
 8013e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e20:	4956      	ldr	r1, [pc, #344]	; (8013f7c <tcp_write+0x2f4>)
 8013e22:	4852      	ldr	r0, [pc, #328]	; (8013f6c <tcp_write+0x2e4>)
 8013e24:	f007 f87c 	bl	801af20 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013e28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e2c:	88fb      	ldrh	r3, [r7, #6]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	f080 8167 	bcs.w	8014102 <tcp_write+0x47a>
 8013e34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	f000 8163 	beq.w	8014102 <tcp_write+0x47a>
 8013e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e3e:	891b      	ldrh	r3, [r3, #8]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 815e 	beq.w	8014102 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013e46:	88fa      	ldrh	r2, [r7, #6]
 8013e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e4c:	1ad2      	subs	r2, r2, r3
 8013e4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e50:	4293      	cmp	r3, r2
 8013e52:	bfa8      	it	ge
 8013e54:	4613      	movge	r3, r2
 8013e56:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e5a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013e5c:	797b      	ldrb	r3, [r7, #5]
 8013e5e:	f003 0301 	and.w	r3, r3, #1
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d027      	beq.n	8013eb6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013e66:	f107 0012 	add.w	r0, r7, #18
 8013e6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e6c:	8bf9      	ldrh	r1, [r7, #30]
 8013e6e:	2301      	movs	r3, #1
 8013e70:	9302      	str	r3, [sp, #8]
 8013e72:	797b      	ldrb	r3, [r7, #5]
 8013e74:	9301      	str	r3, [sp, #4]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	f7ff fe0f 	bl	8013aa0 <tcp_pbuf_prealloc>
 8013e82:	6578      	str	r0, [r7, #84]	; 0x54
 8013e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	f000 8225 	beq.w	80142d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e8e:	6858      	ldr	r0, [r3, #4]
 8013e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e94:	68ba      	ldr	r2, [r7, #8]
 8013e96:	4413      	add	r3, r2
 8013e98:	8bfa      	ldrh	r2, [r7, #30]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	f006 ffcf 	bl	801ae3e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013ea0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013ea2:	f7fb fa7d 	bl	800f3a0 <pbuf_clen>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013eae:	4413      	add	r3, r2
 8013eb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013eb4:	e041      	b.n	8013f3a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	637b      	str	r3, [r7, #52]	; 0x34
 8013ebc:	e002      	b.n	8013ec4 <tcp_write+0x23c>
 8013ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8013ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1f8      	bne.n	8013ebe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ece:	7b1b      	ldrb	r3, [r3, #12]
 8013ed0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d115      	bne.n	8013f04 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ede:	8952      	ldrh	r2, [r2, #10]
 8013ee0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013ee2:	68ba      	ldr	r2, [r7, #8]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d10d      	bne.n	8013f04 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013ee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d006      	beq.n	8013efe <tcp_write+0x276>
 8013ef0:	4b1c      	ldr	r3, [pc, #112]	; (8013f64 <tcp_write+0x2dc>)
 8013ef2:	f240 2231 	movw	r2, #561	; 0x231
 8013ef6:	4922      	ldr	r1, [pc, #136]	; (8013f80 <tcp_write+0x2f8>)
 8013ef8:	481c      	ldr	r0, [pc, #112]	; (8013f6c <tcp_write+0x2e4>)
 8013efa:	f007 f811 	bl	801af20 <iprintf>
          extendlen = seglen;
 8013efe:	8bfb      	ldrh	r3, [r7, #30]
 8013f00:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013f02:	e01a      	b.n	8013f3a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013f04:	8bfb      	ldrh	r3, [r7, #30]
 8013f06:	2201      	movs	r2, #1
 8013f08:	4619      	mov	r1, r3
 8013f0a:	2000      	movs	r0, #0
 8013f0c:	f7fa fed6 	bl	800ecbc <pbuf_alloc>
 8013f10:	6578      	str	r0, [r7, #84]	; 0x54
 8013f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 81e0 	beq.w	80142da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	441a      	add	r2, r3
 8013f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f24:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013f26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013f28:	f7fb fa3a 	bl	800f3a0 <pbuf_clen>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	461a      	mov	r2, r3
 8013f30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f34:	4413      	add	r3, r2
 8013f36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013f3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f3e:	8bfb      	ldrh	r3, [r7, #30]
 8013f40:	4413      	add	r3, r2
 8013f42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013f46:	e0dc      	b.n	8014102 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 80d7 	beq.w	8014102 <tcp_write+0x47a>
 8013f54:	4b03      	ldr	r3, [pc, #12]	; (8013f64 <tcp_write+0x2dc>)
 8013f56:	f240 224a 	movw	r2, #586	; 0x24a
 8013f5a:	490a      	ldr	r1, [pc, #40]	; (8013f84 <tcp_write+0x2fc>)
 8013f5c:	4803      	ldr	r0, [pc, #12]	; (8013f6c <tcp_write+0x2e4>)
 8013f5e:	f006 ffdf 	bl	801af20 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013f62:	e0ce      	b.n	8014102 <tcp_write+0x47a>
 8013f64:	0801e010 	.word	0x0801e010
 8013f68:	0801e1b0 	.word	0x0801e1b0
 8013f6c:	0801e064 	.word	0x0801e064
 8013f70:	0801e1c8 	.word	0x0801e1c8
 8013f74:	0801e1fc 	.word	0x0801e1fc
 8013f78:	0801e214 	.word	0x0801e214
 8013f7c:	0801e234 	.word	0x0801e234
 8013f80:	0801e254 	.word	0x0801e254
 8013f84:	0801e280 	.word	0x0801e280
    struct pbuf *p;
    u16_t left = len - pos;
 8013f88:	88fa      	ldrh	r2, [r7, #6]
 8013f8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f8e:	1ad3      	subs	r3, r2, r3
 8013f90:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013f92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013f9e:	8b7a      	ldrh	r2, [r7, #26]
 8013fa0:	8bbb      	ldrh	r3, [r7, #28]
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	bf28      	it	cs
 8013fa6:	4613      	movcs	r3, r2
 8013fa8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013faa:	797b      	ldrb	r3, [r7, #5]
 8013fac:	f003 0301 	and.w	r3, r3, #1
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d036      	beq.n	8014022 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013fb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	8b3b      	ldrh	r3, [r7, #24]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	b299      	uxth	r1, r3
 8013fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	bf0c      	ite	eq
 8013fc6:	2301      	moveq	r3, #1
 8013fc8:	2300      	movne	r3, #0
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	f107 0012 	add.w	r0, r7, #18
 8013fd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013fd2:	9302      	str	r3, [sp, #8]
 8013fd4:	797b      	ldrb	r3, [r7, #5]
 8013fd6:	9301      	str	r3, [sp, #4]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	4603      	mov	r3, r0
 8013fde:	2036      	movs	r0, #54	; 0x36
 8013fe0:	f7ff fd5e 	bl	8013aa0 <tcp_pbuf_prealloc>
 8013fe4:	6338      	str	r0, [r7, #48]	; 0x30
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f000 8178 	beq.w	80142de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff0:	895b      	ldrh	r3, [r3, #10]
 8013ff2:	8b3a      	ldrh	r2, [r7, #24]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d906      	bls.n	8014006 <tcp_write+0x37e>
 8013ff8:	4b8c      	ldr	r3, [pc, #560]	; (801422c <tcp_write+0x5a4>)
 8013ffa:	f240 2266 	movw	r2, #614	; 0x266
 8013ffe:	498c      	ldr	r1, [pc, #560]	; (8014230 <tcp_write+0x5a8>)
 8014000:	488c      	ldr	r0, [pc, #560]	; (8014234 <tcp_write+0x5ac>)
 8014002:	f006 ff8d 	bl	801af20 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014008:	685a      	ldr	r2, [r3, #4]
 801400a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801400e:	18d0      	adds	r0, r2, r3
 8014010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014014:	68ba      	ldr	r2, [r7, #8]
 8014016:	4413      	add	r3, r2
 8014018:	8b3a      	ldrh	r2, [r7, #24]
 801401a:	4619      	mov	r1, r3
 801401c:	f006 ff0f 	bl	801ae3e <memcpy>
 8014020:	e02f      	b.n	8014082 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014022:	8a7b      	ldrh	r3, [r7, #18]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d006      	beq.n	8014036 <tcp_write+0x3ae>
 8014028:	4b80      	ldr	r3, [pc, #512]	; (801422c <tcp_write+0x5a4>)
 801402a:	f240 2271 	movw	r2, #625	; 0x271
 801402e:	4982      	ldr	r1, [pc, #520]	; (8014238 <tcp_write+0x5b0>)
 8014030:	4880      	ldr	r0, [pc, #512]	; (8014234 <tcp_write+0x5ac>)
 8014032:	f006 ff75 	bl	801af20 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014036:	8b3b      	ldrh	r3, [r7, #24]
 8014038:	2201      	movs	r2, #1
 801403a:	4619      	mov	r1, r3
 801403c:	2036      	movs	r0, #54	; 0x36
 801403e:	f7fa fe3d 	bl	800ecbc <pbuf_alloc>
 8014042:	6178      	str	r0, [r7, #20]
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	2b00      	cmp	r3, #0
 8014048:	f000 814b 	beq.w	80142e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801404c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014050:	68ba      	ldr	r2, [r7, #8]
 8014052:	441a      	add	r2, r3
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801405c:	b29b      	uxth	r3, r3
 801405e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014062:	4619      	mov	r1, r3
 8014064:	2036      	movs	r0, #54	; 0x36
 8014066:	f7fa fe29 	bl	800ecbc <pbuf_alloc>
 801406a:	6338      	str	r0, [r7, #48]	; 0x30
 801406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406e:	2b00      	cmp	r3, #0
 8014070:	d103      	bne.n	801407a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014072:	6978      	ldr	r0, [r7, #20]
 8014074:	f7fb f906 	bl	800f284 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014078:	e136      	b.n	80142e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801407a:	6979      	ldr	r1, [r7, #20]
 801407c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801407e:	f7fb f9cf 	bl	800f420 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014084:	f7fb f98c 	bl	800f3a0 <pbuf_clen>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014090:	4413      	add	r3, r2
 8014092:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801409a:	2b09      	cmp	r3, #9
 801409c:	d903      	bls.n	80140a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801409e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140a0:	f7fb f8f0 	bl	800f284 <pbuf_free>
      goto memerr;
 80140a4:	e120      	b.n	80142e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80140aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80140ae:	441a      	add	r2, r3
 80140b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	4613      	mov	r3, r2
 80140b8:	2200      	movs	r2, #0
 80140ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ff fc51 	bl	8013964 <tcp_create_segment>
 80140c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80140c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	f000 810d 	beq.w	80142e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80140cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d102      	bne.n	80140d8 <tcp_write+0x450>
      queue = seg;
 80140d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140d4:	647b      	str	r3, [r7, #68]	; 0x44
 80140d6:	e00c      	b.n	80140f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80140d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d106      	bne.n	80140ec <tcp_write+0x464>
 80140de:	4b53      	ldr	r3, [pc, #332]	; (801422c <tcp_write+0x5a4>)
 80140e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80140e4:	4955      	ldr	r1, [pc, #340]	; (801423c <tcp_write+0x5b4>)
 80140e6:	4853      	ldr	r0, [pc, #332]	; (8014234 <tcp_write+0x5ac>)
 80140e8:	f006 ff1a 	bl	801af20 <iprintf>
      prev_seg->next = seg;
 80140ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80140f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80140f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140f4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80140f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80140fa:	8b3b      	ldrh	r3, [r7, #24]
 80140fc:	4413      	add	r3, r2
 80140fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014102:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014106:	88fb      	ldrh	r3, [r7, #6]
 8014108:	429a      	cmp	r2, r3
 801410a:	f4ff af3d 	bcc.w	8013f88 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801410e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014110:	2b00      	cmp	r3, #0
 8014112:	d02c      	beq.n	801416e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801411a:	e01e      	b.n	801415a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411e:	891a      	ldrh	r2, [r3, #8]
 8014120:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014122:	4413      	add	r3, r2
 8014124:	b29a      	uxth	r2, r3
 8014126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014128:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d110      	bne.n	8014154 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014138:	8952      	ldrh	r2, [r2, #10]
 801413a:	4413      	add	r3, r2
 801413c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801413e:	68b9      	ldr	r1, [r7, #8]
 8014140:	4618      	mov	r0, r3
 8014142:	f006 fe7c 	bl	801ae3e <memcpy>
        p->len += oversize_used;
 8014146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014148:	895a      	ldrh	r2, [r3, #10]
 801414a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801414c:	4413      	add	r3, r2
 801414e:	b29a      	uxth	r2, r3
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	62fb      	str	r3, [r7, #44]	; 0x2c
 801415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415c:	2b00      	cmp	r3, #0
 801415e:	d1dd      	bne.n	801411c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014162:	891a      	ldrh	r2, [r3, #8]
 8014164:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014166:	4413      	add	r3, r2
 8014168:	b29a      	uxth	r2, r3
 801416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801416c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801416e:	8a7a      	ldrh	r2, [r7, #18]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014178:	2b00      	cmp	r3, #0
 801417a:	d018      	beq.n	80141ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801417c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801417e:	2b00      	cmp	r3, #0
 8014180:	d106      	bne.n	8014190 <tcp_write+0x508>
 8014182:	4b2a      	ldr	r3, [pc, #168]	; (801422c <tcp_write+0x5a4>)
 8014184:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014188:	492d      	ldr	r1, [pc, #180]	; (8014240 <tcp_write+0x5b8>)
 801418a:	482a      	ldr	r0, [pc, #168]	; (8014234 <tcp_write+0x5ac>)
 801418c:	f006 fec8 	bl	801af20 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014196:	4618      	mov	r0, r3
 8014198:	f7fb f942 	bl	800f420 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801419c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801419e:	891a      	ldrh	r2, [r3, #8]
 80141a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141a2:	891b      	ldrh	r3, [r3, #8]
 80141a4:	4413      	add	r3, r2
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141aa:	811a      	strh	r2, [r3, #8]
 80141ac:	e037      	b.n	801421e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80141ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d034      	beq.n	801421e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80141b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <tcp_write+0x53a>
 80141ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d106      	bne.n	80141d0 <tcp_write+0x548>
 80141c2:	4b1a      	ldr	r3, [pc, #104]	; (801422c <tcp_write+0x5a4>)
 80141c4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80141c8:	491e      	ldr	r1, [pc, #120]	; (8014244 <tcp_write+0x5bc>)
 80141ca:	481a      	ldr	r0, [pc, #104]	; (8014234 <tcp_write+0x5ac>)
 80141cc:	f006 fea8 	bl	801af20 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80141d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80141d6:	e009      	b.n	80141ec <tcp_write+0x564>
      p->tot_len += extendlen;
 80141d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141da:	891a      	ldrh	r2, [r3, #8]
 80141dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141de:	4413      	add	r3, r2
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80141e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80141ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d1f1      	bne.n	80141d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80141f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f6:	891a      	ldrh	r2, [r3, #8]
 80141f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80141fa:	4413      	add	r3, r2
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014200:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014204:	895a      	ldrh	r2, [r3, #10]
 8014206:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014208:	4413      	add	r3, r2
 801420a:	b29a      	uxth	r2, r3
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014212:	891a      	ldrh	r2, [r3, #8]
 8014214:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014216:	4413      	add	r3, r2
 8014218:	b29a      	uxth	r2, r3
 801421a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801421c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801421e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014220:	2b00      	cmp	r3, #0
 8014222:	d111      	bne.n	8014248 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014228:	66da      	str	r2, [r3, #108]	; 0x6c
 801422a:	e010      	b.n	801424e <tcp_write+0x5c6>
 801422c:	0801e010 	.word	0x0801e010
 8014230:	0801e2b0 	.word	0x0801e2b0
 8014234:	0801e064 	.word	0x0801e064
 8014238:	0801e2f0 	.word	0x0801e2f0
 801423c:	0801e300 	.word	0x0801e300
 8014240:	0801e314 	.word	0x0801e314
 8014244:	0801e34c 	.word	0x0801e34c
  } else {
    last_unsent->next = queue;
 8014248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801424a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801424c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014252:	88fb      	ldrh	r3, [r7, #6]
 8014254:	441a      	add	r2, r3
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014260:	88fb      	ldrh	r3, [r7, #6]
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	b29a      	uxth	r2, r3
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014272:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801427c:	2b00      	cmp	r3, #0
 801427e:	d00e      	beq.n	801429e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014284:	2b00      	cmp	r3, #0
 8014286:	d10a      	bne.n	801429e <tcp_write+0x616>
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801428c:	2b00      	cmp	r3, #0
 801428e:	d106      	bne.n	801429e <tcp_write+0x616>
 8014290:	4b2c      	ldr	r3, [pc, #176]	; (8014344 <tcp_write+0x6bc>)
 8014292:	f240 3212 	movw	r2, #786	; 0x312
 8014296:	492c      	ldr	r1, [pc, #176]	; (8014348 <tcp_write+0x6c0>)
 8014298:	482c      	ldr	r0, [pc, #176]	; (801434c <tcp_write+0x6c4>)
 801429a:	f006 fe41 	bl	801af20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d016      	beq.n	80142d2 <tcp_write+0x64a>
 80142a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142a6:	68db      	ldr	r3, [r3, #12]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d012      	beq.n	80142d2 <tcp_write+0x64a>
 80142ac:	797b      	ldrb	r3, [r7, #5]
 80142ae:	f003 0302 	and.w	r3, r3, #2
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d10d      	bne.n	80142d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80142b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	899b      	ldrh	r3, [r3, #12]
 80142bc:	b29c      	uxth	r4, r3
 80142be:	2008      	movs	r0, #8
 80142c0:	f7f9 fb2a 	bl	800d918 <lwip_htons>
 80142c4:	4603      	mov	r3, r0
 80142c6:	461a      	mov	r2, r3
 80142c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	4322      	orrs	r2, r4
 80142ce:	b292      	uxth	r2, r2
 80142d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80142d2:	2300      	movs	r3, #0
 80142d4:	e031      	b.n	801433a <tcp_write+0x6b2>
          goto memerr;
 80142d6:	bf00      	nop
 80142d8:	e006      	b.n	80142e8 <tcp_write+0x660>
            goto memerr;
 80142da:	bf00      	nop
 80142dc:	e004      	b.n	80142e8 <tcp_write+0x660>
        goto memerr;
 80142de:	bf00      	nop
 80142e0:	e002      	b.n	80142e8 <tcp_write+0x660>
        goto memerr;
 80142e2:	bf00      	nop
 80142e4:	e000      	b.n	80142e8 <tcp_write+0x660>
      goto memerr;
 80142e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	8b5b      	ldrh	r3, [r3, #26]
 80142ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80142f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d002      	beq.n	8014302 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80142fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80142fe:	f7fa ffc1 	bl	800f284 <pbuf_free>
  }
  if (queue != NULL) {
 8014302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014308:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801430a:	f7fc fb6f 	bl	80109ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00e      	beq.n	8014336 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431c:	2b00      	cmp	r3, #0
 801431e:	d10a      	bne.n	8014336 <tcp_write+0x6ae>
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014324:	2b00      	cmp	r3, #0
 8014326:	d106      	bne.n	8014336 <tcp_write+0x6ae>
 8014328:	4b06      	ldr	r3, [pc, #24]	; (8014344 <tcp_write+0x6bc>)
 801432a:	f240 3227 	movw	r2, #807	; 0x327
 801432e:	4906      	ldr	r1, [pc, #24]	; (8014348 <tcp_write+0x6c0>)
 8014330:	4806      	ldr	r0, [pc, #24]	; (801434c <tcp_write+0x6c4>)
 8014332:	f006 fdf5 	bl	801af20 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014336:	f04f 33ff 	mov.w	r3, #4294967295
}
 801433a:	4618      	mov	r0, r3
 801433c:	375c      	adds	r7, #92	; 0x5c
 801433e:	46bd      	mov	sp, r7
 8014340:	bd90      	pop	{r4, r7, pc}
 8014342:	bf00      	nop
 8014344:	0801e010 	.word	0x0801e010
 8014348:	0801e384 	.word	0x0801e384
 801434c:	0801e064 	.word	0x0801e064

08014350 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014350:	b590      	push	{r4, r7, lr}
 8014352:	b08b      	sub	sp, #44	; 0x2c
 8014354:	af02      	add	r7, sp, #8
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	460b      	mov	r3, r1
 801435a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801435c:	2300      	movs	r3, #0
 801435e:	61fb      	str	r3, [r7, #28]
 8014360:	2300      	movs	r3, #0
 8014362:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014364:	2300      	movs	r3, #0
 8014366:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <tcp_split_unsent_seg+0x2c>
 801436e:	4b95      	ldr	r3, [pc, #596]	; (80145c4 <tcp_split_unsent_seg+0x274>)
 8014370:	f240 324b 	movw	r2, #843	; 0x34b
 8014374:	4994      	ldr	r1, [pc, #592]	; (80145c8 <tcp_split_unsent_seg+0x278>)
 8014376:	4895      	ldr	r0, [pc, #596]	; (80145cc <tcp_split_unsent_seg+0x27c>)
 8014378:	f006 fdd2 	bl	801af20 <iprintf>

  useg = pcb->unsent;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014380:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d102      	bne.n	801438e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014388:	f04f 33ff 	mov.w	r3, #4294967295
 801438c:	e116      	b.n	80145bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801438e:	887b      	ldrh	r3, [r7, #2]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d109      	bne.n	80143a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014394:	4b8b      	ldr	r3, [pc, #556]	; (80145c4 <tcp_split_unsent_seg+0x274>)
 8014396:	f240 3253 	movw	r2, #851	; 0x353
 801439a:	498d      	ldr	r1, [pc, #564]	; (80145d0 <tcp_split_unsent_seg+0x280>)
 801439c:	488b      	ldr	r0, [pc, #556]	; (80145cc <tcp_split_unsent_seg+0x27c>)
 801439e:	f006 fdbf 	bl	801af20 <iprintf>
    return ERR_VAL;
 80143a2:	f06f 0305 	mvn.w	r3, #5
 80143a6:	e109      	b.n	80145bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	891b      	ldrh	r3, [r3, #8]
 80143ac:	887a      	ldrh	r2, [r7, #2]
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d301      	bcc.n	80143b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80143b2:	2300      	movs	r3, #0
 80143b4:	e102      	b.n	80145bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143ba:	887a      	ldrh	r2, [r7, #2]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d906      	bls.n	80143ce <tcp_split_unsent_seg+0x7e>
 80143c0:	4b80      	ldr	r3, [pc, #512]	; (80145c4 <tcp_split_unsent_seg+0x274>)
 80143c2:	f240 325b 	movw	r2, #859	; 0x35b
 80143c6:	4983      	ldr	r1, [pc, #524]	; (80145d4 <tcp_split_unsent_seg+0x284>)
 80143c8:	4880      	ldr	r0, [pc, #512]	; (80145cc <tcp_split_unsent_seg+0x27c>)
 80143ca:	f006 fda9 	bl	801af20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	891b      	ldrh	r3, [r3, #8]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d106      	bne.n	80143e4 <tcp_split_unsent_seg+0x94>
 80143d6:	4b7b      	ldr	r3, [pc, #492]	; (80145c4 <tcp_split_unsent_seg+0x274>)
 80143d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80143dc:	497e      	ldr	r1, [pc, #504]	; (80145d8 <tcp_split_unsent_seg+0x288>)
 80143de:	487b      	ldr	r0, [pc, #492]	; (80145cc <tcp_split_unsent_seg+0x27c>)
 80143e0:	f006 fd9e 	bl	801af20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	7a9b      	ldrb	r3, [r3, #10]
 80143e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	f003 0304 	and.w	r3, r3, #4
 80143f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	891a      	ldrh	r2, [r3, #8]
 80143fa:	887b      	ldrh	r3, [r7, #2]
 80143fc:	1ad3      	subs	r3, r2, r3
 80143fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014400:	7bbb      	ldrb	r3, [r7, #14]
 8014402:	b29a      	uxth	r2, r3
 8014404:	89bb      	ldrh	r3, [r7, #12]
 8014406:	4413      	add	r3, r2
 8014408:	b29b      	uxth	r3, r3
 801440a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801440e:	4619      	mov	r1, r3
 8014410:	2036      	movs	r0, #54	; 0x36
 8014412:	f7fa fc53 	bl	800ecbc <pbuf_alloc>
 8014416:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f000 80b7 	beq.w	801458e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	891a      	ldrh	r2, [r3, #8]
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	891b      	ldrh	r3, [r3, #8]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	b29a      	uxth	r2, r3
 801442e:	887b      	ldrh	r3, [r7, #2]
 8014430:	4413      	add	r3, r2
 8014432:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	6858      	ldr	r0, [r3, #4]
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	685a      	ldr	r2, [r3, #4]
 801443c:	7bbb      	ldrb	r3, [r7, #14]
 801443e:	18d1      	adds	r1, r2, r3
 8014440:	897b      	ldrh	r3, [r7, #10]
 8014442:	89ba      	ldrh	r2, [r7, #12]
 8014444:	f7fb f924 	bl	800f690 <pbuf_copy_partial>
 8014448:	4603      	mov	r3, r0
 801444a:	461a      	mov	r2, r3
 801444c:	89bb      	ldrh	r3, [r7, #12]
 801444e:	4293      	cmp	r3, r2
 8014450:	f040 809f 	bne.w	8014592 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	899b      	ldrh	r3, [r3, #12]
 801445a:	b29b      	uxth	r3, r3
 801445c:	4618      	mov	r0, r3
 801445e:	f7f9 fa5b 	bl	800d918 <lwip_htons>
 8014462:	4603      	mov	r3, r0
 8014464:	b2db      	uxtb	r3, r3
 8014466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801446a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801446c:	2300      	movs	r3, #0
 801446e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014470:	7efb      	ldrb	r3, [r7, #27]
 8014472:	f003 0308 	and.w	r3, r3, #8
 8014476:	2b00      	cmp	r3, #0
 8014478:	d007      	beq.n	801448a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801447a:	7efb      	ldrb	r3, [r7, #27]
 801447c:	f023 0308 	bic.w	r3, r3, #8
 8014480:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014482:	7ebb      	ldrb	r3, [r7, #26]
 8014484:	f043 0308 	orr.w	r3, r3, #8
 8014488:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801448a:	7efb      	ldrb	r3, [r7, #27]
 801448c:	f003 0301 	and.w	r3, r3, #1
 8014490:	2b00      	cmp	r3, #0
 8014492:	d007      	beq.n	80144a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014494:	7efb      	ldrb	r3, [r7, #27]
 8014496:	f023 0301 	bic.w	r3, r3, #1
 801449a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801449c:	7ebb      	ldrb	r3, [r7, #26]
 801449e:	f043 0301 	orr.w	r3, r3, #1
 80144a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	68db      	ldr	r3, [r3, #12]
 80144a8:	685b      	ldr	r3, [r3, #4]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7f9 fa49 	bl	800d942 <lwip_htonl>
 80144b0:	4602      	mov	r2, r0
 80144b2:	887b      	ldrh	r3, [r7, #2]
 80144b4:	18d1      	adds	r1, r2, r3
 80144b6:	7eba      	ldrb	r2, [r7, #26]
 80144b8:	7bfb      	ldrb	r3, [r7, #15]
 80144ba:	9300      	str	r3, [sp, #0]
 80144bc:	460b      	mov	r3, r1
 80144be:	6939      	ldr	r1, [r7, #16]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f7ff fa4f 	bl	8013964 <tcp_create_segment>
 80144c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d063      	beq.n	8014596 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fa ff64 	bl	800f3a0 <pbuf_clen>
 80144d8:	4603      	mov	r3, r0
 80144da:	461a      	mov	r2, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144e2:	1a9b      	subs	r3, r3, r2
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	6858      	ldr	r0, [r3, #4]
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	891a      	ldrh	r2, [r3, #8]
 80144f6:	89bb      	ldrh	r3, [r7, #12]
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	4619      	mov	r1, r3
 80144fe:	f7fa fd3b 	bl	800ef78 <pbuf_realloc>
  useg->len -= remainder;
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	891a      	ldrh	r2, [r3, #8]
 8014506:	89bb      	ldrh	r3, [r7, #12]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	b29a      	uxth	r2, r3
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	899b      	ldrh	r3, [r3, #12]
 8014516:	b29c      	uxth	r4, r3
 8014518:	7efb      	ldrb	r3, [r7, #27]
 801451a:	b29b      	uxth	r3, r3
 801451c:	4618      	mov	r0, r3
 801451e:	f7f9 f9fb 	bl	800d918 <lwip_htons>
 8014522:	4603      	mov	r3, r0
 8014524:	461a      	mov	r2, r3
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	68db      	ldr	r3, [r3, #12]
 801452a:	4322      	orrs	r2, r4
 801452c:	b292      	uxth	r2, r2
 801452e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	4618      	mov	r0, r3
 8014536:	f7fa ff33 	bl	800f3a0 <pbuf_clen>
 801453a:	4603      	mov	r3, r0
 801453c:	461a      	mov	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014544:	4413      	add	r3, r2
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	4618      	mov	r0, r3
 8014554:	f7fa ff24 	bl	800f3a0 <pbuf_clen>
 8014558:	4603      	mov	r3, r0
 801455a:	461a      	mov	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014562:	4413      	add	r3, r2
 8014564:	b29a      	uxth	r2, r3
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	69fa      	ldr	r2, [r7, #28]
 8014578:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d103      	bne.n	801458a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801458a:	2300      	movs	r3, #0
 801458c:	e016      	b.n	80145bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801458e:	bf00      	nop
 8014590:	e002      	b.n	8014598 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014592:	bf00      	nop
 8014594:	e000      	b.n	8014598 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014596:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d006      	beq.n	80145ac <tcp_split_unsent_seg+0x25c>
 801459e:	4b09      	ldr	r3, [pc, #36]	; (80145c4 <tcp_split_unsent_seg+0x274>)
 80145a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80145a4:	490d      	ldr	r1, [pc, #52]	; (80145dc <tcp_split_unsent_seg+0x28c>)
 80145a6:	4809      	ldr	r0, [pc, #36]	; (80145cc <tcp_split_unsent_seg+0x27c>)
 80145a8:	f006 fcba 	bl	801af20 <iprintf>
  if (p != NULL) {
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d002      	beq.n	80145b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80145b2:	6938      	ldr	r0, [r7, #16]
 80145b4:	f7fa fe66 	bl	800f284 <pbuf_free>
  }

  return ERR_MEM;
 80145b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3724      	adds	r7, #36	; 0x24
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd90      	pop	{r4, r7, pc}
 80145c4:	0801e010 	.word	0x0801e010
 80145c8:	0801e3a4 	.word	0x0801e3a4
 80145cc:	0801e064 	.word	0x0801e064
 80145d0:	0801e3c8 	.word	0x0801e3c8
 80145d4:	0801e3ec 	.word	0x0801e3ec
 80145d8:	0801e3fc 	.word	0x0801e3fc
 80145dc:	0801e40c 	.word	0x0801e40c

080145e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80145e0:	b590      	push	{r4, r7, lr}
 80145e2:	b085      	sub	sp, #20
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <tcp_send_fin+0x1c>
 80145ee:	4b21      	ldr	r3, [pc, #132]	; (8014674 <tcp_send_fin+0x94>)
 80145f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80145f4:	4920      	ldr	r1, [pc, #128]	; (8014678 <tcp_send_fin+0x98>)
 80145f6:	4821      	ldr	r0, [pc, #132]	; (801467c <tcp_send_fin+0x9c>)
 80145f8:	f006 fc92 	bl	801af20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014600:	2b00      	cmp	r3, #0
 8014602:	d02e      	beq.n	8014662 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014608:	60fb      	str	r3, [r7, #12]
 801460a:	e002      	b.n	8014612 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d1f8      	bne.n	801460c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	899b      	ldrh	r3, [r3, #12]
 8014620:	b29b      	uxth	r3, r3
 8014622:	4618      	mov	r0, r3
 8014624:	f7f9 f978 	bl	800d918 <lwip_htons>
 8014628:	4603      	mov	r3, r0
 801462a:	b2db      	uxtb	r3, r3
 801462c:	f003 0307 	and.w	r3, r3, #7
 8014630:	2b00      	cmp	r3, #0
 8014632:	d116      	bne.n	8014662 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	899b      	ldrh	r3, [r3, #12]
 801463a:	b29c      	uxth	r4, r3
 801463c:	2001      	movs	r0, #1
 801463e:	f7f9 f96b 	bl	800d918 <lwip_htons>
 8014642:	4603      	mov	r3, r0
 8014644:	461a      	mov	r2, r3
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	4322      	orrs	r2, r4
 801464c:	b292      	uxth	r2, r2
 801464e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	8b5b      	ldrh	r3, [r3, #26]
 8014654:	f043 0320 	orr.w	r3, r3, #32
 8014658:	b29a      	uxth	r2, r3
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	e004      	b.n	801466c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014662:	2101      	movs	r1, #1
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 f80b 	bl	8014680 <tcp_enqueue_flags>
 801466a:	4603      	mov	r3, r0
}
 801466c:	4618      	mov	r0, r3
 801466e:	3714      	adds	r7, #20
 8014670:	46bd      	mov	sp, r7
 8014672:	bd90      	pop	{r4, r7, pc}
 8014674:	0801e010 	.word	0x0801e010
 8014678:	0801e418 	.word	0x0801e418
 801467c:	0801e064 	.word	0x0801e064

08014680 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b08a      	sub	sp, #40	; 0x28
 8014684:	af02      	add	r7, sp, #8
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801468c:	2300      	movs	r3, #0
 801468e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014690:	2300      	movs	r3, #0
 8014692:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014694:	78fb      	ldrb	r3, [r7, #3]
 8014696:	f003 0303 	and.w	r3, r3, #3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d106      	bne.n	80146ac <tcp_enqueue_flags+0x2c>
 801469e:	4b67      	ldr	r3, [pc, #412]	; (801483c <tcp_enqueue_flags+0x1bc>)
 80146a0:	f240 4211 	movw	r2, #1041	; 0x411
 80146a4:	4966      	ldr	r1, [pc, #408]	; (8014840 <tcp_enqueue_flags+0x1c0>)
 80146a6:	4867      	ldr	r0, [pc, #412]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 80146a8:	f006 fc3a 	bl	801af20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d106      	bne.n	80146c0 <tcp_enqueue_flags+0x40>
 80146b2:	4b62      	ldr	r3, [pc, #392]	; (801483c <tcp_enqueue_flags+0x1bc>)
 80146b4:	f240 4213 	movw	r2, #1043	; 0x413
 80146b8:	4963      	ldr	r1, [pc, #396]	; (8014848 <tcp_enqueue_flags+0x1c8>)
 80146ba:	4862      	ldr	r0, [pc, #392]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 80146bc:	f006 fc30 	bl	801af20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80146c0:	78fb      	ldrb	r3, [r7, #3]
 80146c2:	f003 0302 	and.w	r3, r3, #2
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d001      	beq.n	80146ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80146ca:	2301      	movs	r3, #1
 80146cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146ce:	7ffb      	ldrb	r3, [r7, #31]
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	f003 0304 	and.w	r3, r3, #4
 80146d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80146da:	7dfb      	ldrb	r3, [r7, #23]
 80146dc:	b29b      	uxth	r3, r3
 80146de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146e2:	4619      	mov	r1, r3
 80146e4:	2036      	movs	r0, #54	; 0x36
 80146e6:	f7fa fae9 	bl	800ecbc <pbuf_alloc>
 80146ea:	6138      	str	r0, [r7, #16]
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d109      	bne.n	8014706 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	8b5b      	ldrh	r3, [r3, #26]
 80146f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146fa:	b29a      	uxth	r2, r3
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014700:	f04f 33ff 	mov.w	r3, #4294967295
 8014704:	e095      	b.n	8014832 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	895a      	ldrh	r2, [r3, #10]
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	b29b      	uxth	r3, r3
 801470e:	429a      	cmp	r2, r3
 8014710:	d206      	bcs.n	8014720 <tcp_enqueue_flags+0xa0>
 8014712:	4b4a      	ldr	r3, [pc, #296]	; (801483c <tcp_enqueue_flags+0x1bc>)
 8014714:	f240 4239 	movw	r2, #1081	; 0x439
 8014718:	494c      	ldr	r1, [pc, #304]	; (801484c <tcp_enqueue_flags+0x1cc>)
 801471a:	484a      	ldr	r0, [pc, #296]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 801471c:	f006 fc00 	bl	801af20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014724:	78fa      	ldrb	r2, [r7, #3]
 8014726:	7ffb      	ldrb	r3, [r7, #31]
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	460b      	mov	r3, r1
 801472c:	6939      	ldr	r1, [r7, #16]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7ff f918 	bl	8013964 <tcp_create_segment>
 8014734:	60f8      	str	r0, [r7, #12]
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d109      	bne.n	8014750 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	8b5b      	ldrh	r3, [r3, #26]
 8014740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014744:	b29a      	uxth	r2, r3
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801474a:	f04f 33ff 	mov.w	r3, #4294967295
 801474e:	e070      	b.n	8014832 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	f003 0303 	and.w	r3, r3, #3
 8014758:	2b00      	cmp	r3, #0
 801475a:	d006      	beq.n	801476a <tcp_enqueue_flags+0xea>
 801475c:	4b37      	ldr	r3, [pc, #220]	; (801483c <tcp_enqueue_flags+0x1bc>)
 801475e:	f240 4242 	movw	r2, #1090	; 0x442
 8014762:	493b      	ldr	r1, [pc, #236]	; (8014850 <tcp_enqueue_flags+0x1d0>)
 8014764:	4837      	ldr	r0, [pc, #220]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 8014766:	f006 fbdb 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	891b      	ldrh	r3, [r3, #8]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d006      	beq.n	8014780 <tcp_enqueue_flags+0x100>
 8014772:	4b32      	ldr	r3, [pc, #200]	; (801483c <tcp_enqueue_flags+0x1bc>)
 8014774:	f240 4243 	movw	r2, #1091	; 0x443
 8014778:	4936      	ldr	r1, [pc, #216]	; (8014854 <tcp_enqueue_flags+0x1d4>)
 801477a:	4832      	ldr	r0, [pc, #200]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 801477c:	f006 fbd0 	bl	801af20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014784:	2b00      	cmp	r3, #0
 8014786:	d103      	bne.n	8014790 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	66da      	str	r2, [r3, #108]	; 0x6c
 801478e:	e00d      	b.n	80147ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014794:	61bb      	str	r3, [r7, #24]
 8014796:	e002      	b.n	801479e <tcp_enqueue_flags+0x11e>
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	61bb      	str	r3, [r7, #24]
 801479e:	69bb      	ldr	r3, [r7, #24]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d1f8      	bne.n	8014798 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80147b4:	78fb      	ldrb	r3, [r7, #3]
 80147b6:	f003 0302 	and.w	r3, r3, #2
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d104      	bne.n	80147c8 <tcp_enqueue_flags+0x148>
 80147be:	78fb      	ldrb	r3, [r7, #3]
 80147c0:	f003 0301 	and.w	r3, r3, #1
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d004      	beq.n	80147d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147cc:	1c5a      	adds	r2, r3, #1
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80147d2:	78fb      	ldrb	r3, [r7, #3]
 80147d4:	f003 0301 	and.w	r3, r3, #1
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d006      	beq.n	80147ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8b5b      	ldrh	r3, [r3, #26]
 80147e0:	f043 0320 	orr.w	r3, r3, #32
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7fa fdd6 	bl	800f3a0 <pbuf_clen>
 80147f4:	4603      	mov	r3, r0
 80147f6:	461a      	mov	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80147fe:	4413      	add	r3, r2
 8014800:	b29a      	uxth	r2, r3
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00e      	beq.n	8014830 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014816:	2b00      	cmp	r3, #0
 8014818:	d10a      	bne.n	8014830 <tcp_enqueue_flags+0x1b0>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801481e:	2b00      	cmp	r3, #0
 8014820:	d106      	bne.n	8014830 <tcp_enqueue_flags+0x1b0>
 8014822:	4b06      	ldr	r3, [pc, #24]	; (801483c <tcp_enqueue_flags+0x1bc>)
 8014824:	f240 4265 	movw	r2, #1125	; 0x465
 8014828:	490b      	ldr	r1, [pc, #44]	; (8014858 <tcp_enqueue_flags+0x1d8>)
 801482a:	4806      	ldr	r0, [pc, #24]	; (8014844 <tcp_enqueue_flags+0x1c4>)
 801482c:	f006 fb78 	bl	801af20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3720      	adds	r7, #32
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	0801e010 	.word	0x0801e010
 8014840:	0801e434 	.word	0x0801e434
 8014844:	0801e064 	.word	0x0801e064
 8014848:	0801e48c 	.word	0x0801e48c
 801484c:	0801e4ac 	.word	0x0801e4ac
 8014850:	0801e4e8 	.word	0x0801e4e8
 8014854:	0801e500 	.word	0x0801e500
 8014858:	0801e52c 	.word	0x0801e52c

0801485c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801485c:	b5b0      	push	{r4, r5, r7, lr}
 801485e:	b08a      	sub	sp, #40	; 0x28
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d106      	bne.n	8014878 <tcp_output+0x1c>
 801486a:	4b9e      	ldr	r3, [pc, #632]	; (8014ae4 <tcp_output+0x288>)
 801486c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014870:	499d      	ldr	r1, [pc, #628]	; (8014ae8 <tcp_output+0x28c>)
 8014872:	489e      	ldr	r0, [pc, #632]	; (8014aec <tcp_output+0x290>)
 8014874:	f006 fb54 	bl	801af20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	7d1b      	ldrb	r3, [r3, #20]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d106      	bne.n	801488e <tcp_output+0x32>
 8014880:	4b98      	ldr	r3, [pc, #608]	; (8014ae4 <tcp_output+0x288>)
 8014882:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014886:	499a      	ldr	r1, [pc, #616]	; (8014af0 <tcp_output+0x294>)
 8014888:	4898      	ldr	r0, [pc, #608]	; (8014aec <tcp_output+0x290>)
 801488a:	f006 fb49 	bl	801af20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801488e:	4b99      	ldr	r3, [pc, #612]	; (8014af4 <tcp_output+0x298>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	429a      	cmp	r2, r3
 8014896:	d101      	bne.n	801489c <tcp_output+0x40>
    return ERR_OK;
 8014898:	2300      	movs	r3, #0
 801489a:	e1ce      	b.n	8014c3a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80148a8:	4293      	cmp	r3, r2
 80148aa:	bf28      	it	cs
 80148ac:	4613      	movcs	r3, r2
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80148b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d10b      	bne.n	80148d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	8b5b      	ldrh	r3, [r3, #26]
 80148c2:	f003 0302 	and.w	r3, r3, #2
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f000 81aa 	beq.w	8014c20 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 fdcb 	bl	8015468 <tcp_send_empty_ack>
 80148d2:	4603      	mov	r3, r0
 80148d4:	e1b1      	b.n	8014c3a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80148d6:	6879      	ldr	r1, [r7, #4]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	3304      	adds	r3, #4
 80148dc:	461a      	mov	r2, r3
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7ff f824 	bl	801392c <tcp_route>
 80148e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d102      	bne.n	80148f2 <tcp_output+0x96>
    return ERR_RTE;
 80148ec:	f06f 0303 	mvn.w	r3, #3
 80148f0:	e1a3      	b.n	8014c3a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d003      	beq.n	8014900 <tcp_output+0xa4>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d111      	bne.n	8014924 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d002      	beq.n	801490c <tcp_output+0xb0>
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	3304      	adds	r3, #4
 801490a:	e000      	b.n	801490e <tcp_output+0xb2>
 801490c:	2300      	movs	r3, #0
 801490e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d102      	bne.n	801491c <tcp_output+0xc0>
      return ERR_RTE;
 8014916:	f06f 0303 	mvn.w	r3, #3
 801491a:	e18e      	b.n	8014c3a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	f7f9 f809 	bl	800d942 <lwip_htonl>
 8014930:	4602      	mov	r2, r0
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801493a:	8912      	ldrh	r2, [r2, #8]
 801493c:	4413      	add	r3, r2
 801493e:	69ba      	ldr	r2, [r7, #24]
 8014940:	429a      	cmp	r2, r3
 8014942:	d227      	bcs.n	8014994 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801494a:	461a      	mov	r2, r3
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	4293      	cmp	r3, r2
 8014950:	d114      	bne.n	801497c <tcp_output+0x120>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014956:	2b00      	cmp	r3, #0
 8014958:	d110      	bne.n	801497c <tcp_output+0x120>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014960:	2b00      	cmp	r3, #0
 8014962:	d10b      	bne.n	801497c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2201      	movs	r2, #1
 8014970:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	8b5b      	ldrh	r3, [r3, #26]
 8014980:	f003 0302 	and.w	r3, r3, #2
 8014984:	2b00      	cmp	r3, #0
 8014986:	f000 814d 	beq.w	8014c24 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f000 fd6c 	bl	8015468 <tcp_send_empty_ack>
 8014990:	4603      	mov	r3, r0
 8014992:	e152      	b.n	8014c3a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	f000 811c 	beq.w	8014be2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80149aa:	e002      	b.n	80149b2 <tcp_output+0x156>
 80149ac:	6a3b      	ldr	r3, [r7, #32]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	623b      	str	r3, [r7, #32]
 80149b2:	6a3b      	ldr	r3, [r7, #32]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d1f8      	bne.n	80149ac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80149ba:	e112      	b.n	8014be2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80149bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	899b      	ldrh	r3, [r3, #12]
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f8 ffa7 	bl	800d918 <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	f003 0304 	and.w	r3, r3, #4
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d006      	beq.n	80149e4 <tcp_output+0x188>
 80149d6:	4b43      	ldr	r3, [pc, #268]	; (8014ae4 <tcp_output+0x288>)
 80149d8:	f240 5236 	movw	r2, #1334	; 0x536
 80149dc:	4946      	ldr	r1, [pc, #280]	; (8014af8 <tcp_output+0x29c>)
 80149de:	4843      	ldr	r0, [pc, #268]	; (8014aec <tcp_output+0x290>)
 80149e0:	f006 fa9e 	bl	801af20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d01f      	beq.n	8014a2c <tcp_output+0x1d0>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	8b5b      	ldrh	r3, [r3, #26]
 80149f0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d119      	bne.n	8014a2c <tcp_output+0x1d0>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <tcp_output+0x1bc>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d110      	bne.n	8014a2c <tcp_output+0x1d0>
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a0e:	891a      	ldrh	r2, [r3, #8]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d209      	bcs.n	8014a2c <tcp_output+0x1d0>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d004      	beq.n	8014a2c <tcp_output+0x1d0>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014a28:	2b08      	cmp	r3, #8
 8014a2a:	d901      	bls.n	8014a30 <tcp_output+0x1d4>
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e000      	b.n	8014a32 <tcp_output+0x1d6>
 8014a30:	2300      	movs	r3, #0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d106      	bne.n	8014a44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	8b5b      	ldrh	r3, [r3, #26]
 8014a3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	f000 80e4 	beq.w	8014c0c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	7d1b      	ldrb	r3, [r3, #20]
 8014a48:	2b02      	cmp	r3, #2
 8014a4a:	d00d      	beq.n	8014a68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	899b      	ldrh	r3, [r3, #12]
 8014a52:	b29c      	uxth	r4, r3
 8014a54:	2010      	movs	r0, #16
 8014a56:	f7f8 ff5f 	bl	800d918 <lwip_htons>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	4322      	orrs	r2, r4
 8014a64:	b292      	uxth	r2, r2
 8014a66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014a68:	697a      	ldr	r2, [r7, #20]
 8014a6a:	6879      	ldr	r1, [r7, #4]
 8014a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a6e:	f000 f909 	bl	8014c84 <tcp_output_segment>
 8014a72:	4603      	mov	r3, r0
 8014a74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d009      	beq.n	8014a92 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	8b5b      	ldrh	r3, [r3, #26]
 8014a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a86:	b29a      	uxth	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	835a      	strh	r2, [r3, #26]
      return err;
 8014a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a90:	e0d3      	b.n	8014c3a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	7d1b      	ldrb	r3, [r3, #20]
 8014a9e:	2b02      	cmp	r3, #2
 8014aa0:	d006      	beq.n	8014ab0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	8b5b      	ldrh	r3, [r3, #26]
 8014aa6:	f023 0303 	bic.w	r3, r3, #3
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7f8 ff43 	bl	800d942 <lwip_htonl>
 8014abc:	4604      	mov	r4, r0
 8014abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac0:	891b      	ldrh	r3, [r3, #8]
 8014ac2:	461d      	mov	r5, r3
 8014ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	899b      	ldrh	r3, [r3, #12]
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7f8 ff23 	bl	800d918 <lwip_htons>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	b2db      	uxtb	r3, r3
 8014ad6:	f003 0303 	and.w	r3, r3, #3
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00e      	beq.n	8014afc <tcp_output+0x2a0>
 8014ade:	2301      	movs	r3, #1
 8014ae0:	e00d      	b.n	8014afe <tcp_output+0x2a2>
 8014ae2:	bf00      	nop
 8014ae4:	0801e010 	.word	0x0801e010
 8014ae8:	0801e554 	.word	0x0801e554
 8014aec:	0801e064 	.word	0x0801e064
 8014af0:	0801e56c 	.word	0x0801e56c
 8014af4:	2400d728 	.word	0x2400d728
 8014af8:	0801e594 	.word	0x0801e594
 8014afc:	2300      	movs	r3, #0
 8014afe:	442b      	add	r3, r5
 8014b00:	4423      	add	r3, r4
 8014b02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	1ad3      	subs	r3, r2, r3
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	da02      	bge.n	8014b16 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	68ba      	ldr	r2, [r7, #8]
 8014b14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	891b      	ldrh	r3, [r3, #8]
 8014b1a:	461c      	mov	r4, r3
 8014b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	899b      	ldrh	r3, [r3, #12]
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f8 fef7 	bl	800d918 <lwip_htons>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	f003 0303 	and.w	r3, r3, #3
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <tcp_output+0x2de>
 8014b36:	2301      	movs	r3, #1
 8014b38:	e000      	b.n	8014b3c <tcp_output+0x2e0>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	4423      	add	r3, r4
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d049      	beq.n	8014bd6 <tcp_output+0x37a>
      seg->next = NULL;
 8014b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b44:	2200      	movs	r2, #0
 8014b46:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d105      	bne.n	8014b5c <tcp_output+0x300>
        pcb->unacked = seg;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b54:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b58:	623b      	str	r3, [r7, #32]
 8014b5a:	e03f      	b.n	8014bdc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5e:	68db      	ldr	r3, [r3, #12]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7f8 feed 	bl	800d942 <lwip_htonl>
 8014b68:	4604      	mov	r4, r0
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	685b      	ldr	r3, [r3, #4]
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7f8 fee6 	bl	800d942 <lwip_htonl>
 8014b76:	4603      	mov	r3, r0
 8014b78:	1ae3      	subs	r3, r4, r3
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	da24      	bge.n	8014bc8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	3370      	adds	r3, #112	; 0x70
 8014b82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014b84:	e002      	b.n	8014b8c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014b86:	69fb      	ldr	r3, [r7, #28]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d011      	beq.n	8014bb8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f8 fed0 	bl	800d942 <lwip_htonl>
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7f8 fec9 	bl	800d942 <lwip_htonl>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	dbe6      	blt.n	8014b86 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bc4:	601a      	str	r2, [r3, #0]
 8014bc6:	e009      	b.n	8014bdc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014bc8:	6a3b      	ldr	r3, [r7, #32]
 8014bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bcc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014bce:	6a3b      	ldr	r3, [r7, #32]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	623b      	str	r3, [r7, #32]
 8014bd4:	e002      	b.n	8014bdc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bd8:	f7fb ff1d 	bl	8010a16 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d012      	beq.n	8014c0e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7f8 fea7 	bl	800d942 <lwip_htonl>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bfa:	1ad3      	subs	r3, r2, r3
 8014bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bfe:	8912      	ldrh	r2, [r2, #8]
 8014c00:	4413      	add	r3, r2
  while (seg != NULL &&
 8014c02:	69ba      	ldr	r2, [r7, #24]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	f4bf aed9 	bcs.w	80149bc <tcp_output+0x160>
 8014c0a:	e000      	b.n	8014c0e <tcp_output+0x3b2>
      break;
 8014c0c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d108      	bne.n	8014c28 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014c1e:	e004      	b.n	8014c2a <tcp_output+0x3ce>
    goto output_done;
 8014c20:	bf00      	nop
 8014c22:	e002      	b.n	8014c2a <tcp_output+0x3ce>
    goto output_done;
 8014c24:	bf00      	nop
 8014c26:	e000      	b.n	8014c2a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014c28:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	8b5b      	ldrh	r3, [r3, #26]
 8014c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014c38:	2300      	movs	r3, #0
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3728      	adds	r7, #40	; 0x28
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bdb0      	pop	{r4, r5, r7, pc}
 8014c42:	bf00      	nop

08014c44 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d106      	bne.n	8014c60 <tcp_output_segment_busy+0x1c>
 8014c52:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <tcp_output_segment_busy+0x34>)
 8014c54:	f240 529a 	movw	r2, #1434	; 0x59a
 8014c58:	4908      	ldr	r1, [pc, #32]	; (8014c7c <tcp_output_segment_busy+0x38>)
 8014c5a:	4809      	ldr	r0, [pc, #36]	; (8014c80 <tcp_output_segment_busy+0x3c>)
 8014c5c:	f006 f960 	bl	801af20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	7b9b      	ldrb	r3, [r3, #14]
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d001      	beq.n	8014c6e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	0801e010 	.word	0x0801e010
 8014c7c:	0801e5ac 	.word	0x0801e5ac
 8014c80:	0801e064 	.word	0x0801e064

08014c84 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014c84:	b5b0      	push	{r4, r5, r7, lr}
 8014c86:	b08c      	sub	sp, #48	; 0x30
 8014c88:	af04      	add	r7, sp, #16
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d106      	bne.n	8014ca4 <tcp_output_segment+0x20>
 8014c96:	4b63      	ldr	r3, [pc, #396]	; (8014e24 <tcp_output_segment+0x1a0>)
 8014c98:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014c9c:	4962      	ldr	r1, [pc, #392]	; (8014e28 <tcp_output_segment+0x1a4>)
 8014c9e:	4863      	ldr	r0, [pc, #396]	; (8014e2c <tcp_output_segment+0x1a8>)
 8014ca0:	f006 f93e 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d106      	bne.n	8014cb8 <tcp_output_segment+0x34>
 8014caa:	4b5e      	ldr	r3, [pc, #376]	; (8014e24 <tcp_output_segment+0x1a0>)
 8014cac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014cb0:	495f      	ldr	r1, [pc, #380]	; (8014e30 <tcp_output_segment+0x1ac>)
 8014cb2:	485e      	ldr	r0, [pc, #376]	; (8014e2c <tcp_output_segment+0x1a8>)
 8014cb4:	f006 f934 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d106      	bne.n	8014ccc <tcp_output_segment+0x48>
 8014cbe:	4b59      	ldr	r3, [pc, #356]	; (8014e24 <tcp_output_segment+0x1a0>)
 8014cc0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014cc4:	495b      	ldr	r1, [pc, #364]	; (8014e34 <tcp_output_segment+0x1b0>)
 8014cc6:	4859      	ldr	r0, [pc, #356]	; (8014e2c <tcp_output_segment+0x1a8>)
 8014cc8:	f006 f92a 	bl	801af20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7ff ffb9 	bl	8014c44 <tcp_output_segment_busy>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	e09f      	b.n	8014e1c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	68dc      	ldr	r4, [r3, #12]
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	f7f8 fe2c 	bl	800d942 <lwip_htonl>
 8014cea:	4603      	mov	r3, r0
 8014cec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	68dc      	ldr	r4, [r3, #12]
 8014cf6:	4610      	mov	r0, r2
 8014cf8:	f7f8 fe0e 	bl	800d918 <lwip_htons>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d04:	68ba      	ldr	r2, [r7, #8]
 8014d06:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014d08:	441a      	add	r2, r3
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	3314      	adds	r3, #20
 8014d14:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	7a9b      	ldrb	r3, [r3, #10]
 8014d1a:	f003 0301 	and.w	r3, r3, #1
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d015      	beq.n	8014d4e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	3304      	adds	r3, #4
 8014d26:	461a      	mov	r2, r3
 8014d28:	6879      	ldr	r1, [r7, #4]
 8014d2a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014d2e:	f7fc fa37 	bl	80111a0 <tcp_eff_send_mss_netif>
 8014d32:	4603      	mov	r3, r0
 8014d34:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014d36:	8b7b      	ldrh	r3, [r7, #26]
 8014d38:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7f8 fe00 	bl	800d942 <lwip_htonl>
 8014d42:	4602      	mov	r2, r0
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	3304      	adds	r3, #4
 8014d4c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	da02      	bge.n	8014d5e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d10c      	bne.n	8014d80 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014d66:	4b34      	ldr	r3, [pc, #208]	; (8014e38 <tcp_output_segment+0x1b4>)
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	68db      	ldr	r3, [r3, #12]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7f8 fde4 	bl	800d942 <lwip_htonl>
 8014d7a:	4602      	mov	r2, r0
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	68da      	ldr	r2, [r3, #12]
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	8959      	ldrh	r1, [r3, #10]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	8b3a      	ldrh	r2, [r7, #24]
 8014d9a:	1a8a      	subs	r2, r1, r2
 8014d9c:	b292      	uxth	r2, r2
 8014d9e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	8919      	ldrh	r1, [r3, #8]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	8b3a      	ldrh	r2, [r7, #24]
 8014dac:	1a8a      	subs	r2, r1, r2
 8014dae:	b292      	uxth	r2, r2
 8014db0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	68fa      	ldr	r2, [r7, #12]
 8014db8:	68d2      	ldr	r2, [r2, #12]
 8014dba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	68db      	ldr	r3, [r3, #12]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	741a      	strb	r2, [r3, #16]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	f103 0214 	add.w	r2, r3, #20
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	7a9b      	ldrb	r3, [r3, #10]
 8014dd4:	009b      	lsls	r3, r3, #2
 8014dd6:	f003 0304 	and.w	r3, r3, #4
 8014dda:	4413      	add	r3, r2
 8014ddc:	69fa      	ldr	r2, [r7, #28]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d006      	beq.n	8014df0 <tcp_output_segment+0x16c>
 8014de2:	4b10      	ldr	r3, [pc, #64]	; (8014e24 <tcp_output_segment+0x1a0>)
 8014de4:	f240 621c 	movw	r2, #1564	; 0x61c
 8014de8:	4914      	ldr	r1, [pc, #80]	; (8014e3c <tcp_output_segment+0x1b8>)
 8014dea:	4810      	ldr	r0, [pc, #64]	; (8014e2c <tcp_output_segment+0x1a8>)
 8014dec:	f006 f898 	bl	801af20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	6858      	ldr	r0, [r3, #4]
 8014df4:	68b9      	ldr	r1, [r7, #8]
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	1d1c      	adds	r4, r3, #4
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	7add      	ldrb	r5, [r3, #11]
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	7a9b      	ldrb	r3, [r3, #10]
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	9202      	str	r2, [sp, #8]
 8014e06:	2206      	movs	r2, #6
 8014e08:	9201      	str	r2, [sp, #4]
 8014e0a:	9300      	str	r3, [sp, #0]
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	4622      	mov	r2, r4
 8014e10:	f004 fce0 	bl	80197d4 <ip4_output_if>
 8014e14:	4603      	mov	r3, r0
 8014e16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3720      	adds	r7, #32
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bdb0      	pop	{r4, r5, r7, pc}
 8014e24:	0801e010 	.word	0x0801e010
 8014e28:	0801e5d4 	.word	0x0801e5d4
 8014e2c:	0801e064 	.word	0x0801e064
 8014e30:	0801e5f4 	.word	0x0801e5f4
 8014e34:	0801e614 	.word	0x0801e614
 8014e38:	2400d718 	.word	0x2400d718
 8014e3c:	0801e638 	.word	0x0801e638

08014e40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014e40:	b5b0      	push	{r4, r5, r7, lr}
 8014e42:	b084      	sub	sp, #16
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d106      	bne.n	8014e5c <tcp_rexmit_rto_prepare+0x1c>
 8014e4e:	4b31      	ldr	r3, [pc, #196]	; (8014f14 <tcp_rexmit_rto_prepare+0xd4>)
 8014e50:	f240 6263 	movw	r2, #1635	; 0x663
 8014e54:	4930      	ldr	r1, [pc, #192]	; (8014f18 <tcp_rexmit_rto_prepare+0xd8>)
 8014e56:	4831      	ldr	r0, [pc, #196]	; (8014f1c <tcp_rexmit_rto_prepare+0xdc>)
 8014e58:	f006 f862 	bl	801af20 <iprintf>

  if (pcb->unacked == NULL) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d102      	bne.n	8014e6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014e64:	f06f 0305 	mvn.w	r3, #5
 8014e68:	e050      	b.n	8014f0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e6e:	60fb      	str	r3, [r7, #12]
 8014e70:	e00b      	b.n	8014e8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014e72:	68f8      	ldr	r0, [r7, #12]
 8014e74:	f7ff fee6 	bl	8014c44 <tcp_output_segment_busy>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d002      	beq.n	8014e84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014e7e:	f06f 0305 	mvn.w	r3, #5
 8014e82:	e043      	b.n	8014f0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	60fb      	str	r3, [r7, #12]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d1ef      	bne.n	8014e72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014e92:	68f8      	ldr	r0, [r7, #12]
 8014e94:	f7ff fed6 	bl	8014c44 <tcp_output_segment_busy>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d002      	beq.n	8014ea4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014e9e:	f06f 0305 	mvn.w	r3, #5
 8014ea2:	e033      	b.n	8014f0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	8b5b      	ldrh	r3, [r3, #26]
 8014ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7f8 fd37 	bl	800d942 <lwip_htonl>
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	891b      	ldrh	r3, [r3, #8]
 8014eda:	461d      	mov	r5, r3
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	899b      	ldrh	r3, [r3, #12]
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7f8 fd17 	bl	800d918 <lwip_htons>
 8014eea:	4603      	mov	r3, r0
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	f003 0303 	and.w	r3, r3, #3
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d001      	beq.n	8014efa <tcp_rexmit_rto_prepare+0xba>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	e000      	b.n	8014efc <tcp_rexmit_rto_prepare+0xbc>
 8014efa:	2300      	movs	r3, #0
 8014efc:	442b      	add	r3, r5
 8014efe:	18e2      	adds	r2, r4, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2200      	movs	r2, #0
 8014f08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014f0a:	2300      	movs	r3, #0
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3710      	adds	r7, #16
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bdb0      	pop	{r4, r5, r7, pc}
 8014f14:	0801e010 	.word	0x0801e010
 8014f18:	0801e64c 	.word	0x0801e64c
 8014f1c:	0801e064 	.word	0x0801e064

08014f20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <tcp_rexmit_rto_commit+0x1c>
 8014f2e:	4b0d      	ldr	r3, [pc, #52]	; (8014f64 <tcp_rexmit_rto_commit+0x44>)
 8014f30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014f34:	490c      	ldr	r1, [pc, #48]	; (8014f68 <tcp_rexmit_rto_commit+0x48>)
 8014f36:	480d      	ldr	r0, [pc, #52]	; (8014f6c <tcp_rexmit_rto_commit+0x4c>)
 8014f38:	f005 fff2 	bl	801af20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f42:	2bff      	cmp	r3, #255	; 0xff
 8014f44:	d007      	beq.n	8014f56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	b2da      	uxtb	r2, r3
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f7ff fc80 	bl	801485c <tcp_output>
}
 8014f5c:	bf00      	nop
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	0801e010 	.word	0x0801e010
 8014f68:	0801e670 	.word	0x0801e670
 8014f6c:	0801e064 	.word	0x0801e064

08014f70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d106      	bne.n	8014f8c <tcp_rexmit_rto+0x1c>
 8014f7e:	4b0a      	ldr	r3, [pc, #40]	; (8014fa8 <tcp_rexmit_rto+0x38>)
 8014f80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014f84:	4909      	ldr	r1, [pc, #36]	; (8014fac <tcp_rexmit_rto+0x3c>)
 8014f86:	480a      	ldr	r0, [pc, #40]	; (8014fb0 <tcp_rexmit_rto+0x40>)
 8014f88:	f005 ffca 	bl	801af20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f7ff ff57 	bl	8014e40 <tcp_rexmit_rto_prepare>
 8014f92:	4603      	mov	r3, r0
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d102      	bne.n	8014f9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f7ff ffc1 	bl	8014f20 <tcp_rexmit_rto_commit>
  }
}
 8014f9e:	bf00      	nop
 8014fa0:	3708      	adds	r7, #8
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	0801e010 	.word	0x0801e010
 8014fac:	0801e694 	.word	0x0801e694
 8014fb0:	0801e064 	.word	0x0801e064

08014fb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014fb4:	b590      	push	{r4, r7, lr}
 8014fb6:	b085      	sub	sp, #20
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d106      	bne.n	8014fd0 <tcp_rexmit+0x1c>
 8014fc2:	4b2f      	ldr	r3, [pc, #188]	; (8015080 <tcp_rexmit+0xcc>)
 8014fc4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014fc8:	492e      	ldr	r1, [pc, #184]	; (8015084 <tcp_rexmit+0xd0>)
 8014fca:	482f      	ldr	r0, [pc, #188]	; (8015088 <tcp_rexmit+0xd4>)
 8014fcc:	f005 ffa8 	bl	801af20 <iprintf>

  if (pcb->unacked == NULL) {
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d102      	bne.n	8014fde <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014fd8:	f06f 0305 	mvn.w	r3, #5
 8014fdc:	e04c      	b.n	8015078 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fe2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014fe4:	68b8      	ldr	r0, [r7, #8]
 8014fe6:	f7ff fe2d 	bl	8014c44 <tcp_output_segment_busy>
 8014fea:	4603      	mov	r3, r0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d002      	beq.n	8014ff6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014ff0:	f06f 0305 	mvn.w	r3, #5
 8014ff4:	e040      	b.n	8015078 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	336c      	adds	r3, #108	; 0x6c
 8015002:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015004:	e002      	b.n	801500c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d011      	beq.n	8015038 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	4618      	mov	r0, r3
 801501e:	f7f8 fc90 	bl	800d942 <lwip_htonl>
 8015022:	4604      	mov	r4, r0
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	4618      	mov	r0, r3
 801502c:	f7f8 fc89 	bl	800d942 <lwip_htonl>
 8015030:	4603      	mov	r3, r0
 8015032:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015034:	2b00      	cmp	r3, #0
 8015036:	dbe6      	blt.n	8015006 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	68ba      	ldr	r2, [r7, #8]
 8015044:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d103      	bne.n	8015056 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801505c:	2bff      	cmp	r3, #255	; 0xff
 801505e:	d007      	beq.n	8015070 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015066:	3301      	adds	r3, #1
 8015068:	b2da      	uxtb	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2200      	movs	r2, #0
 8015074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3714      	adds	r7, #20
 801507c:	46bd      	mov	sp, r7
 801507e:	bd90      	pop	{r4, r7, pc}
 8015080:	0801e010 	.word	0x0801e010
 8015084:	0801e6b0 	.word	0x0801e6b0
 8015088:	0801e064 	.word	0x0801e064

0801508c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d106      	bne.n	80150a8 <tcp_rexmit_fast+0x1c>
 801509a:	4b2a      	ldr	r3, [pc, #168]	; (8015144 <tcp_rexmit_fast+0xb8>)
 801509c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80150a0:	4929      	ldr	r1, [pc, #164]	; (8015148 <tcp_rexmit_fast+0xbc>)
 80150a2:	482a      	ldr	r0, [pc, #168]	; (801514c <tcp_rexmit_fast+0xc0>)
 80150a4:	f005 ff3c 	bl	801af20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d045      	beq.n	801513c <tcp_rexmit_fast+0xb0>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	8b5b      	ldrh	r3, [r3, #26]
 80150b4:	f003 0304 	and.w	r3, r3, #4
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d13f      	bne.n	801513c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7ff ff79 	bl	8014fb4 <tcp_rexmit>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d139      	bne.n	801513c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150d4:	4293      	cmp	r3, r2
 80150d6:	bf28      	it	cs
 80150d8:	4613      	movcs	r3, r2
 80150da:	b29b      	uxth	r3, r3
 80150dc:	2b00      	cmp	r3, #0
 80150de:	da00      	bge.n	80150e2 <tcp_rexmit_fast+0x56>
 80150e0:	3301      	adds	r3, #1
 80150e2:	105b      	asrs	r3, r3, #1
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80150f2:	461a      	mov	r2, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d206      	bcs.n	801510c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015102:	005b      	lsls	r3, r3, #1
 8015104:	b29a      	uxth	r2, r3
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015116:	4619      	mov	r1, r3
 8015118:	0049      	lsls	r1, r1, #1
 801511a:	440b      	add	r3, r1
 801511c:	b29b      	uxth	r3, r3
 801511e:	4413      	add	r3, r2
 8015120:	b29a      	uxth	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	8b5b      	ldrh	r3, [r3, #26]
 801512c:	f043 0304 	orr.w	r3, r3, #4
 8015130:	b29a      	uxth	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2200      	movs	r2, #0
 801513a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801513c:	bf00      	nop
 801513e:	3708      	adds	r7, #8
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}
 8015144:	0801e010 	.word	0x0801e010
 8015148:	0801e6c8 	.word	0x0801e6c8
 801514c:	0801e064 	.word	0x0801e064

08015150 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	607b      	str	r3, [r7, #4]
 801515a:	460b      	mov	r3, r1
 801515c:	817b      	strh	r3, [r7, #10]
 801515e:	4613      	mov	r3, r2
 8015160:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015162:	897a      	ldrh	r2, [r7, #10]
 8015164:	893b      	ldrh	r3, [r7, #8]
 8015166:	4413      	add	r3, r2
 8015168:	b29b      	uxth	r3, r3
 801516a:	3314      	adds	r3, #20
 801516c:	b29b      	uxth	r3, r3
 801516e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015172:	4619      	mov	r1, r3
 8015174:	2022      	movs	r0, #34	; 0x22
 8015176:	f7f9 fda1 	bl	800ecbc <pbuf_alloc>
 801517a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d04d      	beq.n	801521e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015182:	897b      	ldrh	r3, [r7, #10]
 8015184:	3313      	adds	r3, #19
 8015186:	697a      	ldr	r2, [r7, #20]
 8015188:	8952      	ldrh	r2, [r2, #10]
 801518a:	4293      	cmp	r3, r2
 801518c:	db06      	blt.n	801519c <tcp_output_alloc_header_common+0x4c>
 801518e:	4b26      	ldr	r3, [pc, #152]	; (8015228 <tcp_output_alloc_header_common+0xd8>)
 8015190:	f240 7223 	movw	r2, #1827	; 0x723
 8015194:	4925      	ldr	r1, [pc, #148]	; (801522c <tcp_output_alloc_header_common+0xdc>)
 8015196:	4826      	ldr	r0, [pc, #152]	; (8015230 <tcp_output_alloc_header_common+0xe0>)
 8015198:	f005 fec2 	bl	801af20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80151a2:	8c3b      	ldrh	r3, [r7, #32]
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7f8 fbb7 	bl	800d918 <lwip_htons>
 80151aa:	4603      	mov	r3, r0
 80151ac:	461a      	mov	r2, r3
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80151b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f8 fbaf 	bl	800d918 <lwip_htons>
 80151ba:	4603      	mov	r3, r0
 80151bc:	461a      	mov	r2, r3
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80151c8:	68f8      	ldr	r0, [r7, #12]
 80151ca:	f7f8 fbba 	bl	800d942 <lwip_htonl>
 80151ce:	4602      	mov	r2, r0
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80151d4:	897b      	ldrh	r3, [r7, #10]
 80151d6:	089b      	lsrs	r3, r3, #2
 80151d8:	b29b      	uxth	r3, r3
 80151da:	3305      	adds	r3, #5
 80151dc:	b29b      	uxth	r3, r3
 80151de:	031b      	lsls	r3, r3, #12
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	4313      	orrs	r3, r2
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f8 fb93 	bl	800d918 <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	461a      	mov	r2, r3
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80151fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7f8 fb8b 	bl	800d918 <lwip_htons>
 8015202:	4603      	mov	r3, r0
 8015204:	461a      	mov	r2, r3
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801520a:	693b      	ldr	r3, [r7, #16]
 801520c:	2200      	movs	r2, #0
 801520e:	741a      	strb	r2, [r3, #16]
 8015210:	2200      	movs	r2, #0
 8015212:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	2200      	movs	r2, #0
 8015218:	749a      	strb	r2, [r3, #18]
 801521a:	2200      	movs	r2, #0
 801521c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801521e:	697b      	ldr	r3, [r7, #20]
}
 8015220:	4618      	mov	r0, r3
 8015222:	3718      	adds	r7, #24
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	0801e010 	.word	0x0801e010
 801522c:	0801e6e8 	.word	0x0801e6e8
 8015230:	0801e064 	.word	0x0801e064

08015234 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015234:	b5b0      	push	{r4, r5, r7, lr}
 8015236:	b08a      	sub	sp, #40	; 0x28
 8015238:	af04      	add	r7, sp, #16
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	607b      	str	r3, [r7, #4]
 801523e:	460b      	mov	r3, r1
 8015240:	817b      	strh	r3, [r7, #10]
 8015242:	4613      	mov	r3, r2
 8015244:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d106      	bne.n	801525a <tcp_output_alloc_header+0x26>
 801524c:	4b15      	ldr	r3, [pc, #84]	; (80152a4 <tcp_output_alloc_header+0x70>)
 801524e:	f240 7242 	movw	r2, #1858	; 0x742
 8015252:	4915      	ldr	r1, [pc, #84]	; (80152a8 <tcp_output_alloc_header+0x74>)
 8015254:	4815      	ldr	r0, [pc, #84]	; (80152ac <tcp_output_alloc_header+0x78>)
 8015256:	f005 fe63 	bl	801af20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	8adb      	ldrh	r3, [r3, #22]
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	8b12      	ldrh	r2, [r2, #24]
 8015266:	68f9      	ldr	r1, [r7, #12]
 8015268:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801526a:	893d      	ldrh	r5, [r7, #8]
 801526c:	897c      	ldrh	r4, [r7, #10]
 801526e:	9103      	str	r1, [sp, #12]
 8015270:	2110      	movs	r1, #16
 8015272:	9102      	str	r1, [sp, #8]
 8015274:	9201      	str	r2, [sp, #4]
 8015276:	9300      	str	r3, [sp, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	462a      	mov	r2, r5
 801527c:	4621      	mov	r1, r4
 801527e:	f7ff ff67 	bl	8015150 <tcp_output_alloc_header_common>
 8015282:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d006      	beq.n	8015298 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801528e:	68fa      	ldr	r2, [r7, #12]
 8015290:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015292:	441a      	add	r2, r3
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015298:	697b      	ldr	r3, [r7, #20]
}
 801529a:	4618      	mov	r0, r3
 801529c:	3718      	adds	r7, #24
 801529e:	46bd      	mov	sp, r7
 80152a0:	bdb0      	pop	{r4, r5, r7, pc}
 80152a2:	bf00      	nop
 80152a4:	0801e010 	.word	0x0801e010
 80152a8:	0801e718 	.word	0x0801e718
 80152ac:	0801e064 	.word	0x0801e064

080152b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b088      	sub	sp, #32
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	4611      	mov	r1, r2
 80152bc:	461a      	mov	r2, r3
 80152be:	460b      	mov	r3, r1
 80152c0:	71fb      	strb	r3, [r7, #7]
 80152c2:	4613      	mov	r3, r2
 80152c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80152c6:	2300      	movs	r3, #0
 80152c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d106      	bne.n	80152de <tcp_output_fill_options+0x2e>
 80152d0:	4b13      	ldr	r3, [pc, #76]	; (8015320 <tcp_output_fill_options+0x70>)
 80152d2:	f240 7256 	movw	r2, #1878	; 0x756
 80152d6:	4913      	ldr	r1, [pc, #76]	; (8015324 <tcp_output_fill_options+0x74>)
 80152d8:	4813      	ldr	r0, [pc, #76]	; (8015328 <tcp_output_fill_options+0x78>)
 80152da:	f005 fe21 	bl	801af20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	3314      	adds	r3, #20
 80152e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80152ea:	69bb      	ldr	r3, [r7, #24]
 80152ec:	f103 0214 	add.w	r2, r3, #20
 80152f0:	8bfb      	ldrh	r3, [r7, #30]
 80152f2:	009b      	lsls	r3, r3, #2
 80152f4:	4619      	mov	r1, r3
 80152f6:	79fb      	ldrb	r3, [r7, #7]
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	f003 0304 	and.w	r3, r3, #4
 80152fe:	440b      	add	r3, r1
 8015300:	4413      	add	r3, r2
 8015302:	697a      	ldr	r2, [r7, #20]
 8015304:	429a      	cmp	r2, r3
 8015306:	d006      	beq.n	8015316 <tcp_output_fill_options+0x66>
 8015308:	4b05      	ldr	r3, [pc, #20]	; (8015320 <tcp_output_fill_options+0x70>)
 801530a:	f240 7275 	movw	r2, #1909	; 0x775
 801530e:	4907      	ldr	r1, [pc, #28]	; (801532c <tcp_output_fill_options+0x7c>)
 8015310:	4805      	ldr	r0, [pc, #20]	; (8015328 <tcp_output_fill_options+0x78>)
 8015312:	f005 fe05 	bl	801af20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015316:	bf00      	nop
 8015318:	3720      	adds	r7, #32
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	0801e010 	.word	0x0801e010
 8015324:	0801e740 	.word	0x0801e740
 8015328:	0801e064 	.word	0x0801e064
 801532c:	0801e638 	.word	0x0801e638

08015330 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b08a      	sub	sp, #40	; 0x28
 8015334:	af04      	add	r7, sp, #16
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d106      	bne.n	8015352 <tcp_output_control_segment+0x22>
 8015344:	4b1c      	ldr	r3, [pc, #112]	; (80153b8 <tcp_output_control_segment+0x88>)
 8015346:	f240 7287 	movw	r2, #1927	; 0x787
 801534a:	491c      	ldr	r1, [pc, #112]	; (80153bc <tcp_output_control_segment+0x8c>)
 801534c:	481c      	ldr	r0, [pc, #112]	; (80153c0 <tcp_output_control_segment+0x90>)
 801534e:	f005 fde7 	bl	801af20 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	6879      	ldr	r1, [r7, #4]
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f7fe fae8 	bl	801392c <tcp_route>
 801535c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d102      	bne.n	801536a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015364:	23fc      	movs	r3, #252	; 0xfc
 8015366:	75fb      	strb	r3, [r7, #23]
 8015368:	e01c      	b.n	80153a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d006      	beq.n	801537e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	7adb      	ldrb	r3, [r3, #11]
 8015374:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	7a9b      	ldrb	r3, [r3, #10]
 801537a:	757b      	strb	r3, [r7, #21]
 801537c:	e003      	b.n	8015386 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801537e:	23ff      	movs	r3, #255	; 0xff
 8015380:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015386:	7dba      	ldrb	r2, [r7, #22]
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	9302      	str	r3, [sp, #8]
 801538c:	2306      	movs	r3, #6
 801538e:	9301      	str	r3, [sp, #4]
 8015390:	7d7b      	ldrb	r3, [r7, #21]
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	4613      	mov	r3, r2
 8015396:	683a      	ldr	r2, [r7, #0]
 8015398:	6879      	ldr	r1, [r7, #4]
 801539a:	68b8      	ldr	r0, [r7, #8]
 801539c:	f004 fa1a 	bl	80197d4 <ip4_output_if>
 80153a0:	4603      	mov	r3, r0
 80153a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80153a4:	68b8      	ldr	r0, [r7, #8]
 80153a6:	f7f9 ff6d 	bl	800f284 <pbuf_free>
  return err;
 80153aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3718      	adds	r7, #24
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	0801e010 	.word	0x0801e010
 80153bc:	0801e768 	.word	0x0801e768
 80153c0:	0801e064 	.word	0x0801e064

080153c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80153c4:	b590      	push	{r4, r7, lr}
 80153c6:	b08b      	sub	sp, #44	; 0x2c
 80153c8:	af04      	add	r7, sp, #16
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	607a      	str	r2, [r7, #4]
 80153d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d106      	bne.n	80153e6 <tcp_rst+0x22>
 80153d8:	4b1f      	ldr	r3, [pc, #124]	; (8015458 <tcp_rst+0x94>)
 80153da:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80153de:	491f      	ldr	r1, [pc, #124]	; (801545c <tcp_rst+0x98>)
 80153e0:	481f      	ldr	r0, [pc, #124]	; (8015460 <tcp_rst+0x9c>)
 80153e2:	f005 fd9d 	bl	801af20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80153e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d106      	bne.n	80153fa <tcp_rst+0x36>
 80153ec:	4b1a      	ldr	r3, [pc, #104]	; (8015458 <tcp_rst+0x94>)
 80153ee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80153f2:	491c      	ldr	r1, [pc, #112]	; (8015464 <tcp_rst+0xa0>)
 80153f4:	481a      	ldr	r0, [pc, #104]	; (8015460 <tcp_rst+0x9c>)
 80153f6:	f005 fd93 	bl	801af20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80153fa:	2300      	movs	r3, #0
 80153fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80153fe:	f246 0308 	movw	r3, #24584	; 0x6008
 8015402:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	b29c      	uxth	r4, r3
 8015408:	68b8      	ldr	r0, [r7, #8]
 801540a:	f7f8 fa9a 	bl	800d942 <lwip_htonl>
 801540e:	4602      	mov	r2, r0
 8015410:	8abb      	ldrh	r3, [r7, #20]
 8015412:	9303      	str	r3, [sp, #12]
 8015414:	2314      	movs	r3, #20
 8015416:	9302      	str	r3, [sp, #8]
 8015418:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801541a:	9301      	str	r3, [sp, #4]
 801541c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	4613      	mov	r3, r2
 8015422:	2200      	movs	r2, #0
 8015424:	4621      	mov	r1, r4
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f7ff fe92 	bl	8015150 <tcp_output_alloc_header_common>
 801542c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d00c      	beq.n	801544e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015434:	7dfb      	ldrb	r3, [r7, #23]
 8015436:	2200      	movs	r2, #0
 8015438:	6939      	ldr	r1, [r7, #16]
 801543a:	68f8      	ldr	r0, [r7, #12]
 801543c:	f7ff ff38 	bl	80152b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015442:	683a      	ldr	r2, [r7, #0]
 8015444:	6939      	ldr	r1, [r7, #16]
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	f7ff ff72 	bl	8015330 <tcp_output_control_segment>
 801544c:	e000      	b.n	8015450 <tcp_rst+0x8c>
    return;
 801544e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015450:	371c      	adds	r7, #28
 8015452:	46bd      	mov	sp, r7
 8015454:	bd90      	pop	{r4, r7, pc}
 8015456:	bf00      	nop
 8015458:	0801e010 	.word	0x0801e010
 801545c:	0801e794 	.word	0x0801e794
 8015460:	0801e064 	.word	0x0801e064
 8015464:	0801e7b0 	.word	0x0801e7b0

08015468 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015468:	b590      	push	{r4, r7, lr}
 801546a:	b087      	sub	sp, #28
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015470:	2300      	movs	r3, #0
 8015472:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015474:	2300      	movs	r3, #0
 8015476:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_send_empty_ack+0x24>
 801547e:	4b28      	ldr	r3, [pc, #160]	; (8015520 <tcp_send_empty_ack+0xb8>)
 8015480:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015484:	4927      	ldr	r1, [pc, #156]	; (8015524 <tcp_send_empty_ack+0xbc>)
 8015486:	4828      	ldr	r0, [pc, #160]	; (8015528 <tcp_send_empty_ack+0xc0>)
 8015488:	f005 fd4a 	bl	801af20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	009b      	lsls	r3, r3, #2
 8015490:	b2db      	uxtb	r3, r3
 8015492:	f003 0304 	and.w	r3, r3, #4
 8015496:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015498:	7d7b      	ldrb	r3, [r7, #21]
 801549a:	b29c      	uxth	r4, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f8 fa4e 	bl	800d942 <lwip_htonl>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2200      	movs	r2, #0
 80154aa:	4621      	mov	r1, r4
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff fec1 	bl	8015234 <tcp_output_alloc_header>
 80154b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d109      	bne.n	80154ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	8b5b      	ldrh	r3, [r3, #26]
 80154be:	f043 0303 	orr.w	r3, r3, #3
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80154c8:	f06f 0301 	mvn.w	r3, #1
 80154cc:	e023      	b.n	8015516 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80154ce:	7dbb      	ldrb	r3, [r7, #22]
 80154d0:	7dfa      	ldrb	r2, [r7, #23]
 80154d2:	6939      	ldr	r1, [r7, #16]
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f7ff feeb 	bl	80152b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	3304      	adds	r3, #4
 80154e0:	6939      	ldr	r1, [r7, #16]
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f7ff ff24 	bl	8015330 <tcp_output_control_segment>
 80154e8:	4603      	mov	r3, r0
 80154ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80154ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d007      	beq.n	8015504 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	8b5b      	ldrh	r3, [r3, #26]
 80154f8:	f043 0303 	orr.w	r3, r3, #3
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	835a      	strh	r2, [r3, #26]
 8015502:	e006      	b.n	8015512 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	8b5b      	ldrh	r3, [r3, #26]
 8015508:	f023 0303 	bic.w	r3, r3, #3
 801550c:	b29a      	uxth	r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015516:	4618      	mov	r0, r3
 8015518:	371c      	adds	r7, #28
 801551a:	46bd      	mov	sp, r7
 801551c:	bd90      	pop	{r4, r7, pc}
 801551e:	bf00      	nop
 8015520:	0801e010 	.word	0x0801e010
 8015524:	0801e7cc 	.word	0x0801e7cc
 8015528:	0801e064 	.word	0x0801e064

0801552c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801552c:	b590      	push	{r4, r7, lr}
 801552e:	b087      	sub	sp, #28
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015534:	2300      	movs	r3, #0
 8015536:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d106      	bne.n	801554c <tcp_keepalive+0x20>
 801553e:	4b18      	ldr	r3, [pc, #96]	; (80155a0 <tcp_keepalive+0x74>)
 8015540:	f640 0224 	movw	r2, #2084	; 0x824
 8015544:	4917      	ldr	r1, [pc, #92]	; (80155a4 <tcp_keepalive+0x78>)
 8015546:	4818      	ldr	r0, [pc, #96]	; (80155a8 <tcp_keepalive+0x7c>)
 8015548:	f005 fcea 	bl	801af20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801554c:	7dfb      	ldrb	r3, [r7, #23]
 801554e:	b29c      	uxth	r4, r3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015554:	3b01      	subs	r3, #1
 8015556:	4618      	mov	r0, r3
 8015558:	f7f8 f9f3 	bl	800d942 <lwip_htonl>
 801555c:	4603      	mov	r3, r0
 801555e:	2200      	movs	r2, #0
 8015560:	4621      	mov	r1, r4
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f7ff fe66 	bl	8015234 <tcp_output_alloc_header>
 8015568:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d102      	bne.n	8015576 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015570:	f04f 33ff 	mov.w	r3, #4294967295
 8015574:	e010      	b.n	8015598 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015576:	7dfb      	ldrb	r3, [r7, #23]
 8015578:	2200      	movs	r2, #0
 801557a:	6939      	ldr	r1, [r7, #16]
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7ff fe97 	bl	80152b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015582:	687a      	ldr	r2, [r7, #4]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	3304      	adds	r3, #4
 8015588:	6939      	ldr	r1, [r7, #16]
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f7ff fed0 	bl	8015330 <tcp_output_control_segment>
 8015590:	4603      	mov	r3, r0
 8015592:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015598:	4618      	mov	r0, r3
 801559a:	371c      	adds	r7, #28
 801559c:	46bd      	mov	sp, r7
 801559e:	bd90      	pop	{r4, r7, pc}
 80155a0:	0801e010 	.word	0x0801e010
 80155a4:	0801e7ec 	.word	0x0801e7ec
 80155a8:	0801e064 	.word	0x0801e064

080155ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80155ac:	b590      	push	{r4, r7, lr}
 80155ae:	b08b      	sub	sp, #44	; 0x2c
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80155b4:	2300      	movs	r3, #0
 80155b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d106      	bne.n	80155ce <tcp_zero_window_probe+0x22>
 80155c0:	4b4c      	ldr	r3, [pc, #304]	; (80156f4 <tcp_zero_window_probe+0x148>)
 80155c2:	f640 024f 	movw	r2, #2127	; 0x84f
 80155c6:	494c      	ldr	r1, [pc, #304]	; (80156f8 <tcp_zero_window_probe+0x14c>)
 80155c8:	484c      	ldr	r0, [pc, #304]	; (80156fc <tcp_zero_window_probe+0x150>)
 80155ca:	f005 fca9 	bl	801af20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80155d4:	6a3b      	ldr	r3, [r7, #32]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d101      	bne.n	80155de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80155da:	2300      	movs	r3, #0
 80155dc:	e086      	b.n	80156ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80155e4:	2bff      	cmp	r3, #255	; 0xff
 80155e6:	d007      	beq.n	80155f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80155ee:	3301      	adds	r3, #1
 80155f0:	b2da      	uxtb	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80155f8:	6a3b      	ldr	r3, [r7, #32]
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	899b      	ldrh	r3, [r3, #12]
 80155fe:	b29b      	uxth	r3, r3
 8015600:	4618      	mov	r0, r3
 8015602:	f7f8 f989 	bl	800d918 <lwip_htons>
 8015606:	4603      	mov	r3, r0
 8015608:	b2db      	uxtb	r3, r3
 801560a:	f003 0301 	and.w	r3, r3, #1
 801560e:	2b00      	cmp	r3, #0
 8015610:	d005      	beq.n	801561e <tcp_zero_window_probe+0x72>
 8015612:	6a3b      	ldr	r3, [r7, #32]
 8015614:	891b      	ldrh	r3, [r3, #8]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d101      	bne.n	801561e <tcp_zero_window_probe+0x72>
 801561a:	2301      	movs	r3, #1
 801561c:	e000      	b.n	8015620 <tcp_zero_window_probe+0x74>
 801561e:	2300      	movs	r3, #0
 8015620:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015622:	7ffb      	ldrb	r3, [r7, #31]
 8015624:	2b00      	cmp	r3, #0
 8015626:	bf0c      	ite	eq
 8015628:	2301      	moveq	r3, #1
 801562a:	2300      	movne	r3, #0
 801562c:	b2db      	uxtb	r3, r3
 801562e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015634:	b299      	uxth	r1, r3
 8015636:	6a3b      	ldr	r3, [r7, #32]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	8bba      	ldrh	r2, [r7, #28]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f7ff fdf8 	bl	8015234 <tcp_output_alloc_header>
 8015644:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015646:	69bb      	ldr	r3, [r7, #24]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d102      	bne.n	8015652 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801564c:	f04f 33ff 	mov.w	r3, #4294967295
 8015650:	e04c      	b.n	80156ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015658:	7ffb      	ldrb	r3, [r7, #31]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d011      	beq.n	8015682 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	899b      	ldrh	r3, [r3, #12]
 8015662:	b29b      	uxth	r3, r3
 8015664:	b21b      	sxth	r3, r3
 8015666:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801566a:	b21c      	sxth	r4, r3
 801566c:	2011      	movs	r0, #17
 801566e:	f7f8 f953 	bl	800d918 <lwip_htons>
 8015672:	4603      	mov	r3, r0
 8015674:	b21b      	sxth	r3, r3
 8015676:	4323      	orrs	r3, r4
 8015678:	b21b      	sxth	r3, r3
 801567a:	b29a      	uxth	r2, r3
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	819a      	strh	r2, [r3, #12]
 8015680:	e010      	b.n	80156a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	3314      	adds	r3, #20
 8015688:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	6858      	ldr	r0, [r3, #4]
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	891a      	ldrh	r2, [r3, #8]
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	891b      	ldrh	r3, [r3, #8]
 8015698:	1ad3      	subs	r3, r2, r3
 801569a:	b29b      	uxth	r3, r3
 801569c:	2201      	movs	r2, #1
 801569e:	6939      	ldr	r1, [r7, #16]
 80156a0:	f7f9 fff6 	bl	800f690 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80156a4:	6a3b      	ldr	r3, [r7, #32]
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7f8 f949 	bl	800d942 <lwip_htonl>
 80156b0:	4603      	mov	r3, r0
 80156b2:	3301      	adds	r3, #1
 80156b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	2b00      	cmp	r3, #0
 80156c0:	da02      	bge.n	80156c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	68fa      	ldr	r2, [r7, #12]
 80156c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80156c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156cc:	2200      	movs	r2, #0
 80156ce:	69b9      	ldr	r1, [r7, #24]
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7ff fded 	bl	80152b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156d6:	687a      	ldr	r2, [r7, #4]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	3304      	adds	r3, #4
 80156dc:	69b9      	ldr	r1, [r7, #24]
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f7ff fe26 	bl	8015330 <tcp_output_control_segment>
 80156e4:	4603      	mov	r3, r0
 80156e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80156e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	372c      	adds	r7, #44	; 0x2c
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd90      	pop	{r4, r7, pc}
 80156f4:	0801e010 	.word	0x0801e010
 80156f8:	0801e808 	.word	0x0801e808
 80156fc:	0801e064 	.word	0x0801e064

08015700 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015708:	f7fa f8b0 	bl	800f86c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801570c:	4b0a      	ldr	r3, [pc, #40]	; (8015738 <tcpip_tcp_timer+0x38>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d103      	bne.n	801571c <tcpip_tcp_timer+0x1c>
 8015714:	4b09      	ldr	r3, [pc, #36]	; (801573c <tcpip_tcp_timer+0x3c>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d005      	beq.n	8015728 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801571c:	2200      	movs	r2, #0
 801571e:	4908      	ldr	r1, [pc, #32]	; (8015740 <tcpip_tcp_timer+0x40>)
 8015720:	20fa      	movs	r0, #250	; 0xfa
 8015722:	f000 f8f3 	bl	801590c <sys_timeout>
 8015726:	e003      	b.n	8015730 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015728:	4b06      	ldr	r3, [pc, #24]	; (8015744 <tcpip_tcp_timer+0x44>)
 801572a:	2200      	movs	r2, #0
 801572c:	601a      	str	r2, [r3, #0]
  }
}
 801572e:	bf00      	nop
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	2400d714 	.word	0x2400d714
 801573c:	2400d724 	.word	0x2400d724
 8015740:	08015701 	.word	0x08015701
 8015744:	24009dec 	.word	0x24009dec

08015748 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801574c:	4b0a      	ldr	r3, [pc, #40]	; (8015778 <tcp_timer_needed+0x30>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d10f      	bne.n	8015774 <tcp_timer_needed+0x2c>
 8015754:	4b09      	ldr	r3, [pc, #36]	; (801577c <tcp_timer_needed+0x34>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d103      	bne.n	8015764 <tcp_timer_needed+0x1c>
 801575c:	4b08      	ldr	r3, [pc, #32]	; (8015780 <tcp_timer_needed+0x38>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d007      	beq.n	8015774 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015764:	4b04      	ldr	r3, [pc, #16]	; (8015778 <tcp_timer_needed+0x30>)
 8015766:	2201      	movs	r2, #1
 8015768:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801576a:	2200      	movs	r2, #0
 801576c:	4905      	ldr	r1, [pc, #20]	; (8015784 <tcp_timer_needed+0x3c>)
 801576e:	20fa      	movs	r0, #250	; 0xfa
 8015770:	f000 f8cc 	bl	801590c <sys_timeout>
  }
}
 8015774:	bf00      	nop
 8015776:	bd80      	pop	{r7, pc}
 8015778:	24009dec 	.word	0x24009dec
 801577c:	2400d714 	.word	0x2400d714
 8015780:	2400d724 	.word	0x2400d724
 8015784:	08015701 	.word	0x08015701

08015788 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b086      	sub	sp, #24
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015794:	200a      	movs	r0, #10
 8015796:	f7f8 fe4f 	bl	800e438 <memp_malloc>
 801579a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d109      	bne.n	80157b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d151      	bne.n	801584c <sys_timeout_abs+0xc4>
 80157a8:	4b2a      	ldr	r3, [pc, #168]	; (8015854 <sys_timeout_abs+0xcc>)
 80157aa:	22be      	movs	r2, #190	; 0xbe
 80157ac:	492a      	ldr	r1, [pc, #168]	; (8015858 <sys_timeout_abs+0xd0>)
 80157ae:	482b      	ldr	r0, [pc, #172]	; (801585c <sys_timeout_abs+0xd4>)
 80157b0:	f005 fbb6 	bl	801af20 <iprintf>
    return;
 80157b4:	e04a      	b.n	801584c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80157b6:	693b      	ldr	r3, [r7, #16]
 80157b8:	2200      	movs	r2, #0
 80157ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	68ba      	ldr	r2, [r7, #8]
 80157c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80157ce:	4b24      	ldr	r3, [pc, #144]	; (8015860 <sys_timeout_abs+0xd8>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d103      	bne.n	80157de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80157d6:	4a22      	ldr	r2, [pc, #136]	; (8015860 <sys_timeout_abs+0xd8>)
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	6013      	str	r3, [r2, #0]
    return;
 80157dc:	e037      	b.n	801584e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	685a      	ldr	r2, [r3, #4]
 80157e2:	4b1f      	ldr	r3, [pc, #124]	; (8015860 <sys_timeout_abs+0xd8>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	1ad3      	subs	r3, r2, r3
 80157ea:	0fdb      	lsrs	r3, r3, #31
 80157ec:	f003 0301 	and.w	r3, r3, #1
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d007      	beq.n	8015806 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80157f6:	4b1a      	ldr	r3, [pc, #104]	; (8015860 <sys_timeout_abs+0xd8>)
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80157fe:	4a18      	ldr	r2, [pc, #96]	; (8015860 <sys_timeout_abs+0xd8>)
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	6013      	str	r3, [r2, #0]
 8015804:	e023      	b.n	801584e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015806:	4b16      	ldr	r3, [pc, #88]	; (8015860 <sys_timeout_abs+0xd8>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	617b      	str	r3, [r7, #20]
 801580c:	e01a      	b.n	8015844 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d00b      	beq.n	801582e <sys_timeout_abs+0xa6>
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	685a      	ldr	r2, [r3, #4]
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	1ad3      	subs	r3, r2, r3
 8015822:	0fdb      	lsrs	r3, r3, #31
 8015824:	f003 0301 	and.w	r3, r3, #1
 8015828:	b2db      	uxtb	r3, r3
 801582a:	2b00      	cmp	r3, #0
 801582c:	d007      	beq.n	801583e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	693a      	ldr	r2, [r7, #16]
 801583a:	601a      	str	r2, [r3, #0]
        break;
 801583c:	e007      	b.n	801584e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	617b      	str	r3, [r7, #20]
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d1e1      	bne.n	801580e <sys_timeout_abs+0x86>
 801584a:	e000      	b.n	801584e <sys_timeout_abs+0xc6>
    return;
 801584c:	bf00      	nop
      }
    }
  }
}
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	0801e82c 	.word	0x0801e82c
 8015858:	0801e860 	.word	0x0801e860
 801585c:	0801e8a0 	.word	0x0801e8a0
 8015860:	24009de4 	.word	0x24009de4

08015864 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	685b      	ldr	r3, [r3, #4]
 8015874:	4798      	blx	r3

  now = sys_now();
 8015876:	f7f2 ff39 	bl	80086ec <sys_now>
 801587a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	4b0f      	ldr	r3, [pc, #60]	; (80158c0 <lwip_cyclic_timer+0x5c>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	4413      	add	r3, r2
 8015886:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	1ad3      	subs	r3, r2, r3
 801588e:	0fdb      	lsrs	r3, r3, #31
 8015890:	f003 0301 	and.w	r3, r3, #1
 8015894:	b2db      	uxtb	r3, r3
 8015896:	2b00      	cmp	r3, #0
 8015898:	d009      	beq.n	80158ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	4413      	add	r3, r2
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	4907      	ldr	r1, [pc, #28]	; (80158c4 <lwip_cyclic_timer+0x60>)
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7ff ff6e 	bl	8015788 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80158ac:	e004      	b.n	80158b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	4904      	ldr	r1, [pc, #16]	; (80158c4 <lwip_cyclic_timer+0x60>)
 80158b2:	68f8      	ldr	r0, [r7, #12]
 80158b4:	f7ff ff68 	bl	8015788 <sys_timeout_abs>
}
 80158b8:	bf00      	nop
 80158ba:	3718      	adds	r7, #24
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	24009de8 	.word	0x24009de8
 80158c4:	08015865 	.word	0x08015865

080158c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80158ce:	2301      	movs	r3, #1
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	e00e      	b.n	80158f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80158d4:	4a0b      	ldr	r2, [pc, #44]	; (8015904 <sys_timeouts_init+0x3c>)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	00db      	lsls	r3, r3, #3
 80158e0:	4a08      	ldr	r2, [pc, #32]	; (8015904 <sys_timeouts_init+0x3c>)
 80158e2:	4413      	add	r3, r2
 80158e4:	461a      	mov	r2, r3
 80158e6:	4908      	ldr	r1, [pc, #32]	; (8015908 <sys_timeouts_init+0x40>)
 80158e8:	f000 f810 	bl	801590c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	3301      	adds	r3, #1
 80158f0:	607b      	str	r3, [r7, #4]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2b04      	cmp	r3, #4
 80158f6:	d9ed      	bls.n	80158d4 <sys_timeouts_init+0xc>
  }
}
 80158f8:	bf00      	nop
 80158fa:	bf00      	nop
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	0801f81c 	.word	0x0801f81c
 8015908:	08015865 	.word	0x08015865

0801590c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b086      	sub	sp, #24
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801591e:	d306      	bcc.n	801592e <sys_timeout+0x22>
 8015920:	4b0a      	ldr	r3, [pc, #40]	; (801594c <sys_timeout+0x40>)
 8015922:	f240 1229 	movw	r2, #297	; 0x129
 8015926:	490a      	ldr	r1, [pc, #40]	; (8015950 <sys_timeout+0x44>)
 8015928:	480a      	ldr	r0, [pc, #40]	; (8015954 <sys_timeout+0x48>)
 801592a:	f005 faf9 	bl	801af20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801592e:	f7f2 fedd 	bl	80086ec <sys_now>
 8015932:	4602      	mov	r2, r0
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	4413      	add	r3, r2
 8015938:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	68b9      	ldr	r1, [r7, #8]
 801593e:	6978      	ldr	r0, [r7, #20]
 8015940:	f7ff ff22 	bl	8015788 <sys_timeout_abs>
#endif
}
 8015944:	bf00      	nop
 8015946:	3718      	adds	r7, #24
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	0801e82c 	.word	0x0801e82c
 8015950:	0801e8c8 	.word	0x0801e8c8
 8015954:	0801e8a0 	.word	0x0801e8a0

08015958 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b084      	sub	sp, #16
 801595c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801595e:	f7f2 fec5 	bl	80086ec <sys_now>
 8015962:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015964:	4b17      	ldr	r3, [pc, #92]	; (80159c4 <sys_check_timeouts+0x6c>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d022      	beq.n	80159b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	68fa      	ldr	r2, [r7, #12]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	0fdb      	lsrs	r3, r3, #31
 801597a:	f003 0301 	and.w	r3, r3, #1
 801597e:	b2db      	uxtb	r3, r3
 8015980:	2b00      	cmp	r3, #0
 8015982:	d11a      	bne.n	80159ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	4a0e      	ldr	r2, [pc, #56]	; (80159c4 <sys_check_timeouts+0x6c>)
 801598a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	689b      	ldr	r3, [r3, #8]
 8015990:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	685b      	ldr	r3, [r3, #4]
 801599c:	4a0a      	ldr	r2, [pc, #40]	; (80159c8 <sys_check_timeouts+0x70>)
 801599e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80159a0:	68b9      	ldr	r1, [r7, #8]
 80159a2:	200a      	movs	r0, #10
 80159a4:	f7f8 fdbe 	bl	800e524 <memp_free>
    if (handler != NULL) {
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d0da      	beq.n	8015964 <sys_check_timeouts+0xc>
      handler(arg);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6838      	ldr	r0, [r7, #0]
 80159b2:	4798      	blx	r3
  do {
 80159b4:	e7d6      	b.n	8015964 <sys_check_timeouts+0xc>
      return;
 80159b6:	bf00      	nop
 80159b8:	e000      	b.n	80159bc <sys_check_timeouts+0x64>
      return;
 80159ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80159bc:	3710      	adds	r7, #16
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	bf00      	nop
 80159c4:	24009de4 	.word	0x24009de4
 80159c8:	24009de8 	.word	0x24009de8

080159cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80159d2:	4b16      	ldr	r3, [pc, #88]	; (8015a2c <sys_timeouts_sleeptime+0x60>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d102      	bne.n	80159e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80159da:	f04f 33ff 	mov.w	r3, #4294967295
 80159de:	e020      	b.n	8015a22 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80159e0:	f7f2 fe84 	bl	80086ec <sys_now>
 80159e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80159e6:	4b11      	ldr	r3, [pc, #68]	; (8015a2c <sys_timeouts_sleeptime+0x60>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	685a      	ldr	r2, [r3, #4]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	1ad3      	subs	r3, r2, r3
 80159f0:	0fdb      	lsrs	r3, r3, #31
 80159f2:	f003 0301 	and.w	r3, r3, #1
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d001      	beq.n	8015a00 <sys_timeouts_sleeptime+0x34>
    return 0;
 80159fc:	2300      	movs	r3, #0
 80159fe:	e010      	b.n	8015a22 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015a00:	4b0a      	ldr	r3, [pc, #40]	; (8015a2c <sys_timeouts_sleeptime+0x60>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	685a      	ldr	r2, [r3, #4]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	1ad3      	subs	r3, r2, r3
 8015a0a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	da06      	bge.n	8015a20 <sys_timeouts_sleeptime+0x54>
 8015a12:	4b07      	ldr	r3, [pc, #28]	; (8015a30 <sys_timeouts_sleeptime+0x64>)
 8015a14:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015a18:	4906      	ldr	r1, [pc, #24]	; (8015a34 <sys_timeouts_sleeptime+0x68>)
 8015a1a:	4807      	ldr	r0, [pc, #28]	; (8015a38 <sys_timeouts_sleeptime+0x6c>)
 8015a1c:	f005 fa80 	bl	801af20 <iprintf>
    return ret;
 8015a20:	683b      	ldr	r3, [r7, #0]
  }
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
 8015a2a:	bf00      	nop
 8015a2c:	24009de4 	.word	0x24009de4
 8015a30:	0801e82c 	.word	0x0801e82c
 8015a34:	0801e900 	.word	0x0801e900
 8015a38:	0801e8a0 	.word	0x0801e8a0

08015a3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015a40:	f005 fa86 	bl	801af50 <rand>
 8015a44:	4603      	mov	r3, r0
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	4b01      	ldr	r3, [pc, #4]	; (8015a5c <udp_init+0x20>)
 8015a56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015a58:	bf00      	nop
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	24000030 	.word	0x24000030

08015a60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b083      	sub	sp, #12
 8015a64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015a6a:	4b17      	ldr	r3, [pc, #92]	; (8015ac8 <udp_new_port+0x68>)
 8015a6c:	881b      	ldrh	r3, [r3, #0]
 8015a6e:	1c5a      	adds	r2, r3, #1
 8015a70:	b291      	uxth	r1, r2
 8015a72:	4a15      	ldr	r2, [pc, #84]	; (8015ac8 <udp_new_port+0x68>)
 8015a74:	8011      	strh	r1, [r2, #0]
 8015a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d103      	bne.n	8015a86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015a7e:	4b12      	ldr	r3, [pc, #72]	; (8015ac8 <udp_new_port+0x68>)
 8015a80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015a84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a86:	4b11      	ldr	r3, [pc, #68]	; (8015acc <udp_new_port+0x6c>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	603b      	str	r3, [r7, #0]
 8015a8c:	e011      	b.n	8015ab2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	8a5a      	ldrh	r2, [r3, #18]
 8015a92:	4b0d      	ldr	r3, [pc, #52]	; (8015ac8 <udp_new_port+0x68>)
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d108      	bne.n	8015aac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015a9a:	88fb      	ldrh	r3, [r7, #6]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	80fb      	strh	r3, [r7, #6]
 8015aa0:	88fb      	ldrh	r3, [r7, #6]
 8015aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015aa6:	d3e0      	bcc.n	8015a6a <udp_new_port+0xa>
        return 0;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	e007      	b.n	8015abc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	68db      	ldr	r3, [r3, #12]
 8015ab0:	603b      	str	r3, [r7, #0]
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d1ea      	bne.n	8015a8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015ab8:	4b03      	ldr	r3, [pc, #12]	; (8015ac8 <udp_new_port+0x68>)
 8015aba:	881b      	ldrh	r3, [r3, #0]
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	370c      	adds	r7, #12
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac6:	4770      	bx	lr
 8015ac8:	24000030 	.word	0x24000030
 8015acc:	2400d72c 	.word	0x2400d72c

08015ad0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	60f8      	str	r0, [r7, #12]
 8015ad8:	60b9      	str	r1, [r7, #8]
 8015ada:	4613      	mov	r3, r2
 8015adc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d105      	bne.n	8015af0 <udp_input_local_match+0x20>
 8015ae4:	4b27      	ldr	r3, [pc, #156]	; (8015b84 <udp_input_local_match+0xb4>)
 8015ae6:	2287      	movs	r2, #135	; 0x87
 8015ae8:	4927      	ldr	r1, [pc, #156]	; (8015b88 <udp_input_local_match+0xb8>)
 8015aea:	4828      	ldr	r0, [pc, #160]	; (8015b8c <udp_input_local_match+0xbc>)
 8015aec:	f005 fa18 	bl	801af20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d105      	bne.n	8015b02 <udp_input_local_match+0x32>
 8015af6:	4b23      	ldr	r3, [pc, #140]	; (8015b84 <udp_input_local_match+0xb4>)
 8015af8:	2288      	movs	r2, #136	; 0x88
 8015afa:	4925      	ldr	r1, [pc, #148]	; (8015b90 <udp_input_local_match+0xc0>)
 8015afc:	4823      	ldr	r0, [pc, #140]	; (8015b8c <udp_input_local_match+0xbc>)
 8015afe:	f005 fa0f 	bl	801af20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	7a1b      	ldrb	r3, [r3, #8]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00b      	beq.n	8015b22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	7a1a      	ldrb	r2, [r3, #8]
 8015b0e:	4b21      	ldr	r3, [pc, #132]	; (8015b94 <udp_input_local_match+0xc4>)
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b16:	3301      	adds	r3, #1
 8015b18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d001      	beq.n	8015b22 <udp_input_local_match+0x52>
    return 0;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	e02b      	b.n	8015b7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015b22:	79fb      	ldrb	r3, [r7, #7]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d018      	beq.n	8015b5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d013      	beq.n	8015b56 <udp_input_local_match+0x86>
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d00f      	beq.n	8015b56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b36:	4b17      	ldr	r3, [pc, #92]	; (8015b94 <udp_input_local_match+0xc4>)
 8015b38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b3e:	d00a      	beq.n	8015b56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681a      	ldr	r2, [r3, #0]
 8015b44:	4b13      	ldr	r3, [pc, #76]	; (8015b94 <udp_input_local_match+0xc4>)
 8015b46:	695b      	ldr	r3, [r3, #20]
 8015b48:	405a      	eors	r2, r3
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	3308      	adds	r3, #8
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d110      	bne.n	8015b78 <udp_input_local_match+0xa8>
          return 1;
 8015b56:	2301      	movs	r3, #1
 8015b58:	e00f      	b.n	8015b7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d009      	beq.n	8015b74 <udp_input_local_match+0xa4>
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d005      	beq.n	8015b74 <udp_input_local_match+0xa4>
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	4b09      	ldr	r3, [pc, #36]	; (8015b94 <udp_input_local_match+0xc4>)
 8015b6e:	695b      	ldr	r3, [r3, #20]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d101      	bne.n	8015b78 <udp_input_local_match+0xa8>
        return 1;
 8015b74:	2301      	movs	r3, #1
 8015b76:	e000      	b.n	8015b7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015b78:	2300      	movs	r3, #0
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	0801e914 	.word	0x0801e914
 8015b88:	0801e944 	.word	0x0801e944
 8015b8c:	0801e968 	.word	0x0801e968
 8015b90:	0801e990 	.word	0x0801e990
 8015b94:	2400a634 	.word	0x2400a634

08015b98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015b98:	b590      	push	{r4, r7, lr}
 8015b9a:	b08d      	sub	sp, #52	; 0x34
 8015b9c:	af02      	add	r7, sp, #8
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d105      	bne.n	8015bb8 <udp_input+0x20>
 8015bac:	4b7c      	ldr	r3, [pc, #496]	; (8015da0 <udp_input+0x208>)
 8015bae:	22cf      	movs	r2, #207	; 0xcf
 8015bb0:	497c      	ldr	r1, [pc, #496]	; (8015da4 <udp_input+0x20c>)
 8015bb2:	487d      	ldr	r0, [pc, #500]	; (8015da8 <udp_input+0x210>)
 8015bb4:	f005 f9b4 	bl	801af20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d105      	bne.n	8015bca <udp_input+0x32>
 8015bbe:	4b78      	ldr	r3, [pc, #480]	; (8015da0 <udp_input+0x208>)
 8015bc0:	22d0      	movs	r2, #208	; 0xd0
 8015bc2:	497a      	ldr	r1, [pc, #488]	; (8015dac <udp_input+0x214>)
 8015bc4:	4878      	ldr	r0, [pc, #480]	; (8015da8 <udp_input+0x210>)
 8015bc6:	f005 f9ab 	bl	801af20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	895b      	ldrh	r3, [r3, #10]
 8015bce:	2b07      	cmp	r3, #7
 8015bd0:	d803      	bhi.n	8015bda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f7f9 fb56 	bl	800f284 <pbuf_free>
    goto end;
 8015bd8:	e0de      	b.n	8015d98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015be0:	4b73      	ldr	r3, [pc, #460]	; (8015db0 <udp_input+0x218>)
 8015be2:	695b      	ldr	r3, [r3, #20]
 8015be4:	4a72      	ldr	r2, [pc, #456]	; (8015db0 <udp_input+0x218>)
 8015be6:	6812      	ldr	r2, [r2, #0]
 8015be8:	4611      	mov	r1, r2
 8015bea:	4618      	mov	r0, r3
 8015bec:	f003 feca 	bl	8019984 <ip4_addr_isbroadcast_u32>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	881b      	ldrh	r3, [r3, #0]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7f7 fe8c 	bl	800d918 <lwip_htons>
 8015c00:	4603      	mov	r3, r0
 8015c02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	885b      	ldrh	r3, [r3, #2]
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7f7 fe84 	bl	800d918 <lwip_htons>
 8015c10:	4603      	mov	r3, r0
 8015c12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015c14:	2300      	movs	r3, #0
 8015c16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c20:	4b64      	ldr	r3, [pc, #400]	; (8015db4 <udp_input+0x21c>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	627b      	str	r3, [r7, #36]	; 0x24
 8015c26:	e054      	b.n	8015cd2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2a:	8a5b      	ldrh	r3, [r3, #18]
 8015c2c:	89fa      	ldrh	r2, [r7, #14]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d14a      	bne.n	8015cc8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015c32:	7cfb      	ldrb	r3, [r7, #19]
 8015c34:	461a      	mov	r2, r3
 8015c36:	6839      	ldr	r1, [r7, #0]
 8015c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c3a:	f7ff ff49 	bl	8015ad0 <udp_input_local_match>
 8015c3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d041      	beq.n	8015cc8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c46:	7c1b      	ldrb	r3, [r3, #16]
 8015c48:	f003 0304 	and.w	r3, r3, #4
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d11d      	bne.n	8015c8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d102      	bne.n	8015c5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c58:	61fb      	str	r3, [r7, #28]
 8015c5a:	e017      	b.n	8015c8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015c5c:	7cfb      	ldrb	r3, [r7, #19]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d014      	beq.n	8015c8c <udp_input+0xf4>
 8015c62:	4b53      	ldr	r3, [pc, #332]	; (8015db0 <udp_input+0x218>)
 8015c64:	695b      	ldr	r3, [r3, #20]
 8015c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c6a:	d10f      	bne.n	8015c8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	3304      	adds	r3, #4
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d008      	beq.n	8015c8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	3304      	adds	r3, #4
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d101      	bne.n	8015c8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	8a9b      	ldrh	r3, [r3, #20]
 8015c90:	8a3a      	ldrh	r2, [r7, #16]
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d118      	bne.n	8015cc8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d005      	beq.n	8015caa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	685a      	ldr	r2, [r3, #4]
 8015ca2:	4b43      	ldr	r3, [pc, #268]	; (8015db0 <udp_input+0x218>)
 8015ca4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d10e      	bne.n	8015cc8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015caa:	6a3b      	ldr	r3, [r7, #32]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d014      	beq.n	8015cda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb2:	68da      	ldr	r2, [r3, #12]
 8015cb4:	6a3b      	ldr	r3, [r7, #32]
 8015cb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015cb8:	4b3e      	ldr	r3, [pc, #248]	; (8015db4 <udp_input+0x21c>)
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015cc0:	4a3c      	ldr	r2, [pc, #240]	; (8015db4 <udp_input+0x21c>)
 8015cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015cc6:	e008      	b.n	8015cda <udp_input+0x142>
      }
    }

    prev = pcb;
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8015cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d1a7      	bne.n	8015c28 <udp_input+0x90>
 8015cd8:	e000      	b.n	8015cdc <udp_input+0x144>
        break;
 8015cda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d101      	bne.n	8015ce6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015ce2:	69fb      	ldr	r3, [r7, #28]
 8015ce4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d002      	beq.n	8015cf2 <udp_input+0x15a>
    for_us = 1;
 8015cec:	2301      	movs	r3, #1
 8015cee:	76fb      	strb	r3, [r7, #27]
 8015cf0:	e00a      	b.n	8015d08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	3304      	adds	r3, #4
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	4b2d      	ldr	r3, [pc, #180]	; (8015db0 <udp_input+0x218>)
 8015cfa:	695b      	ldr	r3, [r3, #20]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	bf0c      	ite	eq
 8015d00:	2301      	moveq	r3, #1
 8015d02:	2300      	movne	r3, #0
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015d08:	7efb      	ldrb	r3, [r7, #27]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d041      	beq.n	8015d92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015d0e:	2108      	movs	r1, #8
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7f9 fa31 	bl	800f178 <pbuf_remove_header>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d00a      	beq.n	8015d32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015d1c:	4b20      	ldr	r3, [pc, #128]	; (8015da0 <udp_input+0x208>)
 8015d1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015d22:	4925      	ldr	r1, [pc, #148]	; (8015db8 <udp_input+0x220>)
 8015d24:	4820      	ldr	r0, [pc, #128]	; (8015da8 <udp_input+0x210>)
 8015d26:	f005 f8fb 	bl	801af20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f7f9 faaa 	bl	800f284 <pbuf_free>
      goto end;
 8015d30:	e032      	b.n	8015d98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d012      	beq.n	8015d5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3a:	699b      	ldr	r3, [r3, #24]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d00a      	beq.n	8015d56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	699c      	ldr	r4, [r3, #24]
 8015d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d46:	69d8      	ldr	r0, [r3, #28]
 8015d48:	8a3b      	ldrh	r3, [r7, #16]
 8015d4a:	9300      	str	r3, [sp, #0]
 8015d4c:	4b1b      	ldr	r3, [pc, #108]	; (8015dbc <udp_input+0x224>)
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015d54:	e021      	b.n	8015d9a <udp_input+0x202>
        pbuf_free(p);
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f7f9 fa94 	bl	800f284 <pbuf_free>
        goto end;
 8015d5c:	e01c      	b.n	8015d98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015d5e:	7cfb      	ldrb	r3, [r7, #19]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d112      	bne.n	8015d8a <udp_input+0x1f2>
 8015d64:	4b12      	ldr	r3, [pc, #72]	; (8015db0 <udp_input+0x218>)
 8015d66:	695b      	ldr	r3, [r3, #20]
 8015d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d6c:	2be0      	cmp	r3, #224	; 0xe0
 8015d6e:	d00c      	beq.n	8015d8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015d70:	4b0f      	ldr	r3, [pc, #60]	; (8015db0 <udp_input+0x218>)
 8015d72:	899b      	ldrh	r3, [r3, #12]
 8015d74:	3308      	adds	r3, #8
 8015d76:	b29b      	uxth	r3, r3
 8015d78:	b21b      	sxth	r3, r3
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7f9 fa6e 	bl	800f25e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015d82:	2103      	movs	r1, #3
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f003 fab5 	bl	80192f4 <icmp_dest_unreach>
      pbuf_free(p);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7f9 fa7a 	bl	800f284 <pbuf_free>
  return;
 8015d90:	e003      	b.n	8015d9a <udp_input+0x202>
    pbuf_free(p);
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f7f9 fa76 	bl	800f284 <pbuf_free>
  return;
 8015d98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015d9a:	372c      	adds	r7, #44	; 0x2c
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd90      	pop	{r4, r7, pc}
 8015da0:	0801e914 	.word	0x0801e914
 8015da4:	0801e9b8 	.word	0x0801e9b8
 8015da8:	0801e968 	.word	0x0801e968
 8015dac:	0801e9d0 	.word	0x0801e9d0
 8015db0:	2400a634 	.word	0x2400a634
 8015db4:	2400d72c 	.word	0x2400d72c
 8015db8:	0801e9ec 	.word	0x0801e9ec
 8015dbc:	2400a644 	.word	0x2400a644

08015dc0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d109      	bne.n	8015de4 <udp_send+0x24>
 8015dd0:	4b11      	ldr	r3, [pc, #68]	; (8015e18 <udp_send+0x58>)
 8015dd2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015dd6:	4911      	ldr	r1, [pc, #68]	; (8015e1c <udp_send+0x5c>)
 8015dd8:	4811      	ldr	r0, [pc, #68]	; (8015e20 <udp_send+0x60>)
 8015dda:	f005 f8a1 	bl	801af20 <iprintf>
 8015dde:	f06f 030f 	mvn.w	r3, #15
 8015de2:	e015      	b.n	8015e10 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d109      	bne.n	8015dfe <udp_send+0x3e>
 8015dea:	4b0b      	ldr	r3, [pc, #44]	; (8015e18 <udp_send+0x58>)
 8015dec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015df0:	490c      	ldr	r1, [pc, #48]	; (8015e24 <udp_send+0x64>)
 8015df2:	480b      	ldr	r0, [pc, #44]	; (8015e20 <udp_send+0x60>)
 8015df4:	f005 f894 	bl	801af20 <iprintf>
 8015df8:	f06f 030f 	mvn.w	r3, #15
 8015dfc:	e008      	b.n	8015e10 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	1d1a      	adds	r2, r3, #4
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	8a9b      	ldrh	r3, [r3, #20]
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 f80d 	bl	8015e28 <udp_sendto>
 8015e0e:	4603      	mov	r3, r0
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	0801e914 	.word	0x0801e914
 8015e1c:	0801ea08 	.word	0x0801ea08
 8015e20:	0801e968 	.word	0x0801e968
 8015e24:	0801ea20 	.word	0x0801ea20

08015e28 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b088      	sub	sp, #32
 8015e2c:	af02      	add	r7, sp, #8
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	60b9      	str	r1, [r7, #8]
 8015e32:	607a      	str	r2, [r7, #4]
 8015e34:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d109      	bne.n	8015e50 <udp_sendto+0x28>
 8015e3c:	4b23      	ldr	r3, [pc, #140]	; (8015ecc <udp_sendto+0xa4>)
 8015e3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015e42:	4923      	ldr	r1, [pc, #140]	; (8015ed0 <udp_sendto+0xa8>)
 8015e44:	4823      	ldr	r0, [pc, #140]	; (8015ed4 <udp_sendto+0xac>)
 8015e46:	f005 f86b 	bl	801af20 <iprintf>
 8015e4a:	f06f 030f 	mvn.w	r3, #15
 8015e4e:	e038      	b.n	8015ec2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d109      	bne.n	8015e6a <udp_sendto+0x42>
 8015e56:	4b1d      	ldr	r3, [pc, #116]	; (8015ecc <udp_sendto+0xa4>)
 8015e58:	f240 2219 	movw	r2, #537	; 0x219
 8015e5c:	491e      	ldr	r1, [pc, #120]	; (8015ed8 <udp_sendto+0xb0>)
 8015e5e:	481d      	ldr	r0, [pc, #116]	; (8015ed4 <udp_sendto+0xac>)
 8015e60:	f005 f85e 	bl	801af20 <iprintf>
 8015e64:	f06f 030f 	mvn.w	r3, #15
 8015e68:	e02b      	b.n	8015ec2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d109      	bne.n	8015e84 <udp_sendto+0x5c>
 8015e70:	4b16      	ldr	r3, [pc, #88]	; (8015ecc <udp_sendto+0xa4>)
 8015e72:	f240 221a 	movw	r2, #538	; 0x21a
 8015e76:	4919      	ldr	r1, [pc, #100]	; (8015edc <udp_sendto+0xb4>)
 8015e78:	4816      	ldr	r0, [pc, #88]	; (8015ed4 <udp_sendto+0xac>)
 8015e7a:	f005 f851 	bl	801af20 <iprintf>
 8015e7e:	f06f 030f 	mvn.w	r3, #15
 8015e82:	e01e      	b.n	8015ec2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	7a1b      	ldrb	r3, [r3, #8]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d006      	beq.n	8015e9a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	7a1b      	ldrb	r3, [r3, #8]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7f8 fe69 	bl	800eb68 <netif_get_by_index>
 8015e96:	6178      	str	r0, [r7, #20]
 8015e98:	e003      	b.n	8015ea2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f003 fabe 	bl	801941c <ip4_route>
 8015ea0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015ea8:	f06f 0303 	mvn.w	r3, #3
 8015eac:	e009      	b.n	8015ec2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015eae:	887a      	ldrh	r2, [r7, #2]
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	9300      	str	r3, [sp, #0]
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	68b9      	ldr	r1, [r7, #8]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f000 f810 	bl	8015ee0 <udp_sendto_if>
 8015ec0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3718      	adds	r7, #24
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}
 8015eca:	bf00      	nop
 8015ecc:	0801e914 	.word	0x0801e914
 8015ed0:	0801ea38 	.word	0x0801ea38
 8015ed4:	0801e968 	.word	0x0801e968
 8015ed8:	0801ea50 	.word	0x0801ea50
 8015edc:	0801ea6c 	.word	0x0801ea6c

08015ee0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b088      	sub	sp, #32
 8015ee4:	af02      	add	r7, sp, #8
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
 8015eec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d109      	bne.n	8015f08 <udp_sendto_if+0x28>
 8015ef4:	4b2e      	ldr	r3, [pc, #184]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015ef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015efa:	492e      	ldr	r1, [pc, #184]	; (8015fb4 <udp_sendto_if+0xd4>)
 8015efc:	482e      	ldr	r0, [pc, #184]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015efe:	f005 f80f 	bl	801af20 <iprintf>
 8015f02:	f06f 030f 	mvn.w	r3, #15
 8015f06:	e04f      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d109      	bne.n	8015f22 <udp_sendto_if+0x42>
 8015f0e:	4b28      	ldr	r3, [pc, #160]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f10:	f240 2281 	movw	r2, #641	; 0x281
 8015f14:	4929      	ldr	r1, [pc, #164]	; (8015fbc <udp_sendto_if+0xdc>)
 8015f16:	4828      	ldr	r0, [pc, #160]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f18:	f005 f802 	bl	801af20 <iprintf>
 8015f1c:	f06f 030f 	mvn.w	r3, #15
 8015f20:	e042      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d109      	bne.n	8015f3c <udp_sendto_if+0x5c>
 8015f28:	4b21      	ldr	r3, [pc, #132]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f2a:	f240 2282 	movw	r2, #642	; 0x282
 8015f2e:	4924      	ldr	r1, [pc, #144]	; (8015fc0 <udp_sendto_if+0xe0>)
 8015f30:	4821      	ldr	r0, [pc, #132]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f32:	f004 fff5 	bl	801af20 <iprintf>
 8015f36:	f06f 030f 	mvn.w	r3, #15
 8015f3a:	e035      	b.n	8015fa8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015f3c:	6a3b      	ldr	r3, [r7, #32]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d109      	bne.n	8015f56 <udp_sendto_if+0x76>
 8015f42:	4b1b      	ldr	r3, [pc, #108]	; (8015fb0 <udp_sendto_if+0xd0>)
 8015f44:	f240 2283 	movw	r2, #643	; 0x283
 8015f48:	491e      	ldr	r1, [pc, #120]	; (8015fc4 <udp_sendto_if+0xe4>)
 8015f4a:	481b      	ldr	r0, [pc, #108]	; (8015fb8 <udp_sendto_if+0xd8>)
 8015f4c:	f004 ffe8 	bl	801af20 <iprintf>
 8015f50:	f06f 030f 	mvn.w	r3, #15
 8015f54:	e028      	b.n	8015fa8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d009      	beq.n	8015f70 <udp_sendto_if+0x90>
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d005      	beq.n	8015f70 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015f6c:	2be0      	cmp	r3, #224	; 0xe0
 8015f6e:	d103      	bne.n	8015f78 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	3304      	adds	r3, #4
 8015f74:	617b      	str	r3, [r7, #20]
 8015f76:	e00b      	b.n	8015f90 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681a      	ldr	r2, [r3, #0]
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	3304      	adds	r3, #4
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d002      	beq.n	8015f8c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015f86:	f06f 0303 	mvn.w	r3, #3
 8015f8a:	e00d      	b.n	8015fa8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015f90:	887a      	ldrh	r2, [r7, #2]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	6a3b      	ldr	r3, [r7, #32]
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	68b9      	ldr	r1, [r7, #8]
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f000 f811 	bl	8015fc8 <udp_sendto_if_src>
 8015fa6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3718      	adds	r7, #24
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}
 8015fb0:	0801e914 	.word	0x0801e914
 8015fb4:	0801ea88 	.word	0x0801ea88
 8015fb8:	0801e968 	.word	0x0801e968
 8015fbc:	0801eaa4 	.word	0x0801eaa4
 8015fc0:	0801eac0 	.word	0x0801eac0
 8015fc4:	0801eae0 	.word	0x0801eae0

08015fc8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08c      	sub	sp, #48	; 0x30
 8015fcc:	af04      	add	r7, sp, #16
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	60b9      	str	r1, [r7, #8]
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d109      	bne.n	8015ff0 <udp_sendto_if_src+0x28>
 8015fdc:	4b65      	ldr	r3, [pc, #404]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8015fde:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015fe2:	4965      	ldr	r1, [pc, #404]	; (8016178 <udp_sendto_if_src+0x1b0>)
 8015fe4:	4865      	ldr	r0, [pc, #404]	; (801617c <udp_sendto_if_src+0x1b4>)
 8015fe6:	f004 ff9b 	bl	801af20 <iprintf>
 8015fea:	f06f 030f 	mvn.w	r3, #15
 8015fee:	e0bc      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d109      	bne.n	801600a <udp_sendto_if_src+0x42>
 8015ff6:	4b5f      	ldr	r3, [pc, #380]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8015ff8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015ffc:	4960      	ldr	r1, [pc, #384]	; (8016180 <udp_sendto_if_src+0x1b8>)
 8015ffe:	485f      	ldr	r0, [pc, #380]	; (801617c <udp_sendto_if_src+0x1b4>)
 8016000:	f004 ff8e 	bl	801af20 <iprintf>
 8016004:	f06f 030f 	mvn.w	r3, #15
 8016008:	e0af      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d109      	bne.n	8016024 <udp_sendto_if_src+0x5c>
 8016010:	4b58      	ldr	r3, [pc, #352]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8016012:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016016:	495b      	ldr	r1, [pc, #364]	; (8016184 <udp_sendto_if_src+0x1bc>)
 8016018:	4858      	ldr	r0, [pc, #352]	; (801617c <udp_sendto_if_src+0x1b4>)
 801601a:	f004 ff81 	bl	801af20 <iprintf>
 801601e:	f06f 030f 	mvn.w	r3, #15
 8016022:	e0a2      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016026:	2b00      	cmp	r3, #0
 8016028:	d109      	bne.n	801603e <udp_sendto_if_src+0x76>
 801602a:	4b52      	ldr	r3, [pc, #328]	; (8016174 <udp_sendto_if_src+0x1ac>)
 801602c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016030:	4955      	ldr	r1, [pc, #340]	; (8016188 <udp_sendto_if_src+0x1c0>)
 8016032:	4852      	ldr	r0, [pc, #328]	; (801617c <udp_sendto_if_src+0x1b4>)
 8016034:	f004 ff74 	bl	801af20 <iprintf>
 8016038:	f06f 030f 	mvn.w	r3, #15
 801603c:	e095      	b.n	801616a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016040:	2b00      	cmp	r3, #0
 8016042:	d109      	bne.n	8016058 <udp_sendto_if_src+0x90>
 8016044:	4b4b      	ldr	r3, [pc, #300]	; (8016174 <udp_sendto_if_src+0x1ac>)
 8016046:	f240 22d5 	movw	r2, #725	; 0x2d5
 801604a:	4950      	ldr	r1, [pc, #320]	; (801618c <udp_sendto_if_src+0x1c4>)
 801604c:	484b      	ldr	r0, [pc, #300]	; (801617c <udp_sendto_if_src+0x1b4>)
 801604e:	f004 ff67 	bl	801af20 <iprintf>
 8016052:	f06f 030f 	mvn.w	r3, #15
 8016056:	e088      	b.n	801616a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	8a5b      	ldrh	r3, [r3, #18]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d10f      	bne.n	8016080 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	8a5b      	ldrh	r3, [r3, #18]
 8016066:	461a      	mov	r2, r3
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f000 f893 	bl	8016194 <udp_bind>
 801606e:	4603      	mov	r3, r0
 8016070:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d002      	beq.n	8016080 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801607a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801607e:	e074      	b.n	801616a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	891b      	ldrh	r3, [r3, #8]
 8016084:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016088:	4293      	cmp	r3, r2
 801608a:	d902      	bls.n	8016092 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801608c:	f04f 33ff 	mov.w	r3, #4294967295
 8016090:	e06b      	b.n	801616a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016092:	2108      	movs	r1, #8
 8016094:	68b8      	ldr	r0, [r7, #8]
 8016096:	f7f9 f85f 	bl	800f158 <pbuf_add_header>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d015      	beq.n	80160cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80160a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160a4:	2108      	movs	r1, #8
 80160a6:	2022      	movs	r0, #34	; 0x22
 80160a8:	f7f8 fe08 	bl	800ecbc <pbuf_alloc>
 80160ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d102      	bne.n	80160ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80160b4:	f04f 33ff 	mov.w	r3, #4294967295
 80160b8:	e057      	b.n	801616a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	891b      	ldrh	r3, [r3, #8]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d006      	beq.n	80160d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80160c2:	68b9      	ldr	r1, [r7, #8]
 80160c4:	69f8      	ldr	r0, [r7, #28]
 80160c6:	f7f9 fa01 	bl	800f4cc <pbuf_chain>
 80160ca:	e001      	b.n	80160d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80160d0:	69fb      	ldr	r3, [r7, #28]
 80160d2:	895b      	ldrh	r3, [r3, #10]
 80160d4:	2b07      	cmp	r3, #7
 80160d6:	d806      	bhi.n	80160e6 <udp_sendto_if_src+0x11e>
 80160d8:	4b26      	ldr	r3, [pc, #152]	; (8016174 <udp_sendto_if_src+0x1ac>)
 80160da:	f240 320d 	movw	r2, #781	; 0x30d
 80160de:	492c      	ldr	r1, [pc, #176]	; (8016190 <udp_sendto_if_src+0x1c8>)
 80160e0:	4826      	ldr	r0, [pc, #152]	; (801617c <udp_sendto_if_src+0x1b4>)
 80160e2:	f004 ff1d 	bl	801af20 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	8a5b      	ldrh	r3, [r3, #18]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7f7 fc11 	bl	800d918 <lwip_htons>
 80160f6:	4603      	mov	r3, r0
 80160f8:	461a      	mov	r2, r3
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80160fe:	887b      	ldrh	r3, [r7, #2]
 8016100:	4618      	mov	r0, r3
 8016102:	f7f7 fc09 	bl	800d918 <lwip_htons>
 8016106:	4603      	mov	r3, r0
 8016108:	461a      	mov	r2, r3
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	2200      	movs	r2, #0
 8016112:	719a      	strb	r2, [r3, #6]
 8016114:	2200      	movs	r2, #0
 8016116:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	891b      	ldrh	r3, [r3, #8]
 801611c:	4618      	mov	r0, r3
 801611e:	f7f7 fbfb 	bl	800d918 <lwip_htons>
 8016122:	4603      	mov	r3, r0
 8016124:	461a      	mov	r2, r3
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801612a:	2311      	movs	r3, #17
 801612c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	7adb      	ldrb	r3, [r3, #11]
 8016132:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	7a9b      	ldrb	r3, [r3, #10]
 8016138:	7cb9      	ldrb	r1, [r7, #18]
 801613a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801613c:	9202      	str	r2, [sp, #8]
 801613e:	7cfa      	ldrb	r2, [r7, #19]
 8016140:	9201      	str	r2, [sp, #4]
 8016142:	9300      	str	r3, [sp, #0]
 8016144:	460b      	mov	r3, r1
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801614a:	69f8      	ldr	r0, [r7, #28]
 801614c:	f003 fb6c 	bl	8019828 <ip4_output_if_src>
 8016150:	4603      	mov	r3, r0
 8016152:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016154:	69fa      	ldr	r2, [r7, #28]
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	429a      	cmp	r2, r3
 801615a:	d004      	beq.n	8016166 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801615c:	69f8      	ldr	r0, [r7, #28]
 801615e:	f7f9 f891 	bl	800f284 <pbuf_free>
    q = NULL;
 8016162:	2300      	movs	r3, #0
 8016164:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016166:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3720      	adds	r7, #32
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	0801e914 	.word	0x0801e914
 8016178:	0801eb00 	.word	0x0801eb00
 801617c:	0801e968 	.word	0x0801e968
 8016180:	0801eb20 	.word	0x0801eb20
 8016184:	0801eb40 	.word	0x0801eb40
 8016188:	0801eb64 	.word	0x0801eb64
 801618c:	0801eb88 	.word	0x0801eb88
 8016190:	0801ebac 	.word	0x0801ebac

08016194 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	4613      	mov	r3, r2
 80161a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d101      	bne.n	80161ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80161a8:	4b39      	ldr	r3, [pc, #228]	; (8016290 <udp_bind+0xfc>)
 80161aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d109      	bne.n	80161c6 <udp_bind+0x32>
 80161b2:	4b38      	ldr	r3, [pc, #224]	; (8016294 <udp_bind+0x100>)
 80161b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80161b8:	4937      	ldr	r1, [pc, #220]	; (8016298 <udp_bind+0x104>)
 80161ba:	4838      	ldr	r0, [pc, #224]	; (801629c <udp_bind+0x108>)
 80161bc:	f004 feb0 	bl	801af20 <iprintf>
 80161c0:	f06f 030f 	mvn.w	r3, #15
 80161c4:	e060      	b.n	8016288 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80161c6:	2300      	movs	r3, #0
 80161c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80161ca:	4b35      	ldr	r3, [pc, #212]	; (80162a0 <udp_bind+0x10c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	617b      	str	r3, [r7, #20]
 80161d0:	e009      	b.n	80161e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80161d2:	68fa      	ldr	r2, [r7, #12]
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d102      	bne.n	80161e0 <udp_bind+0x4c>
      rebind = 1;
 80161da:	2301      	movs	r3, #1
 80161dc:	74fb      	strb	r3, [r7, #19]
      break;
 80161de:	e005      	b.n	80161ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	617b      	str	r3, [r7, #20]
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d1f2      	bne.n	80161d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80161ec:	88fb      	ldrh	r3, [r7, #6]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d109      	bne.n	8016206 <udp_bind+0x72>
    port = udp_new_port();
 80161f2:	f7ff fc35 	bl	8015a60 <udp_new_port>
 80161f6:	4603      	mov	r3, r0
 80161f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80161fa:	88fb      	ldrh	r3, [r7, #6]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d12c      	bne.n	801625a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016200:	f06f 0307 	mvn.w	r3, #7
 8016204:	e040      	b.n	8016288 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016206:	4b26      	ldr	r3, [pc, #152]	; (80162a0 <udp_bind+0x10c>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	617b      	str	r3, [r7, #20]
 801620c:	e022      	b.n	8016254 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801620e:	68fa      	ldr	r2, [r7, #12]
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	429a      	cmp	r2, r3
 8016214:	d01b      	beq.n	801624e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	8a5b      	ldrh	r3, [r3, #18]
 801621a:	88fa      	ldrh	r2, [r7, #6]
 801621c:	429a      	cmp	r2, r3
 801621e:	d116      	bne.n	801624e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016228:	429a      	cmp	r2, r3
 801622a:	d00d      	beq.n	8016248 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d00a      	beq.n	8016248 <udp_bind+0xb4>
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d006      	beq.n	8016248 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801623a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801623c:	2b00      	cmp	r3, #0
 801623e:	d003      	beq.n	8016248 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d102      	bne.n	801624e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016248:	f06f 0307 	mvn.w	r3, #7
 801624c:	e01c      	b.n	8016288 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	617b      	str	r3, [r7, #20]
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1d9      	bne.n	801620e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d002      	beq.n	8016266 <udp_bind+0xd2>
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	e000      	b.n	8016268 <udp_bind+0xd4>
 8016266:	2300      	movs	r3, #0
 8016268:	68fa      	ldr	r2, [r7, #12]
 801626a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	88fa      	ldrh	r2, [r7, #6]
 8016270:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016272:	7cfb      	ldrb	r3, [r7, #19]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d106      	bne.n	8016286 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016278:	4b09      	ldr	r3, [pc, #36]	; (80162a0 <udp_bind+0x10c>)
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016280:	4a07      	ldr	r2, [pc, #28]	; (80162a0 <udp_bind+0x10c>)
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	0801f844 	.word	0x0801f844
 8016294:	0801e914 	.word	0x0801e914
 8016298:	0801ebdc 	.word	0x0801ebdc
 801629c:	0801e968 	.word	0x0801e968
 80162a0:	2400d72c 	.word	0x2400d72c

080162a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	4613      	mov	r3, r2
 80162b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d109      	bne.n	80162cc <udp_connect+0x28>
 80162b8:	4b2c      	ldr	r3, [pc, #176]	; (801636c <udp_connect+0xc8>)
 80162ba:	f240 4235 	movw	r2, #1077	; 0x435
 80162be:	492c      	ldr	r1, [pc, #176]	; (8016370 <udp_connect+0xcc>)
 80162c0:	482c      	ldr	r0, [pc, #176]	; (8016374 <udp_connect+0xd0>)
 80162c2:	f004 fe2d 	bl	801af20 <iprintf>
 80162c6:	f06f 030f 	mvn.w	r3, #15
 80162ca:	e04b      	b.n	8016364 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d109      	bne.n	80162e6 <udp_connect+0x42>
 80162d2:	4b26      	ldr	r3, [pc, #152]	; (801636c <udp_connect+0xc8>)
 80162d4:	f240 4236 	movw	r2, #1078	; 0x436
 80162d8:	4927      	ldr	r1, [pc, #156]	; (8016378 <udp_connect+0xd4>)
 80162da:	4826      	ldr	r0, [pc, #152]	; (8016374 <udp_connect+0xd0>)
 80162dc:	f004 fe20 	bl	801af20 <iprintf>
 80162e0:	f06f 030f 	mvn.w	r3, #15
 80162e4:	e03e      	b.n	8016364 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	8a5b      	ldrh	r3, [r3, #18]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d10f      	bne.n	801630e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80162ee:	68f9      	ldr	r1, [r7, #12]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	8a5b      	ldrh	r3, [r3, #18]
 80162f4:	461a      	mov	r2, r3
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f7ff ff4c 	bl	8016194 <udp_bind>
 80162fc:	4603      	mov	r3, r0
 80162fe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d002      	beq.n	801630e <udp_connect+0x6a>
      return err;
 8016308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801630c:	e02a      	b.n	8016364 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d002      	beq.n	801631a <udp_connect+0x76>
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	e000      	b.n	801631c <udp_connect+0x78>
 801631a:	2300      	movs	r3, #0
 801631c:	68fa      	ldr	r2, [r7, #12]
 801631e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	88fa      	ldrh	r2, [r7, #6]
 8016324:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7c1b      	ldrb	r3, [r3, #16]
 801632a:	f043 0304 	orr.w	r3, r3, #4
 801632e:	b2da      	uxtb	r2, r3
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016334:	4b11      	ldr	r3, [pc, #68]	; (801637c <udp_connect+0xd8>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	617b      	str	r3, [r7, #20]
 801633a:	e008      	b.n	801634e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801633c:	68fa      	ldr	r2, [r7, #12]
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	429a      	cmp	r2, r3
 8016342:	d101      	bne.n	8016348 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016344:	2300      	movs	r3, #0
 8016346:	e00d      	b.n	8016364 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	617b      	str	r3, [r7, #20]
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d1f3      	bne.n	801633c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016354:	4b09      	ldr	r3, [pc, #36]	; (801637c <udp_connect+0xd8>)
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801635c:	4a07      	ldr	r2, [pc, #28]	; (801637c <udp_connect+0xd8>)
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3718      	adds	r7, #24
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	0801e914 	.word	0x0801e914
 8016370:	0801ebf4 	.word	0x0801ebf4
 8016374:	0801e968 	.word	0x0801e968
 8016378:	0801ec10 	.word	0x0801ec10
 801637c:	2400d72c 	.word	0x2400d72c

08016380 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d107      	bne.n	80163a2 <udp_recv+0x22>
 8016392:	4b08      	ldr	r3, [pc, #32]	; (80163b4 <udp_recv+0x34>)
 8016394:	f240 428a 	movw	r2, #1162	; 0x48a
 8016398:	4907      	ldr	r1, [pc, #28]	; (80163b8 <udp_recv+0x38>)
 801639a:	4808      	ldr	r0, [pc, #32]	; (80163bc <udp_recv+0x3c>)
 801639c:	f004 fdc0 	bl	801af20 <iprintf>
 80163a0:	e005      	b.n	80163ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	61da      	str	r2, [r3, #28]
}
 80163ae:	3710      	adds	r7, #16
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	0801e914 	.word	0x0801e914
 80163b8:	0801ec48 	.word	0x0801ec48
 80163bc:	0801e968 	.word	0x0801e968

080163c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d107      	bne.n	80163de <udp_remove+0x1e>
 80163ce:	4b19      	ldr	r3, [pc, #100]	; (8016434 <udp_remove+0x74>)
 80163d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80163d4:	4918      	ldr	r1, [pc, #96]	; (8016438 <udp_remove+0x78>)
 80163d6:	4819      	ldr	r0, [pc, #100]	; (801643c <udp_remove+0x7c>)
 80163d8:	f004 fda2 	bl	801af20 <iprintf>
 80163dc:	e026      	b.n	801642c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80163de:	4b18      	ldr	r3, [pc, #96]	; (8016440 <udp_remove+0x80>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	687a      	ldr	r2, [r7, #4]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d105      	bne.n	80163f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80163e8:	4b15      	ldr	r3, [pc, #84]	; (8016440 <udp_remove+0x80>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	4a14      	ldr	r2, [pc, #80]	; (8016440 <udp_remove+0x80>)
 80163f0:	6013      	str	r3, [r2, #0]
 80163f2:	e017      	b.n	8016424 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80163f4:	4b12      	ldr	r3, [pc, #72]	; (8016440 <udp_remove+0x80>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	e010      	b.n	801641e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d009      	beq.n	8016418 <udp_remove+0x58>
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d104      	bne.n	8016418 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68da      	ldr	r2, [r3, #12]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	60da      	str	r2, [r3, #12]
        break;
 8016416:	e005      	b.n	8016424 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1eb      	bne.n	80163fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016424:	6879      	ldr	r1, [r7, #4]
 8016426:	2000      	movs	r0, #0
 8016428:	f7f8 f87c 	bl	800e524 <memp_free>
}
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	0801e914 	.word	0x0801e914
 8016438:	0801ec60 	.word	0x0801ec60
 801643c:	0801e968 	.word	0x0801e968
 8016440:	2400d72c 	.word	0x2400d72c

08016444 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801644a:	2000      	movs	r0, #0
 801644c:	f7f7 fff4 	bl	800e438 <memp_malloc>
 8016450:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d007      	beq.n	8016468 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016458:	2220      	movs	r2, #32
 801645a:	2100      	movs	r1, #0
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f004 fcfc 	bl	801ae5a <memset>
    pcb->ttl = UDP_TTL;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	22ff      	movs	r2, #255	; 0xff
 8016466:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016468:	687b      	ldr	r3, [r7, #4]
}
 801646a:	4618      	mov	r0, r3
 801646c:	3708      	adds	r7, #8
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	4603      	mov	r3, r0
 801647a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801647c:	f7ff ffe2 	bl	8016444 <udp_new>
 8016480:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016482:	68fb      	ldr	r3, [r7, #12]
}
 8016484:	4618      	mov	r0, r3
 8016486:	3710      	adds	r7, #16
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}

0801648c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801648c:	b480      	push	{r7}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d01e      	beq.n	80164da <udp_netif_ip_addr_changed+0x4e>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d01a      	beq.n	80164da <udp_netif_ip_addr_changed+0x4e>
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d017      	beq.n	80164da <udp_netif_ip_addr_changed+0x4e>
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d013      	beq.n	80164da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164b2:	4b0d      	ldr	r3, [pc, #52]	; (80164e8 <udp_netif_ip_addr_changed+0x5c>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	60fb      	str	r3, [r7, #12]
 80164b8:	e00c      	b.n	80164d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681a      	ldr	r2, [r3, #0]
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d103      	bne.n	80164ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	681a      	ldr	r2, [r3, #0]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	60fb      	str	r3, [r7, #12]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d1ef      	bne.n	80164ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80164da:	bf00      	nop
 80164dc:	3714      	adds	r7, #20
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	2400d72c 	.word	0x2400d72c

080164ec <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80164f0:	4b20      	ldr	r3, [pc, #128]	; (8016574 <dhcp_inc_pcb_refcount+0x88>)
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d133      	bne.n	8016560 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80164f8:	4b1f      	ldr	r3, [pc, #124]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d005      	beq.n	801650c <dhcp_inc_pcb_refcount+0x20>
 8016500:	4b1e      	ldr	r3, [pc, #120]	; (801657c <dhcp_inc_pcb_refcount+0x90>)
 8016502:	22e5      	movs	r2, #229	; 0xe5
 8016504:	491e      	ldr	r1, [pc, #120]	; (8016580 <dhcp_inc_pcb_refcount+0x94>)
 8016506:	481f      	ldr	r0, [pc, #124]	; (8016584 <dhcp_inc_pcb_refcount+0x98>)
 8016508:	f004 fd0a 	bl	801af20 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801650c:	f7ff ff9a 	bl	8016444 <udp_new>
 8016510:	4603      	mov	r3, r0
 8016512:	4a19      	ldr	r2, [pc, #100]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016514:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8016516:	4b18      	ldr	r3, [pc, #96]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d102      	bne.n	8016524 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801651e:	f04f 33ff 	mov.w	r3, #4294967295
 8016522:	e024      	b.n	801656e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8016524:	4b14      	ldr	r3, [pc, #80]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	7a5a      	ldrb	r2, [r3, #9]
 801652a:	4b13      	ldr	r3, [pc, #76]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f042 0220 	orr.w	r2, r2, #32
 8016532:	b2d2      	uxtb	r2, r2
 8016534:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8016536:	4b10      	ldr	r3, [pc, #64]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2244      	movs	r2, #68	; 0x44
 801653c:	4912      	ldr	r1, [pc, #72]	; (8016588 <dhcp_inc_pcb_refcount+0x9c>)
 801653e:	4618      	mov	r0, r3
 8016540:	f7ff fe28 	bl	8016194 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8016544:	4b0c      	ldr	r3, [pc, #48]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2243      	movs	r2, #67	; 0x43
 801654a:	490f      	ldr	r1, [pc, #60]	; (8016588 <dhcp_inc_pcb_refcount+0x9c>)
 801654c:	4618      	mov	r0, r3
 801654e:	f7ff fea9 	bl	80162a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8016552:	4b09      	ldr	r3, [pc, #36]	; (8016578 <dhcp_inc_pcb_refcount+0x8c>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2200      	movs	r2, #0
 8016558:	490c      	ldr	r1, [pc, #48]	; (801658c <dhcp_inc_pcb_refcount+0xa0>)
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff ff10 	bl	8016380 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016560:	4b04      	ldr	r3, [pc, #16]	; (8016574 <dhcp_inc_pcb_refcount+0x88>)
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	3301      	adds	r3, #1
 8016566:	b2da      	uxtb	r2, r3
 8016568:	4b02      	ldr	r3, [pc, #8]	; (8016574 <dhcp_inc_pcb_refcount+0x88>)
 801656a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801656c:	2300      	movs	r3, #0
}
 801656e:	4618      	mov	r0, r3
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	24009df4 	.word	0x24009df4
 8016578:	24009df0 	.word	0x24009df0
 801657c:	0801ec78 	.word	0x0801ec78
 8016580:	0801ecb0 	.word	0x0801ecb0
 8016584:	0801ecd8 	.word	0x0801ecd8
 8016588:	0801f844 	.word	0x0801f844
 801658c:	08017e25 	.word	0x08017e25

08016590 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8016594:	4b0e      	ldr	r3, [pc, #56]	; (80165d0 <dhcp_dec_pcb_refcount+0x40>)
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d105      	bne.n	80165a8 <dhcp_dec_pcb_refcount+0x18>
 801659c:	4b0d      	ldr	r3, [pc, #52]	; (80165d4 <dhcp_dec_pcb_refcount+0x44>)
 801659e:	22ff      	movs	r2, #255	; 0xff
 80165a0:	490d      	ldr	r1, [pc, #52]	; (80165d8 <dhcp_dec_pcb_refcount+0x48>)
 80165a2:	480e      	ldr	r0, [pc, #56]	; (80165dc <dhcp_dec_pcb_refcount+0x4c>)
 80165a4:	f004 fcbc 	bl	801af20 <iprintf>
  dhcp_pcb_refcount--;
 80165a8:	4b09      	ldr	r3, [pc, #36]	; (80165d0 <dhcp_dec_pcb_refcount+0x40>)
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	b2da      	uxtb	r2, r3
 80165b0:	4b07      	ldr	r3, [pc, #28]	; (80165d0 <dhcp_dec_pcb_refcount+0x40>)
 80165b2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80165b4:	4b06      	ldr	r3, [pc, #24]	; (80165d0 <dhcp_dec_pcb_refcount+0x40>)
 80165b6:	781b      	ldrb	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d107      	bne.n	80165cc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80165bc:	4b08      	ldr	r3, [pc, #32]	; (80165e0 <dhcp_dec_pcb_refcount+0x50>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7ff fefd 	bl	80163c0 <udp_remove>
    dhcp_pcb = NULL;
 80165c6:	4b06      	ldr	r3, [pc, #24]	; (80165e0 <dhcp_dec_pcb_refcount+0x50>)
 80165c8:	2200      	movs	r2, #0
 80165ca:	601a      	str	r2, [r3, #0]
  }
}
 80165cc:	bf00      	nop
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	24009df4 	.word	0x24009df4
 80165d4:	0801ec78 	.word	0x0801ec78
 80165d8:	0801ed00 	.word	0x0801ed00
 80165dc:	0801ecd8 	.word	0x0801ecd8
 80165e0:	24009df0 	.word	0x24009df0

080165e4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165f0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80165f2:	210c      	movs	r1, #12
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f001 f857 	bl	80176a8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80165fa:	4b06      	ldr	r3, [pc, #24]	; (8016614 <dhcp_handle_nak+0x30>)
 80165fc:	4a05      	ldr	r2, [pc, #20]	; (8016614 <dhcp_handle_nak+0x30>)
 80165fe:	4905      	ldr	r1, [pc, #20]	; (8016614 <dhcp_handle_nak+0x30>)
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7f8 f931 	bl	800e868 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f000 fc4a 	bl	8016ea0 <dhcp_discover>
}
 801660c:	bf00      	nop
 801660e:	3710      	adds	r7, #16
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	0801f844 	.word	0x0801f844

08016618 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016624:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016626:	2108      	movs	r1, #8
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f001 f83d 	bl	80176a8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	331c      	adds	r3, #28
 8016632:	2200      	movs	r2, #0
 8016634:	4619      	mov	r1, r3
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f002 fb3e 	bl	8018cb8 <etharp_query>
 801663c:	4603      	mov	r3, r0
 801663e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	799b      	ldrb	r3, [r3, #6]
 8016644:	2bff      	cmp	r3, #255	; 0xff
 8016646:	d005      	beq.n	8016654 <dhcp_check+0x3c>
    dhcp->tries++;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	799b      	ldrb	r3, [r3, #6]
 801664c:	3301      	adds	r3, #1
 801664e:	b2da      	uxtb	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8016654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016658:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801665a:	893b      	ldrh	r3, [r7, #8]
 801665c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016660:	4a06      	ldr	r2, [pc, #24]	; (801667c <dhcp_check+0x64>)
 8016662:	fb82 1203 	smull	r1, r2, r2, r3
 8016666:	1152      	asrs	r2, r2, #5
 8016668:	17db      	asrs	r3, r3, #31
 801666a:	1ad3      	subs	r3, r2, r3
 801666c:	b29a      	uxth	r2, r3
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016672:	bf00      	nop
 8016674:	3710      	adds	r7, #16
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	10624dd3 	.word	0x10624dd3

08016680 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801668e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016690:	4b0c      	ldr	r3, [pc, #48]	; (80166c4 <dhcp_handle_offer+0x44>)
 8016692:	789b      	ldrb	r3, [r3, #2]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d011      	beq.n	80166bc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2200      	movs	r2, #0
 801669c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801669e:	4b0a      	ldr	r3, [pc, #40]	; (80166c8 <dhcp_handle_offer+0x48>)
 80166a0:	689b      	ldr	r3, [r3, #8]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7f7 f94d 	bl	800d942 <lwip_htonl>
 80166a8:	4602      	mov	r2, r0
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	691a      	ldr	r2, [r3, #16]
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f000 f808 	bl	80166cc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80166bc:	bf00      	nop
 80166be:	3710      	adds	r7, #16
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	2400d730 	.word	0x2400d730
 80166c8:	2400d738 	.word	0x2400d738

080166cc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80166cc:	b5b0      	push	{r4, r5, r7, lr}
 80166ce:	b08a      	sub	sp, #40	; 0x28
 80166d0:	af02      	add	r7, sp, #8
 80166d2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d109      	bne.n	80166ee <dhcp_select+0x22>
 80166da:	4b71      	ldr	r3, [pc, #452]	; (80168a0 <dhcp_select+0x1d4>)
 80166dc:	f240 1277 	movw	r2, #375	; 0x177
 80166e0:	4970      	ldr	r1, [pc, #448]	; (80168a4 <dhcp_select+0x1d8>)
 80166e2:	4871      	ldr	r0, [pc, #452]	; (80168a8 <dhcp_select+0x1dc>)
 80166e4:	f004 fc1c 	bl	801af20 <iprintf>
 80166e8:	f06f 030f 	mvn.w	r3, #15
 80166ec:	e0d3      	b.n	8016896 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166f2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80166f4:	69bb      	ldr	r3, [r7, #24]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d109      	bne.n	801670e <dhcp_select+0x42>
 80166fa:	4b69      	ldr	r3, [pc, #420]	; (80168a0 <dhcp_select+0x1d4>)
 80166fc:	f240 1279 	movw	r2, #377	; 0x179
 8016700:	496a      	ldr	r1, [pc, #424]	; (80168ac <dhcp_select+0x1e0>)
 8016702:	4869      	ldr	r0, [pc, #420]	; (80168a8 <dhcp_select+0x1dc>)
 8016704:	f004 fc0c 	bl	801af20 <iprintf>
 8016708:	f06f 0305 	mvn.w	r3, #5
 801670c:	e0c3      	b.n	8016896 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801670e:	2101      	movs	r1, #1
 8016710:	69b8      	ldr	r0, [r7, #24]
 8016712:	f000 ffc9 	bl	80176a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016716:	f107 030c 	add.w	r3, r7, #12
 801671a:	2203      	movs	r2, #3
 801671c:	69b9      	ldr	r1, [r7, #24]
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f001 fc4e 	bl	8017fc0 <dhcp_create_msg>
 8016724:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016726:	697b      	ldr	r3, [r7, #20]
 8016728:	2b00      	cmp	r3, #0
 801672a:	f000 8085 	beq.w	8016838 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016734:	89b8      	ldrh	r0, [r7, #12]
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801673c:	2302      	movs	r3, #2
 801673e:	2239      	movs	r2, #57	; 0x39
 8016740:	f000 ffcc 	bl	80176dc <dhcp_option>
 8016744:	4603      	mov	r3, r0
 8016746:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016748:	89b8      	ldrh	r0, [r7, #12]
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016754:	461a      	mov	r2, r3
 8016756:	f001 f81b 	bl	8017790 <dhcp_option_short>
 801675a:	4603      	mov	r3, r0
 801675c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801675e:	89b8      	ldrh	r0, [r7, #12]
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016766:	2304      	movs	r3, #4
 8016768:	2232      	movs	r2, #50	; 0x32
 801676a:	f000 ffb7 	bl	80176dc <dhcp_option>
 801676e:	4603      	mov	r3, r0
 8016770:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016772:	89bc      	ldrh	r4, [r7, #12]
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	69db      	ldr	r3, [r3, #28]
 801677e:	4618      	mov	r0, r3
 8016780:	f7f7 f8df 	bl	800d942 <lwip_htonl>
 8016784:	4603      	mov	r3, r0
 8016786:	461a      	mov	r2, r3
 8016788:	4629      	mov	r1, r5
 801678a:	4620      	mov	r0, r4
 801678c:	f001 f832 	bl	80177f4 <dhcp_option_long>
 8016790:	4603      	mov	r3, r0
 8016792:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016794:	89b8      	ldrh	r0, [r7, #12]
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801679c:	2304      	movs	r3, #4
 801679e:	2236      	movs	r2, #54	; 0x36
 80167a0:	f000 ff9c 	bl	80176dc <dhcp_option>
 80167a4:	4603      	mov	r3, r0
 80167a6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80167a8:	89bc      	ldrh	r4, [r7, #12]
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80167b0:	69bb      	ldr	r3, [r7, #24]
 80167b2:	699b      	ldr	r3, [r3, #24]
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7f7 f8c4 	bl	800d942 <lwip_htonl>
 80167ba:	4603      	mov	r3, r0
 80167bc:	461a      	mov	r2, r3
 80167be:	4629      	mov	r1, r5
 80167c0:	4620      	mov	r0, r4
 80167c2:	f001 f817 	bl	80177f4 <dhcp_option_long>
 80167c6:	4603      	mov	r3, r0
 80167c8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80167ca:	89b8      	ldrh	r0, [r7, #12]
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167d2:	2303      	movs	r3, #3
 80167d4:	2237      	movs	r2, #55	; 0x37
 80167d6:	f000 ff81 	bl	80176dc <dhcp_option>
 80167da:	4603      	mov	r3, r0
 80167dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167de:	2300      	movs	r3, #0
 80167e0:	77bb      	strb	r3, [r7, #30]
 80167e2:	e00e      	b.n	8016802 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80167e4:	89b8      	ldrh	r0, [r7, #12]
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167ec:	7fbb      	ldrb	r3, [r7, #30]
 80167ee:	4a30      	ldr	r2, [pc, #192]	; (80168b0 <dhcp_select+0x1e4>)
 80167f0:	5cd3      	ldrb	r3, [r2, r3]
 80167f2:	461a      	mov	r2, r3
 80167f4:	f000 ffa6 	bl	8017744 <dhcp_option_byte>
 80167f8:	4603      	mov	r3, r0
 80167fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167fc:	7fbb      	ldrb	r3, [r7, #30]
 80167fe:	3301      	adds	r3, #1
 8016800:	77bb      	strb	r3, [r7, #30]
 8016802:	7fbb      	ldrb	r3, [r7, #30]
 8016804:	2b02      	cmp	r3, #2
 8016806:	d9ed      	bls.n	80167e4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016808:	89b8      	ldrh	r0, [r7, #12]
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	33f0      	adds	r3, #240	; 0xf0
 801680e:	697a      	ldr	r2, [r7, #20]
 8016810:	4619      	mov	r1, r3
 8016812:	f001 fcab 	bl	801816c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016816:	4b27      	ldr	r3, [pc, #156]	; (80168b4 <dhcp_select+0x1e8>)
 8016818:	6818      	ldr	r0, [r3, #0]
 801681a:	4b27      	ldr	r3, [pc, #156]	; (80168b8 <dhcp_select+0x1ec>)
 801681c:	9301      	str	r3, [sp, #4]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	9300      	str	r3, [sp, #0]
 8016822:	2343      	movs	r3, #67	; 0x43
 8016824:	4a25      	ldr	r2, [pc, #148]	; (80168bc <dhcp_select+0x1f0>)
 8016826:	6979      	ldr	r1, [r7, #20]
 8016828:	f7ff fbce 	bl	8015fc8 <udp_sendto_if_src>
 801682c:	4603      	mov	r3, r0
 801682e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016830:	6978      	ldr	r0, [r7, #20]
 8016832:	f7f8 fd27 	bl	800f284 <pbuf_free>
 8016836:	e001      	b.n	801683c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016838:	23ff      	movs	r3, #255	; 0xff
 801683a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801683c:	69bb      	ldr	r3, [r7, #24]
 801683e:	799b      	ldrb	r3, [r3, #6]
 8016840:	2bff      	cmp	r3, #255	; 0xff
 8016842:	d005      	beq.n	8016850 <dhcp_select+0x184>
    dhcp->tries++;
 8016844:	69bb      	ldr	r3, [r7, #24]
 8016846:	799b      	ldrb	r3, [r3, #6]
 8016848:	3301      	adds	r3, #1
 801684a:	b2da      	uxtb	r2, r3
 801684c:	69bb      	ldr	r3, [r7, #24]
 801684e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016850:	69bb      	ldr	r3, [r7, #24]
 8016852:	799b      	ldrb	r3, [r3, #6]
 8016854:	2b05      	cmp	r3, #5
 8016856:	d80d      	bhi.n	8016874 <dhcp_select+0x1a8>
 8016858:	69bb      	ldr	r3, [r7, #24]
 801685a:	799b      	ldrb	r3, [r3, #6]
 801685c:	461a      	mov	r2, r3
 801685e:	2301      	movs	r3, #1
 8016860:	4093      	lsls	r3, r2
 8016862:	b29b      	uxth	r3, r3
 8016864:	461a      	mov	r2, r3
 8016866:	0152      	lsls	r2, r2, #5
 8016868:	1ad2      	subs	r2, r2, r3
 801686a:	0092      	lsls	r2, r2, #2
 801686c:	4413      	add	r3, r2
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	b29b      	uxth	r3, r3
 8016872:	e001      	b.n	8016878 <dhcp_select+0x1ac>
 8016874:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016878:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801687a:	89fb      	ldrh	r3, [r7, #14]
 801687c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016880:	4a0f      	ldr	r2, [pc, #60]	; (80168c0 <dhcp_select+0x1f4>)
 8016882:	fb82 1203 	smull	r1, r2, r2, r3
 8016886:	1152      	asrs	r2, r2, #5
 8016888:	17db      	asrs	r3, r3, #31
 801688a:	1ad3      	subs	r3, r2, r3
 801688c:	b29a      	uxth	r2, r3
 801688e:	69bb      	ldr	r3, [r7, #24]
 8016890:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016892:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016896:	4618      	mov	r0, r3
 8016898:	3720      	adds	r7, #32
 801689a:	46bd      	mov	sp, r7
 801689c:	bdb0      	pop	{r4, r5, r7, pc}
 801689e:	bf00      	nop
 80168a0:	0801ec78 	.word	0x0801ec78
 80168a4:	0801ed24 	.word	0x0801ed24
 80168a8:	0801ecd8 	.word	0x0801ecd8
 80168ac:	0801ed40 	.word	0x0801ed40
 80168b0:	24000034 	.word	0x24000034
 80168b4:	24009df0 	.word	0x24009df0
 80168b8:	0801f844 	.word	0x0801f844
 80168bc:	0801f848 	.word	0x0801f848
 80168c0:	10624dd3 	.word	0x10624dd3

080168c4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80168ca:	4b27      	ldr	r3, [pc, #156]	; (8016968 <dhcp_coarse_tmr+0xa4>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	607b      	str	r3, [r7, #4]
 80168d0:	e042      	b.n	8016958 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d039      	beq.n	8016952 <dhcp_coarse_tmr+0x8e>
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	795b      	ldrb	r3, [r3, #5]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d035      	beq.n	8016952 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	8a9b      	ldrh	r3, [r3, #20]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d012      	beq.n	8016914 <dhcp_coarse_tmr+0x50>
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	8a5b      	ldrh	r3, [r3, #18]
 80168f2:	3301      	adds	r3, #1
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	825a      	strh	r2, [r3, #18]
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	8a5a      	ldrh	r2, [r3, #18]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	8a9b      	ldrh	r3, [r3, #20]
 8016902:	429a      	cmp	r2, r3
 8016904:	d106      	bne.n	8016914 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 fe34 	bl	8017574 <dhcp_release_and_stop>
        dhcp_start(netif);
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 f96b 	bl	8016be8 <dhcp_start>
 8016912:	e01e      	b.n	8016952 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	8a1b      	ldrh	r3, [r3, #16]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d00b      	beq.n	8016934 <dhcp_coarse_tmr+0x70>
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	8a1b      	ldrh	r3, [r3, #16]
 8016920:	1e5a      	subs	r2, r3, #1
 8016922:	b291      	uxth	r1, r2
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	8211      	strh	r1, [r2, #16]
 8016928:	2b01      	cmp	r3, #1
 801692a:	d103      	bne.n	8016934 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 f8c7 	bl	8016ac0 <dhcp_t2_timeout>
 8016932:	e00e      	b.n	8016952 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	89db      	ldrh	r3, [r3, #14]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d00a      	beq.n	8016952 <dhcp_coarse_tmr+0x8e>
 801693c:	683b      	ldr	r3, [r7, #0]
 801693e:	89db      	ldrh	r3, [r3, #14]
 8016940:	1e5a      	subs	r2, r3, #1
 8016942:	b291      	uxth	r1, r2
 8016944:	683a      	ldr	r2, [r7, #0]
 8016946:	81d1      	strh	r1, [r2, #14]
 8016948:	2b01      	cmp	r3, #1
 801694a:	d102      	bne.n	8016952 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f000 f888 	bl	8016a62 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	607b      	str	r3, [r7, #4]
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d1b9      	bne.n	80168d2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801695e:	bf00      	nop
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	2400d704 	.word	0x2400d704

0801696c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016972:	4b16      	ldr	r3, [pc, #88]	; (80169cc <dhcp_fine_tmr+0x60>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	607b      	str	r3, [r7, #4]
 8016978:	e020      	b.n	80169bc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801697e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d017      	beq.n	80169b6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	891b      	ldrh	r3, [r3, #8]
 801698a:	2b01      	cmp	r3, #1
 801698c:	d906      	bls.n	801699c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	891b      	ldrh	r3, [r3, #8]
 8016992:	3b01      	subs	r3, #1
 8016994:	b29a      	uxth	r2, r3
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	811a      	strh	r2, [r3, #8]
 801699a:	e00c      	b.n	80169b6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	891b      	ldrh	r3, [r3, #8]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d108      	bne.n	80169b6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	891b      	ldrh	r3, [r3, #8]
 80169a8:	3b01      	subs	r3, #1
 80169aa:	b29a      	uxth	r2, r3
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f000 f80d 	bl	80169d0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	607b      	str	r3, [r7, #4]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1db      	bne.n	801697a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80169c2:	bf00      	nop
 80169c4:	bf00      	nop
 80169c6:	3708      	adds	r7, #8
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	2400d704 	.word	0x2400d704

080169d0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169dc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	795b      	ldrb	r3, [r3, #5]
 80169e2:	2b0c      	cmp	r3, #12
 80169e4:	d003      	beq.n	80169ee <dhcp_timeout+0x1e>
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	795b      	ldrb	r3, [r3, #5]
 80169ea:	2b06      	cmp	r3, #6
 80169ec:	d103      	bne.n	80169f6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fa56 	bl	8016ea0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80169f4:	e031      	b.n	8016a5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	795b      	ldrb	r3, [r3, #5]
 80169fa:	2b01      	cmp	r3, #1
 80169fc:	d10e      	bne.n	8016a1c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	799b      	ldrb	r3, [r3, #6]
 8016a02:	2b05      	cmp	r3, #5
 8016a04:	d803      	bhi.n	8016a0e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f7ff fe60 	bl	80166cc <dhcp_select>
}
 8016a0c:	e025      	b.n	8016a5a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 fdb0 	bl	8017574 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f000 f8e7 	bl	8016be8 <dhcp_start>
}
 8016a1a:	e01e      	b.n	8016a5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	795b      	ldrb	r3, [r3, #5]
 8016a20:	2b08      	cmp	r3, #8
 8016a22:	d10b      	bne.n	8016a3c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	799b      	ldrb	r3, [r3, #6]
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	d803      	bhi.n	8016a34 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f7ff fdf3 	bl	8016618 <dhcp_check>
}
 8016a32:	e012      	b.n	8016a5a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 fad5 	bl	8016fe4 <dhcp_bind>
}
 8016a3a:	e00e      	b.n	8016a5a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	795b      	ldrb	r3, [r3, #5]
 8016a40:	2b03      	cmp	r3, #3
 8016a42:	d10a      	bne.n	8016a5a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	799b      	ldrb	r3, [r3, #6]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d803      	bhi.n	8016a54 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f000 fcdb 	bl	8017408 <dhcp_reboot>
}
 8016a52:	e002      	b.n	8016a5a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f000 fa23 	bl	8016ea0 <dhcp_discover>
}
 8016a5a:	bf00      	nop
 8016a5c:	3710      	adds	r7, #16
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}

08016a62 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016a62:	b580      	push	{r7, lr}
 8016a64:	b084      	sub	sp, #16
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	795b      	ldrb	r3, [r3, #5]
 8016a74:	2b01      	cmp	r3, #1
 8016a76:	d007      	beq.n	8016a88 <dhcp_t1_timeout+0x26>
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	795b      	ldrb	r3, [r3, #5]
 8016a7c:	2b0a      	cmp	r3, #10
 8016a7e:	d003      	beq.n	8016a88 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016a84:	2b05      	cmp	r3, #5
 8016a86:	d117      	bne.n	8016ab8 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 fb85 	bl	8017198 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	899b      	ldrh	r3, [r3, #12]
 8016a92:	461a      	mov	r2, r3
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	8a5b      	ldrh	r3, [r3, #18]
 8016a98:	1ad3      	subs	r3, r2, r3
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	dd0c      	ble.n	8016ab8 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	899b      	ldrh	r3, [r3, #12]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	8a5b      	ldrh	r3, [r3, #18]
 8016aa8:	1ad3      	subs	r3, r2, r3
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	da00      	bge.n	8016ab0 <dhcp_t1_timeout+0x4e>
 8016aae:	3301      	adds	r3, #1
 8016ab0:	105b      	asrs	r3, r3, #1
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016ab8:	bf00      	nop
 8016aba:	3710      	adds	r7, #16
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016acc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	795b      	ldrb	r3, [r3, #5]
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d00b      	beq.n	8016aee <dhcp_t2_timeout+0x2e>
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	795b      	ldrb	r3, [r3, #5]
 8016ada:	2b0a      	cmp	r3, #10
 8016adc:	d007      	beq.n	8016aee <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016ae2:	2b05      	cmp	r3, #5
 8016ae4:	d003      	beq.n	8016aee <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	795b      	ldrb	r3, [r3, #5]
 8016aea:	2b04      	cmp	r3, #4
 8016aec:	d117      	bne.n	8016b1e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 fbee 	bl	80172d0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	8a9b      	ldrh	r3, [r3, #20]
 8016af8:	461a      	mov	r2, r3
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	8a5b      	ldrh	r3, [r3, #18]
 8016afe:	1ad3      	subs	r3, r2, r3
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	dd0c      	ble.n	8016b1e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	8a9b      	ldrh	r3, [r3, #20]
 8016b08:	461a      	mov	r2, r3
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	8a5b      	ldrh	r3, [r3, #18]
 8016b0e:	1ad3      	subs	r3, r2, r3
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	da00      	bge.n	8016b16 <dhcp_t2_timeout+0x56>
 8016b14:	3301      	adds	r3, #1
 8016b16:	105b      	asrs	r3, r3, #1
 8016b18:	b29a      	uxth	r2, r3
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016b1e:	bf00      	nop
 8016b20:	3710      	adds	r7, #16
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
	...

08016b28 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b36:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2200      	movs	r2, #0
 8016b42:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016b44:	4b26      	ldr	r3, [pc, #152]	; (8016be0 <dhcp_handle_ack+0xb8>)
 8016b46:	78db      	ldrb	r3, [r3, #3]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d003      	beq.n	8016b54 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016b4c:	4b25      	ldr	r3, [pc, #148]	; (8016be4 <dhcp_handle_ack+0xbc>)
 8016b4e:	68da      	ldr	r2, [r3, #12]
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016b54:	4b22      	ldr	r3, [pc, #136]	; (8016be0 <dhcp_handle_ack+0xb8>)
 8016b56:	791b      	ldrb	r3, [r3, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d004      	beq.n	8016b66 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016b5c:	4b21      	ldr	r3, [pc, #132]	; (8016be4 <dhcp_handle_ack+0xbc>)
 8016b5e:	691a      	ldr	r2, [r3, #16]
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8016b64:	e004      	b.n	8016b70 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b6a:	085a      	lsrs	r2, r3, #1
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016b70:	4b1b      	ldr	r3, [pc, #108]	; (8016be0 <dhcp_handle_ack+0xb8>)
 8016b72:	795b      	ldrb	r3, [r3, #5]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d004      	beq.n	8016b82 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016b78:	4b1a      	ldr	r3, [pc, #104]	; (8016be4 <dhcp_handle_ack+0xbc>)
 8016b7a:	695a      	ldr	r2, [r3, #20]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8016b80:	e007      	b.n	8016b92 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016b86:	4613      	mov	r3, r2
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	1a9b      	subs	r3, r3, r2
 8016b8c:	08da      	lsrs	r2, r3, #3
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	691a      	ldr	r2, [r3, #16]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016b9a:	4b11      	ldr	r3, [pc, #68]	; (8016be0 <dhcp_handle_ack+0xb8>)
 8016b9c:	799b      	ldrb	r3, [r3, #6]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d00b      	beq.n	8016bba <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016ba2:	4b10      	ldr	r3, [pc, #64]	; (8016be4 <dhcp_handle_ack+0xbc>)
 8016ba4:	699b      	ldr	r3, [r3, #24]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7f6 fecb 	bl	800d942 <lwip_htonl>
 8016bac:	4602      	mov	r2, r0
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	71da      	strb	r2, [r3, #7]
 8016bb8:	e002      	b.n	8016bc0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016bc0:	4b07      	ldr	r3, [pc, #28]	; (8016be0 <dhcp_handle_ack+0xb8>)
 8016bc2:	79db      	ldrb	r3, [r3, #7]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d007      	beq.n	8016bd8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016bc8:	4b06      	ldr	r3, [pc, #24]	; (8016be4 <dhcp_handle_ack+0xbc>)
 8016bca:	69db      	ldr	r3, [r3, #28]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7f6 feb8 	bl	800d942 <lwip_htonl>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016bd8:	bf00      	nop
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	2400d730 	.word	0x2400d730
 8016be4:	2400d738 	.word	0x2400d738

08016be8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d109      	bne.n	8016c0a <dhcp_start+0x22>
 8016bf6:	4b37      	ldr	r3, [pc, #220]	; (8016cd4 <dhcp_start+0xec>)
 8016bf8:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016bfc:	4936      	ldr	r1, [pc, #216]	; (8016cd8 <dhcp_start+0xf0>)
 8016bfe:	4837      	ldr	r0, [pc, #220]	; (8016cdc <dhcp_start+0xf4>)
 8016c00:	f004 f98e 	bl	801af20 <iprintf>
 8016c04:	f06f 030f 	mvn.w	r3, #15
 8016c08:	e060      	b.n	8016ccc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c10:	f003 0301 	and.w	r3, r3, #1
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d109      	bne.n	8016c2c <dhcp_start+0x44>
 8016c18:	4b2e      	ldr	r3, [pc, #184]	; (8016cd4 <dhcp_start+0xec>)
 8016c1a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016c1e:	4930      	ldr	r1, [pc, #192]	; (8016ce0 <dhcp_start+0xf8>)
 8016c20:	482e      	ldr	r0, [pc, #184]	; (8016cdc <dhcp_start+0xf4>)
 8016c22:	f004 f97d 	bl	801af20 <iprintf>
 8016c26:	f06f 030f 	mvn.w	r3, #15
 8016c2a:	e04f      	b.n	8016ccc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c30:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c36:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016c3a:	d202      	bcs.n	8016c42 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c40:	e044      	b.n	8016ccc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d10d      	bne.n	8016c64 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016c48:	2034      	movs	r0, #52	; 0x34
 8016c4a:	f7f7 fa51 	bl	800e0f0 <mem_malloc>
 8016c4e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d102      	bne.n	8016c5c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016c56:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5a:	e037      	b.n	8016ccc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	625a      	str	r2, [r3, #36]	; 0x24
 8016c62:	e005      	b.n	8016c70 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	791b      	ldrb	r3, [r3, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d001      	beq.n	8016c70 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016c6c:	f7ff fc90 	bl	8016590 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016c70:	2234      	movs	r2, #52	; 0x34
 8016c72:	2100      	movs	r1, #0
 8016c74:	68f8      	ldr	r0, [r7, #12]
 8016c76:	f004 f8f0 	bl	801ae5a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016c7a:	f7ff fc37 	bl	80164ec <dhcp_inc_pcb_refcount>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <dhcp_start+0xa2>
    return ERR_MEM;
 8016c84:	f04f 33ff 	mov.w	r3, #4294967295
 8016c88:	e020      	b.n	8016ccc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c96:	f003 0304 	and.w	r3, r3, #4
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d105      	bne.n	8016caa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016c9e:	2102      	movs	r1, #2
 8016ca0:	68f8      	ldr	r0, [r7, #12]
 8016ca2:	f000 fd01 	bl	80176a8 <dhcp_set_state>
    return ERR_OK;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e010      	b.n	8016ccc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f8f8 	bl	8016ea0 <dhcp_discover>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016cb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d005      	beq.n	8016cc8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f000 fc59 	bl	8017574 <dhcp_release_and_stop>
    return ERR_MEM;
 8016cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8016cc6:	e001      	b.n	8016ccc <dhcp_start+0xe4>
  }
  return result;
 8016cc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	3710      	adds	r7, #16
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	0801ec78 	.word	0x0801ec78
 8016cd8:	0801ed5c 	.word	0x0801ed5c
 8016cdc:	0801ecd8 	.word	0x0801ecd8
 8016ce0:	0801eda0 	.word	0x0801eda0

08016ce4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b084      	sub	sp, #16
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d025      	beq.n	8016d44 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	795b      	ldrb	r3, [r3, #5]
 8016cfc:	2b0a      	cmp	r3, #10
 8016cfe:	d008      	beq.n	8016d12 <dhcp_network_changed+0x2e>
 8016d00:	2b0a      	cmp	r3, #10
 8016d02:	dc0d      	bgt.n	8016d20 <dhcp_network_changed+0x3c>
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d01f      	beq.n	8016d48 <dhcp_network_changed+0x64>
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	db09      	blt.n	8016d20 <dhcp_network_changed+0x3c>
 8016d0c:	3b03      	subs	r3, #3
 8016d0e:	2b02      	cmp	r3, #2
 8016d10:	d806      	bhi.n	8016d20 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	2200      	movs	r2, #0
 8016d16:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f000 fb75 	bl	8017408 <dhcp_reboot>
      break;
 8016d1e:	e014      	b.n	8016d4a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	795b      	ldrb	r3, [r3, #5]
 8016d24:	2b0c      	cmp	r3, #12
 8016d26:	d906      	bls.n	8016d36 <dhcp_network_changed+0x52>
 8016d28:	4b09      	ldr	r3, [pc, #36]	; (8016d50 <dhcp_network_changed+0x6c>)
 8016d2a:	f240 326d 	movw	r2, #877	; 0x36d
 8016d2e:	4909      	ldr	r1, [pc, #36]	; (8016d54 <dhcp_network_changed+0x70>)
 8016d30:	4809      	ldr	r0, [pc, #36]	; (8016d58 <dhcp_network_changed+0x74>)
 8016d32:	f004 f8f5 	bl	801af20 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	2200      	movs	r2, #0
 8016d3a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f000 f8af 	bl	8016ea0 <dhcp_discover>
      break;
 8016d42:	e002      	b.n	8016d4a <dhcp_network_changed+0x66>
    return;
 8016d44:	bf00      	nop
 8016d46:	e000      	b.n	8016d4a <dhcp_network_changed+0x66>
      break;
 8016d48:	bf00      	nop
  }
}
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	0801ec78 	.word	0x0801ec78
 8016d54:	0801edc4 	.word	0x0801edc4
 8016d58:	0801ecd8 	.word	0x0801ecd8

08016d5c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b084      	sub	sp, #16
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d107      	bne.n	8016d7c <dhcp_arp_reply+0x20>
 8016d6c:	4b0e      	ldr	r3, [pc, #56]	; (8016da8 <dhcp_arp_reply+0x4c>)
 8016d6e:	f240 328b 	movw	r2, #907	; 0x38b
 8016d72:	490e      	ldr	r1, [pc, #56]	; (8016dac <dhcp_arp_reply+0x50>)
 8016d74:	480e      	ldr	r0, [pc, #56]	; (8016db0 <dhcp_arp_reply+0x54>)
 8016d76:	f004 f8d3 	bl	801af20 <iprintf>
 8016d7a:	e012      	b.n	8016da2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00c      	beq.n	8016da2 <dhcp_arp_reply+0x46>
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	795b      	ldrb	r3, [r3, #5]
 8016d8c:	2b08      	cmp	r3, #8
 8016d8e:	d108      	bne.n	8016da2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	681a      	ldr	r2, [r3, #0]
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	69db      	ldr	r3, [r3, #28]
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d102      	bne.n	8016da2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f000 f809 	bl	8016db4 <dhcp_decline>
    }
  }
}
 8016da2:	3710      	adds	r7, #16
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	0801ec78 	.word	0x0801ec78
 8016dac:	0801ed5c 	.word	0x0801ed5c
 8016db0:	0801ecd8 	.word	0x0801ecd8

08016db4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016db4:	b5b0      	push	{r4, r5, r7, lr}
 8016db6:	b08a      	sub	sp, #40	; 0x28
 8016db8:	af02      	add	r7, sp, #8
 8016dba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016dc2:	210c      	movs	r1, #12
 8016dc4:	69b8      	ldr	r0, [r7, #24]
 8016dc6:	f000 fc6f 	bl	80176a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016dca:	f107 030c 	add.w	r3, r7, #12
 8016dce:	2204      	movs	r2, #4
 8016dd0:	69b9      	ldr	r1, [r7, #24]
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f001 f8f4 	bl	8017fc0 <dhcp_create_msg>
 8016dd8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d035      	beq.n	8016e4c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016de6:	89b8      	ldrh	r0, [r7, #12]
 8016de8:	693b      	ldr	r3, [r7, #16]
 8016dea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016dee:	2304      	movs	r3, #4
 8016df0:	2232      	movs	r2, #50	; 0x32
 8016df2:	f000 fc73 	bl	80176dc <dhcp_option>
 8016df6:	4603      	mov	r3, r0
 8016df8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016dfa:	89bc      	ldrh	r4, [r7, #12]
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	69db      	ldr	r3, [r3, #28]
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7f6 fd9b 	bl	800d942 <lwip_htonl>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	461a      	mov	r2, r3
 8016e10:	4629      	mov	r1, r5
 8016e12:	4620      	mov	r0, r4
 8016e14:	f000 fcee 	bl	80177f4 <dhcp_option_long>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e1c:	89b8      	ldrh	r0, [r7, #12]
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	33f0      	adds	r3, #240	; 0xf0
 8016e22:	697a      	ldr	r2, [r7, #20]
 8016e24:	4619      	mov	r1, r3
 8016e26:	f001 f9a1 	bl	801816c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016e2a:	4b19      	ldr	r3, [pc, #100]	; (8016e90 <dhcp_decline+0xdc>)
 8016e2c:	6818      	ldr	r0, [r3, #0]
 8016e2e:	4b19      	ldr	r3, [pc, #100]	; (8016e94 <dhcp_decline+0xe0>)
 8016e30:	9301      	str	r3, [sp, #4]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	9300      	str	r3, [sp, #0]
 8016e36:	2343      	movs	r3, #67	; 0x43
 8016e38:	4a17      	ldr	r2, [pc, #92]	; (8016e98 <dhcp_decline+0xe4>)
 8016e3a:	6979      	ldr	r1, [r7, #20]
 8016e3c:	f7ff f8c4 	bl	8015fc8 <udp_sendto_if_src>
 8016e40:	4603      	mov	r3, r0
 8016e42:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016e44:	6978      	ldr	r0, [r7, #20]
 8016e46:	f7f8 fa1d 	bl	800f284 <pbuf_free>
 8016e4a:	e001      	b.n	8016e50 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016e4c:	23ff      	movs	r3, #255	; 0xff
 8016e4e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016e50:	69bb      	ldr	r3, [r7, #24]
 8016e52:	799b      	ldrb	r3, [r3, #6]
 8016e54:	2bff      	cmp	r3, #255	; 0xff
 8016e56:	d005      	beq.n	8016e64 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	799b      	ldrb	r3, [r3, #6]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	b2da      	uxtb	r2, r3
 8016e60:	69bb      	ldr	r3, [r7, #24]
 8016e62:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016e64:	f242 7310 	movw	r3, #10000	; 0x2710
 8016e68:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016e6a:	89fb      	ldrh	r3, [r7, #14]
 8016e6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016e70:	4a0a      	ldr	r2, [pc, #40]	; (8016e9c <dhcp_decline+0xe8>)
 8016e72:	fb82 1203 	smull	r1, r2, r2, r3
 8016e76:	1152      	asrs	r2, r2, #5
 8016e78:	17db      	asrs	r3, r3, #31
 8016e7a:	1ad3      	subs	r3, r2, r3
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016e82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	3720      	adds	r7, #32
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	24009df0 	.word	0x24009df0
 8016e94:	0801f844 	.word	0x0801f844
 8016e98:	0801f848 	.word	0x0801f848
 8016e9c:	10624dd3 	.word	0x10624dd3

08016ea0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b08a      	sub	sp, #40	; 0x28
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eac:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016eb2:	69bb      	ldr	r3, [r7, #24]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016eb8:	2106      	movs	r1, #6
 8016eba:	69b8      	ldr	r0, [r7, #24]
 8016ebc:	f000 fbf4 	bl	80176a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016ec0:	f107 0308 	add.w	r3, r7, #8
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	69b9      	ldr	r1, [r7, #24]
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f001 f879 	bl	8017fc0 <dhcp_create_msg>
 8016ece:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d04b      	beq.n	8016f6e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016edc:	8938      	ldrh	r0, [r7, #8]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ee4:	2302      	movs	r3, #2
 8016ee6:	2239      	movs	r2, #57	; 0x39
 8016ee8:	f000 fbf8 	bl	80176dc <dhcp_option>
 8016eec:	4603      	mov	r3, r0
 8016eee:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016ef0:	8938      	ldrh	r0, [r7, #8]
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016efc:	461a      	mov	r2, r3
 8016efe:	f000 fc47 	bl	8017790 <dhcp_option_short>
 8016f02:	4603      	mov	r3, r0
 8016f04:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f06:	8938      	ldrh	r0, [r7, #8]
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f0e:	2303      	movs	r3, #3
 8016f10:	2237      	movs	r2, #55	; 0x37
 8016f12:	f000 fbe3 	bl	80176dc <dhcp_option>
 8016f16:	4603      	mov	r3, r0
 8016f18:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	77fb      	strb	r3, [r7, #31]
 8016f1e:	e00e      	b.n	8016f3e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f20:	8938      	ldrh	r0, [r7, #8]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f28:	7ffb      	ldrb	r3, [r7, #31]
 8016f2a:	4a29      	ldr	r2, [pc, #164]	; (8016fd0 <dhcp_discover+0x130>)
 8016f2c:	5cd3      	ldrb	r3, [r2, r3]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	f000 fc08 	bl	8017744 <dhcp_option_byte>
 8016f34:	4603      	mov	r3, r0
 8016f36:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f38:	7ffb      	ldrb	r3, [r7, #31]
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	77fb      	strb	r3, [r7, #31]
 8016f3e:	7ffb      	ldrb	r3, [r7, #31]
 8016f40:	2b02      	cmp	r3, #2
 8016f42:	d9ed      	bls.n	8016f20 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016f44:	8938      	ldrh	r0, [r7, #8]
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	33f0      	adds	r3, #240	; 0xf0
 8016f4a:	693a      	ldr	r2, [r7, #16]
 8016f4c:	4619      	mov	r1, r3
 8016f4e:	f001 f90d 	bl	801816c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016f52:	4b20      	ldr	r3, [pc, #128]	; (8016fd4 <dhcp_discover+0x134>)
 8016f54:	6818      	ldr	r0, [r3, #0]
 8016f56:	4b20      	ldr	r3, [pc, #128]	; (8016fd8 <dhcp_discover+0x138>)
 8016f58:	9301      	str	r3, [sp, #4]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	9300      	str	r3, [sp, #0]
 8016f5e:	2343      	movs	r3, #67	; 0x43
 8016f60:	4a1e      	ldr	r2, [pc, #120]	; (8016fdc <dhcp_discover+0x13c>)
 8016f62:	6939      	ldr	r1, [r7, #16]
 8016f64:	f7ff f830 	bl	8015fc8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016f68:	6938      	ldr	r0, [r7, #16]
 8016f6a:	f7f8 f98b 	bl	800f284 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016f6e:	69bb      	ldr	r3, [r7, #24]
 8016f70:	799b      	ldrb	r3, [r3, #6]
 8016f72:	2bff      	cmp	r3, #255	; 0xff
 8016f74:	d005      	beq.n	8016f82 <dhcp_discover+0xe2>
    dhcp->tries++;
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	799b      	ldrb	r3, [r3, #6]
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	b2da      	uxtb	r2, r3
 8016f7e:	69bb      	ldr	r3, [r7, #24]
 8016f80:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	799b      	ldrb	r3, [r3, #6]
 8016f86:	2b05      	cmp	r3, #5
 8016f88:	d80d      	bhi.n	8016fa6 <dhcp_discover+0x106>
 8016f8a:	69bb      	ldr	r3, [r7, #24]
 8016f8c:	799b      	ldrb	r3, [r3, #6]
 8016f8e:	461a      	mov	r2, r3
 8016f90:	2301      	movs	r3, #1
 8016f92:	4093      	lsls	r3, r2
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	461a      	mov	r2, r3
 8016f98:	0152      	lsls	r2, r2, #5
 8016f9a:	1ad2      	subs	r2, r2, r3
 8016f9c:	0092      	lsls	r2, r2, #2
 8016f9e:	4413      	add	r3, r2
 8016fa0:	00db      	lsls	r3, r3, #3
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	e001      	b.n	8016faa <dhcp_discover+0x10a>
 8016fa6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016faa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016fac:	897b      	ldrh	r3, [r7, #10]
 8016fae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016fb2:	4a0b      	ldr	r2, [pc, #44]	; (8016fe0 <dhcp_discover+0x140>)
 8016fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8016fb8:	1152      	asrs	r2, r2, #5
 8016fba:	17db      	asrs	r3, r3, #31
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	b29a      	uxth	r2, r3
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3720      	adds	r7, #32
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	24000034 	.word	0x24000034
 8016fd4:	24009df0 	.word	0x24009df0
 8016fd8:	0801f844 	.word	0x0801f844
 8016fdc:	0801f848 	.word	0x0801f848
 8016fe0:	10624dd3 	.word	0x10624dd3

08016fe4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b088      	sub	sp, #32
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d107      	bne.n	8017002 <dhcp_bind+0x1e>
 8016ff2:	4b64      	ldr	r3, [pc, #400]	; (8017184 <dhcp_bind+0x1a0>)
 8016ff4:	f240 4215 	movw	r2, #1045	; 0x415
 8016ff8:	4963      	ldr	r1, [pc, #396]	; (8017188 <dhcp_bind+0x1a4>)
 8016ffa:	4864      	ldr	r0, [pc, #400]	; (801718c <dhcp_bind+0x1a8>)
 8016ffc:	f003 ff90 	bl	801af20 <iprintf>
 8017000:	e0bc      	b.n	801717c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017006:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017008:	69bb      	ldr	r3, [r7, #24]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d107      	bne.n	801701e <dhcp_bind+0x3a>
 801700e:	4b5d      	ldr	r3, [pc, #372]	; (8017184 <dhcp_bind+0x1a0>)
 8017010:	f240 4217 	movw	r2, #1047	; 0x417
 8017014:	495e      	ldr	r1, [pc, #376]	; (8017190 <dhcp_bind+0x1ac>)
 8017016:	485d      	ldr	r0, [pc, #372]	; (801718c <dhcp_bind+0x1a8>)
 8017018:	f003 ff82 	bl	801af20 <iprintf>
 801701c:	e0ae      	b.n	801717c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	2200      	movs	r2, #0
 8017022:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801702c:	d019      	beq.n	8017062 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801702e:	69bb      	ldr	r3, [r7, #24]
 8017030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017032:	331e      	adds	r3, #30
 8017034:	4a57      	ldr	r2, [pc, #348]	; (8017194 <dhcp_bind+0x1b0>)
 8017036:	fba2 2303 	umull	r2, r3, r2, r3
 801703a:	095b      	lsrs	r3, r3, #5
 801703c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801703e:	69fb      	ldr	r3, [r7, #28]
 8017040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017044:	d302      	bcc.n	801704c <dhcp_bind+0x68>
      timeout = 0xffff;
 8017046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801704a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	b29a      	uxth	r2, r3
 8017050:	69bb      	ldr	r3, [r7, #24]
 8017052:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017054:	69bb      	ldr	r3, [r7, #24]
 8017056:	8a9b      	ldrh	r3, [r3, #20]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d102      	bne.n	8017062 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801705c:	69bb      	ldr	r3, [r7, #24]
 801705e:	2201      	movs	r2, #1
 8017060:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017062:	69bb      	ldr	r3, [r7, #24]
 8017064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801706a:	d01d      	beq.n	80170a8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801706c:	69bb      	ldr	r3, [r7, #24]
 801706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017070:	331e      	adds	r3, #30
 8017072:	4a48      	ldr	r2, [pc, #288]	; (8017194 <dhcp_bind+0x1b0>)
 8017074:	fba2 2303 	umull	r2, r3, r2, r3
 8017078:	095b      	lsrs	r3, r3, #5
 801707a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017082:	d302      	bcc.n	801708a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017088:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	b29a      	uxth	r2, r3
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	895b      	ldrh	r3, [r3, #10]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d102      	bne.n	80170a0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	2201      	movs	r2, #1
 801709e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	895a      	ldrh	r2, [r3, #10]
 80170a4:	69bb      	ldr	r3, [r7, #24]
 80170a6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80170a8:	69bb      	ldr	r3, [r7, #24]
 80170aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b0:	d01d      	beq.n	80170ee <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80170b2:	69bb      	ldr	r3, [r7, #24]
 80170b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170b6:	331e      	adds	r3, #30
 80170b8:	4a36      	ldr	r2, [pc, #216]	; (8017194 <dhcp_bind+0x1b0>)
 80170ba:	fba2 2303 	umull	r2, r3, r2, r3
 80170be:	095b      	lsrs	r3, r3, #5
 80170c0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80170c2:	69fb      	ldr	r3, [r7, #28]
 80170c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170c8:	d302      	bcc.n	80170d0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80170ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170ce:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	69bb      	ldr	r3, [r7, #24]
 80170d6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80170d8:	69bb      	ldr	r3, [r7, #24]
 80170da:	899b      	ldrh	r3, [r3, #12]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d102      	bne.n	80170e6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80170e0:	69bb      	ldr	r3, [r7, #24]
 80170e2:	2201      	movs	r2, #1
 80170e4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	899a      	ldrh	r2, [r3, #12]
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	895a      	ldrh	r2, [r3, #10]
 80170f2:	69bb      	ldr	r3, [r7, #24]
 80170f4:	899b      	ldrh	r3, [r3, #12]
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d306      	bcc.n	8017108 <dhcp_bind+0x124>
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	899b      	ldrh	r3, [r3, #12]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d002      	beq.n	8017108 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017102:	69bb      	ldr	r3, [r7, #24]
 8017104:	2200      	movs	r2, #0
 8017106:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017108:	69bb      	ldr	r3, [r7, #24]
 801710a:	79db      	ldrb	r3, [r3, #7]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d003      	beq.n	8017118 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	6a1b      	ldr	r3, [r3, #32]
 8017114:	613b      	str	r3, [r7, #16]
 8017116:	e014      	b.n	8017142 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017118:	69bb      	ldr	r3, [r7, #24]
 801711a:	331c      	adds	r3, #28
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017124:	2b00      	cmp	r3, #0
 8017126:	db02      	blt.n	801712e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017128:	23ff      	movs	r3, #255	; 0xff
 801712a:	613b      	str	r3, [r7, #16]
 801712c:	e009      	b.n	8017142 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801712e:	7dfb      	ldrb	r3, [r7, #23]
 8017130:	2bbf      	cmp	r3, #191	; 0xbf
 8017132:	d903      	bls.n	801713c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017134:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017138:	613b      	str	r3, [r7, #16]
 801713a:	e002      	b.n	8017142 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801713c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017140:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017142:	69bb      	ldr	r3, [r7, #24]
 8017144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017146:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d108      	bne.n	8017160 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801714e:	69bb      	ldr	r3, [r7, #24]
 8017150:	69da      	ldr	r2, [r3, #28]
 8017152:	693b      	ldr	r3, [r7, #16]
 8017154:	4013      	ands	r3, r2
 8017156:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801715e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017160:	210a      	movs	r1, #10
 8017162:	69b8      	ldr	r0, [r7, #24]
 8017164:	f000 faa0 	bl	80176a8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017168:	69bb      	ldr	r3, [r7, #24]
 801716a:	f103 011c 	add.w	r1, r3, #28
 801716e:	f107 030c 	add.w	r3, r7, #12
 8017172:	f107 0210 	add.w	r2, r7, #16
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f7f7 fb76 	bl	800e868 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801717c:	3720      	adds	r7, #32
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
 8017182:	bf00      	nop
 8017184:	0801ec78 	.word	0x0801ec78
 8017188:	0801edd8 	.word	0x0801edd8
 801718c:	0801ecd8 	.word	0x0801ecd8
 8017190:	0801edf4 	.word	0x0801edf4
 8017194:	88888889 	.word	0x88888889

08017198 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b08a      	sub	sp, #40	; 0x28
 801719c:	af02      	add	r7, sp, #8
 801719e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171a4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80171a6:	2105      	movs	r1, #5
 80171a8:	69b8      	ldr	r0, [r7, #24]
 80171aa:	f000 fa7d 	bl	80176a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80171ae:	f107 030c 	add.w	r3, r7, #12
 80171b2:	2203      	movs	r2, #3
 80171b4:	69b9      	ldr	r1, [r7, #24]
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f000 ff02 	bl	8017fc0 <dhcp_create_msg>
 80171bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d04e      	beq.n	8017262 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	685b      	ldr	r3, [r3, #4]
 80171c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80171ca:	89b8      	ldrh	r0, [r7, #12]
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171d2:	2302      	movs	r3, #2
 80171d4:	2239      	movs	r2, #57	; 0x39
 80171d6:	f000 fa81 	bl	80176dc <dhcp_option>
 80171da:	4603      	mov	r3, r0
 80171dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80171de:	89b8      	ldrh	r0, [r7, #12]
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171ea:	461a      	mov	r2, r3
 80171ec:	f000 fad0 	bl	8017790 <dhcp_option_short>
 80171f0:	4603      	mov	r3, r0
 80171f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80171f4:	89b8      	ldrh	r0, [r7, #12]
 80171f6:	693b      	ldr	r3, [r7, #16]
 80171f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171fc:	2303      	movs	r3, #3
 80171fe:	2237      	movs	r2, #55	; 0x37
 8017200:	f000 fa6c 	bl	80176dc <dhcp_option>
 8017204:	4603      	mov	r3, r0
 8017206:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017208:	2300      	movs	r3, #0
 801720a:	77bb      	strb	r3, [r7, #30]
 801720c:	e00e      	b.n	801722c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801720e:	89b8      	ldrh	r0, [r7, #12]
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017216:	7fbb      	ldrb	r3, [r7, #30]
 8017218:	4a2a      	ldr	r2, [pc, #168]	; (80172c4 <dhcp_renew+0x12c>)
 801721a:	5cd3      	ldrb	r3, [r2, r3]
 801721c:	461a      	mov	r2, r3
 801721e:	f000 fa91 	bl	8017744 <dhcp_option_byte>
 8017222:	4603      	mov	r3, r0
 8017224:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017226:	7fbb      	ldrb	r3, [r7, #30]
 8017228:	3301      	adds	r3, #1
 801722a:	77bb      	strb	r3, [r7, #30]
 801722c:	7fbb      	ldrb	r3, [r7, #30]
 801722e:	2b02      	cmp	r3, #2
 8017230:	d9ed      	bls.n	801720e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017232:	89b8      	ldrh	r0, [r7, #12]
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	33f0      	adds	r3, #240	; 0xf0
 8017238:	697a      	ldr	r2, [r7, #20]
 801723a:	4619      	mov	r1, r3
 801723c:	f000 ff96 	bl	801816c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017240:	4b21      	ldr	r3, [pc, #132]	; (80172c8 <dhcp_renew+0x130>)
 8017242:	6818      	ldr	r0, [r3, #0]
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	f103 0218 	add.w	r2, r3, #24
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	9300      	str	r3, [sp, #0]
 801724e:	2343      	movs	r3, #67	; 0x43
 8017250:	6979      	ldr	r1, [r7, #20]
 8017252:	f7fe fe45 	bl	8015ee0 <udp_sendto_if>
 8017256:	4603      	mov	r3, r0
 8017258:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801725a:	6978      	ldr	r0, [r7, #20]
 801725c:	f7f8 f812 	bl	800f284 <pbuf_free>
 8017260:	e001      	b.n	8017266 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017262:	23ff      	movs	r3, #255	; 0xff
 8017264:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	799b      	ldrb	r3, [r3, #6]
 801726a:	2bff      	cmp	r3, #255	; 0xff
 801726c:	d005      	beq.n	801727a <dhcp_renew+0xe2>
    dhcp->tries++;
 801726e:	69bb      	ldr	r3, [r7, #24]
 8017270:	799b      	ldrb	r3, [r3, #6]
 8017272:	3301      	adds	r3, #1
 8017274:	b2da      	uxtb	r2, r3
 8017276:	69bb      	ldr	r3, [r7, #24]
 8017278:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801727a:	69bb      	ldr	r3, [r7, #24]
 801727c:	799b      	ldrb	r3, [r3, #6]
 801727e:	2b09      	cmp	r3, #9
 8017280:	d80a      	bhi.n	8017298 <dhcp_renew+0x100>
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	799b      	ldrb	r3, [r3, #6]
 8017286:	b29b      	uxth	r3, r3
 8017288:	461a      	mov	r2, r3
 801728a:	0152      	lsls	r2, r2, #5
 801728c:	1ad2      	subs	r2, r2, r3
 801728e:	0092      	lsls	r2, r2, #2
 8017290:	4413      	add	r3, r2
 8017292:	011b      	lsls	r3, r3, #4
 8017294:	b29b      	uxth	r3, r3
 8017296:	e001      	b.n	801729c <dhcp_renew+0x104>
 8017298:	f644 6320 	movw	r3, #20000	; 0x4e20
 801729c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801729e:	89fb      	ldrh	r3, [r7, #14]
 80172a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80172a4:	4a09      	ldr	r2, [pc, #36]	; (80172cc <dhcp_renew+0x134>)
 80172a6:	fb82 1203 	smull	r1, r2, r2, r3
 80172aa:	1152      	asrs	r2, r2, #5
 80172ac:	17db      	asrs	r3, r3, #31
 80172ae:	1ad3      	subs	r3, r2, r3
 80172b0:	b29a      	uxth	r2, r3
 80172b2:	69bb      	ldr	r3, [r7, #24]
 80172b4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80172b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3720      	adds	r7, #32
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	24000034 	.word	0x24000034
 80172c8:	24009df0 	.word	0x24009df0
 80172cc:	10624dd3 	.word	0x10624dd3

080172d0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08a      	sub	sp, #40	; 0x28
 80172d4:	af02      	add	r7, sp, #8
 80172d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80172de:	2104      	movs	r1, #4
 80172e0:	69b8      	ldr	r0, [r7, #24]
 80172e2:	f000 f9e1 	bl	80176a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80172e6:	f107 030c 	add.w	r3, r7, #12
 80172ea:	2203      	movs	r2, #3
 80172ec:	69b9      	ldr	r1, [r7, #24]
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f000 fe66 	bl	8017fc0 <dhcp_create_msg>
 80172f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d04c      	beq.n	8017396 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017302:	89b8      	ldrh	r0, [r7, #12]
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801730a:	2302      	movs	r3, #2
 801730c:	2239      	movs	r2, #57	; 0x39
 801730e:	f000 f9e5 	bl	80176dc <dhcp_option>
 8017312:	4603      	mov	r3, r0
 8017314:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017316:	89b8      	ldrh	r0, [r7, #12]
 8017318:	693b      	ldr	r3, [r7, #16]
 801731a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017322:	461a      	mov	r2, r3
 8017324:	f000 fa34 	bl	8017790 <dhcp_option_short>
 8017328:	4603      	mov	r3, r0
 801732a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801732c:	89b8      	ldrh	r0, [r7, #12]
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017334:	2303      	movs	r3, #3
 8017336:	2237      	movs	r2, #55	; 0x37
 8017338:	f000 f9d0 	bl	80176dc <dhcp_option>
 801733c:	4603      	mov	r3, r0
 801733e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017340:	2300      	movs	r3, #0
 8017342:	77bb      	strb	r3, [r7, #30]
 8017344:	e00e      	b.n	8017364 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017346:	89b8      	ldrh	r0, [r7, #12]
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801734e:	7fbb      	ldrb	r3, [r7, #30]
 8017350:	4a29      	ldr	r2, [pc, #164]	; (80173f8 <dhcp_rebind+0x128>)
 8017352:	5cd3      	ldrb	r3, [r2, r3]
 8017354:	461a      	mov	r2, r3
 8017356:	f000 f9f5 	bl	8017744 <dhcp_option_byte>
 801735a:	4603      	mov	r3, r0
 801735c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801735e:	7fbb      	ldrb	r3, [r7, #30]
 8017360:	3301      	adds	r3, #1
 8017362:	77bb      	strb	r3, [r7, #30]
 8017364:	7fbb      	ldrb	r3, [r7, #30]
 8017366:	2b02      	cmp	r3, #2
 8017368:	d9ed      	bls.n	8017346 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801736a:	89b8      	ldrh	r0, [r7, #12]
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	33f0      	adds	r3, #240	; 0xf0
 8017370:	697a      	ldr	r2, [r7, #20]
 8017372:	4619      	mov	r1, r3
 8017374:	f000 fefa 	bl	801816c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017378:	4b20      	ldr	r3, [pc, #128]	; (80173fc <dhcp_rebind+0x12c>)
 801737a:	6818      	ldr	r0, [r3, #0]
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	9300      	str	r3, [sp, #0]
 8017380:	2343      	movs	r3, #67	; 0x43
 8017382:	4a1f      	ldr	r2, [pc, #124]	; (8017400 <dhcp_rebind+0x130>)
 8017384:	6979      	ldr	r1, [r7, #20]
 8017386:	f7fe fdab 	bl	8015ee0 <udp_sendto_if>
 801738a:	4603      	mov	r3, r0
 801738c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801738e:	6978      	ldr	r0, [r7, #20]
 8017390:	f7f7 ff78 	bl	800f284 <pbuf_free>
 8017394:	e001      	b.n	801739a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017396:	23ff      	movs	r3, #255	; 0xff
 8017398:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	799b      	ldrb	r3, [r3, #6]
 801739e:	2bff      	cmp	r3, #255	; 0xff
 80173a0:	d005      	beq.n	80173ae <dhcp_rebind+0xde>
    dhcp->tries++;
 80173a2:	69bb      	ldr	r3, [r7, #24]
 80173a4:	799b      	ldrb	r3, [r3, #6]
 80173a6:	3301      	adds	r3, #1
 80173a8:	b2da      	uxtb	r2, r3
 80173aa:	69bb      	ldr	r3, [r7, #24]
 80173ac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	799b      	ldrb	r3, [r3, #6]
 80173b2:	2b09      	cmp	r3, #9
 80173b4:	d80a      	bhi.n	80173cc <dhcp_rebind+0xfc>
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	799b      	ldrb	r3, [r3, #6]
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	461a      	mov	r2, r3
 80173be:	0152      	lsls	r2, r2, #5
 80173c0:	1ad2      	subs	r2, r2, r3
 80173c2:	0092      	lsls	r2, r2, #2
 80173c4:	4413      	add	r3, r2
 80173c6:	00db      	lsls	r3, r3, #3
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	e001      	b.n	80173d0 <dhcp_rebind+0x100>
 80173cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80173d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80173d2:	89fb      	ldrh	r3, [r7, #14]
 80173d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80173d8:	4a0a      	ldr	r2, [pc, #40]	; (8017404 <dhcp_rebind+0x134>)
 80173da:	fb82 1203 	smull	r1, r2, r2, r3
 80173de:	1152      	asrs	r2, r2, #5
 80173e0:	17db      	asrs	r3, r3, #31
 80173e2:	1ad3      	subs	r3, r2, r3
 80173e4:	b29a      	uxth	r2, r3
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80173ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	3720      	adds	r7, #32
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}
 80173f6:	bf00      	nop
 80173f8:	24000034 	.word	0x24000034
 80173fc:	24009df0 	.word	0x24009df0
 8017400:	0801f848 	.word	0x0801f848
 8017404:	10624dd3 	.word	0x10624dd3

08017408 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017408:	b5b0      	push	{r4, r5, r7, lr}
 801740a:	b08a      	sub	sp, #40	; 0x28
 801740c:	af02      	add	r7, sp, #8
 801740e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017414:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017416:	2103      	movs	r1, #3
 8017418:	69b8      	ldr	r0, [r7, #24]
 801741a:	f000 f945 	bl	80176a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801741e:	f107 030c 	add.w	r3, r7, #12
 8017422:	2203      	movs	r2, #3
 8017424:	69b9      	ldr	r1, [r7, #24]
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f000 fdca 	bl	8017fc0 <dhcp_create_msg>
 801742c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d066      	beq.n	8017502 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801743a:	89b8      	ldrh	r0, [r7, #12]
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017442:	2302      	movs	r3, #2
 8017444:	2239      	movs	r2, #57	; 0x39
 8017446:	f000 f949 	bl	80176dc <dhcp_option>
 801744a:	4603      	mov	r3, r0
 801744c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801744e:	89b8      	ldrh	r0, [r7, #12]
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	33f0      	adds	r3, #240	; 0xf0
 8017454:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017458:	4619      	mov	r1, r3
 801745a:	f000 f999 	bl	8017790 <dhcp_option_short>
 801745e:	4603      	mov	r3, r0
 8017460:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017462:	89b8      	ldrh	r0, [r7, #12]
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801746a:	2304      	movs	r3, #4
 801746c:	2232      	movs	r2, #50	; 0x32
 801746e:	f000 f935 	bl	80176dc <dhcp_option>
 8017472:	4603      	mov	r3, r0
 8017474:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017476:	89bc      	ldrh	r4, [r7, #12]
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	69db      	ldr	r3, [r3, #28]
 8017482:	4618      	mov	r0, r3
 8017484:	f7f6 fa5d 	bl	800d942 <lwip_htonl>
 8017488:	4603      	mov	r3, r0
 801748a:	461a      	mov	r2, r3
 801748c:	4629      	mov	r1, r5
 801748e:	4620      	mov	r0, r4
 8017490:	f000 f9b0 	bl	80177f4 <dhcp_option_long>
 8017494:	4603      	mov	r3, r0
 8017496:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017498:	89b8      	ldrh	r0, [r7, #12]
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174a0:	2303      	movs	r3, #3
 80174a2:	2237      	movs	r2, #55	; 0x37
 80174a4:	f000 f91a 	bl	80176dc <dhcp_option>
 80174a8:	4603      	mov	r3, r0
 80174aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80174ac:	2300      	movs	r3, #0
 80174ae:	77bb      	strb	r3, [r7, #30]
 80174b0:	e00e      	b.n	80174d0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80174b2:	89b8      	ldrh	r0, [r7, #12]
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174ba:	7fbb      	ldrb	r3, [r7, #30]
 80174bc:	4a29      	ldr	r2, [pc, #164]	; (8017564 <dhcp_reboot+0x15c>)
 80174be:	5cd3      	ldrb	r3, [r2, r3]
 80174c0:	461a      	mov	r2, r3
 80174c2:	f000 f93f 	bl	8017744 <dhcp_option_byte>
 80174c6:	4603      	mov	r3, r0
 80174c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80174ca:	7fbb      	ldrb	r3, [r7, #30]
 80174cc:	3301      	adds	r3, #1
 80174ce:	77bb      	strb	r3, [r7, #30]
 80174d0:	7fbb      	ldrb	r3, [r7, #30]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	d9ed      	bls.n	80174b2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80174d6:	89b8      	ldrh	r0, [r7, #12]
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	33f0      	adds	r3, #240	; 0xf0
 80174dc:	697a      	ldr	r2, [r7, #20]
 80174de:	4619      	mov	r1, r3
 80174e0:	f000 fe44 	bl	801816c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80174e4:	4b20      	ldr	r3, [pc, #128]	; (8017568 <dhcp_reboot+0x160>)
 80174e6:	6818      	ldr	r0, [r3, #0]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	9300      	str	r3, [sp, #0]
 80174ec:	2343      	movs	r3, #67	; 0x43
 80174ee:	4a1f      	ldr	r2, [pc, #124]	; (801756c <dhcp_reboot+0x164>)
 80174f0:	6979      	ldr	r1, [r7, #20]
 80174f2:	f7fe fcf5 	bl	8015ee0 <udp_sendto_if>
 80174f6:	4603      	mov	r3, r0
 80174f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80174fa:	6978      	ldr	r0, [r7, #20]
 80174fc:	f7f7 fec2 	bl	800f284 <pbuf_free>
 8017500:	e001      	b.n	8017506 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017502:	23ff      	movs	r3, #255	; 0xff
 8017504:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017506:	69bb      	ldr	r3, [r7, #24]
 8017508:	799b      	ldrb	r3, [r3, #6]
 801750a:	2bff      	cmp	r3, #255	; 0xff
 801750c:	d005      	beq.n	801751a <dhcp_reboot+0x112>
    dhcp->tries++;
 801750e:	69bb      	ldr	r3, [r7, #24]
 8017510:	799b      	ldrb	r3, [r3, #6]
 8017512:	3301      	adds	r3, #1
 8017514:	b2da      	uxtb	r2, r3
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801751a:	69bb      	ldr	r3, [r7, #24]
 801751c:	799b      	ldrb	r3, [r3, #6]
 801751e:	2b09      	cmp	r3, #9
 8017520:	d80a      	bhi.n	8017538 <dhcp_reboot+0x130>
 8017522:	69bb      	ldr	r3, [r7, #24]
 8017524:	799b      	ldrb	r3, [r3, #6]
 8017526:	b29b      	uxth	r3, r3
 8017528:	461a      	mov	r2, r3
 801752a:	0152      	lsls	r2, r2, #5
 801752c:	1ad2      	subs	r2, r2, r3
 801752e:	0092      	lsls	r2, r2, #2
 8017530:	4413      	add	r3, r2
 8017532:	00db      	lsls	r3, r3, #3
 8017534:	b29b      	uxth	r3, r3
 8017536:	e001      	b.n	801753c <dhcp_reboot+0x134>
 8017538:	f242 7310 	movw	r3, #10000	; 0x2710
 801753c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801753e:	89fb      	ldrh	r3, [r7, #14]
 8017540:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017544:	4a0a      	ldr	r2, [pc, #40]	; (8017570 <dhcp_reboot+0x168>)
 8017546:	fb82 1203 	smull	r1, r2, r2, r3
 801754a:	1152      	asrs	r2, r2, #5
 801754c:	17db      	asrs	r3, r3, #31
 801754e:	1ad3      	subs	r3, r2, r3
 8017550:	b29a      	uxth	r2, r3
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801755a:	4618      	mov	r0, r3
 801755c:	3720      	adds	r7, #32
 801755e:	46bd      	mov	sp, r7
 8017560:	bdb0      	pop	{r4, r5, r7, pc}
 8017562:	bf00      	nop
 8017564:	24000034 	.word	0x24000034
 8017568:	24009df0 	.word	0x24009df0
 801756c:	0801f848 	.word	0x0801f848
 8017570:	10624dd3 	.word	0x10624dd3

08017574 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017574:	b5b0      	push	{r4, r5, r7, lr}
 8017576:	b08a      	sub	sp, #40	; 0x28
 8017578:	af02      	add	r7, sp, #8
 801757a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017580:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	2b00      	cmp	r3, #0
 8017586:	f000 8084 	beq.w	8017692 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	795b      	ldrb	r3, [r3, #5]
 801758e:	2b00      	cmp	r3, #0
 8017590:	f000 8081 	beq.w	8017696 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	699b      	ldr	r3, [r3, #24]
 8017598:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	2200      	movs	r2, #0
 801759e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	2200      	movs	r2, #0
 80175a4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80175a6:	69fb      	ldr	r3, [r7, #28]
 80175a8:	2200      	movs	r2, #0
 80175aa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	2200      	movs	r2, #0
 80175b0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80175b2:	69fb      	ldr	r3, [r7, #28]
 80175b4:	2200      	movs	r2, #0
 80175b6:	631a      	str	r2, [r3, #48]	; 0x30
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	62da      	str	r2, [r3, #44]	; 0x2c
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80175c8:	69fb      	ldr	r3, [r7, #28]
 80175ca:	2200      	movs	r2, #0
 80175cc:	829a      	strh	r2, [r3, #20]
 80175ce:	69fb      	ldr	r3, [r7, #28]
 80175d0:	8a9a      	ldrh	r2, [r3, #20]
 80175d2:	69fb      	ldr	r3, [r7, #28]
 80175d4:	825a      	strh	r2, [r3, #18]
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	8a5a      	ldrh	r2, [r3, #18]
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	821a      	strh	r2, [r3, #16]
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	8a1a      	ldrh	r2, [r3, #16]
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 fdee 	bl	80181c8 <dhcp_supplied_address>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d03b      	beq.n	801766a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80175f2:	f107 030e 	add.w	r3, r7, #14
 80175f6:	2207      	movs	r2, #7
 80175f8:	69f9      	ldr	r1, [r7, #28]
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f000 fce0 	bl	8017fc0 <dhcp_create_msg>
 8017600:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d030      	beq.n	801766a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801760e:	89f8      	ldrh	r0, [r7, #14]
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017616:	2304      	movs	r3, #4
 8017618:	2236      	movs	r2, #54	; 0x36
 801761a:	f000 f85f 	bl	80176dc <dhcp_option>
 801761e:	4603      	mov	r3, r0
 8017620:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017622:	89fc      	ldrh	r4, [r7, #14]
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	4618      	mov	r0, r3
 801762e:	f7f6 f988 	bl	800d942 <lwip_htonl>
 8017632:	4603      	mov	r3, r0
 8017634:	461a      	mov	r2, r3
 8017636:	4629      	mov	r1, r5
 8017638:	4620      	mov	r0, r4
 801763a:	f000 f8db 	bl	80177f4 <dhcp_option_long>
 801763e:	4603      	mov	r3, r0
 8017640:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017642:	89f8      	ldrh	r0, [r7, #14]
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	33f0      	adds	r3, #240	; 0xf0
 8017648:	69ba      	ldr	r2, [r7, #24]
 801764a:	4619      	mov	r1, r3
 801764c:	f000 fd8e 	bl	801816c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017650:	4b13      	ldr	r3, [pc, #76]	; (80176a0 <dhcp_release_and_stop+0x12c>)
 8017652:	6818      	ldr	r0, [r3, #0]
 8017654:	f107 0210 	add.w	r2, r7, #16
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	9300      	str	r3, [sp, #0]
 801765c:	2343      	movs	r3, #67	; 0x43
 801765e:	69b9      	ldr	r1, [r7, #24]
 8017660:	f7fe fc3e 	bl	8015ee0 <udp_sendto_if>
      pbuf_free(p_out);
 8017664:	69b8      	ldr	r0, [r7, #24]
 8017666:	f7f7 fe0d 	bl	800f284 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801766a:	4b0e      	ldr	r3, [pc, #56]	; (80176a4 <dhcp_release_and_stop+0x130>)
 801766c:	4a0d      	ldr	r2, [pc, #52]	; (80176a4 <dhcp_release_and_stop+0x130>)
 801766e:	490d      	ldr	r1, [pc, #52]	; (80176a4 <dhcp_release_and_stop+0x130>)
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7f7 f8f9 	bl	800e868 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017676:	2100      	movs	r1, #0
 8017678:	69f8      	ldr	r0, [r7, #28]
 801767a:	f000 f815 	bl	80176a8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801767e:	69fb      	ldr	r3, [r7, #28]
 8017680:	791b      	ldrb	r3, [r3, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d008      	beq.n	8017698 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017686:	f7fe ff83 	bl	8016590 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	2200      	movs	r2, #0
 801768e:	711a      	strb	r2, [r3, #4]
 8017690:	e002      	b.n	8017698 <dhcp_release_and_stop+0x124>
    return;
 8017692:	bf00      	nop
 8017694:	e000      	b.n	8017698 <dhcp_release_and_stop+0x124>
    return;
 8017696:	bf00      	nop
  }
}
 8017698:	3720      	adds	r7, #32
 801769a:	46bd      	mov	sp, r7
 801769c:	bdb0      	pop	{r4, r5, r7, pc}
 801769e:	bf00      	nop
 80176a0:	24009df0 	.word	0x24009df0
 80176a4:	0801f844 	.word	0x0801f844

080176a8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b083      	sub	sp, #12
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	460b      	mov	r3, r1
 80176b2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	795b      	ldrb	r3, [r3, #5]
 80176b8:	78fa      	ldrb	r2, [r7, #3]
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d008      	beq.n	80176d0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	78fa      	ldrb	r2, [r7, #3]
 80176c2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2200      	movs	r2, #0
 80176c8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2200      	movs	r2, #0
 80176ce:	811a      	strh	r2, [r3, #8]
  }
}
 80176d0:	bf00      	nop
 80176d2:	370c      	adds	r7, #12
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6039      	str	r1, [r7, #0]
 80176e4:	4611      	mov	r1, r2
 80176e6:	461a      	mov	r2, r3
 80176e8:	4603      	mov	r3, r0
 80176ea:	80fb      	strh	r3, [r7, #6]
 80176ec:	460b      	mov	r3, r1
 80176ee:	717b      	strb	r3, [r7, #5]
 80176f0:	4613      	mov	r3, r2
 80176f2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80176f4:	88fa      	ldrh	r2, [r7, #6]
 80176f6:	793b      	ldrb	r3, [r7, #4]
 80176f8:	4413      	add	r3, r2
 80176fa:	3302      	adds	r3, #2
 80176fc:	2b44      	cmp	r3, #68	; 0x44
 80176fe:	d906      	bls.n	801770e <dhcp_option+0x32>
 8017700:	4b0d      	ldr	r3, [pc, #52]	; (8017738 <dhcp_option+0x5c>)
 8017702:	f240 529a 	movw	r2, #1434	; 0x59a
 8017706:	490d      	ldr	r1, [pc, #52]	; (801773c <dhcp_option+0x60>)
 8017708:	480d      	ldr	r0, [pc, #52]	; (8017740 <dhcp_option+0x64>)
 801770a:	f003 fc09 	bl	801af20 <iprintf>
  options[options_out_len++] = option_type;
 801770e:	88fb      	ldrh	r3, [r7, #6]
 8017710:	1c5a      	adds	r2, r3, #1
 8017712:	80fa      	strh	r2, [r7, #6]
 8017714:	461a      	mov	r2, r3
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	4413      	add	r3, r2
 801771a:	797a      	ldrb	r2, [r7, #5]
 801771c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801771e:	88fb      	ldrh	r3, [r7, #6]
 8017720:	1c5a      	adds	r2, r3, #1
 8017722:	80fa      	strh	r2, [r7, #6]
 8017724:	461a      	mov	r2, r3
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	4413      	add	r3, r2
 801772a:	793a      	ldrb	r2, [r7, #4]
 801772c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801772e:	88fb      	ldrh	r3, [r7, #6]
}
 8017730:	4618      	mov	r0, r3
 8017732:	3708      	adds	r7, #8
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	0801ec78 	.word	0x0801ec78
 801773c:	0801ee0c 	.word	0x0801ee0c
 8017740:	0801ecd8 	.word	0x0801ecd8

08017744 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	4603      	mov	r3, r0
 801774c:	6039      	str	r1, [r7, #0]
 801774e:	80fb      	strh	r3, [r7, #6]
 8017750:	4613      	mov	r3, r2
 8017752:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017754:	88fb      	ldrh	r3, [r7, #6]
 8017756:	2b43      	cmp	r3, #67	; 0x43
 8017758:	d906      	bls.n	8017768 <dhcp_option_byte+0x24>
 801775a:	4b0a      	ldr	r3, [pc, #40]	; (8017784 <dhcp_option_byte+0x40>)
 801775c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8017760:	4909      	ldr	r1, [pc, #36]	; (8017788 <dhcp_option_byte+0x44>)
 8017762:	480a      	ldr	r0, [pc, #40]	; (801778c <dhcp_option_byte+0x48>)
 8017764:	f003 fbdc 	bl	801af20 <iprintf>
  options[options_out_len++] = value;
 8017768:	88fb      	ldrh	r3, [r7, #6]
 801776a:	1c5a      	adds	r2, r3, #1
 801776c:	80fa      	strh	r2, [r7, #6]
 801776e:	461a      	mov	r2, r3
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	4413      	add	r3, r2
 8017774:	797a      	ldrb	r2, [r7, #5]
 8017776:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017778:	88fb      	ldrh	r3, [r7, #6]
}
 801777a:	4618      	mov	r0, r3
 801777c:	3708      	adds	r7, #8
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	0801ec78 	.word	0x0801ec78
 8017788:	0801ee50 	.word	0x0801ee50
 801778c:	0801ecd8 	.word	0x0801ecd8

08017790 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	4603      	mov	r3, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	80fb      	strh	r3, [r7, #6]
 801779c:	4613      	mov	r3, r2
 801779e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80177a0:	88fb      	ldrh	r3, [r7, #6]
 80177a2:	3302      	adds	r3, #2
 80177a4:	2b44      	cmp	r3, #68	; 0x44
 80177a6:	d906      	bls.n	80177b6 <dhcp_option_short+0x26>
 80177a8:	4b0f      	ldr	r3, [pc, #60]	; (80177e8 <dhcp_option_short+0x58>)
 80177aa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80177ae:	490f      	ldr	r1, [pc, #60]	; (80177ec <dhcp_option_short+0x5c>)
 80177b0:	480f      	ldr	r0, [pc, #60]	; (80177f0 <dhcp_option_short+0x60>)
 80177b2:	f003 fbb5 	bl	801af20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80177b6:	88bb      	ldrh	r3, [r7, #4]
 80177b8:	0a1b      	lsrs	r3, r3, #8
 80177ba:	b29a      	uxth	r2, r3
 80177bc:	88fb      	ldrh	r3, [r7, #6]
 80177be:	1c59      	adds	r1, r3, #1
 80177c0:	80f9      	strh	r1, [r7, #6]
 80177c2:	4619      	mov	r1, r3
 80177c4:	683b      	ldr	r3, [r7, #0]
 80177c6:	440b      	add	r3, r1
 80177c8:	b2d2      	uxtb	r2, r2
 80177ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80177cc:	88fb      	ldrh	r3, [r7, #6]
 80177ce:	1c5a      	adds	r2, r3, #1
 80177d0:	80fa      	strh	r2, [r7, #6]
 80177d2:	461a      	mov	r2, r3
 80177d4:	683b      	ldr	r3, [r7, #0]
 80177d6:	4413      	add	r3, r2
 80177d8:	88ba      	ldrh	r2, [r7, #4]
 80177da:	b2d2      	uxtb	r2, r2
 80177dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80177de:	88fb      	ldrh	r3, [r7, #6]
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3708      	adds	r7, #8
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	0801ec78 	.word	0x0801ec78
 80177ec:	0801ee88 	.word	0x0801ee88
 80177f0:	0801ecd8 	.word	0x0801ecd8

080177f4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b084      	sub	sp, #16
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	4603      	mov	r3, r0
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
 8017800:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017802:	89fb      	ldrh	r3, [r7, #14]
 8017804:	3304      	adds	r3, #4
 8017806:	2b44      	cmp	r3, #68	; 0x44
 8017808:	d906      	bls.n	8017818 <dhcp_option_long+0x24>
 801780a:	4b19      	ldr	r3, [pc, #100]	; (8017870 <dhcp_option_long+0x7c>)
 801780c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8017810:	4918      	ldr	r1, [pc, #96]	; (8017874 <dhcp_option_long+0x80>)
 8017812:	4819      	ldr	r0, [pc, #100]	; (8017878 <dhcp_option_long+0x84>)
 8017814:	f003 fb84 	bl	801af20 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	0e1a      	lsrs	r2, r3, #24
 801781c:	89fb      	ldrh	r3, [r7, #14]
 801781e:	1c59      	adds	r1, r3, #1
 8017820:	81f9      	strh	r1, [r7, #14]
 8017822:	4619      	mov	r1, r3
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	440b      	add	r3, r1
 8017828:	b2d2      	uxtb	r2, r2
 801782a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	0c1a      	lsrs	r2, r3, #16
 8017830:	89fb      	ldrh	r3, [r7, #14]
 8017832:	1c59      	adds	r1, r3, #1
 8017834:	81f9      	strh	r1, [r7, #14]
 8017836:	4619      	mov	r1, r3
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	440b      	add	r3, r1
 801783c:	b2d2      	uxtb	r2, r2
 801783e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	0a1a      	lsrs	r2, r3, #8
 8017844:	89fb      	ldrh	r3, [r7, #14]
 8017846:	1c59      	adds	r1, r3, #1
 8017848:	81f9      	strh	r1, [r7, #14]
 801784a:	4619      	mov	r1, r3
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	440b      	add	r3, r1
 8017850:	b2d2      	uxtb	r2, r2
 8017852:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017854:	89fb      	ldrh	r3, [r7, #14]
 8017856:	1c5a      	adds	r2, r3, #1
 8017858:	81fa      	strh	r2, [r7, #14]
 801785a:	461a      	mov	r2, r3
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	4413      	add	r3, r2
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	b2d2      	uxtb	r2, r2
 8017864:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017866:	89fb      	ldrh	r3, [r7, #14]
}
 8017868:	4618      	mov	r0, r3
 801786a:	3710      	adds	r7, #16
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	0801ec78 	.word	0x0801ec78
 8017874:	0801eec4 	.word	0x0801eec4
 8017878:	0801ecd8 	.word	0x0801ecd8

0801787c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b090      	sub	sp, #64	; 0x40
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017886:	2300      	movs	r3, #0
 8017888:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801788a:	2300      	movs	r3, #0
 801788c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801788e:	2208      	movs	r2, #8
 8017890:	2100      	movs	r1, #0
 8017892:	48be      	ldr	r0, [pc, #760]	; (8017b8c <dhcp_parse_reply+0x310>)
 8017894:	f003 fae1 	bl	801ae5a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	895b      	ldrh	r3, [r3, #10]
 801789c:	2b2b      	cmp	r3, #43	; 0x2b
 801789e:	d802      	bhi.n	80178a6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80178a0:	f06f 0301 	mvn.w	r3, #1
 80178a4:	e2a8      	b.n	8017df8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80178ac:	23f0      	movs	r3, #240	; 0xf0
 80178ae:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	891b      	ldrh	r3, [r3, #8]
 80178b4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80178ba:	e00c      	b.n	80178d6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80178bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178be:	895b      	ldrh	r3, [r3, #10]
 80178c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80178c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c8:	895b      	ldrh	r3, [r3, #10]
 80178ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80178cc:	1ad3      	subs	r3, r2, r3
 80178ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80178d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d004      	beq.n	80178e6 <dhcp_parse_reply+0x6a>
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	895b      	ldrh	r3, [r3, #10]
 80178e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80178e2:	429a      	cmp	r2, r3
 80178e4:	d2ea      	bcs.n	80178bc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80178e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d102      	bne.n	80178f2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80178ec:	f06f 0301 	mvn.w	r3, #1
 80178f0:	e282      	b.n	8017df8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80178f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80178f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80178f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80178f8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80178fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017900:	e23a      	b.n	8017d78 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8017902:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017906:	4413      	add	r3, r2
 8017908:	781b      	ldrb	r3, [r3, #0]
 801790a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801790c:	2300      	movs	r3, #0
 801790e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8017912:	f04f 33ff 	mov.w	r3, #4294967295
 8017916:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017918:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801791a:	3302      	adds	r3, #2
 801791c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801791e:	8bfa      	ldrh	r2, [r7, #30]
 8017920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017922:	429a      	cmp	r2, r3
 8017924:	d202      	bcs.n	801792c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017926:	f06f 0301 	mvn.w	r3, #1
 801792a:	e265      	b.n	8017df8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801792c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801792e:	3301      	adds	r3, #1
 8017930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017932:	8952      	ldrh	r2, [r2, #10]
 8017934:	4293      	cmp	r3, r2
 8017936:	da07      	bge.n	8017948 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8017938:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801793a:	3301      	adds	r3, #1
 801793c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801793e:	4413      	add	r3, r2
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017946:	e00b      	b.n	8017960 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d004      	beq.n	801795a <dhcp_parse_reply+0xde>
 8017950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	e000      	b.n	801795c <dhcp_parse_reply+0xe0>
 801795a:	2300      	movs	r3, #0
 801795c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8017968:	7dfb      	ldrb	r3, [r7, #23]
 801796a:	2b3b      	cmp	r3, #59	; 0x3b
 801796c:	f200 812d 	bhi.w	8017bca <dhcp_parse_reply+0x34e>
 8017970:	a201      	add	r2, pc, #4	; (adr r2, 8017978 <dhcp_parse_reply+0xfc>)
 8017972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017976:	bf00      	nop
 8017978:	08017a69 	.word	0x08017a69
 801797c:	08017a79 	.word	0x08017a79
 8017980:	08017bcb 	.word	0x08017bcb
 8017984:	08017a9b 	.word	0x08017a9b
 8017988:	08017bcb 	.word	0x08017bcb
 801798c:	08017bcb 	.word	0x08017bcb
 8017990:	08017bcb 	.word	0x08017bcb
 8017994:	08017bcb 	.word	0x08017bcb
 8017998:	08017bcb 	.word	0x08017bcb
 801799c:	08017bcb 	.word	0x08017bcb
 80179a0:	08017bcb 	.word	0x08017bcb
 80179a4:	08017bcb 	.word	0x08017bcb
 80179a8:	08017bcb 	.word	0x08017bcb
 80179ac:	08017bcb 	.word	0x08017bcb
 80179b0:	08017bcb 	.word	0x08017bcb
 80179b4:	08017bcb 	.word	0x08017bcb
 80179b8:	08017bcb 	.word	0x08017bcb
 80179bc:	08017bcb 	.word	0x08017bcb
 80179c0:	08017bcb 	.word	0x08017bcb
 80179c4:	08017bcb 	.word	0x08017bcb
 80179c8:	08017bcb 	.word	0x08017bcb
 80179cc:	08017bcb 	.word	0x08017bcb
 80179d0:	08017bcb 	.word	0x08017bcb
 80179d4:	08017bcb 	.word	0x08017bcb
 80179d8:	08017bcb 	.word	0x08017bcb
 80179dc:	08017bcb 	.word	0x08017bcb
 80179e0:	08017bcb 	.word	0x08017bcb
 80179e4:	08017bcb 	.word	0x08017bcb
 80179e8:	08017bcb 	.word	0x08017bcb
 80179ec:	08017bcb 	.word	0x08017bcb
 80179f0:	08017bcb 	.word	0x08017bcb
 80179f4:	08017bcb 	.word	0x08017bcb
 80179f8:	08017bcb 	.word	0x08017bcb
 80179fc:	08017bcb 	.word	0x08017bcb
 8017a00:	08017bcb 	.word	0x08017bcb
 8017a04:	08017bcb 	.word	0x08017bcb
 8017a08:	08017bcb 	.word	0x08017bcb
 8017a0c:	08017bcb 	.word	0x08017bcb
 8017a10:	08017bcb 	.word	0x08017bcb
 8017a14:	08017bcb 	.word	0x08017bcb
 8017a18:	08017bcb 	.word	0x08017bcb
 8017a1c:	08017bcb 	.word	0x08017bcb
 8017a20:	08017bcb 	.word	0x08017bcb
 8017a24:	08017bcb 	.word	0x08017bcb
 8017a28:	08017bcb 	.word	0x08017bcb
 8017a2c:	08017bcb 	.word	0x08017bcb
 8017a30:	08017bcb 	.word	0x08017bcb
 8017a34:	08017bcb 	.word	0x08017bcb
 8017a38:	08017bcb 	.word	0x08017bcb
 8017a3c:	08017bcb 	.word	0x08017bcb
 8017a40:	08017bcb 	.word	0x08017bcb
 8017a44:	08017ac7 	.word	0x08017ac7
 8017a48:	08017ae9 	.word	0x08017ae9
 8017a4c:	08017b25 	.word	0x08017b25
 8017a50:	08017b47 	.word	0x08017b47
 8017a54:	08017bcb 	.word	0x08017bcb
 8017a58:	08017bcb 	.word	0x08017bcb
 8017a5c:	08017bcb 	.word	0x08017bcb
 8017a60:	08017b69 	.word	0x08017b69
 8017a64:	08017ba9 	.word	0x08017ba9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8017a76:	e0ac      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a7c:	2b04      	cmp	r3, #4
 8017a7e:	d009      	beq.n	8017a94 <dhcp_parse_reply+0x218>
 8017a80:	4b43      	ldr	r3, [pc, #268]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017a82:	f240 622e 	movw	r2, #1582	; 0x62e
 8017a86:	4943      	ldr	r1, [pc, #268]	; (8017b94 <dhcp_parse_reply+0x318>)
 8017a88:	4843      	ldr	r0, [pc, #268]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017a8a:	f003 fa49 	bl	801af20 <iprintf>
 8017a8e:	f06f 0305 	mvn.w	r3, #5
 8017a92:	e1b1      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017a94:	2306      	movs	r3, #6
 8017a96:	623b      	str	r3, [r7, #32]
        break;
 8017a98:	e09b      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017a9a:	2304      	movs	r3, #4
 8017a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017aa0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d209      	bcs.n	8017ac0 <dhcp_parse_reply+0x244>
 8017aac:	4b38      	ldr	r3, [pc, #224]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017aae:	f240 6233 	movw	r2, #1587	; 0x633
 8017ab2:	493a      	ldr	r1, [pc, #232]	; (8017b9c <dhcp_parse_reply+0x320>)
 8017ab4:	4838      	ldr	r0, [pc, #224]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017ab6:	f003 fa33 	bl	801af20 <iprintf>
 8017aba:	f06f 0305 	mvn.w	r3, #5
 8017abe:	e19b      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017ac0:	2307      	movs	r3, #7
 8017ac2:	623b      	str	r3, [r7, #32]
        break;
 8017ac4:	e085      	b.n	8017bd2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aca:	2b04      	cmp	r3, #4
 8017acc:	d009      	beq.n	8017ae2 <dhcp_parse_reply+0x266>
 8017ace:	4b30      	ldr	r3, [pc, #192]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017ad0:	f240 6241 	movw	r2, #1601	; 0x641
 8017ad4:	492f      	ldr	r1, [pc, #188]	; (8017b94 <dhcp_parse_reply+0x318>)
 8017ad6:	4830      	ldr	r0, [pc, #192]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017ad8:	f003 fa22 	bl	801af20 <iprintf>
 8017adc:	f06f 0305 	mvn.w	r3, #5
 8017ae0:	e18a      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017ae2:	2303      	movs	r3, #3
 8017ae4:	623b      	str	r3, [r7, #32]
        break;
 8017ae6:	e074      	b.n	8017bd2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d009      	beq.n	8017b04 <dhcp_parse_reply+0x288>
 8017af0:	4b27      	ldr	r3, [pc, #156]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017af2:	f240 624f 	movw	r2, #1615	; 0x64f
 8017af6:	492a      	ldr	r1, [pc, #168]	; (8017ba0 <dhcp_parse_reply+0x324>)
 8017af8:	4827      	ldr	r0, [pc, #156]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017afa:	f003 fa11 	bl	801af20 <iprintf>
 8017afe:	f06f 0305 	mvn.w	r3, #5
 8017b02:	e179      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017b04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017b06:	2bf0      	cmp	r3, #240	; 0xf0
 8017b08:	d009      	beq.n	8017b1e <dhcp_parse_reply+0x2a2>
 8017b0a:	4b21      	ldr	r3, [pc, #132]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017b0c:	f240 6251 	movw	r2, #1617	; 0x651
 8017b10:	4924      	ldr	r1, [pc, #144]	; (8017ba4 <dhcp_parse_reply+0x328>)
 8017b12:	4821      	ldr	r0, [pc, #132]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017b14:	f003 fa04 	bl	801af20 <iprintf>
 8017b18:	f06f 0305 	mvn.w	r3, #5
 8017b1c:	e16c      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	623b      	str	r3, [r7, #32]
        break;
 8017b22:	e056      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d009      	beq.n	8017b40 <dhcp_parse_reply+0x2c4>
 8017b2c:	4b18      	ldr	r3, [pc, #96]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017b2e:	f240 6255 	movw	r2, #1621	; 0x655
 8017b32:	491b      	ldr	r1, [pc, #108]	; (8017ba0 <dhcp_parse_reply+0x324>)
 8017b34:	4818      	ldr	r0, [pc, #96]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017b36:	f003 f9f3 	bl	801af20 <iprintf>
 8017b3a:	f06f 0305 	mvn.w	r3, #5
 8017b3e:	e15b      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017b40:	2301      	movs	r3, #1
 8017b42:	623b      	str	r3, [r7, #32]
        break;
 8017b44:	e045      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b4a:	2b04      	cmp	r3, #4
 8017b4c:	d009      	beq.n	8017b62 <dhcp_parse_reply+0x2e6>
 8017b4e:	4b10      	ldr	r3, [pc, #64]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017b50:	f240 6259 	movw	r2, #1625	; 0x659
 8017b54:	490f      	ldr	r1, [pc, #60]	; (8017b94 <dhcp_parse_reply+0x318>)
 8017b56:	4810      	ldr	r0, [pc, #64]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017b58:	f003 f9e2 	bl	801af20 <iprintf>
 8017b5c:	f06f 0305 	mvn.w	r3, #5
 8017b60:	e14a      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017b62:	2302      	movs	r3, #2
 8017b64:	623b      	str	r3, [r7, #32]
        break;
 8017b66:	e034      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b6c:	2b04      	cmp	r3, #4
 8017b6e:	d009      	beq.n	8017b84 <dhcp_parse_reply+0x308>
 8017b70:	4b07      	ldr	r3, [pc, #28]	; (8017b90 <dhcp_parse_reply+0x314>)
 8017b72:	f240 625d 	movw	r2, #1629	; 0x65d
 8017b76:	4907      	ldr	r1, [pc, #28]	; (8017b94 <dhcp_parse_reply+0x318>)
 8017b78:	4807      	ldr	r0, [pc, #28]	; (8017b98 <dhcp_parse_reply+0x31c>)
 8017b7a:	f003 f9d1 	bl	801af20 <iprintf>
 8017b7e:	f06f 0305 	mvn.w	r3, #5
 8017b82:	e139      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017b84:	2304      	movs	r3, #4
 8017b86:	623b      	str	r3, [r7, #32]
        break;
 8017b88:	e023      	b.n	8017bd2 <dhcp_parse_reply+0x356>
 8017b8a:	bf00      	nop
 8017b8c:	2400d730 	.word	0x2400d730
 8017b90:	0801ec78 	.word	0x0801ec78
 8017b94:	0801ef00 	.word	0x0801ef00
 8017b98:	0801ecd8 	.word	0x0801ecd8
 8017b9c:	0801ef0c 	.word	0x0801ef0c
 8017ba0:	0801ef20 	.word	0x0801ef20
 8017ba4:	0801ef2c 	.word	0x0801ef2c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bac:	2b04      	cmp	r3, #4
 8017bae:	d009      	beq.n	8017bc4 <dhcp_parse_reply+0x348>
 8017bb0:	4b93      	ldr	r3, [pc, #588]	; (8017e00 <dhcp_parse_reply+0x584>)
 8017bb2:	f240 6261 	movw	r2, #1633	; 0x661
 8017bb6:	4993      	ldr	r1, [pc, #588]	; (8017e04 <dhcp_parse_reply+0x588>)
 8017bb8:	4893      	ldr	r0, [pc, #588]	; (8017e08 <dhcp_parse_reply+0x58c>)
 8017bba:	f003 f9b1 	bl	801af20 <iprintf>
 8017bbe:	f06f 0305 	mvn.w	r3, #5
 8017bc2:	e119      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017bc4:	2305      	movs	r3, #5
 8017bc6:	623b      	str	r3, [r7, #32]
        break;
 8017bc8:	e003      	b.n	8017bd2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8017bca:	2300      	movs	r3, #0
 8017bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017bd0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017bd2:	7dfb      	ldrb	r3, [r7, #23]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d103      	bne.n	8017be0 <dhcp_parse_reply+0x364>
      offset++;
 8017bd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bda:	3301      	adds	r3, #1
 8017bdc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017bde:	e0a1      	b.n	8017d24 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017be0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017be6:	4413      	add	r3, r2
 8017be8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017bec:	4293      	cmp	r3, r2
 8017bee:	dd02      	ble.n	8017bf6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8017bf0:	f06f 0301 	mvn.w	r3, #1
 8017bf4:	e100      	b.n	8017df8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8017bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bfa:	b29a      	uxth	r2, r3
 8017bfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bfe:	4413      	add	r3, r2
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	3302      	adds	r3, #2
 8017c04:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017c06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	f000 808a 	beq.w	8017d24 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8017c10:	2300      	movs	r3, #0
 8017c12:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017c14:	6a3b      	ldr	r3, [r7, #32]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	db02      	blt.n	8017c20 <dhcp_parse_reply+0x3a4>
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	2b07      	cmp	r3, #7
 8017c1e:	dd06      	ble.n	8017c2e <dhcp_parse_reply+0x3b2>
 8017c20:	4b77      	ldr	r3, [pc, #476]	; (8017e00 <dhcp_parse_reply+0x584>)
 8017c22:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017c26:	4979      	ldr	r1, [pc, #484]	; (8017e0c <dhcp_parse_reply+0x590>)
 8017c28:	4877      	ldr	r0, [pc, #476]	; (8017e08 <dhcp_parse_reply+0x58c>)
 8017c2a:	f003 f979 	bl	801af20 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017c2e:	4a78      	ldr	r2, [pc, #480]	; (8017e10 <dhcp_parse_reply+0x594>)
 8017c30:	6a3b      	ldr	r3, [r7, #32]
 8017c32:	4413      	add	r3, r2
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d174      	bne.n	8017d24 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8017c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c3e:	2b04      	cmp	r3, #4
 8017c40:	bf28      	it	cs
 8017c42:	2304      	movcs	r3, #4
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017c48:	8bfb      	ldrh	r3, [r7, #30]
 8017c4a:	8aba      	ldrh	r2, [r7, #20]
 8017c4c:	f107 0108 	add.w	r1, r7, #8
 8017c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c52:	f7f7 fd1d 	bl	800f690 <pbuf_copy_partial>
 8017c56:	4603      	mov	r3, r0
 8017c58:	461a      	mov	r2, r3
 8017c5a:	8abb      	ldrh	r3, [r7, #20]
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	d002      	beq.n	8017c66 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8017c60:	f06f 0301 	mvn.w	r3, #1
 8017c64:	e0c8      	b.n	8017df8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8017c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c6a:	2b04      	cmp	r3, #4
 8017c6c:	d933      	bls.n	8017cd6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c72:	f003 0303 	and.w	r3, r3, #3
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d009      	beq.n	8017c90 <dhcp_parse_reply+0x414>
 8017c7c:	4b60      	ldr	r3, [pc, #384]	; (8017e00 <dhcp_parse_reply+0x584>)
 8017c7e:	f240 6281 	movw	r2, #1665	; 0x681
 8017c82:	4964      	ldr	r1, [pc, #400]	; (8017e14 <dhcp_parse_reply+0x598>)
 8017c84:	4860      	ldr	r0, [pc, #384]	; (8017e08 <dhcp_parse_reply+0x58c>)
 8017c86:	f003 f94b 	bl	801af20 <iprintf>
 8017c8a:	f06f 0305 	mvn.w	r3, #5
 8017c8e:	e0b3      	b.n	8017df8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8017c90:	4a5f      	ldr	r2, [pc, #380]	; (8017e10 <dhcp_parse_reply+0x594>)
 8017c92:	6a3b      	ldr	r3, [r7, #32]
 8017c94:	4413      	add	r3, r2
 8017c96:	2201      	movs	r2, #1
 8017c98:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7f5 fe50 	bl	800d942 <lwip_htonl>
 8017ca2:	4602      	mov	r2, r0
 8017ca4:	495c      	ldr	r1, [pc, #368]	; (8017e18 <dhcp_parse_reply+0x59c>)
 8017ca6:	6a3b      	ldr	r3, [r7, #32]
 8017ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cb0:	3b04      	subs	r3, #4
 8017cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017cb6:	8bfb      	ldrh	r3, [r7, #30]
 8017cb8:	3304      	adds	r3, #4
 8017cba:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8017cbc:	8a7a      	ldrh	r2, [r7, #18]
 8017cbe:	8bfb      	ldrh	r3, [r7, #30]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d202      	bcs.n	8017cca <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8017cc4:	f06f 0301 	mvn.w	r3, #1
 8017cc8:	e096      	b.n	8017df8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8017cca:	8a7b      	ldrh	r3, [r7, #18]
 8017ccc:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017cce:	6a3b      	ldr	r3, [r7, #32]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017cd4:	e79e      	b.n	8017c14 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8017cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cda:	2b04      	cmp	r3, #4
 8017cdc:	d106      	bne.n	8017cec <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8017cde:	68bb      	ldr	r3, [r7, #8]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7f5 fe2e 	bl	800d942 <lwip_htonl>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	60bb      	str	r3, [r7, #8]
 8017cea:	e011      	b.n	8017d10 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017cec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017cf0:	2b01      	cmp	r3, #1
 8017cf2:	d009      	beq.n	8017d08 <dhcp_parse_reply+0x48c>
 8017cf4:	4b42      	ldr	r3, [pc, #264]	; (8017e00 <dhcp_parse_reply+0x584>)
 8017cf6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017cfa:	4948      	ldr	r1, [pc, #288]	; (8017e1c <dhcp_parse_reply+0x5a0>)
 8017cfc:	4842      	ldr	r0, [pc, #264]	; (8017e08 <dhcp_parse_reply+0x58c>)
 8017cfe:	f003 f90f 	bl	801af20 <iprintf>
 8017d02:	f06f 0305 	mvn.w	r3, #5
 8017d06:	e077      	b.n	8017df8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8017d08:	f107 0308 	add.w	r3, r7, #8
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017d10:	4a3f      	ldr	r2, [pc, #252]	; (8017e10 <dhcp_parse_reply+0x594>)
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	4413      	add	r3, r2
 8017d16:	2201      	movs	r2, #1
 8017d18:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	493e      	ldr	r1, [pc, #248]	; (8017e18 <dhcp_parse_reply+0x59c>)
 8017d1e:	6a3b      	ldr	r3, [r7, #32]
 8017d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d26:	895b      	ldrh	r3, [r3, #10]
 8017d28:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d324      	bcc.n	8017d78 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8017d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d30:	895b      	ldrh	r3, [r3, #10]
 8017d32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d34:	1ad3      	subs	r3, r2, r3
 8017d36:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d3a:	895b      	ldrh	r3, [r3, #10]
 8017d3c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017d3e:	1ad3      	subs	r3, r2, r3
 8017d40:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017d42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d213      	bcs.n	8017d72 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8017d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d109      	bne.n	8017d6a <dhcp_parse_reply+0x4ee>
 8017d56:	4b2a      	ldr	r3, [pc, #168]	; (8017e00 <dhcp_parse_reply+0x584>)
 8017d58:	f240 629d 	movw	r2, #1693	; 0x69d
 8017d5c:	4930      	ldr	r1, [pc, #192]	; (8017e20 <dhcp_parse_reply+0x5a4>)
 8017d5e:	482a      	ldr	r0, [pc, #168]	; (8017e08 <dhcp_parse_reply+0x58c>)
 8017d60:	f003 f8de 	bl	801af20 <iprintf>
 8017d64:	f06f 0305 	mvn.w	r3, #5
 8017d68:	e046      	b.n	8017df8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8017d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017d70:	e002      	b.n	8017d78 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017d72:	f06f 0301 	mvn.w	r3, #1
 8017d76:	e03f      	b.n	8017df8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00a      	beq.n	8017d94 <dhcp_parse_reply+0x518>
 8017d7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d206      	bcs.n	8017d94 <dhcp_parse_reply+0x518>
 8017d86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017d8a:	4413      	add	r3, r2
 8017d8c:	781b      	ldrb	r3, [r3, #0]
 8017d8e:	2bff      	cmp	r3, #255	; 0xff
 8017d90:	f47f adb7 	bne.w	8017902 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017d94:	4b1e      	ldr	r3, [pc, #120]	; (8017e10 <dhcp_parse_reply+0x594>)
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d018      	beq.n	8017dce <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017d9c:	4b1e      	ldr	r3, [pc, #120]	; (8017e18 <dhcp_parse_reply+0x59c>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017da2:	4b1b      	ldr	r3, [pc, #108]	; (8017e10 <dhcp_parse_reply+0x594>)
 8017da4:	2200      	movs	r2, #0
 8017da6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d102      	bne.n	8017db4 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8017dae:	2301      	movs	r3, #1
 8017db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017db2:	e00c      	b.n	8017dce <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	2b02      	cmp	r3, #2
 8017db8:	d102      	bne.n	8017dc0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8017dba:	2301      	movs	r3, #1
 8017dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8017dbe:	e006      	b.n	8017dce <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	2b03      	cmp	r3, #3
 8017dc4:	d103      	bne.n	8017dce <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8017dc6:	2301      	movs	r3, #1
 8017dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8017dca:	2301      	movs	r3, #1
 8017dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d006      	beq.n	8017de2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8017dd8:	236c      	movs	r3, #108	; 0x6c
 8017dda:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017ddc:	23ec      	movs	r3, #236	; 0xec
 8017dde:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017de0:	e569      	b.n	80178b6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d006      	beq.n	8017df6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8017de8:	2300      	movs	r3, #0
 8017dea:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8017dec:	232c      	movs	r3, #44	; 0x2c
 8017dee:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017df0:	236c      	movs	r3, #108	; 0x6c
 8017df2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017df4:	e55f      	b.n	80178b6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017df6:	2300      	movs	r3, #0
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3740      	adds	r7, #64	; 0x40
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}
 8017e00:	0801ec78 	.word	0x0801ec78
 8017e04:	0801ef00 	.word	0x0801ef00
 8017e08:	0801ecd8 	.word	0x0801ecd8
 8017e0c:	0801ef44 	.word	0x0801ef44
 8017e10:	2400d730 	.word	0x2400d730
 8017e14:	0801ef58 	.word	0x0801ef58
 8017e18:	2400d738 	.word	0x2400d738
 8017e1c:	0801ef70 	.word	0x0801ef70
 8017e20:	0801ef84 	.word	0x0801ef84

08017e24 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b08a      	sub	sp, #40	; 0x28
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	60f8      	str	r0, [r7, #12]
 8017e2c:	60b9      	str	r1, [r7, #8]
 8017e2e:	607a      	str	r2, [r7, #4]
 8017e30:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017e32:	4b60      	ldr	r3, [pc, #384]	; (8017fb4 <dhcp_recv+0x190>)
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e3c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	685b      	ldr	r3, [r3, #4]
 8017e42:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	f000 809d 	beq.w	8017f86 <dhcp_recv+0x162>
 8017e4c:	69fb      	ldr	r3, [r7, #28]
 8017e4e:	791b      	ldrb	r3, [r3, #4]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f000 8098 	beq.w	8017f86 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	895b      	ldrh	r3, [r3, #10]
 8017e5a:	2b2b      	cmp	r3, #43	; 0x2b
 8017e5c:	f240 8095 	bls.w	8017f8a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017e60:	69bb      	ldr	r3, [r7, #24]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	2b02      	cmp	r3, #2
 8017e66:	f040 8092 	bne.w	8017f8e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e70:	e012      	b.n	8017e98 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e76:	6a3a      	ldr	r2, [r7, #32]
 8017e78:	4413      	add	r3, r2
 8017e7a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e82:	69b9      	ldr	r1, [r7, #24]
 8017e84:	440b      	add	r3, r1
 8017e86:	7f1b      	ldrb	r3, [r3, #28]
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	f040 8082 	bne.w	8017f92 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e92:	3301      	adds	r3, #1
 8017e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e98:	6a3b      	ldr	r3, [r7, #32]
 8017e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d203      	bcs.n	8017eae <dhcp_recv+0x8a>
 8017ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eaa:	2b05      	cmp	r3, #5
 8017eac:	d9e1      	bls.n	8017e72 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f7f5 fd45 	bl	800d942 <lwip_htonl>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d169      	bne.n	8017f96 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017ec2:	69f9      	ldr	r1, [r7, #28]
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7ff fcd9 	bl	801787c <dhcp_parse_reply>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d164      	bne.n	8017f9a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017ed0:	4b39      	ldr	r3, [pc, #228]	; (8017fb8 <dhcp_recv+0x194>)
 8017ed2:	785b      	ldrb	r3, [r3, #1]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d062      	beq.n	8017f9e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017ede:	4b37      	ldr	r3, [pc, #220]	; (8017fbc <dhcp_recv+0x198>)
 8017ee0:	685b      	ldr	r3, [r3, #4]
 8017ee2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017ee4:	7cfb      	ldrb	r3, [r7, #19]
 8017ee6:	2b05      	cmp	r3, #5
 8017ee8:	d12a      	bne.n	8017f40 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017eea:	69fb      	ldr	r3, [r7, #28]
 8017eec:	795b      	ldrb	r3, [r3, #5]
 8017eee:	2b01      	cmp	r3, #1
 8017ef0:	d112      	bne.n	8017f18 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017ef2:	6979      	ldr	r1, [r7, #20]
 8017ef4:	6a38      	ldr	r0, [r7, #32]
 8017ef6:	f7fe fe17 	bl	8016b28 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017efa:	6a3b      	ldr	r3, [r7, #32]
 8017efc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f00:	f003 0308 	and.w	r3, r3, #8
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d003      	beq.n	8017f10 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017f08:	6a38      	ldr	r0, [r7, #32]
 8017f0a:	f7fe fb85 	bl	8016618 <dhcp_check>
 8017f0e:	e049      	b.n	8017fa4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017f10:	6a38      	ldr	r0, [r7, #32]
 8017f12:	f7ff f867 	bl	8016fe4 <dhcp_bind>
 8017f16:	e045      	b.n	8017fa4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	795b      	ldrb	r3, [r3, #5]
 8017f1c:	2b03      	cmp	r3, #3
 8017f1e:	d007      	beq.n	8017f30 <dhcp_recv+0x10c>
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	795b      	ldrb	r3, [r3, #5]
 8017f24:	2b04      	cmp	r3, #4
 8017f26:	d003      	beq.n	8017f30 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017f2c:	2b05      	cmp	r3, #5
 8017f2e:	d139      	bne.n	8017fa4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017f30:	6979      	ldr	r1, [r7, #20]
 8017f32:	6a38      	ldr	r0, [r7, #32]
 8017f34:	f7fe fdf8 	bl	8016b28 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017f38:	6a38      	ldr	r0, [r7, #32]
 8017f3a:	f7ff f853 	bl	8016fe4 <dhcp_bind>
 8017f3e:	e031      	b.n	8017fa4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017f40:	7cfb      	ldrb	r3, [r7, #19]
 8017f42:	2b06      	cmp	r3, #6
 8017f44:	d113      	bne.n	8017f6e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017f4a:	2b03      	cmp	r3, #3
 8017f4c:	d00b      	beq.n	8017f66 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017f4e:	69fb      	ldr	r3, [r7, #28]
 8017f50:	795b      	ldrb	r3, [r3, #5]
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d007      	beq.n	8017f66 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017f5a:	2b04      	cmp	r3, #4
 8017f5c:	d003      	beq.n	8017f66 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	795b      	ldrb	r3, [r3, #5]
 8017f62:	2b05      	cmp	r3, #5
 8017f64:	d103      	bne.n	8017f6e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017f66:	6a38      	ldr	r0, [r7, #32]
 8017f68:	f7fe fb3c 	bl	80165e4 <dhcp_handle_nak>
 8017f6c:	e01a      	b.n	8017fa4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017f6e:	7cfb      	ldrb	r3, [r7, #19]
 8017f70:	2b02      	cmp	r3, #2
 8017f72:	d116      	bne.n	8017fa2 <dhcp_recv+0x17e>
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	795b      	ldrb	r3, [r3, #5]
 8017f78:	2b06      	cmp	r3, #6
 8017f7a:	d112      	bne.n	8017fa2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017f7c:	6979      	ldr	r1, [r7, #20]
 8017f7e:	6a38      	ldr	r0, [r7, #32]
 8017f80:	f7fe fb7e 	bl	8016680 <dhcp_handle_offer>
 8017f84:	e00e      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f86:	bf00      	nop
 8017f88:	e00c      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f8a:	bf00      	nop
 8017f8c:	e00a      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f8e:	bf00      	nop
 8017f90:	e008      	b.n	8017fa4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017f92:	bf00      	nop
 8017f94:	e006      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f96:	bf00      	nop
 8017f98:	e004      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f9a:	bf00      	nop
 8017f9c:	e002      	b.n	8017fa4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017f9e:	bf00      	nop
 8017fa0:	e000      	b.n	8017fa4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8017fa2:	bf00      	nop
  pbuf_free(p);
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f7f7 f96d 	bl	800f284 <pbuf_free>
}
 8017faa:	bf00      	nop
 8017fac:	3728      	adds	r7, #40	; 0x28
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	2400a634 	.word	0x2400a634
 8017fb8:	2400d730 	.word	0x2400d730
 8017fbc:	2400d738 	.word	0x2400d738

08017fc0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b088      	sub	sp, #32
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	60f8      	str	r0, [r7, #12]
 8017fc8:	60b9      	str	r1, [r7, #8]
 8017fca:	603b      	str	r3, [r7, #0]
 8017fcc:	4613      	mov	r3, r2
 8017fce:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d108      	bne.n	8017fe8 <dhcp_create_msg+0x28>
 8017fd6:	4b5f      	ldr	r3, [pc, #380]	; (8018154 <dhcp_create_msg+0x194>)
 8017fd8:	f240 7269 	movw	r2, #1897	; 0x769
 8017fdc:	495e      	ldr	r1, [pc, #376]	; (8018158 <dhcp_create_msg+0x198>)
 8017fde:	485f      	ldr	r0, [pc, #380]	; (801815c <dhcp_create_msg+0x19c>)
 8017fe0:	f002 ff9e 	bl	801af20 <iprintf>
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	e0b1      	b.n	801814c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d108      	bne.n	8018000 <dhcp_create_msg+0x40>
 8017fee:	4b59      	ldr	r3, [pc, #356]	; (8018154 <dhcp_create_msg+0x194>)
 8017ff0:	f240 726a 	movw	r2, #1898	; 0x76a
 8017ff4:	495a      	ldr	r1, [pc, #360]	; (8018160 <dhcp_create_msg+0x1a0>)
 8017ff6:	4859      	ldr	r0, [pc, #356]	; (801815c <dhcp_create_msg+0x19c>)
 8017ff8:	f002 ff92 	bl	801af20 <iprintf>
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	e0a5      	b.n	801814c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018000:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018004:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018008:	2036      	movs	r0, #54	; 0x36
 801800a:	f7f6 fe57 	bl	800ecbc <pbuf_alloc>
 801800e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018010:	69bb      	ldr	r3, [r7, #24]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d101      	bne.n	801801a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018016:	2300      	movs	r3, #0
 8018018:	e098      	b.n	801814c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	895b      	ldrh	r3, [r3, #10]
 801801e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018022:	d206      	bcs.n	8018032 <dhcp_create_msg+0x72>
 8018024:	4b4b      	ldr	r3, [pc, #300]	; (8018154 <dhcp_create_msg+0x194>)
 8018026:	f240 7271 	movw	r2, #1905	; 0x771
 801802a:	494e      	ldr	r1, [pc, #312]	; (8018164 <dhcp_create_msg+0x1a4>)
 801802c:	484b      	ldr	r0, [pc, #300]	; (801815c <dhcp_create_msg+0x19c>)
 801802e:	f002 ff77 	bl	801af20 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018032:	79fb      	ldrb	r3, [r7, #7]
 8018034:	2b03      	cmp	r3, #3
 8018036:	d103      	bne.n	8018040 <dhcp_create_msg+0x80>
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	795b      	ldrb	r3, [r3, #5]
 801803c:	2b03      	cmp	r3, #3
 801803e:	d10d      	bne.n	801805c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	799b      	ldrb	r3, [r3, #6]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d105      	bne.n	8018054 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018048:	f002 ff82 	bl	801af50 <rand>
 801804c:	4603      	mov	r3, r0
 801804e:	461a      	mov	r2, r3
 8018050:	4b45      	ldr	r3, [pc, #276]	; (8018168 <dhcp_create_msg+0x1a8>)
 8018052:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018054:	4b44      	ldr	r3, [pc, #272]	; (8018168 <dhcp_create_msg+0x1a8>)
 8018056:	681a      	ldr	r2, [r3, #0]
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801805c:	69bb      	ldr	r3, [r7, #24]
 801805e:	685b      	ldr	r3, [r3, #4]
 8018060:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018062:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018066:	2100      	movs	r1, #0
 8018068:	6978      	ldr	r0, [r7, #20]
 801806a:	f002 fef6 	bl	801ae5a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	2201      	movs	r2, #1
 8018072:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	2201      	movs	r2, #1
 8018078:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	4618      	mov	r0, r3
 801808a:	f7f5 fc5a 	bl	800d942 <lwip_htonl>
 801808e:	4602      	mov	r2, r0
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018094:	79fb      	ldrb	r3, [r7, #7]
 8018096:	2b08      	cmp	r3, #8
 8018098:	d010      	beq.n	80180bc <dhcp_create_msg+0xfc>
 801809a:	79fb      	ldrb	r3, [r7, #7]
 801809c:	2b04      	cmp	r3, #4
 801809e:	d00d      	beq.n	80180bc <dhcp_create_msg+0xfc>
 80180a0:	79fb      	ldrb	r3, [r7, #7]
 80180a2:	2b07      	cmp	r3, #7
 80180a4:	d00a      	beq.n	80180bc <dhcp_create_msg+0xfc>
 80180a6:	79fb      	ldrb	r3, [r7, #7]
 80180a8:	2b03      	cmp	r3, #3
 80180aa:	d10c      	bne.n	80180c6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80180b0:	2b05      	cmp	r3, #5
 80180b2:	d003      	beq.n	80180bc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	795b      	ldrb	r3, [r3, #5]
 80180b8:	2b04      	cmp	r3, #4
 80180ba:	d104      	bne.n	80180c6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	3304      	adds	r3, #4
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80180c6:	2300      	movs	r3, #0
 80180c8:	83fb      	strh	r3, [r7, #30]
 80180ca:	e00c      	b.n	80180e6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80180cc:	8bfa      	ldrh	r2, [r7, #30]
 80180ce:	8bfb      	ldrh	r3, [r7, #30]
 80180d0:	68f9      	ldr	r1, [r7, #12]
 80180d2:	440a      	add	r2, r1
 80180d4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80180d8:	697a      	ldr	r2, [r7, #20]
 80180da:	4413      	add	r3, r2
 80180dc:	460a      	mov	r2, r1
 80180de:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80180e0:	8bfb      	ldrh	r3, [r7, #30]
 80180e2:	3301      	adds	r3, #1
 80180e4:	83fb      	strh	r3, [r7, #30]
 80180e6:	8bfb      	ldrh	r3, [r7, #30]
 80180e8:	2b05      	cmp	r3, #5
 80180ea:	d9ef      	bls.n	80180cc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	2200      	movs	r2, #0
 80180f0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80180f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80180f8:	2200      	movs	r2, #0
 80180fa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80180fe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018102:	2200      	movs	r2, #0
 8018104:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018108:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801810c:	2200      	movs	r2, #0
 801810e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018112:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018116:	697b      	ldr	r3, [r7, #20]
 8018118:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801811c:	2301      	movs	r3, #1
 801811e:	2235      	movs	r2, #53	; 0x35
 8018120:	2000      	movs	r0, #0
 8018122:	f7ff fadb 	bl	80176dc <dhcp_option>
 8018126:	4603      	mov	r3, r0
 8018128:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018130:	79fa      	ldrb	r2, [r7, #7]
 8018132:	8a7b      	ldrh	r3, [r7, #18]
 8018134:	4618      	mov	r0, r3
 8018136:	f7ff fb05 	bl	8017744 <dhcp_option_byte>
 801813a:	4603      	mov	r3, r0
 801813c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d002      	beq.n	801814a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	8a7a      	ldrh	r2, [r7, #18]
 8018148:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801814a:	69bb      	ldr	r3, [r7, #24]
}
 801814c:	4618      	mov	r0, r3
 801814e:	3720      	adds	r7, #32
 8018150:	46bd      	mov	sp, r7
 8018152:	bd80      	pop	{r7, pc}
 8018154:	0801ec78 	.word	0x0801ec78
 8018158:	0801ef98 	.word	0x0801ef98
 801815c:	0801ecd8 	.word	0x0801ecd8
 8018160:	0801efb8 	.word	0x0801efb8
 8018164:	0801efd8 	.word	0x0801efd8
 8018168:	24009df8 	.word	0x24009df8

0801816c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	4603      	mov	r3, r0
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801817a:	89fb      	ldrh	r3, [r7, #14]
 801817c:	1c5a      	adds	r2, r3, #1
 801817e:	81fa      	strh	r2, [r7, #14]
 8018180:	461a      	mov	r2, r3
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	4413      	add	r3, r2
 8018186:	22ff      	movs	r2, #255	; 0xff
 8018188:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801818a:	e007      	b.n	801819c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801818c:	89fb      	ldrh	r3, [r7, #14]
 801818e:	1c5a      	adds	r2, r3, #1
 8018190:	81fa      	strh	r2, [r7, #14]
 8018192:	461a      	mov	r2, r3
 8018194:	68bb      	ldr	r3, [r7, #8]
 8018196:	4413      	add	r3, r2
 8018198:	2200      	movs	r2, #0
 801819a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801819c:	89fb      	ldrh	r3, [r7, #14]
 801819e:	2b43      	cmp	r3, #67	; 0x43
 80181a0:	d904      	bls.n	80181ac <dhcp_option_trailer+0x40>
 80181a2:	89fb      	ldrh	r3, [r7, #14]
 80181a4:	f003 0303 	and.w	r3, r3, #3
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d002      	beq.n	80181b2 <dhcp_option_trailer+0x46>
 80181ac:	89fb      	ldrh	r3, [r7, #14]
 80181ae:	2b43      	cmp	r3, #67	; 0x43
 80181b0:	d9ec      	bls.n	801818c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80181b2:	89fb      	ldrh	r3, [r7, #14]
 80181b4:	33f0      	adds	r3, #240	; 0xf0
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	4619      	mov	r1, r3
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7f6 fedc 	bl	800ef78 <pbuf_realloc>
}
 80181c0:	bf00      	nop
 80181c2:	3710      	adds	r7, #16
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}

080181c8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80181c8:	b480      	push	{r7}
 80181ca:	b085      	sub	sp, #20
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d017      	beq.n	8018206 <dhcp_supplied_address+0x3e>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d013      	beq.n	8018206 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181e2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	795b      	ldrb	r3, [r3, #5]
 80181e8:	2b0a      	cmp	r3, #10
 80181ea:	d007      	beq.n	80181fc <dhcp_supplied_address+0x34>
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	795b      	ldrb	r3, [r3, #5]
 80181f0:	2b05      	cmp	r3, #5
 80181f2:	d003      	beq.n	80181fc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80181f8:	2b04      	cmp	r3, #4
 80181fa:	d101      	bne.n	8018200 <dhcp_supplied_address+0x38>
 80181fc:	2301      	movs	r3, #1
 80181fe:	e000      	b.n	8018202 <dhcp_supplied_address+0x3a>
 8018200:	2300      	movs	r3, #0
 8018202:	b2db      	uxtb	r3, r3
 8018204:	e000      	b.n	8018208 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018206:	2300      	movs	r3, #0
}
 8018208:	4618      	mov	r0, r3
 801820a:	3714      	adds	r7, #20
 801820c:	46bd      	mov	sp, r7
 801820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018212:	4770      	bx	lr

08018214 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801821c:	4915      	ldr	r1, [pc, #84]	; (8018274 <etharp_free_entry+0x60>)
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	4613      	mov	r3, r2
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	4413      	add	r3, r2
 8018226:	00db      	lsls	r3, r3, #3
 8018228:	440b      	add	r3, r1
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d013      	beq.n	8018258 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018230:	4910      	ldr	r1, [pc, #64]	; (8018274 <etharp_free_entry+0x60>)
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	4613      	mov	r3, r2
 8018236:	005b      	lsls	r3, r3, #1
 8018238:	4413      	add	r3, r2
 801823a:	00db      	lsls	r3, r3, #3
 801823c:	440b      	add	r3, r1
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4618      	mov	r0, r3
 8018242:	f7f7 f81f 	bl	800f284 <pbuf_free>
    arp_table[i].q = NULL;
 8018246:	490b      	ldr	r1, [pc, #44]	; (8018274 <etharp_free_entry+0x60>)
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	4613      	mov	r3, r2
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	4413      	add	r3, r2
 8018250:	00db      	lsls	r3, r3, #3
 8018252:	440b      	add	r3, r1
 8018254:	2200      	movs	r2, #0
 8018256:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018258:	4906      	ldr	r1, [pc, #24]	; (8018274 <etharp_free_entry+0x60>)
 801825a:	687a      	ldr	r2, [r7, #4]
 801825c:	4613      	mov	r3, r2
 801825e:	005b      	lsls	r3, r3, #1
 8018260:	4413      	add	r3, r2
 8018262:	00db      	lsls	r3, r3, #3
 8018264:	440b      	add	r3, r1
 8018266:	3314      	adds	r3, #20
 8018268:	2200      	movs	r2, #0
 801826a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801826c:	bf00      	nop
 801826e:	3708      	adds	r7, #8
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	24009dfc 	.word	0x24009dfc

08018278 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801827e:	2300      	movs	r3, #0
 8018280:	607b      	str	r3, [r7, #4]
 8018282:	e096      	b.n	80183b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018284:	494f      	ldr	r1, [pc, #316]	; (80183c4 <etharp_tmr+0x14c>)
 8018286:	687a      	ldr	r2, [r7, #4]
 8018288:	4613      	mov	r3, r2
 801828a:	005b      	lsls	r3, r3, #1
 801828c:	4413      	add	r3, r2
 801828e:	00db      	lsls	r3, r3, #3
 8018290:	440b      	add	r3, r1
 8018292:	3314      	adds	r3, #20
 8018294:	781b      	ldrb	r3, [r3, #0]
 8018296:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018298:	78fb      	ldrb	r3, [r7, #3]
 801829a:	2b00      	cmp	r3, #0
 801829c:	f000 8086 	beq.w	80183ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80182a0:	4948      	ldr	r1, [pc, #288]	; (80183c4 <etharp_tmr+0x14c>)
 80182a2:	687a      	ldr	r2, [r7, #4]
 80182a4:	4613      	mov	r3, r2
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	4413      	add	r3, r2
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	440b      	add	r3, r1
 80182ae:	3312      	adds	r3, #18
 80182b0:	881b      	ldrh	r3, [r3, #0]
 80182b2:	3301      	adds	r3, #1
 80182b4:	b298      	uxth	r0, r3
 80182b6:	4943      	ldr	r1, [pc, #268]	; (80183c4 <etharp_tmr+0x14c>)
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	3312      	adds	r3, #18
 80182c6:	4602      	mov	r2, r0
 80182c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80182ca:	493e      	ldr	r1, [pc, #248]	; (80183c4 <etharp_tmr+0x14c>)
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	4613      	mov	r3, r2
 80182d0:	005b      	lsls	r3, r3, #1
 80182d2:	4413      	add	r3, r2
 80182d4:	00db      	lsls	r3, r3, #3
 80182d6:	440b      	add	r3, r1
 80182d8:	3312      	adds	r3, #18
 80182da:	881b      	ldrh	r3, [r3, #0]
 80182dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80182e0:	d215      	bcs.n	801830e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80182e2:	4938      	ldr	r1, [pc, #224]	; (80183c4 <etharp_tmr+0x14c>)
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	4613      	mov	r3, r2
 80182e8:	005b      	lsls	r3, r3, #1
 80182ea:	4413      	add	r3, r2
 80182ec:	00db      	lsls	r3, r3, #3
 80182ee:	440b      	add	r3, r1
 80182f0:	3314      	adds	r3, #20
 80182f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80182f4:	2b01      	cmp	r3, #1
 80182f6:	d10e      	bne.n	8018316 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80182f8:	4932      	ldr	r1, [pc, #200]	; (80183c4 <etharp_tmr+0x14c>)
 80182fa:	687a      	ldr	r2, [r7, #4]
 80182fc:	4613      	mov	r3, r2
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	440b      	add	r3, r1
 8018306:	3312      	adds	r3, #18
 8018308:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801830a:	2b04      	cmp	r3, #4
 801830c:	d903      	bls.n	8018316 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7ff ff80 	bl	8018214 <etharp_free_entry>
 8018314:	e04a      	b.n	80183ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018316:	492b      	ldr	r1, [pc, #172]	; (80183c4 <etharp_tmr+0x14c>)
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	4613      	mov	r3, r2
 801831c:	005b      	lsls	r3, r3, #1
 801831e:	4413      	add	r3, r2
 8018320:	00db      	lsls	r3, r3, #3
 8018322:	440b      	add	r3, r1
 8018324:	3314      	adds	r3, #20
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	2b03      	cmp	r3, #3
 801832a:	d10a      	bne.n	8018342 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801832c:	4925      	ldr	r1, [pc, #148]	; (80183c4 <etharp_tmr+0x14c>)
 801832e:	687a      	ldr	r2, [r7, #4]
 8018330:	4613      	mov	r3, r2
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	4413      	add	r3, r2
 8018336:	00db      	lsls	r3, r3, #3
 8018338:	440b      	add	r3, r1
 801833a:	3314      	adds	r3, #20
 801833c:	2204      	movs	r2, #4
 801833e:	701a      	strb	r2, [r3, #0]
 8018340:	e034      	b.n	80183ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018342:	4920      	ldr	r1, [pc, #128]	; (80183c4 <etharp_tmr+0x14c>)
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	4613      	mov	r3, r2
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	4413      	add	r3, r2
 801834c:	00db      	lsls	r3, r3, #3
 801834e:	440b      	add	r3, r1
 8018350:	3314      	adds	r3, #20
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	2b04      	cmp	r3, #4
 8018356:	d10a      	bne.n	801836e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018358:	491a      	ldr	r1, [pc, #104]	; (80183c4 <etharp_tmr+0x14c>)
 801835a:	687a      	ldr	r2, [r7, #4]
 801835c:	4613      	mov	r3, r2
 801835e:	005b      	lsls	r3, r3, #1
 8018360:	4413      	add	r3, r2
 8018362:	00db      	lsls	r3, r3, #3
 8018364:	440b      	add	r3, r1
 8018366:	3314      	adds	r3, #20
 8018368:	2202      	movs	r2, #2
 801836a:	701a      	strb	r2, [r3, #0]
 801836c:	e01e      	b.n	80183ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801836e:	4915      	ldr	r1, [pc, #84]	; (80183c4 <etharp_tmr+0x14c>)
 8018370:	687a      	ldr	r2, [r7, #4]
 8018372:	4613      	mov	r3, r2
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	4413      	add	r3, r2
 8018378:	00db      	lsls	r3, r3, #3
 801837a:	440b      	add	r3, r1
 801837c:	3314      	adds	r3, #20
 801837e:	781b      	ldrb	r3, [r3, #0]
 8018380:	2b01      	cmp	r3, #1
 8018382:	d113      	bne.n	80183ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018384:	490f      	ldr	r1, [pc, #60]	; (80183c4 <etharp_tmr+0x14c>)
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	4613      	mov	r3, r2
 801838a:	005b      	lsls	r3, r3, #1
 801838c:	4413      	add	r3, r2
 801838e:	00db      	lsls	r3, r3, #3
 8018390:	440b      	add	r3, r1
 8018392:	3308      	adds	r3, #8
 8018394:	6818      	ldr	r0, [r3, #0]
 8018396:	687a      	ldr	r2, [r7, #4]
 8018398:	4613      	mov	r3, r2
 801839a:	005b      	lsls	r3, r3, #1
 801839c:	4413      	add	r3, r2
 801839e:	00db      	lsls	r3, r3, #3
 80183a0:	4a08      	ldr	r2, [pc, #32]	; (80183c4 <etharp_tmr+0x14c>)
 80183a2:	4413      	add	r3, r2
 80183a4:	3304      	adds	r3, #4
 80183a6:	4619      	mov	r1, r3
 80183a8:	f000 fe72 	bl	8019090 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	3301      	adds	r3, #1
 80183b0:	607b      	str	r3, [r7, #4]
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	2b09      	cmp	r3, #9
 80183b6:	f77f af65 	ble.w	8018284 <etharp_tmr+0xc>
      }
    }
  }
}
 80183ba:	bf00      	nop
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	24009dfc 	.word	0x24009dfc

080183c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b08a      	sub	sp, #40	; 0x28
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	460b      	mov	r3, r1
 80183d2:	607a      	str	r2, [r7, #4]
 80183d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80183d6:	230a      	movs	r3, #10
 80183d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80183da:	230a      	movs	r3, #10
 80183dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80183de:	230a      	movs	r3, #10
 80183e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80183e2:	2300      	movs	r3, #0
 80183e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80183e6:	230a      	movs	r3, #10
 80183e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80183ea:	2300      	movs	r3, #0
 80183ec:	83bb      	strh	r3, [r7, #28]
 80183ee:	2300      	movs	r3, #0
 80183f0:	837b      	strh	r3, [r7, #26]
 80183f2:	2300      	movs	r3, #0
 80183f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183f6:	2300      	movs	r3, #0
 80183f8:	843b      	strh	r3, [r7, #32]
 80183fa:	e0ae      	b.n	801855a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80183fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018400:	49a6      	ldr	r1, [pc, #664]	; (801869c <etharp_find_entry+0x2d4>)
 8018402:	4613      	mov	r3, r2
 8018404:	005b      	lsls	r3, r3, #1
 8018406:	4413      	add	r3, r2
 8018408:	00db      	lsls	r3, r3, #3
 801840a:	440b      	add	r3, r1
 801840c:	3314      	adds	r3, #20
 801840e:	781b      	ldrb	r3, [r3, #0]
 8018410:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018412:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018416:	2b0a      	cmp	r3, #10
 8018418:	d105      	bne.n	8018426 <etharp_find_entry+0x5e>
 801841a:	7dfb      	ldrb	r3, [r7, #23]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d102      	bne.n	8018426 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018420:	8c3b      	ldrh	r3, [r7, #32]
 8018422:	847b      	strh	r3, [r7, #34]	; 0x22
 8018424:	e095      	b.n	8018552 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018426:	7dfb      	ldrb	r3, [r7, #23]
 8018428:	2b00      	cmp	r3, #0
 801842a:	f000 8092 	beq.w	8018552 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801842e:	7dfb      	ldrb	r3, [r7, #23]
 8018430:	2b01      	cmp	r3, #1
 8018432:	d009      	beq.n	8018448 <etharp_find_entry+0x80>
 8018434:	7dfb      	ldrb	r3, [r7, #23]
 8018436:	2b01      	cmp	r3, #1
 8018438:	d806      	bhi.n	8018448 <etharp_find_entry+0x80>
 801843a:	4b99      	ldr	r3, [pc, #612]	; (80186a0 <etharp_find_entry+0x2d8>)
 801843c:	f240 1223 	movw	r2, #291	; 0x123
 8018440:	4998      	ldr	r1, [pc, #608]	; (80186a4 <etharp_find_entry+0x2dc>)
 8018442:	4899      	ldr	r0, [pc, #612]	; (80186a8 <etharp_find_entry+0x2e0>)
 8018444:	f002 fd6c 	bl	801af20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d020      	beq.n	8018490 <etharp_find_entry+0xc8>
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	6819      	ldr	r1, [r3, #0]
 8018452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018456:	4891      	ldr	r0, [pc, #580]	; (801869c <etharp_find_entry+0x2d4>)
 8018458:	4613      	mov	r3, r2
 801845a:	005b      	lsls	r3, r3, #1
 801845c:	4413      	add	r3, r2
 801845e:	00db      	lsls	r3, r3, #3
 8018460:	4403      	add	r3, r0
 8018462:	3304      	adds	r3, #4
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4299      	cmp	r1, r3
 8018468:	d112      	bne.n	8018490 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d00c      	beq.n	801848a <etharp_find_entry+0xc2>
 8018470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018474:	4989      	ldr	r1, [pc, #548]	; (801869c <etharp_find_entry+0x2d4>)
 8018476:	4613      	mov	r3, r2
 8018478:	005b      	lsls	r3, r3, #1
 801847a:	4413      	add	r3, r2
 801847c:	00db      	lsls	r3, r3, #3
 801847e:	440b      	add	r3, r1
 8018480:	3308      	adds	r3, #8
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	429a      	cmp	r2, r3
 8018488:	d102      	bne.n	8018490 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801848a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801848e:	e100      	b.n	8018692 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018490:	7dfb      	ldrb	r3, [r7, #23]
 8018492:	2b01      	cmp	r3, #1
 8018494:	d140      	bne.n	8018518 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018496:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801849a:	4980      	ldr	r1, [pc, #512]	; (801869c <etharp_find_entry+0x2d4>)
 801849c:	4613      	mov	r3, r2
 801849e:	005b      	lsls	r3, r3, #1
 80184a0:	4413      	add	r3, r2
 80184a2:	00db      	lsls	r3, r3, #3
 80184a4:	440b      	add	r3, r1
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d01a      	beq.n	80184e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80184ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184b0:	497a      	ldr	r1, [pc, #488]	; (801869c <etharp_find_entry+0x2d4>)
 80184b2:	4613      	mov	r3, r2
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	4413      	add	r3, r2
 80184b8:	00db      	lsls	r3, r3, #3
 80184ba:	440b      	add	r3, r1
 80184bc:	3312      	adds	r3, #18
 80184be:	881b      	ldrh	r3, [r3, #0]
 80184c0:	8bba      	ldrh	r2, [r7, #28]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d845      	bhi.n	8018552 <etharp_find_entry+0x18a>
            old_queue = i;
 80184c6:	8c3b      	ldrh	r3, [r7, #32]
 80184c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80184ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184ce:	4973      	ldr	r1, [pc, #460]	; (801869c <etharp_find_entry+0x2d4>)
 80184d0:	4613      	mov	r3, r2
 80184d2:	005b      	lsls	r3, r3, #1
 80184d4:	4413      	add	r3, r2
 80184d6:	00db      	lsls	r3, r3, #3
 80184d8:	440b      	add	r3, r1
 80184da:	3312      	adds	r3, #18
 80184dc:	881b      	ldrh	r3, [r3, #0]
 80184de:	83bb      	strh	r3, [r7, #28]
 80184e0:	e037      	b.n	8018552 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80184e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184e6:	496d      	ldr	r1, [pc, #436]	; (801869c <etharp_find_entry+0x2d4>)
 80184e8:	4613      	mov	r3, r2
 80184ea:	005b      	lsls	r3, r3, #1
 80184ec:	4413      	add	r3, r2
 80184ee:	00db      	lsls	r3, r3, #3
 80184f0:	440b      	add	r3, r1
 80184f2:	3312      	adds	r3, #18
 80184f4:	881b      	ldrh	r3, [r3, #0]
 80184f6:	8b7a      	ldrh	r2, [r7, #26]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d82a      	bhi.n	8018552 <etharp_find_entry+0x18a>
            old_pending = i;
 80184fc:	8c3b      	ldrh	r3, [r7, #32]
 80184fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018500:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018504:	4965      	ldr	r1, [pc, #404]	; (801869c <etharp_find_entry+0x2d4>)
 8018506:	4613      	mov	r3, r2
 8018508:	005b      	lsls	r3, r3, #1
 801850a:	4413      	add	r3, r2
 801850c:	00db      	lsls	r3, r3, #3
 801850e:	440b      	add	r3, r1
 8018510:	3312      	adds	r3, #18
 8018512:	881b      	ldrh	r3, [r3, #0]
 8018514:	837b      	strh	r3, [r7, #26]
 8018516:	e01c      	b.n	8018552 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018518:	7dfb      	ldrb	r3, [r7, #23]
 801851a:	2b01      	cmp	r3, #1
 801851c:	d919      	bls.n	8018552 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801851e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018522:	495e      	ldr	r1, [pc, #376]	; (801869c <etharp_find_entry+0x2d4>)
 8018524:	4613      	mov	r3, r2
 8018526:	005b      	lsls	r3, r3, #1
 8018528:	4413      	add	r3, r2
 801852a:	00db      	lsls	r3, r3, #3
 801852c:	440b      	add	r3, r1
 801852e:	3312      	adds	r3, #18
 8018530:	881b      	ldrh	r3, [r3, #0]
 8018532:	8b3a      	ldrh	r2, [r7, #24]
 8018534:	429a      	cmp	r2, r3
 8018536:	d80c      	bhi.n	8018552 <etharp_find_entry+0x18a>
            old_stable = i;
 8018538:	8c3b      	ldrh	r3, [r7, #32]
 801853a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801853c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018540:	4956      	ldr	r1, [pc, #344]	; (801869c <etharp_find_entry+0x2d4>)
 8018542:	4613      	mov	r3, r2
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	4413      	add	r3, r2
 8018548:	00db      	lsls	r3, r3, #3
 801854a:	440b      	add	r3, r1
 801854c:	3312      	adds	r3, #18
 801854e:	881b      	ldrh	r3, [r3, #0]
 8018550:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018552:	8c3b      	ldrh	r3, [r7, #32]
 8018554:	3301      	adds	r3, #1
 8018556:	b29b      	uxth	r3, r3
 8018558:	843b      	strh	r3, [r7, #32]
 801855a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801855e:	2b09      	cmp	r3, #9
 8018560:	f77f af4c 	ble.w	80183fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018564:	7afb      	ldrb	r3, [r7, #11]
 8018566:	f003 0302 	and.w	r3, r3, #2
 801856a:	2b00      	cmp	r3, #0
 801856c:	d108      	bne.n	8018580 <etharp_find_entry+0x1b8>
 801856e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018572:	2b0a      	cmp	r3, #10
 8018574:	d107      	bne.n	8018586 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018576:	7afb      	ldrb	r3, [r7, #11]
 8018578:	f003 0301 	and.w	r3, r3, #1
 801857c:	2b00      	cmp	r3, #0
 801857e:	d102      	bne.n	8018586 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018580:	f04f 33ff 	mov.w	r3, #4294967295
 8018584:	e085      	b.n	8018692 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018586:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801858a:	2b09      	cmp	r3, #9
 801858c:	dc02      	bgt.n	8018594 <etharp_find_entry+0x1cc>
    i = empty;
 801858e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018590:	843b      	strh	r3, [r7, #32]
 8018592:	e039      	b.n	8018608 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018594:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018598:	2b09      	cmp	r3, #9
 801859a:	dc14      	bgt.n	80185c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801859c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801859e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80185a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185a4:	493d      	ldr	r1, [pc, #244]	; (801869c <etharp_find_entry+0x2d4>)
 80185a6:	4613      	mov	r3, r2
 80185a8:	005b      	lsls	r3, r3, #1
 80185aa:	4413      	add	r3, r2
 80185ac:	00db      	lsls	r3, r3, #3
 80185ae:	440b      	add	r3, r1
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d018      	beq.n	80185e8 <etharp_find_entry+0x220>
 80185b6:	4b3a      	ldr	r3, [pc, #232]	; (80186a0 <etharp_find_entry+0x2d8>)
 80185b8:	f240 126d 	movw	r2, #365	; 0x16d
 80185bc:	493b      	ldr	r1, [pc, #236]	; (80186ac <etharp_find_entry+0x2e4>)
 80185be:	483a      	ldr	r0, [pc, #232]	; (80186a8 <etharp_find_entry+0x2e0>)
 80185c0:	f002 fcae 	bl	801af20 <iprintf>
 80185c4:	e010      	b.n	80185e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80185c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80185ca:	2b09      	cmp	r3, #9
 80185cc:	dc02      	bgt.n	80185d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80185ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80185d0:	843b      	strh	r3, [r7, #32]
 80185d2:	e009      	b.n	80185e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80185d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80185d8:	2b09      	cmp	r3, #9
 80185da:	dc02      	bgt.n	80185e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80185dc:	8bfb      	ldrh	r3, [r7, #30]
 80185de:	843b      	strh	r3, [r7, #32]
 80185e0:	e002      	b.n	80185e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80185e2:	f04f 33ff 	mov.w	r3, #4294967295
 80185e6:	e054      	b.n	8018692 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80185e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80185ec:	2b09      	cmp	r3, #9
 80185ee:	dd06      	ble.n	80185fe <etharp_find_entry+0x236>
 80185f0:	4b2b      	ldr	r3, [pc, #172]	; (80186a0 <etharp_find_entry+0x2d8>)
 80185f2:	f240 127f 	movw	r2, #383	; 0x17f
 80185f6:	492e      	ldr	r1, [pc, #184]	; (80186b0 <etharp_find_entry+0x2e8>)
 80185f8:	482b      	ldr	r0, [pc, #172]	; (80186a8 <etharp_find_entry+0x2e0>)
 80185fa:	f002 fc91 	bl	801af20 <iprintf>
    etharp_free_entry(i);
 80185fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018602:	4618      	mov	r0, r3
 8018604:	f7ff fe06 	bl	8018214 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018608:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801860c:	2b09      	cmp	r3, #9
 801860e:	dd06      	ble.n	801861e <etharp_find_entry+0x256>
 8018610:	4b23      	ldr	r3, [pc, #140]	; (80186a0 <etharp_find_entry+0x2d8>)
 8018612:	f240 1283 	movw	r2, #387	; 0x183
 8018616:	4926      	ldr	r1, [pc, #152]	; (80186b0 <etharp_find_entry+0x2e8>)
 8018618:	4823      	ldr	r0, [pc, #140]	; (80186a8 <etharp_find_entry+0x2e0>)
 801861a:	f002 fc81 	bl	801af20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801861e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018622:	491e      	ldr	r1, [pc, #120]	; (801869c <etharp_find_entry+0x2d4>)
 8018624:	4613      	mov	r3, r2
 8018626:	005b      	lsls	r3, r3, #1
 8018628:	4413      	add	r3, r2
 801862a:	00db      	lsls	r3, r3, #3
 801862c:	440b      	add	r3, r1
 801862e:	3314      	adds	r3, #20
 8018630:	781b      	ldrb	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d006      	beq.n	8018644 <etharp_find_entry+0x27c>
 8018636:	4b1a      	ldr	r3, [pc, #104]	; (80186a0 <etharp_find_entry+0x2d8>)
 8018638:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801863c:	491d      	ldr	r1, [pc, #116]	; (80186b4 <etharp_find_entry+0x2ec>)
 801863e:	481a      	ldr	r0, [pc, #104]	; (80186a8 <etharp_find_entry+0x2e0>)
 8018640:	f002 fc6e 	bl	801af20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00b      	beq.n	8018662 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801864a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	6819      	ldr	r1, [r3, #0]
 8018652:	4812      	ldr	r0, [pc, #72]	; (801869c <etharp_find_entry+0x2d4>)
 8018654:	4613      	mov	r3, r2
 8018656:	005b      	lsls	r3, r3, #1
 8018658:	4413      	add	r3, r2
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	4403      	add	r3, r0
 801865e:	3304      	adds	r3, #4
 8018660:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018666:	490d      	ldr	r1, [pc, #52]	; (801869c <etharp_find_entry+0x2d4>)
 8018668:	4613      	mov	r3, r2
 801866a:	005b      	lsls	r3, r3, #1
 801866c:	4413      	add	r3, r2
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	440b      	add	r3, r1
 8018672:	3312      	adds	r3, #18
 8018674:	2200      	movs	r2, #0
 8018676:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018678:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801867c:	4907      	ldr	r1, [pc, #28]	; (801869c <etharp_find_entry+0x2d4>)
 801867e:	4613      	mov	r3, r2
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	4413      	add	r3, r2
 8018684:	00db      	lsls	r3, r3, #3
 8018686:	440b      	add	r3, r1
 8018688:	3308      	adds	r3, #8
 801868a:	687a      	ldr	r2, [r7, #4]
 801868c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801868e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018692:	4618      	mov	r0, r3
 8018694:	3728      	adds	r7, #40	; 0x28
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}
 801869a:	bf00      	nop
 801869c:	24009dfc 	.word	0x24009dfc
 80186a0:	0801f018 	.word	0x0801f018
 80186a4:	0801f050 	.word	0x0801f050
 80186a8:	0801f090 	.word	0x0801f090
 80186ac:	0801f0b8 	.word	0x0801f0b8
 80186b0:	0801f0d0 	.word	0x0801f0d0
 80186b4:	0801f0e4 	.word	0x0801f0e4

080186b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b088      	sub	sp, #32
 80186bc:	af02      	add	r7, sp, #8
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
 80186c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80186cc:	2b06      	cmp	r3, #6
 80186ce:	d006      	beq.n	80186de <etharp_update_arp_entry+0x26>
 80186d0:	4b48      	ldr	r3, [pc, #288]	; (80187f4 <etharp_update_arp_entry+0x13c>)
 80186d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80186d6:	4948      	ldr	r1, [pc, #288]	; (80187f8 <etharp_update_arp_entry+0x140>)
 80186d8:	4848      	ldr	r0, [pc, #288]	; (80187fc <etharp_update_arp_entry+0x144>)
 80186da:	f002 fc21 	bl	801af20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d012      	beq.n	801870a <etharp_update_arp_entry+0x52>
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d00e      	beq.n	801870a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	68f9      	ldr	r1, [r7, #12]
 80186f2:	4618      	mov	r0, r3
 80186f4:	f001 f946 	bl	8019984 <ip4_addr_isbroadcast_u32>
 80186f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d105      	bne.n	801870a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018706:	2be0      	cmp	r3, #224	; 0xe0
 8018708:	d102      	bne.n	8018710 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801870a:	f06f 030f 	mvn.w	r3, #15
 801870e:	e06c      	b.n	80187ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018710:	78fb      	ldrb	r3, [r7, #3]
 8018712:	68fa      	ldr	r2, [r7, #12]
 8018714:	4619      	mov	r1, r3
 8018716:	68b8      	ldr	r0, [r7, #8]
 8018718:	f7ff fe56 	bl	80183c8 <etharp_find_entry>
 801871c:	4603      	mov	r3, r0
 801871e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018724:	2b00      	cmp	r3, #0
 8018726:	da02      	bge.n	801872e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018728:	8afb      	ldrh	r3, [r7, #22]
 801872a:	b25b      	sxtb	r3, r3
 801872c:	e05d      	b.n	80187ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801872e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018732:	4933      	ldr	r1, [pc, #204]	; (8018800 <etharp_update_arp_entry+0x148>)
 8018734:	4613      	mov	r3, r2
 8018736:	005b      	lsls	r3, r3, #1
 8018738:	4413      	add	r3, r2
 801873a:	00db      	lsls	r3, r3, #3
 801873c:	440b      	add	r3, r1
 801873e:	3314      	adds	r3, #20
 8018740:	2202      	movs	r2, #2
 8018742:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018748:	492d      	ldr	r1, [pc, #180]	; (8018800 <etharp_update_arp_entry+0x148>)
 801874a:	4613      	mov	r3, r2
 801874c:	005b      	lsls	r3, r3, #1
 801874e:	4413      	add	r3, r2
 8018750:	00db      	lsls	r3, r3, #3
 8018752:	440b      	add	r3, r1
 8018754:	3308      	adds	r3, #8
 8018756:	68fa      	ldr	r2, [r7, #12]
 8018758:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801875a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801875e:	4613      	mov	r3, r2
 8018760:	005b      	lsls	r3, r3, #1
 8018762:	4413      	add	r3, r2
 8018764:	00db      	lsls	r3, r3, #3
 8018766:	3308      	adds	r3, #8
 8018768:	4a25      	ldr	r2, [pc, #148]	; (8018800 <etharp_update_arp_entry+0x148>)
 801876a:	4413      	add	r3, r2
 801876c:	3304      	adds	r3, #4
 801876e:	2206      	movs	r2, #6
 8018770:	6879      	ldr	r1, [r7, #4]
 8018772:	4618      	mov	r0, r3
 8018774:	f002 fb63 	bl	801ae3e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018778:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801877c:	4920      	ldr	r1, [pc, #128]	; (8018800 <etharp_update_arp_entry+0x148>)
 801877e:	4613      	mov	r3, r2
 8018780:	005b      	lsls	r3, r3, #1
 8018782:	4413      	add	r3, r2
 8018784:	00db      	lsls	r3, r3, #3
 8018786:	440b      	add	r3, r1
 8018788:	3312      	adds	r3, #18
 801878a:	2200      	movs	r2, #0
 801878c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801878e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018792:	491b      	ldr	r1, [pc, #108]	; (8018800 <etharp_update_arp_entry+0x148>)
 8018794:	4613      	mov	r3, r2
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	4413      	add	r3, r2
 801879a:	00db      	lsls	r3, r3, #3
 801879c:	440b      	add	r3, r1
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d021      	beq.n	80187e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80187a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187a8:	4915      	ldr	r1, [pc, #84]	; (8018800 <etharp_update_arp_entry+0x148>)
 80187aa:	4613      	mov	r3, r2
 80187ac:	005b      	lsls	r3, r3, #1
 80187ae:	4413      	add	r3, r2
 80187b0:	00db      	lsls	r3, r3, #3
 80187b2:	440b      	add	r3, r1
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80187b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187bc:	4910      	ldr	r1, [pc, #64]	; (8018800 <etharp_update_arp_entry+0x148>)
 80187be:	4613      	mov	r3, r2
 80187c0:	005b      	lsls	r3, r3, #1
 80187c2:	4413      	add	r3, r2
 80187c4:	00db      	lsls	r3, r3, #3
 80187c6:	440b      	add	r3, r1
 80187c8:	2200      	movs	r2, #0
 80187ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80187d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80187d6:	9300      	str	r3, [sp, #0]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6939      	ldr	r1, [r7, #16]
 80187dc:	68f8      	ldr	r0, [r7, #12]
 80187de:	f001 ffd9 	bl	801a794 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80187e2:	6938      	ldr	r0, [r7, #16]
 80187e4:	f7f6 fd4e 	bl	800f284 <pbuf_free>
  }
  return ERR_OK;
 80187e8:	2300      	movs	r3, #0
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	3718      	adds	r7, #24
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	0801f018 	.word	0x0801f018
 80187f8:	0801f110 	.word	0x0801f110
 80187fc:	0801f090 	.word	0x0801f090
 8018800:	24009dfc 	.word	0x24009dfc

08018804 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801880c:	2300      	movs	r3, #0
 801880e:	60fb      	str	r3, [r7, #12]
 8018810:	e01e      	b.n	8018850 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018812:	4913      	ldr	r1, [pc, #76]	; (8018860 <etharp_cleanup_netif+0x5c>)
 8018814:	68fa      	ldr	r2, [r7, #12]
 8018816:	4613      	mov	r3, r2
 8018818:	005b      	lsls	r3, r3, #1
 801881a:	4413      	add	r3, r2
 801881c:	00db      	lsls	r3, r3, #3
 801881e:	440b      	add	r3, r1
 8018820:	3314      	adds	r3, #20
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018826:	7afb      	ldrb	r3, [r7, #11]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d00e      	beq.n	801884a <etharp_cleanup_netif+0x46>
 801882c:	490c      	ldr	r1, [pc, #48]	; (8018860 <etharp_cleanup_netif+0x5c>)
 801882e:	68fa      	ldr	r2, [r7, #12]
 8018830:	4613      	mov	r3, r2
 8018832:	005b      	lsls	r3, r3, #1
 8018834:	4413      	add	r3, r2
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	440b      	add	r3, r1
 801883a:	3308      	adds	r3, #8
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	687a      	ldr	r2, [r7, #4]
 8018840:	429a      	cmp	r2, r3
 8018842:	d102      	bne.n	801884a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018844:	68f8      	ldr	r0, [r7, #12]
 8018846:	f7ff fce5 	bl	8018214 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	3301      	adds	r3, #1
 801884e:	60fb      	str	r3, [r7, #12]
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	2b09      	cmp	r3, #9
 8018854:	dddd      	ble.n	8018812 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018856:	bf00      	nop
 8018858:	bf00      	nop
 801885a:	3710      	adds	r7, #16
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}
 8018860:	24009dfc 	.word	0x24009dfc

08018864 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018864:	b5b0      	push	{r4, r5, r7, lr}
 8018866:	b08a      	sub	sp, #40	; 0x28
 8018868:	af04      	add	r7, sp, #16
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d107      	bne.n	8018884 <etharp_input+0x20>
 8018874:	4b3f      	ldr	r3, [pc, #252]	; (8018974 <etharp_input+0x110>)
 8018876:	f240 228a 	movw	r2, #650	; 0x28a
 801887a:	493f      	ldr	r1, [pc, #252]	; (8018978 <etharp_input+0x114>)
 801887c:	483f      	ldr	r0, [pc, #252]	; (801897c <etharp_input+0x118>)
 801887e:	f002 fb4f 	bl	801af20 <iprintf>
 8018882:	e074      	b.n	801896e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	685b      	ldr	r3, [r3, #4]
 8018888:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801888a:	693b      	ldr	r3, [r7, #16]
 801888c:	881b      	ldrh	r3, [r3, #0]
 801888e:	b29b      	uxth	r3, r3
 8018890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018894:	d10c      	bne.n	80188b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018896:	693b      	ldr	r3, [r7, #16]
 8018898:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801889a:	2b06      	cmp	r3, #6
 801889c:	d108      	bne.n	80188b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801889e:	693b      	ldr	r3, [r7, #16]
 80188a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80188a2:	2b04      	cmp	r3, #4
 80188a4:	d104      	bne.n	80188b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	885b      	ldrh	r3, [r3, #2]
 80188aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80188ac:	2b08      	cmp	r3, #8
 80188ae:	d003      	beq.n	80188b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80188b0:	6878      	ldr	r0, [r7, #4]
 80188b2:	f7f6 fce7 	bl	800f284 <pbuf_free>
    return;
 80188b6:	e05a      	b.n	801896e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80188b8:	693b      	ldr	r3, [r7, #16]
 80188ba:	330e      	adds	r3, #14
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	3318      	adds	r3, #24
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	3304      	adds	r3, #4
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d102      	bne.n	80188d8 <etharp_input+0x74>
    for_us = 0;
 80188d2:	2300      	movs	r3, #0
 80188d4:	75fb      	strb	r3, [r7, #23]
 80188d6:	e009      	b.n	80188ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80188d8:	68ba      	ldr	r2, [r7, #8]
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	3304      	adds	r3, #4
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	429a      	cmp	r2, r3
 80188e2:	bf0c      	ite	eq
 80188e4:	2301      	moveq	r3, #1
 80188e6:	2300      	movne	r3, #0
 80188e8:	b2db      	uxtb	r3, r3
 80188ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80188ec:	693b      	ldr	r3, [r7, #16]
 80188ee:	f103 0208 	add.w	r2, r3, #8
 80188f2:	7dfb      	ldrb	r3, [r7, #23]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d001      	beq.n	80188fc <etharp_input+0x98>
 80188f8:	2301      	movs	r3, #1
 80188fa:	e000      	b.n	80188fe <etharp_input+0x9a>
 80188fc:	2302      	movs	r3, #2
 80188fe:	f107 010c 	add.w	r1, r7, #12
 8018902:	6838      	ldr	r0, [r7, #0]
 8018904:	f7ff fed8 	bl	80186b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018908:	693b      	ldr	r3, [r7, #16]
 801890a:	88db      	ldrh	r3, [r3, #6]
 801890c:	b29b      	uxth	r3, r3
 801890e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018912:	d003      	beq.n	801891c <etharp_input+0xb8>
 8018914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018918:	d01e      	beq.n	8018958 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801891a:	e025      	b.n	8018968 <etharp_input+0x104>
      if (for_us) {
 801891c:	7dfb      	ldrb	r3, [r7, #23]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d021      	beq.n	8018966 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018928:	693b      	ldr	r3, [r7, #16]
 801892a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018934:	683b      	ldr	r3, [r7, #0]
 8018936:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018938:	693a      	ldr	r2, [r7, #16]
 801893a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801893c:	2102      	movs	r1, #2
 801893e:	9103      	str	r1, [sp, #12]
 8018940:	f107 010c 	add.w	r1, r7, #12
 8018944:	9102      	str	r1, [sp, #8]
 8018946:	9201      	str	r2, [sp, #4]
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	462b      	mov	r3, r5
 801894c:	4622      	mov	r2, r4
 801894e:	4601      	mov	r1, r0
 8018950:	6838      	ldr	r0, [r7, #0]
 8018952:	f000 faef 	bl	8018f34 <etharp_raw>
      break;
 8018956:	e006      	b.n	8018966 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018958:	f107 030c 	add.w	r3, r7, #12
 801895c:	4619      	mov	r1, r3
 801895e:	6838      	ldr	r0, [r7, #0]
 8018960:	f7fe f9fc 	bl	8016d5c <dhcp_arp_reply>
      break;
 8018964:	e000      	b.n	8018968 <etharp_input+0x104>
      break;
 8018966:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018968:	6878      	ldr	r0, [r7, #4]
 801896a:	f7f6 fc8b 	bl	800f284 <pbuf_free>
}
 801896e:	3718      	adds	r7, #24
 8018970:	46bd      	mov	sp, r7
 8018972:	bdb0      	pop	{r4, r5, r7, pc}
 8018974:	0801f018 	.word	0x0801f018
 8018978:	0801f168 	.word	0x0801f168
 801897c:	0801f090 	.word	0x0801f090

08018980 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b086      	sub	sp, #24
 8018984:	af02      	add	r7, sp, #8
 8018986:	60f8      	str	r0, [r7, #12]
 8018988:	60b9      	str	r1, [r7, #8]
 801898a:	4613      	mov	r3, r2
 801898c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801898e:	79fa      	ldrb	r2, [r7, #7]
 8018990:	4944      	ldr	r1, [pc, #272]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018992:	4613      	mov	r3, r2
 8018994:	005b      	lsls	r3, r3, #1
 8018996:	4413      	add	r3, r2
 8018998:	00db      	lsls	r3, r3, #3
 801899a:	440b      	add	r3, r1
 801899c:	3314      	adds	r3, #20
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d806      	bhi.n	80189b2 <etharp_output_to_arp_index+0x32>
 80189a4:	4b40      	ldr	r3, [pc, #256]	; (8018aa8 <etharp_output_to_arp_index+0x128>)
 80189a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80189aa:	4940      	ldr	r1, [pc, #256]	; (8018aac <etharp_output_to_arp_index+0x12c>)
 80189ac:	4840      	ldr	r0, [pc, #256]	; (8018ab0 <etharp_output_to_arp_index+0x130>)
 80189ae:	f002 fab7 	bl	801af20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80189b2:	79fa      	ldrb	r2, [r7, #7]
 80189b4:	493b      	ldr	r1, [pc, #236]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 80189b6:	4613      	mov	r3, r2
 80189b8:	005b      	lsls	r3, r3, #1
 80189ba:	4413      	add	r3, r2
 80189bc:	00db      	lsls	r3, r3, #3
 80189be:	440b      	add	r3, r1
 80189c0:	3314      	adds	r3, #20
 80189c2:	781b      	ldrb	r3, [r3, #0]
 80189c4:	2b02      	cmp	r3, #2
 80189c6:	d153      	bne.n	8018a70 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80189c8:	79fa      	ldrb	r2, [r7, #7]
 80189ca:	4936      	ldr	r1, [pc, #216]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 80189cc:	4613      	mov	r3, r2
 80189ce:	005b      	lsls	r3, r3, #1
 80189d0:	4413      	add	r3, r2
 80189d2:	00db      	lsls	r3, r3, #3
 80189d4:	440b      	add	r3, r1
 80189d6:	3312      	adds	r3, #18
 80189d8:	881b      	ldrh	r3, [r3, #0]
 80189da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80189de:	d919      	bls.n	8018a14 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80189e0:	79fa      	ldrb	r2, [r7, #7]
 80189e2:	4613      	mov	r3, r2
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	4413      	add	r3, r2
 80189e8:	00db      	lsls	r3, r3, #3
 80189ea:	4a2e      	ldr	r2, [pc, #184]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 80189ec:	4413      	add	r3, r2
 80189ee:	3304      	adds	r3, #4
 80189f0:	4619      	mov	r1, r3
 80189f2:	68f8      	ldr	r0, [r7, #12]
 80189f4:	f000 fb4c 	bl	8019090 <etharp_request>
 80189f8:	4603      	mov	r3, r0
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d138      	bne.n	8018a70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80189fe:	79fa      	ldrb	r2, [r7, #7]
 8018a00:	4928      	ldr	r1, [pc, #160]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a02:	4613      	mov	r3, r2
 8018a04:	005b      	lsls	r3, r3, #1
 8018a06:	4413      	add	r3, r2
 8018a08:	00db      	lsls	r3, r3, #3
 8018a0a:	440b      	add	r3, r1
 8018a0c:	3314      	adds	r3, #20
 8018a0e:	2203      	movs	r2, #3
 8018a10:	701a      	strb	r2, [r3, #0]
 8018a12:	e02d      	b.n	8018a70 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018a14:	79fa      	ldrb	r2, [r7, #7]
 8018a16:	4923      	ldr	r1, [pc, #140]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a18:	4613      	mov	r3, r2
 8018a1a:	005b      	lsls	r3, r3, #1
 8018a1c:	4413      	add	r3, r2
 8018a1e:	00db      	lsls	r3, r3, #3
 8018a20:	440b      	add	r3, r1
 8018a22:	3312      	adds	r3, #18
 8018a24:	881b      	ldrh	r3, [r3, #0]
 8018a26:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018a2a:	d321      	bcc.n	8018a70 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018a2c:	79fa      	ldrb	r2, [r7, #7]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	005b      	lsls	r3, r3, #1
 8018a32:	4413      	add	r3, r2
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	4a1b      	ldr	r2, [pc, #108]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a38:	4413      	add	r3, r2
 8018a3a:	1d19      	adds	r1, r3, #4
 8018a3c:	79fa      	ldrb	r2, [r7, #7]
 8018a3e:	4613      	mov	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4413      	add	r3, r2
 8018a44:	00db      	lsls	r3, r3, #3
 8018a46:	3308      	adds	r3, #8
 8018a48:	4a16      	ldr	r2, [pc, #88]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a4a:	4413      	add	r3, r2
 8018a4c:	3304      	adds	r3, #4
 8018a4e:	461a      	mov	r2, r3
 8018a50:	68f8      	ldr	r0, [r7, #12]
 8018a52:	f000 fafb 	bl	801904c <etharp_request_dst>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d109      	bne.n	8018a70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018a5c:	79fa      	ldrb	r2, [r7, #7]
 8018a5e:	4911      	ldr	r1, [pc, #68]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a60:	4613      	mov	r3, r2
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	4413      	add	r3, r2
 8018a66:	00db      	lsls	r3, r3, #3
 8018a68:	440b      	add	r3, r1
 8018a6a:	3314      	adds	r3, #20
 8018a6c:	2203      	movs	r2, #3
 8018a6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018a76:	79fa      	ldrb	r2, [r7, #7]
 8018a78:	4613      	mov	r3, r2
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	4413      	add	r3, r2
 8018a7e:	00db      	lsls	r3, r3, #3
 8018a80:	3308      	adds	r3, #8
 8018a82:	4a08      	ldr	r2, [pc, #32]	; (8018aa4 <etharp_output_to_arp_index+0x124>)
 8018a84:	4413      	add	r3, r2
 8018a86:	3304      	adds	r3, #4
 8018a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018a8c:	9200      	str	r2, [sp, #0]
 8018a8e:	460a      	mov	r2, r1
 8018a90:	68b9      	ldr	r1, [r7, #8]
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	f001 fe7e 	bl	801a794 <ethernet_output>
 8018a98:	4603      	mov	r3, r0
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	24009dfc 	.word	0x24009dfc
 8018aa8:	0801f018 	.word	0x0801f018
 8018aac:	0801f188 	.word	0x0801f188
 8018ab0:	0801f090 	.word	0x0801f090

08018ab4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b08a      	sub	sp, #40	; 0x28
 8018ab8:	af02      	add	r7, sp, #8
 8018aba:	60f8      	str	r0, [r7, #12]
 8018abc:	60b9      	str	r1, [r7, #8]
 8018abe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <etharp_output+0x24>
 8018aca:	4b73      	ldr	r3, [pc, #460]	; (8018c98 <etharp_output+0x1e4>)
 8018acc:	f240 321e 	movw	r2, #798	; 0x31e
 8018ad0:	4972      	ldr	r1, [pc, #456]	; (8018c9c <etharp_output+0x1e8>)
 8018ad2:	4873      	ldr	r0, [pc, #460]	; (8018ca0 <etharp_output+0x1ec>)
 8018ad4:	f002 fa24 	bl	801af20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d106      	bne.n	8018aec <etharp_output+0x38>
 8018ade:	4b6e      	ldr	r3, [pc, #440]	; (8018c98 <etharp_output+0x1e4>)
 8018ae0:	f240 321f 	movw	r2, #799	; 0x31f
 8018ae4:	496f      	ldr	r1, [pc, #444]	; (8018ca4 <etharp_output+0x1f0>)
 8018ae6:	486e      	ldr	r0, [pc, #440]	; (8018ca0 <etharp_output+0x1ec>)
 8018ae8:	f002 fa1a 	bl	801af20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d106      	bne.n	8018b00 <etharp_output+0x4c>
 8018af2:	4b69      	ldr	r3, [pc, #420]	; (8018c98 <etharp_output+0x1e4>)
 8018af4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018af8:	496b      	ldr	r1, [pc, #428]	; (8018ca8 <etharp_output+0x1f4>)
 8018afa:	4869      	ldr	r0, [pc, #420]	; (8018ca0 <etharp_output+0x1ec>)
 8018afc:	f002 fa10 	bl	801af20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	68f9      	ldr	r1, [r7, #12]
 8018b06:	4618      	mov	r0, r3
 8018b08:	f000 ff3c 	bl	8019984 <ip4_addr_isbroadcast_u32>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d002      	beq.n	8018b18 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018b12:	4b66      	ldr	r3, [pc, #408]	; (8018cac <etharp_output+0x1f8>)
 8018b14:	61fb      	str	r3, [r7, #28]
 8018b16:	e0af      	b.n	8018c78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b20:	2be0      	cmp	r3, #224	; 0xe0
 8018b22:	d118      	bne.n	8018b56 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018b24:	2301      	movs	r3, #1
 8018b26:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018b28:	2300      	movs	r3, #0
 8018b2a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018b2c:	235e      	movs	r3, #94	; 0x5e
 8018b2e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	3301      	adds	r3, #1
 8018b34:	781b      	ldrb	r3, [r3, #0]
 8018b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	3302      	adds	r3, #2
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	3303      	adds	r3, #3
 8018b4a:	781b      	ldrb	r3, [r3, #0]
 8018b4c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018b4e:	f107 0310 	add.w	r3, r7, #16
 8018b52:	61fb      	str	r3, [r7, #28]
 8018b54:	e090      	b.n	8018c78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681a      	ldr	r2, [r3, #0]
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	405a      	eors	r2, r3
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	3308      	adds	r3, #8
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	4013      	ands	r3, r2
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d012      	beq.n	8018b94 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018b74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d00b      	beq.n	8018b94 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	330c      	adds	r3, #12
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d003      	beq.n	8018b8e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	330c      	adds	r3, #12
 8018b8a:	61bb      	str	r3, [r7, #24]
 8018b8c:	e002      	b.n	8018b94 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018b8e:	f06f 0303 	mvn.w	r3, #3
 8018b92:	e07d      	b.n	8018c90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018b94:	4b46      	ldr	r3, [pc, #280]	; (8018cb0 <etharp_output+0x1fc>)
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	4619      	mov	r1, r3
 8018b9a:	4a46      	ldr	r2, [pc, #280]	; (8018cb4 <etharp_output+0x200>)
 8018b9c:	460b      	mov	r3, r1
 8018b9e:	005b      	lsls	r3, r3, #1
 8018ba0:	440b      	add	r3, r1
 8018ba2:	00db      	lsls	r3, r3, #3
 8018ba4:	4413      	add	r3, r2
 8018ba6:	3314      	adds	r3, #20
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	2b01      	cmp	r3, #1
 8018bac:	d925      	bls.n	8018bfa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018bae:	4b40      	ldr	r3, [pc, #256]	; (8018cb0 <etharp_output+0x1fc>)
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	4a3f      	ldr	r2, [pc, #252]	; (8018cb4 <etharp_output+0x200>)
 8018bb6:	460b      	mov	r3, r1
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	440b      	add	r3, r1
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	4413      	add	r3, r2
 8018bc0:	3308      	adds	r3, #8
 8018bc2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018bc4:	68fa      	ldr	r2, [r7, #12]
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d117      	bne.n	8018bfa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018bca:	69bb      	ldr	r3, [r7, #24]
 8018bcc:	681a      	ldr	r2, [r3, #0]
 8018bce:	4b38      	ldr	r3, [pc, #224]	; (8018cb0 <etharp_output+0x1fc>)
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	4937      	ldr	r1, [pc, #220]	; (8018cb4 <etharp_output+0x200>)
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	005b      	lsls	r3, r3, #1
 8018bda:	4403      	add	r3, r0
 8018bdc:	00db      	lsls	r3, r3, #3
 8018bde:	440b      	add	r3, r1
 8018be0:	3304      	adds	r3, #4
 8018be2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018be4:	429a      	cmp	r2, r3
 8018be6:	d108      	bne.n	8018bfa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018be8:	4b31      	ldr	r3, [pc, #196]	; (8018cb0 <etharp_output+0x1fc>)
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	461a      	mov	r2, r3
 8018bee:	68b9      	ldr	r1, [r7, #8]
 8018bf0:	68f8      	ldr	r0, [r7, #12]
 8018bf2:	f7ff fec5 	bl	8018980 <etharp_output_to_arp_index>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	e04a      	b.n	8018c90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	75fb      	strb	r3, [r7, #23]
 8018bfe:	e031      	b.n	8018c64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c00:	7dfa      	ldrb	r2, [r7, #23]
 8018c02:	492c      	ldr	r1, [pc, #176]	; (8018cb4 <etharp_output+0x200>)
 8018c04:	4613      	mov	r3, r2
 8018c06:	005b      	lsls	r3, r3, #1
 8018c08:	4413      	add	r3, r2
 8018c0a:	00db      	lsls	r3, r3, #3
 8018c0c:	440b      	add	r3, r1
 8018c0e:	3314      	adds	r3, #20
 8018c10:	781b      	ldrb	r3, [r3, #0]
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d923      	bls.n	8018c5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018c16:	7dfa      	ldrb	r2, [r7, #23]
 8018c18:	4926      	ldr	r1, [pc, #152]	; (8018cb4 <etharp_output+0x200>)
 8018c1a:	4613      	mov	r3, r2
 8018c1c:	005b      	lsls	r3, r3, #1
 8018c1e:	4413      	add	r3, r2
 8018c20:	00db      	lsls	r3, r3, #3
 8018c22:	440b      	add	r3, r1
 8018c24:	3308      	adds	r3, #8
 8018c26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c28:	68fa      	ldr	r2, [r7, #12]
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d117      	bne.n	8018c5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018c2e:	69bb      	ldr	r3, [r7, #24]
 8018c30:	6819      	ldr	r1, [r3, #0]
 8018c32:	7dfa      	ldrb	r2, [r7, #23]
 8018c34:	481f      	ldr	r0, [pc, #124]	; (8018cb4 <etharp_output+0x200>)
 8018c36:	4613      	mov	r3, r2
 8018c38:	005b      	lsls	r3, r3, #1
 8018c3a:	4413      	add	r3, r2
 8018c3c:	00db      	lsls	r3, r3, #3
 8018c3e:	4403      	add	r3, r0
 8018c40:	3304      	adds	r3, #4
 8018c42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018c44:	4299      	cmp	r1, r3
 8018c46:	d10a      	bne.n	8018c5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018c48:	4a19      	ldr	r2, [pc, #100]	; (8018cb0 <etharp_output+0x1fc>)
 8018c4a:	7dfb      	ldrb	r3, [r7, #23]
 8018c4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018c4e:	7dfb      	ldrb	r3, [r7, #23]
 8018c50:	461a      	mov	r2, r3
 8018c52:	68b9      	ldr	r1, [r7, #8]
 8018c54:	68f8      	ldr	r0, [r7, #12]
 8018c56:	f7ff fe93 	bl	8018980 <etharp_output_to_arp_index>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	e018      	b.n	8018c90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018c5e:	7dfb      	ldrb	r3, [r7, #23]
 8018c60:	3301      	adds	r3, #1
 8018c62:	75fb      	strb	r3, [r7, #23]
 8018c64:	7dfb      	ldrb	r3, [r7, #23]
 8018c66:	2b09      	cmp	r3, #9
 8018c68:	d9ca      	bls.n	8018c00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018c6a:	68ba      	ldr	r2, [r7, #8]
 8018c6c:	69b9      	ldr	r1, [r7, #24]
 8018c6e:	68f8      	ldr	r0, [r7, #12]
 8018c70:	f000 f822 	bl	8018cb8 <etharp_query>
 8018c74:	4603      	mov	r3, r0
 8018c76:	e00b      	b.n	8018c90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018c82:	9300      	str	r3, [sp, #0]
 8018c84:	69fb      	ldr	r3, [r7, #28]
 8018c86:	68b9      	ldr	r1, [r7, #8]
 8018c88:	68f8      	ldr	r0, [r7, #12]
 8018c8a:	f001 fd83 	bl	801a794 <ethernet_output>
 8018c8e:	4603      	mov	r3, r0
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	3720      	adds	r7, #32
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	0801f018 	.word	0x0801f018
 8018c9c:	0801f168 	.word	0x0801f168
 8018ca0:	0801f090 	.word	0x0801f090
 8018ca4:	0801f1b8 	.word	0x0801f1b8
 8018ca8:	0801f158 	.word	0x0801f158
 8018cac:	0801f84c 	.word	0x0801f84c
 8018cb0:	24009eec 	.word	0x24009eec
 8018cb4:	24009dfc 	.word	0x24009dfc

08018cb8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b08c      	sub	sp, #48	; 0x30
 8018cbc:	af02      	add	r7, sp, #8
 8018cbe:	60f8      	str	r0, [r7, #12]
 8018cc0:	60b9      	str	r1, [r7, #8]
 8018cc2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	332a      	adds	r3, #42	; 0x2a
 8018cc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018cca:	23ff      	movs	r3, #255	; 0xff
 8018ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	68f9      	ldr	r1, [r7, #12]
 8018cda:	4618      	mov	r0, r3
 8018cdc:	f000 fe52 	bl	8019984 <ip4_addr_isbroadcast_u32>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d10c      	bne.n	8018d00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018cee:	2be0      	cmp	r3, #224	; 0xe0
 8018cf0:	d006      	beq.n	8018d00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d003      	beq.n	8018d00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d102      	bne.n	8018d06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d00:	f06f 030f 	mvn.w	r3, #15
 8018d04:	e101      	b.n	8018f0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018d06:	68fa      	ldr	r2, [r7, #12]
 8018d08:	2101      	movs	r1, #1
 8018d0a:	68b8      	ldr	r0, [r7, #8]
 8018d0c:	f7ff fb5c 	bl	80183c8 <etharp_find_entry>
 8018d10:	4603      	mov	r3, r0
 8018d12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018d14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	da02      	bge.n	8018d22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018d1c:	8a7b      	ldrh	r3, [r7, #18]
 8018d1e:	b25b      	sxtb	r3, r3
 8018d20:	e0f3      	b.n	8018f0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018d22:	8a7b      	ldrh	r3, [r7, #18]
 8018d24:	2b7e      	cmp	r3, #126	; 0x7e
 8018d26:	d906      	bls.n	8018d36 <etharp_query+0x7e>
 8018d28:	4b7a      	ldr	r3, [pc, #488]	; (8018f14 <etharp_query+0x25c>)
 8018d2a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018d2e:	497a      	ldr	r1, [pc, #488]	; (8018f18 <etharp_query+0x260>)
 8018d30:	487a      	ldr	r0, [pc, #488]	; (8018f1c <etharp_query+0x264>)
 8018d32:	f002 f8f5 	bl	801af20 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018d36:	8a7b      	ldrh	r3, [r7, #18]
 8018d38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018d3a:	7c7a      	ldrb	r2, [r7, #17]
 8018d3c:	4978      	ldr	r1, [pc, #480]	; (8018f20 <etharp_query+0x268>)
 8018d3e:	4613      	mov	r3, r2
 8018d40:	005b      	lsls	r3, r3, #1
 8018d42:	4413      	add	r3, r2
 8018d44:	00db      	lsls	r3, r3, #3
 8018d46:	440b      	add	r3, r1
 8018d48:	3314      	adds	r3, #20
 8018d4a:	781b      	ldrb	r3, [r3, #0]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d115      	bne.n	8018d7c <etharp_query+0xc4>
    is_new_entry = 1;
 8018d50:	2301      	movs	r3, #1
 8018d52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018d54:	7c7a      	ldrb	r2, [r7, #17]
 8018d56:	4972      	ldr	r1, [pc, #456]	; (8018f20 <etharp_query+0x268>)
 8018d58:	4613      	mov	r3, r2
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	4413      	add	r3, r2
 8018d5e:	00db      	lsls	r3, r3, #3
 8018d60:	440b      	add	r3, r1
 8018d62:	3314      	adds	r3, #20
 8018d64:	2201      	movs	r2, #1
 8018d66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018d68:	7c7a      	ldrb	r2, [r7, #17]
 8018d6a:	496d      	ldr	r1, [pc, #436]	; (8018f20 <etharp_query+0x268>)
 8018d6c:	4613      	mov	r3, r2
 8018d6e:	005b      	lsls	r3, r3, #1
 8018d70:	4413      	add	r3, r2
 8018d72:	00db      	lsls	r3, r3, #3
 8018d74:	440b      	add	r3, r1
 8018d76:	3308      	adds	r3, #8
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018d7c:	7c7a      	ldrb	r2, [r7, #17]
 8018d7e:	4968      	ldr	r1, [pc, #416]	; (8018f20 <etharp_query+0x268>)
 8018d80:	4613      	mov	r3, r2
 8018d82:	005b      	lsls	r3, r3, #1
 8018d84:	4413      	add	r3, r2
 8018d86:	00db      	lsls	r3, r3, #3
 8018d88:	440b      	add	r3, r1
 8018d8a:	3314      	adds	r3, #20
 8018d8c:	781b      	ldrb	r3, [r3, #0]
 8018d8e:	2b01      	cmp	r3, #1
 8018d90:	d011      	beq.n	8018db6 <etharp_query+0xfe>
 8018d92:	7c7a      	ldrb	r2, [r7, #17]
 8018d94:	4962      	ldr	r1, [pc, #392]	; (8018f20 <etharp_query+0x268>)
 8018d96:	4613      	mov	r3, r2
 8018d98:	005b      	lsls	r3, r3, #1
 8018d9a:	4413      	add	r3, r2
 8018d9c:	00db      	lsls	r3, r3, #3
 8018d9e:	440b      	add	r3, r1
 8018da0:	3314      	adds	r3, #20
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	2b01      	cmp	r3, #1
 8018da6:	d806      	bhi.n	8018db6 <etharp_query+0xfe>
 8018da8:	4b5a      	ldr	r3, [pc, #360]	; (8018f14 <etharp_query+0x25c>)
 8018daa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018dae:	495d      	ldr	r1, [pc, #372]	; (8018f24 <etharp_query+0x26c>)
 8018db0:	485a      	ldr	r0, [pc, #360]	; (8018f1c <etharp_query+0x264>)
 8018db2:	f002 f8b5 	bl	801af20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018db6:	6a3b      	ldr	r3, [r7, #32]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d102      	bne.n	8018dc2 <etharp_query+0x10a>
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d10c      	bne.n	8018ddc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018dc2:	68b9      	ldr	r1, [r7, #8]
 8018dc4:	68f8      	ldr	r0, [r7, #12]
 8018dc6:	f000 f963 	bl	8019090 <etharp_request>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d102      	bne.n	8018ddc <etharp_query+0x124>
      return result;
 8018dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018dda:	e096      	b.n	8018f0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d106      	bne.n	8018df0 <etharp_query+0x138>
 8018de2:	4b4c      	ldr	r3, [pc, #304]	; (8018f14 <etharp_query+0x25c>)
 8018de4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018de8:	494f      	ldr	r1, [pc, #316]	; (8018f28 <etharp_query+0x270>)
 8018dea:	484c      	ldr	r0, [pc, #304]	; (8018f1c <etharp_query+0x264>)
 8018dec:	f002 f898 	bl	801af20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018df0:	7c7a      	ldrb	r2, [r7, #17]
 8018df2:	494b      	ldr	r1, [pc, #300]	; (8018f20 <etharp_query+0x268>)
 8018df4:	4613      	mov	r3, r2
 8018df6:	005b      	lsls	r3, r3, #1
 8018df8:	4413      	add	r3, r2
 8018dfa:	00db      	lsls	r3, r3, #3
 8018dfc:	440b      	add	r3, r1
 8018dfe:	3314      	adds	r3, #20
 8018e00:	781b      	ldrb	r3, [r3, #0]
 8018e02:	2b01      	cmp	r3, #1
 8018e04:	d917      	bls.n	8018e36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018e06:	4a49      	ldr	r2, [pc, #292]	; (8018f2c <etharp_query+0x274>)
 8018e08:	7c7b      	ldrb	r3, [r7, #17]
 8018e0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018e0c:	7c7a      	ldrb	r2, [r7, #17]
 8018e0e:	4613      	mov	r3, r2
 8018e10:	005b      	lsls	r3, r3, #1
 8018e12:	4413      	add	r3, r2
 8018e14:	00db      	lsls	r3, r3, #3
 8018e16:	3308      	adds	r3, #8
 8018e18:	4a41      	ldr	r2, [pc, #260]	; (8018f20 <etharp_query+0x268>)
 8018e1a:	4413      	add	r3, r2
 8018e1c:	3304      	adds	r3, #4
 8018e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e22:	9200      	str	r2, [sp, #0]
 8018e24:	697a      	ldr	r2, [r7, #20]
 8018e26:	6879      	ldr	r1, [r7, #4]
 8018e28:	68f8      	ldr	r0, [r7, #12]
 8018e2a:	f001 fcb3 	bl	801a794 <ethernet_output>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e34:	e067      	b.n	8018f06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018e36:	7c7a      	ldrb	r2, [r7, #17]
 8018e38:	4939      	ldr	r1, [pc, #228]	; (8018f20 <etharp_query+0x268>)
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	4413      	add	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	440b      	add	r3, r1
 8018e44:	3314      	adds	r3, #20
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	2b01      	cmp	r3, #1
 8018e4a:	d15c      	bne.n	8018f06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018e54:	e01c      	b.n	8018e90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018e56:	69fb      	ldr	r3, [r7, #28]
 8018e58:	895a      	ldrh	r2, [r3, #10]
 8018e5a:	69fb      	ldr	r3, [r7, #28]
 8018e5c:	891b      	ldrh	r3, [r3, #8]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	d10a      	bne.n	8018e78 <etharp_query+0x1c0>
 8018e62:	69fb      	ldr	r3, [r7, #28]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d006      	beq.n	8018e78 <etharp_query+0x1c0>
 8018e6a:	4b2a      	ldr	r3, [pc, #168]	; (8018f14 <etharp_query+0x25c>)
 8018e6c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018e70:	492f      	ldr	r1, [pc, #188]	; (8018f30 <etharp_query+0x278>)
 8018e72:	482a      	ldr	r0, [pc, #168]	; (8018f1c <etharp_query+0x264>)
 8018e74:	f002 f854 	bl	801af20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	7b1b      	ldrb	r3, [r3, #12]
 8018e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d002      	beq.n	8018e8a <etharp_query+0x1d2>
        copy_needed = 1;
 8018e84:	2301      	movs	r3, #1
 8018e86:	61bb      	str	r3, [r7, #24]
        break;
 8018e88:	e005      	b.n	8018e96 <etharp_query+0x1de>
      }
      p = p->next;
 8018e8a:	69fb      	ldr	r3, [r7, #28]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018e90:	69fb      	ldr	r3, [r7, #28]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d1df      	bne.n	8018e56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018e96:	69bb      	ldr	r3, [r7, #24]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d007      	beq.n	8018eac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018e9c:	687a      	ldr	r2, [r7, #4]
 8018e9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018ea2:	200e      	movs	r0, #14
 8018ea4:	f7f6 fc66 	bl	800f774 <pbuf_clone>
 8018ea8:	61f8      	str	r0, [r7, #28]
 8018eaa:	e004      	b.n	8018eb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018eb0:	69f8      	ldr	r0, [r7, #28]
 8018eb2:	f7f6 fa8d 	bl	800f3d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d021      	beq.n	8018f00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018ebc:	7c7a      	ldrb	r2, [r7, #17]
 8018ebe:	4918      	ldr	r1, [pc, #96]	; (8018f20 <etharp_query+0x268>)
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	005b      	lsls	r3, r3, #1
 8018ec4:	4413      	add	r3, r2
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	440b      	add	r3, r1
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d00a      	beq.n	8018ee6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018ed0:	7c7a      	ldrb	r2, [r7, #17]
 8018ed2:	4913      	ldr	r1, [pc, #76]	; (8018f20 <etharp_query+0x268>)
 8018ed4:	4613      	mov	r3, r2
 8018ed6:	005b      	lsls	r3, r3, #1
 8018ed8:	4413      	add	r3, r2
 8018eda:	00db      	lsls	r3, r3, #3
 8018edc:	440b      	add	r3, r1
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7f6 f9cf 	bl	800f284 <pbuf_free>
      }
      arp_table[i].q = p;
 8018ee6:	7c7a      	ldrb	r2, [r7, #17]
 8018ee8:	490d      	ldr	r1, [pc, #52]	; (8018f20 <etharp_query+0x268>)
 8018eea:	4613      	mov	r3, r2
 8018eec:	005b      	lsls	r3, r3, #1
 8018eee:	4413      	add	r3, r2
 8018ef0:	00db      	lsls	r3, r3, #3
 8018ef2:	440b      	add	r3, r1
 8018ef4:	69fa      	ldr	r2, [r7, #28]
 8018ef6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018efe:	e002      	b.n	8018f06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018f00:	23ff      	movs	r3, #255	; 0xff
 8018f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018f06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3728      	adds	r7, #40	; 0x28
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
 8018f12:	bf00      	nop
 8018f14:	0801f018 	.word	0x0801f018
 8018f18:	0801f1c4 	.word	0x0801f1c4
 8018f1c:	0801f090 	.word	0x0801f090
 8018f20:	24009dfc 	.word	0x24009dfc
 8018f24:	0801f1d4 	.word	0x0801f1d4
 8018f28:	0801f1b8 	.word	0x0801f1b8
 8018f2c:	24009eec 	.word	0x24009eec
 8018f30:	0801f1fc 	.word	0x0801f1fc

08018f34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b08a      	sub	sp, #40	; 0x28
 8018f38:	af02      	add	r7, sp, #8
 8018f3a:	60f8      	str	r0, [r7, #12]
 8018f3c:	60b9      	str	r1, [r7, #8]
 8018f3e:	607a      	str	r2, [r7, #4]
 8018f40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018f42:	2300      	movs	r3, #0
 8018f44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d106      	bne.n	8018f5a <etharp_raw+0x26>
 8018f4c:	4b3a      	ldr	r3, [pc, #232]	; (8019038 <etharp_raw+0x104>)
 8018f4e:	f240 4257 	movw	r2, #1111	; 0x457
 8018f52:	493a      	ldr	r1, [pc, #232]	; (801903c <etharp_raw+0x108>)
 8018f54:	483a      	ldr	r0, [pc, #232]	; (8019040 <etharp_raw+0x10c>)
 8018f56:	f001 ffe3 	bl	801af20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f5e:	211c      	movs	r1, #28
 8018f60:	200e      	movs	r0, #14
 8018f62:	f7f5 feab 	bl	800ecbc <pbuf_alloc>
 8018f66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018f68:	69bb      	ldr	r3, [r7, #24]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d102      	bne.n	8018f74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f72:	e05d      	b.n	8019030 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018f74:	69bb      	ldr	r3, [r7, #24]
 8018f76:	895b      	ldrh	r3, [r3, #10]
 8018f78:	2b1b      	cmp	r3, #27
 8018f7a:	d806      	bhi.n	8018f8a <etharp_raw+0x56>
 8018f7c:	4b2e      	ldr	r3, [pc, #184]	; (8019038 <etharp_raw+0x104>)
 8018f7e:	f240 4262 	movw	r2, #1122	; 0x462
 8018f82:	4930      	ldr	r1, [pc, #192]	; (8019044 <etharp_raw+0x110>)
 8018f84:	482e      	ldr	r0, [pc, #184]	; (8019040 <etharp_raw+0x10c>)
 8018f86:	f001 ffcb 	bl	801af20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018f8a:	69bb      	ldr	r3, [r7, #24]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018f90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018f92:	4618      	mov	r0, r3
 8018f94:	f7f4 fcc0 	bl	800d918 <lwip_htons>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	461a      	mov	r2, r3
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018fa6:	2b06      	cmp	r3, #6
 8018fa8:	d006      	beq.n	8018fb8 <etharp_raw+0x84>
 8018faa:	4b23      	ldr	r3, [pc, #140]	; (8019038 <etharp_raw+0x104>)
 8018fac:	f240 4269 	movw	r2, #1129	; 0x469
 8018fb0:	4925      	ldr	r1, [pc, #148]	; (8019048 <etharp_raw+0x114>)
 8018fb2:	4823      	ldr	r0, [pc, #140]	; (8019040 <etharp_raw+0x10c>)
 8018fb4:	f001 ffb4 	bl	801af20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	3308      	adds	r3, #8
 8018fbc:	2206      	movs	r2, #6
 8018fbe:	6839      	ldr	r1, [r7, #0]
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f001 ff3c 	bl	801ae3e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	3312      	adds	r3, #18
 8018fca:	2206      	movs	r2, #6
 8018fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f001 ff35 	bl	801ae3e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	330e      	adds	r3, #14
 8018fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fda:	6812      	ldr	r2, [r2, #0]
 8018fdc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	3318      	adds	r3, #24
 8018fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fe4:	6812      	ldr	r2, [r2, #0]
 8018fe6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018fe8:	697b      	ldr	r3, [r7, #20]
 8018fea:	2200      	movs	r2, #0
 8018fec:	701a      	strb	r2, [r3, #0]
 8018fee:	2200      	movs	r2, #0
 8018ff0:	f042 0201 	orr.w	r2, r2, #1
 8018ff4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f042 0208 	orr.w	r2, r2, #8
 8018ffe:	709a      	strb	r2, [r3, #2]
 8019000:	2200      	movs	r2, #0
 8019002:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019004:	697b      	ldr	r3, [r7, #20]
 8019006:	2206      	movs	r2, #6
 8019008:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	2204      	movs	r2, #4
 801900e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019010:	f640 0306 	movw	r3, #2054	; 0x806
 8019014:	9300      	str	r3, [sp, #0]
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	68ba      	ldr	r2, [r7, #8]
 801901a:	69b9      	ldr	r1, [r7, #24]
 801901c:	68f8      	ldr	r0, [r7, #12]
 801901e:	f001 fbb9 	bl	801a794 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019022:	69b8      	ldr	r0, [r7, #24]
 8019024:	f7f6 f92e 	bl	800f284 <pbuf_free>
  p = NULL;
 8019028:	2300      	movs	r3, #0
 801902a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801902c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019030:	4618      	mov	r0, r3
 8019032:	3720      	adds	r7, #32
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}
 8019038:	0801f018 	.word	0x0801f018
 801903c:	0801f168 	.word	0x0801f168
 8019040:	0801f090 	.word	0x0801f090
 8019044:	0801f218 	.word	0x0801f218
 8019048:	0801f24c 	.word	0x0801f24c

0801904c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b088      	sub	sp, #32
 8019050:	af04      	add	r7, sp, #16
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019068:	2201      	movs	r2, #1
 801906a:	9203      	str	r2, [sp, #12]
 801906c:	68ba      	ldr	r2, [r7, #8]
 801906e:	9202      	str	r2, [sp, #8]
 8019070:	4a06      	ldr	r2, [pc, #24]	; (801908c <etharp_request_dst+0x40>)
 8019072:	9201      	str	r2, [sp, #4]
 8019074:	9300      	str	r3, [sp, #0]
 8019076:	4603      	mov	r3, r0
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	68f8      	ldr	r0, [r7, #12]
 801907c:	f7ff ff5a 	bl	8018f34 <etharp_raw>
 8019080:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019082:	4618      	mov	r0, r3
 8019084:	3710      	adds	r7, #16
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}
 801908a:	bf00      	nop
 801908c:	0801f854 	.word	0x0801f854

08019090 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801909a:	4a05      	ldr	r2, [pc, #20]	; (80190b0 <etharp_request+0x20>)
 801909c:	6839      	ldr	r1, [r7, #0]
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	f7ff ffd4 	bl	801904c <etharp_request_dst>
 80190a4:	4603      	mov	r3, r0
}
 80190a6:	4618      	mov	r0, r3
 80190a8:	3708      	adds	r7, #8
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}
 80190ae:	bf00      	nop
 80190b0:	0801f84c 	.word	0x0801f84c

080190b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b08e      	sub	sp, #56	; 0x38
 80190b8:	af04      	add	r7, sp, #16
 80190ba:	6078      	str	r0, [r7, #4]
 80190bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80190be:	4b87      	ldr	r3, [pc, #540]	; (80192dc <icmp_input+0x228>)
 80190c0:	689b      	ldr	r3, [r3, #8]
 80190c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80190c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	f003 030f 	and.w	r3, r3, #15
 80190cc:	b2db      	uxtb	r3, r3
 80190ce:	009b      	lsls	r3, r3, #2
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80190d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190d6:	2b13      	cmp	r3, #19
 80190d8:	f240 80e8 	bls.w	80192ac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	895b      	ldrh	r3, [r3, #10]
 80190e0:	2b03      	cmp	r3, #3
 80190e2:	f240 80e5 	bls.w	80192b0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80190f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	f000 80d2 	beq.w	801929e <icmp_input+0x1ea>
 80190fa:	2b08      	cmp	r3, #8
 80190fc:	f040 80d2 	bne.w	80192a4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019100:	4b77      	ldr	r3, [pc, #476]	; (80192e0 <icmp_input+0x22c>)
 8019102:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019104:	4b75      	ldr	r3, [pc, #468]	; (80192dc <icmp_input+0x228>)
 8019106:	695b      	ldr	r3, [r3, #20]
 8019108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801910c:	2be0      	cmp	r3, #224	; 0xe0
 801910e:	f000 80d6 	beq.w	80192be <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019112:	4b72      	ldr	r3, [pc, #456]	; (80192dc <icmp_input+0x228>)
 8019114:	695b      	ldr	r3, [r3, #20]
 8019116:	4a71      	ldr	r2, [pc, #452]	; (80192dc <icmp_input+0x228>)
 8019118:	6812      	ldr	r2, [r2, #0]
 801911a:	4611      	mov	r1, r2
 801911c:	4618      	mov	r0, r3
 801911e:	f000 fc31 	bl	8019984 <ip4_addr_isbroadcast_u32>
 8019122:	4603      	mov	r3, r0
 8019124:	2b00      	cmp	r3, #0
 8019126:	f040 80cc 	bne.w	80192c2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	891b      	ldrh	r3, [r3, #8]
 801912e:	2b07      	cmp	r3, #7
 8019130:	f240 80c0 	bls.w	80192b4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019134:	6878      	ldr	r0, [r7, #4]
 8019136:	f7f4 fc8c 	bl	800da52 <inet_chksum_pbuf>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d003      	beq.n	8019148 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f7f6 f89f 	bl	800f284 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019146:	e0c5      	b.n	80192d4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801914a:	330e      	adds	r3, #14
 801914c:	4619      	mov	r1, r3
 801914e:	6878      	ldr	r0, [r7, #4]
 8019150:	f7f6 f802 	bl	800f158 <pbuf_add_header>
 8019154:	4603      	mov	r3, r0
 8019156:	2b00      	cmp	r3, #0
 8019158:	d04b      	beq.n	80191f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	891a      	ldrh	r2, [r3, #8]
 801915e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019160:	4413      	add	r3, r2
 8019162:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	891b      	ldrh	r3, [r3, #8]
 8019168:	8b7a      	ldrh	r2, [r7, #26]
 801916a:	429a      	cmp	r2, r3
 801916c:	f0c0 80ab 	bcc.w	80192c6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019170:	8b7b      	ldrh	r3, [r7, #26]
 8019172:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019176:	4619      	mov	r1, r3
 8019178:	200e      	movs	r0, #14
 801917a:	f7f5 fd9f 	bl	800ecbc <pbuf_alloc>
 801917e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	2b00      	cmp	r3, #0
 8019184:	f000 80a1 	beq.w	80192ca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	895b      	ldrh	r3, [r3, #10]
 801918c:	461a      	mov	r2, r3
 801918e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019190:	3308      	adds	r3, #8
 8019192:	429a      	cmp	r2, r3
 8019194:	d203      	bcs.n	801919e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019196:	6978      	ldr	r0, [r7, #20]
 8019198:	f7f6 f874 	bl	800f284 <pbuf_free>
          goto icmperr;
 801919c:	e096      	b.n	80192cc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80191a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191a6:	4618      	mov	r0, r3
 80191a8:	f001 fe49 	bl	801ae3e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80191ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191ae:	4619      	mov	r1, r3
 80191b0:	6978      	ldr	r0, [r7, #20]
 80191b2:	f7f5 ffe1 	bl	800f178 <pbuf_remove_header>
 80191b6:	4603      	mov	r3, r0
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d009      	beq.n	80191d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80191bc:	4b49      	ldr	r3, [pc, #292]	; (80192e4 <icmp_input+0x230>)
 80191be:	22b6      	movs	r2, #182	; 0xb6
 80191c0:	4949      	ldr	r1, [pc, #292]	; (80192e8 <icmp_input+0x234>)
 80191c2:	484a      	ldr	r0, [pc, #296]	; (80192ec <icmp_input+0x238>)
 80191c4:	f001 feac 	bl	801af20 <iprintf>
          pbuf_free(r);
 80191c8:	6978      	ldr	r0, [r7, #20]
 80191ca:	f7f6 f85b 	bl	800f284 <pbuf_free>
          goto icmperr;
 80191ce:	e07d      	b.n	80192cc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80191d0:	6879      	ldr	r1, [r7, #4]
 80191d2:	6978      	ldr	r0, [r7, #20]
 80191d4:	f7f6 f98a 	bl	800f4ec <pbuf_copy>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d003      	beq.n	80191e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80191de:	6978      	ldr	r0, [r7, #20]
 80191e0:	f7f6 f850 	bl	800f284 <pbuf_free>
          goto icmperr;
 80191e4:	e072      	b.n	80192cc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80191e6:	6878      	ldr	r0, [r7, #4]
 80191e8:	f7f6 f84c 	bl	800f284 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80191ec:	697b      	ldr	r3, [r7, #20]
 80191ee:	607b      	str	r3, [r7, #4]
 80191f0:	e00f      	b.n	8019212 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80191f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191f4:	330e      	adds	r3, #14
 80191f6:	4619      	mov	r1, r3
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f7f5 ffbd 	bl	800f178 <pbuf_remove_header>
 80191fe:	4603      	mov	r3, r0
 8019200:	2b00      	cmp	r3, #0
 8019202:	d006      	beq.n	8019212 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019204:	4b37      	ldr	r3, [pc, #220]	; (80192e4 <icmp_input+0x230>)
 8019206:	22c7      	movs	r2, #199	; 0xc7
 8019208:	4939      	ldr	r1, [pc, #228]	; (80192f0 <icmp_input+0x23c>)
 801920a:	4838      	ldr	r0, [pc, #224]	; (80192ec <icmp_input+0x238>)
 801920c:	f001 fe88 	bl	801af20 <iprintf>
          goto icmperr;
 8019210:	e05c      	b.n	80192cc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801921a:	4619      	mov	r1, r3
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f7f5 ff9b 	bl	800f158 <pbuf_add_header>
 8019222:	4603      	mov	r3, r0
 8019224:	2b00      	cmp	r3, #0
 8019226:	d13c      	bne.n	80192a2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801922e:	69fb      	ldr	r3, [r7, #28]
 8019230:	681a      	ldr	r2, [r3, #0]
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019236:	4b29      	ldr	r3, [pc, #164]	; (80192dc <icmp_input+0x228>)
 8019238:	691a      	ldr	r2, [r3, #16]
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	2200      	movs	r2, #0
 8019242:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	885b      	ldrh	r3, [r3, #2]
 8019248:	b29b      	uxth	r3, r3
 801924a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801924e:	4293      	cmp	r3, r2
 8019250:	d907      	bls.n	8019262 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019252:	693b      	ldr	r3, [r7, #16]
 8019254:	885b      	ldrh	r3, [r3, #2]
 8019256:	b29b      	uxth	r3, r3
 8019258:	3309      	adds	r3, #9
 801925a:	b29a      	uxth	r2, r3
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	805a      	strh	r2, [r3, #2]
 8019260:	e006      	b.n	8019270 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019262:	693b      	ldr	r3, [r7, #16]
 8019264:	885b      	ldrh	r3, [r3, #2]
 8019266:	b29b      	uxth	r3, r3
 8019268:	3308      	adds	r3, #8
 801926a:	b29a      	uxth	r2, r3
 801926c:	693b      	ldr	r3, [r7, #16]
 801926e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	22ff      	movs	r2, #255	; 0xff
 8019274:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	2200      	movs	r2, #0
 801927a:	729a      	strb	r2, [r3, #10]
 801927c:	2200      	movs	r2, #0
 801927e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	9302      	str	r3, [sp, #8]
 8019284:	2301      	movs	r3, #1
 8019286:	9301      	str	r3, [sp, #4]
 8019288:	2300      	movs	r3, #0
 801928a:	9300      	str	r3, [sp, #0]
 801928c:	23ff      	movs	r3, #255	; 0xff
 801928e:	2200      	movs	r2, #0
 8019290:	69f9      	ldr	r1, [r7, #28]
 8019292:	6878      	ldr	r0, [r7, #4]
 8019294:	f000 fa9e 	bl	80197d4 <ip4_output_if>
 8019298:	4603      	mov	r3, r0
 801929a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801929c:	e001      	b.n	80192a2 <icmp_input+0x1ee>
      break;
 801929e:	bf00      	nop
 80192a0:	e000      	b.n	80192a4 <icmp_input+0x1f0>
      break;
 80192a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80192a4:	6878      	ldr	r0, [r7, #4]
 80192a6:	f7f5 ffed 	bl	800f284 <pbuf_free>
  return;
 80192aa:	e013      	b.n	80192d4 <icmp_input+0x220>
    goto lenerr;
 80192ac:	bf00      	nop
 80192ae:	e002      	b.n	80192b6 <icmp_input+0x202>
    goto lenerr;
 80192b0:	bf00      	nop
 80192b2:	e000      	b.n	80192b6 <icmp_input+0x202>
        goto lenerr;
 80192b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7f5 ffe4 	bl	800f284 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80192bc:	e00a      	b.n	80192d4 <icmp_input+0x220>
        goto icmperr;
 80192be:	bf00      	nop
 80192c0:	e004      	b.n	80192cc <icmp_input+0x218>
        goto icmperr;
 80192c2:	bf00      	nop
 80192c4:	e002      	b.n	80192cc <icmp_input+0x218>
          goto icmperr;
 80192c6:	bf00      	nop
 80192c8:	e000      	b.n	80192cc <icmp_input+0x218>
          goto icmperr;
 80192ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f7f5 ffd9 	bl	800f284 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80192d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80192d4:	3728      	adds	r7, #40	; 0x28
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}
 80192da:	bf00      	nop
 80192dc:	2400a634 	.word	0x2400a634
 80192e0:	2400a648 	.word	0x2400a648
 80192e4:	0801f290 	.word	0x0801f290
 80192e8:	0801f2c8 	.word	0x0801f2c8
 80192ec:	0801f300 	.word	0x0801f300
 80192f0:	0801f328 	.word	0x0801f328

080192f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	460b      	mov	r3, r1
 80192fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019300:	78fb      	ldrb	r3, [r7, #3]
 8019302:	461a      	mov	r2, r3
 8019304:	2103      	movs	r1, #3
 8019306:	6878      	ldr	r0, [r7, #4]
 8019308:	f000 f814 	bl	8019334 <icmp_send_response>
}
 801930c:	bf00      	nop
 801930e:	3708      	adds	r7, #8
 8019310:	46bd      	mov	sp, r7
 8019312:	bd80      	pop	{r7, pc}

08019314 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b082      	sub	sp, #8
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	460b      	mov	r3, r1
 801931e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019320:	78fb      	ldrb	r3, [r7, #3]
 8019322:	461a      	mov	r2, r3
 8019324:	210b      	movs	r1, #11
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f000 f804 	bl	8019334 <icmp_send_response>
}
 801932c:	bf00      	nop
 801932e:	3708      	adds	r7, #8
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b08c      	sub	sp, #48	; 0x30
 8019338:	af04      	add	r7, sp, #16
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	460b      	mov	r3, r1
 801933e:	70fb      	strb	r3, [r7, #3]
 8019340:	4613      	mov	r3, r2
 8019342:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019344:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019348:	2124      	movs	r1, #36	; 0x24
 801934a:	2022      	movs	r0, #34	; 0x22
 801934c:	f7f5 fcb6 	bl	800ecbc <pbuf_alloc>
 8019350:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019352:	69fb      	ldr	r3, [r7, #28]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d056      	beq.n	8019406 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019358:	69fb      	ldr	r3, [r7, #28]
 801935a:	895b      	ldrh	r3, [r3, #10]
 801935c:	2b23      	cmp	r3, #35	; 0x23
 801935e:	d806      	bhi.n	801936e <icmp_send_response+0x3a>
 8019360:	4b2b      	ldr	r3, [pc, #172]	; (8019410 <icmp_send_response+0xdc>)
 8019362:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019366:	492b      	ldr	r1, [pc, #172]	; (8019414 <icmp_send_response+0xe0>)
 8019368:	482b      	ldr	r0, [pc, #172]	; (8019418 <icmp_send_response+0xe4>)
 801936a:	f001 fdd9 	bl	801af20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	685b      	ldr	r3, [r3, #4]
 8019372:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019374:	69fb      	ldr	r3, [r7, #28]
 8019376:	685b      	ldr	r3, [r3, #4]
 8019378:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801937a:	697b      	ldr	r3, [r7, #20]
 801937c:	78fa      	ldrb	r2, [r7, #3]
 801937e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019380:	697b      	ldr	r3, [r7, #20]
 8019382:	78ba      	ldrb	r2, [r7, #2]
 8019384:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	2200      	movs	r2, #0
 801938a:	711a      	strb	r2, [r3, #4]
 801938c:	2200      	movs	r2, #0
 801938e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	2200      	movs	r2, #0
 8019394:	719a      	strb	r2, [r3, #6]
 8019396:	2200      	movs	r2, #0
 8019398:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801939a:	69fb      	ldr	r3, [r7, #28]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	f103 0008 	add.w	r0, r3, #8
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	221c      	movs	r2, #28
 80193a8:	4619      	mov	r1, r3
 80193aa:	f001 fd48 	bl	801ae3e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80193ae:	69bb      	ldr	r3, [r7, #24]
 80193b0:	68db      	ldr	r3, [r3, #12]
 80193b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80193b4:	f107 030c 	add.w	r3, r7, #12
 80193b8:	4618      	mov	r0, r3
 80193ba:	f000 f82f 	bl	801941c <ip4_route>
 80193be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80193c0:	693b      	ldr	r3, [r7, #16]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d01b      	beq.n	80193fe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	2200      	movs	r2, #0
 80193ca:	709a      	strb	r2, [r3, #2]
 80193cc:	2200      	movs	r2, #0
 80193ce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80193d0:	69fb      	ldr	r3, [r7, #28]
 80193d2:	895b      	ldrh	r3, [r3, #10]
 80193d4:	4619      	mov	r1, r3
 80193d6:	6978      	ldr	r0, [r7, #20]
 80193d8:	f7f4 fb29 	bl	800da2e <inet_chksum>
 80193dc:	4603      	mov	r3, r0
 80193de:	461a      	mov	r2, r3
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80193e4:	f107 020c 	add.w	r2, r7, #12
 80193e8:	693b      	ldr	r3, [r7, #16]
 80193ea:	9302      	str	r3, [sp, #8]
 80193ec:	2301      	movs	r3, #1
 80193ee:	9301      	str	r3, [sp, #4]
 80193f0:	2300      	movs	r3, #0
 80193f2:	9300      	str	r3, [sp, #0]
 80193f4:	23ff      	movs	r3, #255	; 0xff
 80193f6:	2100      	movs	r1, #0
 80193f8:	69f8      	ldr	r0, [r7, #28]
 80193fa:	f000 f9eb 	bl	80197d4 <ip4_output_if>
  }
  pbuf_free(q);
 80193fe:	69f8      	ldr	r0, [r7, #28]
 8019400:	f7f5 ff40 	bl	800f284 <pbuf_free>
 8019404:	e000      	b.n	8019408 <icmp_send_response+0xd4>
    return;
 8019406:	bf00      	nop
}
 8019408:	3720      	adds	r7, #32
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
 801940e:	bf00      	nop
 8019410:	0801f290 	.word	0x0801f290
 8019414:	0801f35c 	.word	0x0801f35c
 8019418:	0801f300 	.word	0x0801f300

0801941c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801941c:	b480      	push	{r7}
 801941e:	b085      	sub	sp, #20
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019424:	4b33      	ldr	r3, [pc, #204]	; (80194f4 <ip4_route+0xd8>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	60fb      	str	r3, [r7, #12]
 801942a:	e036      	b.n	801949a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019432:	f003 0301 	and.w	r3, r3, #1
 8019436:	b2db      	uxtb	r3, r3
 8019438:	2b00      	cmp	r3, #0
 801943a:	d02b      	beq.n	8019494 <ip4_route+0x78>
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019442:	089b      	lsrs	r3, r3, #2
 8019444:	f003 0301 	and.w	r3, r3, #1
 8019448:	b2db      	uxtb	r3, r3
 801944a:	2b00      	cmp	r3, #0
 801944c:	d022      	beq.n	8019494 <ip4_route+0x78>
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	3304      	adds	r3, #4
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d01d      	beq.n	8019494 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681a      	ldr	r2, [r3, #0]
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	3304      	adds	r3, #4
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	405a      	eors	r2, r3
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	3308      	adds	r3, #8
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	4013      	ands	r3, r2
 801946c:	2b00      	cmp	r3, #0
 801946e:	d101      	bne.n	8019474 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	e038      	b.n	80194e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801947a:	f003 0302 	and.w	r3, r3, #2
 801947e:	2b00      	cmp	r3, #0
 8019480:	d108      	bne.n	8019494 <ip4_route+0x78>
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	681a      	ldr	r2, [r3, #0]
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	330c      	adds	r3, #12
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	429a      	cmp	r2, r3
 801948e:	d101      	bne.n	8019494 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	e028      	b.n	80194e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	60fb      	str	r3, [r7, #12]
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d1c5      	bne.n	801942c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80194a0:	4b15      	ldr	r3, [pc, #84]	; (80194f8 <ip4_route+0xdc>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d01a      	beq.n	80194de <ip4_route+0xc2>
 80194a8:	4b13      	ldr	r3, [pc, #76]	; (80194f8 <ip4_route+0xdc>)
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80194b0:	f003 0301 	and.w	r3, r3, #1
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d012      	beq.n	80194de <ip4_route+0xc2>
 80194b8:	4b0f      	ldr	r3, [pc, #60]	; (80194f8 <ip4_route+0xdc>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80194c0:	f003 0304 	and.w	r3, r3, #4
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d00a      	beq.n	80194de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80194c8:	4b0b      	ldr	r3, [pc, #44]	; (80194f8 <ip4_route+0xdc>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	3304      	adds	r3, #4
 80194ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d004      	beq.n	80194de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	2b7f      	cmp	r3, #127	; 0x7f
 80194dc:	d101      	bne.n	80194e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80194de:	2300      	movs	r3, #0
 80194e0:	e001      	b.n	80194e6 <ip4_route+0xca>
  }

  return netif_default;
 80194e2:	4b05      	ldr	r3, [pc, #20]	; (80194f8 <ip4_route+0xdc>)
 80194e4:	681b      	ldr	r3, [r3, #0]
}
 80194e6:	4618      	mov	r0, r3
 80194e8:	3714      	adds	r7, #20
 80194ea:	46bd      	mov	sp, r7
 80194ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f0:	4770      	bx	lr
 80194f2:	bf00      	nop
 80194f4:	2400d704 	.word	0x2400d704
 80194f8:	2400d708 	.word	0x2400d708

080194fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801950a:	f003 0301 	and.w	r3, r3, #1
 801950e:	b2db      	uxtb	r3, r3
 8019510:	2b00      	cmp	r3, #0
 8019512:	d016      	beq.n	8019542 <ip4_input_accept+0x46>
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	3304      	adds	r3, #4
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	2b00      	cmp	r3, #0
 801951c:	d011      	beq.n	8019542 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801951e:	4b0b      	ldr	r3, [pc, #44]	; (801954c <ip4_input_accept+0x50>)
 8019520:	695a      	ldr	r2, [r3, #20]
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	3304      	adds	r3, #4
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	429a      	cmp	r2, r3
 801952a:	d008      	beq.n	801953e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801952c:	4b07      	ldr	r3, [pc, #28]	; (801954c <ip4_input_accept+0x50>)
 801952e:	695b      	ldr	r3, [r3, #20]
 8019530:	6879      	ldr	r1, [r7, #4]
 8019532:	4618      	mov	r0, r3
 8019534:	f000 fa26 	bl	8019984 <ip4_addr_isbroadcast_u32>
 8019538:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801953a:	2b00      	cmp	r3, #0
 801953c:	d001      	beq.n	8019542 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801953e:	2301      	movs	r3, #1
 8019540:	e000      	b.n	8019544 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019542:	2300      	movs	r3, #0
}
 8019544:	4618      	mov	r0, r3
 8019546:	3708      	adds	r7, #8
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	2400a634 	.word	0x2400a634

08019550 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b088      	sub	sp, #32
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801955a:	2301      	movs	r3, #1
 801955c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019564:	69fb      	ldr	r3, [r7, #28]
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	091b      	lsrs	r3, r3, #4
 801956a:	b2db      	uxtb	r3, r3
 801956c:	2b04      	cmp	r3, #4
 801956e:	d004      	beq.n	801957a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	f7f5 fe87 	bl	800f284 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019576:	2300      	movs	r3, #0
 8019578:	e123      	b.n	80197c2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801957a:	69fb      	ldr	r3, [r7, #28]
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	f003 030f 	and.w	r3, r3, #15
 8019582:	b2db      	uxtb	r3, r3
 8019584:	009b      	lsls	r3, r3, #2
 8019586:	b2db      	uxtb	r3, r3
 8019588:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801958a:	69fb      	ldr	r3, [r7, #28]
 801958c:	885b      	ldrh	r3, [r3, #2]
 801958e:	b29b      	uxth	r3, r3
 8019590:	4618      	mov	r0, r3
 8019592:	f7f4 f9c1 	bl	800d918 <lwip_htons>
 8019596:	4603      	mov	r3, r0
 8019598:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	891b      	ldrh	r3, [r3, #8]
 801959e:	8a3a      	ldrh	r2, [r7, #16]
 80195a0:	429a      	cmp	r2, r3
 80195a2:	d204      	bcs.n	80195ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80195a4:	8a3b      	ldrh	r3, [r7, #16]
 80195a6:	4619      	mov	r1, r3
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7f5 fce5 	bl	800ef78 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	895b      	ldrh	r3, [r3, #10]
 80195b2:	8a7a      	ldrh	r2, [r7, #18]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d807      	bhi.n	80195c8 <ip4_input+0x78>
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	891b      	ldrh	r3, [r3, #8]
 80195bc:	8a3a      	ldrh	r2, [r7, #16]
 80195be:	429a      	cmp	r2, r3
 80195c0:	d802      	bhi.n	80195c8 <ip4_input+0x78>
 80195c2:	8a7b      	ldrh	r3, [r7, #18]
 80195c4:	2b13      	cmp	r3, #19
 80195c6:	d804      	bhi.n	80195d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f7f5 fe5b 	bl	800f284 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80195ce:	2300      	movs	r3, #0
 80195d0:	e0f7      	b.n	80197c2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80195d2:	69fb      	ldr	r3, [r7, #28]
 80195d4:	691b      	ldr	r3, [r3, #16]
 80195d6:	4a7d      	ldr	r2, [pc, #500]	; (80197cc <ip4_input+0x27c>)
 80195d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80195da:	69fb      	ldr	r3, [r7, #28]
 80195dc:	68db      	ldr	r3, [r3, #12]
 80195de:	4a7b      	ldr	r2, [pc, #492]	; (80197cc <ip4_input+0x27c>)
 80195e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80195e2:	4b7a      	ldr	r3, [pc, #488]	; (80197cc <ip4_input+0x27c>)
 80195e4:	695b      	ldr	r3, [r3, #20]
 80195e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80195ea:	2be0      	cmp	r3, #224	; 0xe0
 80195ec:	d112      	bne.n	8019614 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80195f4:	f003 0301 	and.w	r3, r3, #1
 80195f8:	b2db      	uxtb	r3, r3
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d007      	beq.n	801960e <ip4_input+0xbe>
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	3304      	adds	r3, #4
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d002      	beq.n	801960e <ip4_input+0xbe>
      netif = inp;
 8019608:	683b      	ldr	r3, [r7, #0]
 801960a:	61bb      	str	r3, [r7, #24]
 801960c:	e02a      	b.n	8019664 <ip4_input+0x114>
    } else {
      netif = NULL;
 801960e:	2300      	movs	r3, #0
 8019610:	61bb      	str	r3, [r7, #24]
 8019612:	e027      	b.n	8019664 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019614:	6838      	ldr	r0, [r7, #0]
 8019616:	f7ff ff71 	bl	80194fc <ip4_input_accept>
 801961a:	4603      	mov	r3, r0
 801961c:	2b00      	cmp	r3, #0
 801961e:	d002      	beq.n	8019626 <ip4_input+0xd6>
      netif = inp;
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	61bb      	str	r3, [r7, #24]
 8019624:	e01e      	b.n	8019664 <ip4_input+0x114>
    } else {
      netif = NULL;
 8019626:	2300      	movs	r3, #0
 8019628:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801962a:	4b68      	ldr	r3, [pc, #416]	; (80197cc <ip4_input+0x27c>)
 801962c:	695b      	ldr	r3, [r3, #20]
 801962e:	b2db      	uxtb	r3, r3
 8019630:	2b7f      	cmp	r3, #127	; 0x7f
 8019632:	d017      	beq.n	8019664 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019634:	4b66      	ldr	r3, [pc, #408]	; (80197d0 <ip4_input+0x280>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	61bb      	str	r3, [r7, #24]
 801963a:	e00e      	b.n	801965a <ip4_input+0x10a>
          if (netif == inp) {
 801963c:	69ba      	ldr	r2, [r7, #24]
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	429a      	cmp	r2, r3
 8019642:	d006      	beq.n	8019652 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019644:	69b8      	ldr	r0, [r7, #24]
 8019646:	f7ff ff59 	bl	80194fc <ip4_input_accept>
 801964a:	4603      	mov	r3, r0
 801964c:	2b00      	cmp	r3, #0
 801964e:	d108      	bne.n	8019662 <ip4_input+0x112>
 8019650:	e000      	b.n	8019654 <ip4_input+0x104>
            continue;
 8019652:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019654:	69bb      	ldr	r3, [r7, #24]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	61bb      	str	r3, [r7, #24]
 801965a:	69bb      	ldr	r3, [r7, #24]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1ed      	bne.n	801963c <ip4_input+0xec>
 8019660:	e000      	b.n	8019664 <ip4_input+0x114>
            break;
 8019662:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019664:	69bb      	ldr	r3, [r7, #24]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d111      	bne.n	801968e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801966a:	69fb      	ldr	r3, [r7, #28]
 801966c:	7a5b      	ldrb	r3, [r3, #9]
 801966e:	2b11      	cmp	r3, #17
 8019670:	d10d      	bne.n	801968e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019672:	8a7b      	ldrh	r3, [r7, #18]
 8019674:	69fa      	ldr	r2, [r7, #28]
 8019676:	4413      	add	r3, r2
 8019678:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	885b      	ldrh	r3, [r3, #2]
 801967e:	b29b      	uxth	r3, r3
 8019680:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8019684:	d103      	bne.n	801968e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801968a:	2300      	movs	r3, #0
 801968c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d017      	beq.n	80196c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8019694:	4b4d      	ldr	r3, [pc, #308]	; (80197cc <ip4_input+0x27c>)
 8019696:	691b      	ldr	r3, [r3, #16]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d013      	beq.n	80196c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801969c:	4b4b      	ldr	r3, [pc, #300]	; (80197cc <ip4_input+0x27c>)
 801969e:	691b      	ldr	r3, [r3, #16]
 80196a0:	6839      	ldr	r1, [r7, #0]
 80196a2:	4618      	mov	r0, r3
 80196a4:	f000 f96e 	bl	8019984 <ip4_addr_isbroadcast_u32>
 80196a8:	4603      	mov	r3, r0
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d105      	bne.n	80196ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80196ae:	4b47      	ldr	r3, [pc, #284]	; (80197cc <ip4_input+0x27c>)
 80196b0:	691b      	ldr	r3, [r3, #16]
 80196b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80196b6:	2be0      	cmp	r3, #224	; 0xe0
 80196b8:	d104      	bne.n	80196c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f7f5 fde2 	bl	800f284 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80196c0:	2300      	movs	r3, #0
 80196c2:	e07e      	b.n	80197c2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80196c4:	69bb      	ldr	r3, [r7, #24]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d104      	bne.n	80196d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80196ca:	6878      	ldr	r0, [r7, #4]
 80196cc:	f7f5 fdda 	bl	800f284 <pbuf_free>
    return ERR_OK;
 80196d0:	2300      	movs	r3, #0
 80196d2:	e076      	b.n	80197c2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	88db      	ldrh	r3, [r3, #6]
 80196d8:	b29b      	uxth	r3, r3
 80196da:	461a      	mov	r2, r3
 80196dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80196e0:	4013      	ands	r3, r2
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d00b      	beq.n	80196fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80196e6:	6878      	ldr	r0, [r7, #4]
 80196e8:	f000 fc92 	bl	801a010 <ip4_reass>
 80196ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d101      	bne.n	80196f8 <ip4_input+0x1a8>
      return ERR_OK;
 80196f4:	2300      	movs	r3, #0
 80196f6:	e064      	b.n	80197c2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	685b      	ldr	r3, [r3, #4]
 80196fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80196fe:	4a33      	ldr	r2, [pc, #204]	; (80197cc <ip4_input+0x27c>)
 8019700:	69bb      	ldr	r3, [r7, #24]
 8019702:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019704:	4a31      	ldr	r2, [pc, #196]	; (80197cc <ip4_input+0x27c>)
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801970a:	4a30      	ldr	r2, [pc, #192]	; (80197cc <ip4_input+0x27c>)
 801970c:	69fb      	ldr	r3, [r7, #28]
 801970e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	f003 030f 	and.w	r3, r3, #15
 8019718:	b2db      	uxtb	r3, r3
 801971a:	009b      	lsls	r3, r3, #2
 801971c:	b2db      	uxtb	r3, r3
 801971e:	b29a      	uxth	r2, r3
 8019720:	4b2a      	ldr	r3, [pc, #168]	; (80197cc <ip4_input+0x27c>)
 8019722:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019724:	8a7b      	ldrh	r3, [r7, #18]
 8019726:	4619      	mov	r1, r3
 8019728:	6878      	ldr	r0, [r7, #4]
 801972a:	f7f5 fd25 	bl	800f178 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	7a5b      	ldrb	r3, [r3, #9]
 8019732:	2b11      	cmp	r3, #17
 8019734:	d006      	beq.n	8019744 <ip4_input+0x1f4>
 8019736:	2b11      	cmp	r3, #17
 8019738:	dc13      	bgt.n	8019762 <ip4_input+0x212>
 801973a:	2b01      	cmp	r3, #1
 801973c:	d00c      	beq.n	8019758 <ip4_input+0x208>
 801973e:	2b06      	cmp	r3, #6
 8019740:	d005      	beq.n	801974e <ip4_input+0x1fe>
 8019742:	e00e      	b.n	8019762 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019744:	6839      	ldr	r1, [r7, #0]
 8019746:	6878      	ldr	r0, [r7, #4]
 8019748:	f7fc fa26 	bl	8015b98 <udp_input>
        break;
 801974c:	e026      	b.n	801979c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801974e:	6839      	ldr	r1, [r7, #0]
 8019750:	6878      	ldr	r0, [r7, #4]
 8019752:	f7f7 fde3 	bl	801131c <tcp_input>
        break;
 8019756:	e021      	b.n	801979c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019758:	6839      	ldr	r1, [r7, #0]
 801975a:	6878      	ldr	r0, [r7, #4]
 801975c:	f7ff fcaa 	bl	80190b4 <icmp_input>
        break;
 8019760:	e01c      	b.n	801979c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019762:	4b1a      	ldr	r3, [pc, #104]	; (80197cc <ip4_input+0x27c>)
 8019764:	695b      	ldr	r3, [r3, #20]
 8019766:	69b9      	ldr	r1, [r7, #24]
 8019768:	4618      	mov	r0, r3
 801976a:	f000 f90b 	bl	8019984 <ip4_addr_isbroadcast_u32>
 801976e:	4603      	mov	r3, r0
 8019770:	2b00      	cmp	r3, #0
 8019772:	d10f      	bne.n	8019794 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019774:	4b15      	ldr	r3, [pc, #84]	; (80197cc <ip4_input+0x27c>)
 8019776:	695b      	ldr	r3, [r3, #20]
 8019778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801977c:	2be0      	cmp	r3, #224	; 0xe0
 801977e:	d009      	beq.n	8019794 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019784:	4619      	mov	r1, r3
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f7f5 fd69 	bl	800f25e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801978c:	2102      	movs	r1, #2
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7ff fdb0 	bl	80192f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019794:	6878      	ldr	r0, [r7, #4]
 8019796:	f7f5 fd75 	bl	800f284 <pbuf_free>
        break;
 801979a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801979c:	4b0b      	ldr	r3, [pc, #44]	; (80197cc <ip4_input+0x27c>)
 801979e:	2200      	movs	r2, #0
 80197a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80197a2:	4b0a      	ldr	r3, [pc, #40]	; (80197cc <ip4_input+0x27c>)
 80197a4:	2200      	movs	r2, #0
 80197a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80197a8:	4b08      	ldr	r3, [pc, #32]	; (80197cc <ip4_input+0x27c>)
 80197aa:	2200      	movs	r2, #0
 80197ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80197ae:	4b07      	ldr	r3, [pc, #28]	; (80197cc <ip4_input+0x27c>)
 80197b0:	2200      	movs	r2, #0
 80197b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80197b4:	4b05      	ldr	r3, [pc, #20]	; (80197cc <ip4_input+0x27c>)
 80197b6:	2200      	movs	r2, #0
 80197b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80197ba:	4b04      	ldr	r3, [pc, #16]	; (80197cc <ip4_input+0x27c>)
 80197bc:	2200      	movs	r2, #0
 80197be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80197c0:	2300      	movs	r3, #0
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	3720      	adds	r7, #32
 80197c6:	46bd      	mov	sp, r7
 80197c8:	bd80      	pop	{r7, pc}
 80197ca:	bf00      	nop
 80197cc:	2400a634 	.word	0x2400a634
 80197d0:	2400d704 	.word	0x2400d704

080197d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b08a      	sub	sp, #40	; 0x28
 80197d8:	af04      	add	r7, sp, #16
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	607a      	str	r2, [r7, #4]
 80197e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80197e2:	68bb      	ldr	r3, [r7, #8]
 80197e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d009      	beq.n	8019800 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80197ec:	68bb      	ldr	r3, [r7, #8]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d003      	beq.n	80197fa <ip4_output_if+0x26>
 80197f2:	68bb      	ldr	r3, [r7, #8]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d102      	bne.n	8019800 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80197fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197fc:	3304      	adds	r3, #4
 80197fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019800:	78fa      	ldrb	r2, [r7, #3]
 8019802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019804:	9302      	str	r3, [sp, #8]
 8019806:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801980a:	9301      	str	r3, [sp, #4]
 801980c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019810:	9300      	str	r3, [sp, #0]
 8019812:	4613      	mov	r3, r2
 8019814:	687a      	ldr	r2, [r7, #4]
 8019816:	6979      	ldr	r1, [r7, #20]
 8019818:	68f8      	ldr	r0, [r7, #12]
 801981a:	f000 f805 	bl	8019828 <ip4_output_if_src>
 801981e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019820:	4618      	mov	r0, r3
 8019822:	3718      	adds	r7, #24
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}

08019828 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b088      	sub	sp, #32
 801982c:	af00      	add	r7, sp, #0
 801982e:	60f8      	str	r0, [r7, #12]
 8019830:	60b9      	str	r1, [r7, #8]
 8019832:	607a      	str	r2, [r7, #4]
 8019834:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	7b9b      	ldrb	r3, [r3, #14]
 801983a:	2b01      	cmp	r3, #1
 801983c:	d006      	beq.n	801984c <ip4_output_if_src+0x24>
 801983e:	4b4b      	ldr	r3, [pc, #300]	; (801996c <ip4_output_if_src+0x144>)
 8019840:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019844:	494a      	ldr	r1, [pc, #296]	; (8019970 <ip4_output_if_src+0x148>)
 8019846:	484b      	ldr	r0, [pc, #300]	; (8019974 <ip4_output_if_src+0x14c>)
 8019848:	f001 fb6a 	bl	801af20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d060      	beq.n	8019914 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019852:	2314      	movs	r3, #20
 8019854:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019856:	2114      	movs	r1, #20
 8019858:	68f8      	ldr	r0, [r7, #12]
 801985a:	f7f5 fc7d 	bl	800f158 <pbuf_add_header>
 801985e:	4603      	mov	r3, r0
 8019860:	2b00      	cmp	r3, #0
 8019862:	d002      	beq.n	801986a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019864:	f06f 0301 	mvn.w	r3, #1
 8019868:	e07c      	b.n	8019964 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	895b      	ldrh	r3, [r3, #10]
 8019874:	2b13      	cmp	r3, #19
 8019876:	d806      	bhi.n	8019886 <ip4_output_if_src+0x5e>
 8019878:	4b3c      	ldr	r3, [pc, #240]	; (801996c <ip4_output_if_src+0x144>)
 801987a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801987e:	493e      	ldr	r1, [pc, #248]	; (8019978 <ip4_output_if_src+0x150>)
 8019880:	483c      	ldr	r0, [pc, #240]	; (8019974 <ip4_output_if_src+0x14c>)
 8019882:	f001 fb4d 	bl	801af20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019886:	69fb      	ldr	r3, [r7, #28]
 8019888:	78fa      	ldrb	r2, [r7, #3]
 801988a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019892:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681a      	ldr	r2, [r3, #0]
 8019898:	69fb      	ldr	r3, [r7, #28]
 801989a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801989c:	8b7b      	ldrh	r3, [r7, #26]
 801989e:	089b      	lsrs	r3, r3, #2
 80198a0:	b29b      	uxth	r3, r3
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a8:	b2da      	uxtb	r2, r3
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80198ae:	69fb      	ldr	r3, [r7, #28]
 80198b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80198b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	891b      	ldrh	r3, [r3, #8]
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7f4 f82c 	bl	800d918 <lwip_htons>
 80198c0:	4603      	mov	r3, r0
 80198c2:	461a      	mov	r2, r3
 80198c4:	69fb      	ldr	r3, [r7, #28]
 80198c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80198c8:	69fb      	ldr	r3, [r7, #28]
 80198ca:	2200      	movs	r2, #0
 80198cc:	719a      	strb	r2, [r3, #6]
 80198ce:	2200      	movs	r2, #0
 80198d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80198d2:	4b2a      	ldr	r3, [pc, #168]	; (801997c <ip4_output_if_src+0x154>)
 80198d4:	881b      	ldrh	r3, [r3, #0]
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7f4 f81e 	bl	800d918 <lwip_htons>
 80198dc:	4603      	mov	r3, r0
 80198de:	461a      	mov	r2, r3
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80198e4:	4b25      	ldr	r3, [pc, #148]	; (801997c <ip4_output_if_src+0x154>)
 80198e6:	881b      	ldrh	r3, [r3, #0]
 80198e8:	3301      	adds	r3, #1
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	4b23      	ldr	r3, [pc, #140]	; (801997c <ip4_output_if_src+0x154>)
 80198ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d104      	bne.n	8019900 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80198f6:	4b22      	ldr	r3, [pc, #136]	; (8019980 <ip4_output_if_src+0x158>)
 80198f8:	681a      	ldr	r2, [r3, #0]
 80198fa:	69fb      	ldr	r3, [r7, #28]
 80198fc:	60da      	str	r2, [r3, #12]
 80198fe:	e003      	b.n	8019908 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	681a      	ldr	r2, [r3, #0]
 8019904:	69fb      	ldr	r3, [r7, #28]
 8019906:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	2200      	movs	r2, #0
 801990c:	729a      	strb	r2, [r3, #10]
 801990e:	2200      	movs	r2, #0
 8019910:	72da      	strb	r2, [r3, #11]
 8019912:	e00f      	b.n	8019934 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	895b      	ldrh	r3, [r3, #10]
 8019918:	2b13      	cmp	r3, #19
 801991a:	d802      	bhi.n	8019922 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801991c:	f06f 0301 	mvn.w	r3, #1
 8019920:	e020      	b.n	8019964 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	685b      	ldr	r3, [r3, #4]
 8019926:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	691b      	ldr	r3, [r3, #16]
 801992c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801992e:	f107 0314 	add.w	r3, r7, #20
 8019932:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019938:	2b00      	cmp	r3, #0
 801993a:	d00c      	beq.n	8019956 <ip4_output_if_src+0x12e>
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	891a      	ldrh	r2, [r3, #8]
 8019940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019944:	429a      	cmp	r2, r3
 8019946:	d906      	bls.n	8019956 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019948:	687a      	ldr	r2, [r7, #4]
 801994a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801994c:	68f8      	ldr	r0, [r7, #12]
 801994e:	f000 fd4d 	bl	801a3ec <ip4_frag>
 8019952:	4603      	mov	r3, r0
 8019954:	e006      	b.n	8019964 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019958:	695b      	ldr	r3, [r3, #20]
 801995a:	687a      	ldr	r2, [r7, #4]
 801995c:	68f9      	ldr	r1, [r7, #12]
 801995e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019960:	4798      	blx	r3
 8019962:	4603      	mov	r3, r0
}
 8019964:	4618      	mov	r0, r3
 8019966:	3720      	adds	r7, #32
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}
 801996c:	0801f388 	.word	0x0801f388
 8019970:	0801f3bc 	.word	0x0801f3bc
 8019974:	0801f3c8 	.word	0x0801f3c8
 8019978:	0801f3f0 	.word	0x0801f3f0
 801997c:	24009eee 	.word	0x24009eee
 8019980:	0801f844 	.word	0x0801f844

08019984 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019984:	b480      	push	{r7}
 8019986:	b085      	sub	sp, #20
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019998:	d002      	beq.n	80199a0 <ip4_addr_isbroadcast_u32+0x1c>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d101      	bne.n	80199a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80199a0:	2301      	movs	r3, #1
 80199a2:	e02a      	b.n	80199fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80199aa:	f003 0302 	and.w	r3, r3, #2
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d101      	bne.n	80199b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80199b2:	2300      	movs	r3, #0
 80199b4:	e021      	b.n	80199fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	3304      	adds	r3, #4
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	429a      	cmp	r2, r3
 80199c0:	d101      	bne.n	80199c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80199c2:	2300      	movs	r3, #0
 80199c4:	e019      	b.n	80199fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80199c6:	68fa      	ldr	r2, [r7, #12]
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	3304      	adds	r3, #4
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	405a      	eors	r2, r3
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	3308      	adds	r3, #8
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	4013      	ands	r3, r2
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d10d      	bne.n	80199f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	3308      	adds	r3, #8
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	43da      	mvns	r2, r3
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	3308      	adds	r3, #8
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80199f0:	429a      	cmp	r2, r3
 80199f2:	d101      	bne.n	80199f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80199f4:	2301      	movs	r3, #1
 80199f6:	e000      	b.n	80199fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80199f8:	2300      	movs	r3, #0
  }
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	3714      	adds	r7, #20
 80199fe:	46bd      	mov	sp, r7
 8019a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a04:	4770      	bx	lr
	...

08019a08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b084      	sub	sp, #16
 8019a0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a0e:	2300      	movs	r3, #0
 8019a10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019a12:	4b12      	ldr	r3, [pc, #72]	; (8019a5c <ip_reass_tmr+0x54>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019a18:	e018      	b.n	8019a4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	7fdb      	ldrb	r3, [r3, #31]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d00b      	beq.n	8019a3a <ip_reass_tmr+0x32>
      r->timer--;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	7fdb      	ldrb	r3, [r3, #31]
 8019a26:	3b01      	subs	r3, #1
 8019a28:	b2da      	uxtb	r2, r3
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	60fb      	str	r3, [r7, #12]
 8019a38:	e008      	b.n	8019a4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a44:	68b9      	ldr	r1, [r7, #8]
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f000 f80a 	bl	8019a60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d1e3      	bne.n	8019a1a <ip_reass_tmr+0x12>
    }
  }
}
 8019a52:	bf00      	nop
 8019a54:	bf00      	nop
 8019a56:	3710      	adds	r7, #16
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}
 8019a5c:	24009ef0 	.word	0x24009ef0

08019a60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b088      	sub	sp, #32
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a6e:	683a      	ldr	r2, [r7, #0]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d105      	bne.n	8019a82 <ip_reass_free_complete_datagram+0x22>
 8019a76:	4b45      	ldr	r3, [pc, #276]	; (8019b8c <ip_reass_free_complete_datagram+0x12c>)
 8019a78:	22ab      	movs	r2, #171	; 0xab
 8019a7a:	4945      	ldr	r1, [pc, #276]	; (8019b90 <ip_reass_free_complete_datagram+0x130>)
 8019a7c:	4845      	ldr	r0, [pc, #276]	; (8019b94 <ip_reass_free_complete_datagram+0x134>)
 8019a7e:	f001 fa4f 	bl	801af20 <iprintf>
  if (prev != NULL) {
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d00a      	beq.n	8019a9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	d005      	beq.n	8019a9e <ip_reass_free_complete_datagram+0x3e>
 8019a92:	4b3e      	ldr	r3, [pc, #248]	; (8019b8c <ip_reass_free_complete_datagram+0x12c>)
 8019a94:	22ad      	movs	r2, #173	; 0xad
 8019a96:	4940      	ldr	r1, [pc, #256]	; (8019b98 <ip_reass_free_complete_datagram+0x138>)
 8019a98:	483e      	ldr	r0, [pc, #248]	; (8019b94 <ip_reass_free_complete_datagram+0x134>)
 8019a9a:	f001 fa41 	bl	801af20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019aa6:	697b      	ldr	r3, [r7, #20]
 8019aa8:	889b      	ldrh	r3, [r3, #4]
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d12a      	bne.n	8019b06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	681a      	ldr	r2, [r3, #0]
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019abe:	69bb      	ldr	r3, [r7, #24]
 8019ac0:	6858      	ldr	r0, [r3, #4]
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	3308      	adds	r3, #8
 8019ac6:	2214      	movs	r2, #20
 8019ac8:	4619      	mov	r1, r3
 8019aca:	f001 f9b8 	bl	801ae3e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019ace:	2101      	movs	r1, #1
 8019ad0:	69b8      	ldr	r0, [r7, #24]
 8019ad2:	f7ff fc1f 	bl	8019314 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019ad6:	69b8      	ldr	r0, [r7, #24]
 8019ad8:	f7f5 fc62 	bl	800f3a0 <pbuf_clen>
 8019adc:	4603      	mov	r3, r0
 8019ade:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ae0:	8bfa      	ldrh	r2, [r7, #30]
 8019ae2:	8a7b      	ldrh	r3, [r7, #18]
 8019ae4:	4413      	add	r3, r2
 8019ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019aea:	db05      	blt.n	8019af8 <ip_reass_free_complete_datagram+0x98>
 8019aec:	4b27      	ldr	r3, [pc, #156]	; (8019b8c <ip_reass_free_complete_datagram+0x12c>)
 8019aee:	22bc      	movs	r2, #188	; 0xbc
 8019af0:	492a      	ldr	r1, [pc, #168]	; (8019b9c <ip_reass_free_complete_datagram+0x13c>)
 8019af2:	4828      	ldr	r0, [pc, #160]	; (8019b94 <ip_reass_free_complete_datagram+0x134>)
 8019af4:	f001 fa14 	bl	801af20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019af8:	8bfa      	ldrh	r2, [r7, #30]
 8019afa:	8a7b      	ldrh	r3, [r7, #18]
 8019afc:	4413      	add	r3, r2
 8019afe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b00:	69b8      	ldr	r0, [r7, #24]
 8019b02:	f7f5 fbbf 	bl	800f284 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	685b      	ldr	r3, [r3, #4]
 8019b0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b0c:	e01f      	b.n	8019b4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b0e:	69bb      	ldr	r3, [r7, #24]
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b1e:	68f8      	ldr	r0, [r7, #12]
 8019b20:	f7f5 fc3e 	bl	800f3a0 <pbuf_clen>
 8019b24:	4603      	mov	r3, r0
 8019b26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b28:	8bfa      	ldrh	r2, [r7, #30]
 8019b2a:	8a7b      	ldrh	r3, [r7, #18]
 8019b2c:	4413      	add	r3, r2
 8019b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b32:	db05      	blt.n	8019b40 <ip_reass_free_complete_datagram+0xe0>
 8019b34:	4b15      	ldr	r3, [pc, #84]	; (8019b8c <ip_reass_free_complete_datagram+0x12c>)
 8019b36:	22cc      	movs	r2, #204	; 0xcc
 8019b38:	4918      	ldr	r1, [pc, #96]	; (8019b9c <ip_reass_free_complete_datagram+0x13c>)
 8019b3a:	4816      	ldr	r0, [pc, #88]	; (8019b94 <ip_reass_free_complete_datagram+0x134>)
 8019b3c:	f001 f9f0 	bl	801af20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b40:	8bfa      	ldrh	r2, [r7, #30]
 8019b42:	8a7b      	ldrh	r3, [r7, #18]
 8019b44:	4413      	add	r3, r2
 8019b46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b48:	68f8      	ldr	r0, [r7, #12]
 8019b4a:	f7f5 fb9b 	bl	800f284 <pbuf_free>
  while (p != NULL) {
 8019b4e:	69bb      	ldr	r3, [r7, #24]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d1dc      	bne.n	8019b0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b54:	6839      	ldr	r1, [r7, #0]
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f000 f8c2 	bl	8019ce0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b5c:	4b10      	ldr	r3, [pc, #64]	; (8019ba0 <ip_reass_free_complete_datagram+0x140>)
 8019b5e:	881b      	ldrh	r3, [r3, #0]
 8019b60:	8bfa      	ldrh	r2, [r7, #30]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d905      	bls.n	8019b72 <ip_reass_free_complete_datagram+0x112>
 8019b66:	4b09      	ldr	r3, [pc, #36]	; (8019b8c <ip_reass_free_complete_datagram+0x12c>)
 8019b68:	22d2      	movs	r2, #210	; 0xd2
 8019b6a:	490e      	ldr	r1, [pc, #56]	; (8019ba4 <ip_reass_free_complete_datagram+0x144>)
 8019b6c:	4809      	ldr	r0, [pc, #36]	; (8019b94 <ip_reass_free_complete_datagram+0x134>)
 8019b6e:	f001 f9d7 	bl	801af20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b72:	4b0b      	ldr	r3, [pc, #44]	; (8019ba0 <ip_reass_free_complete_datagram+0x140>)
 8019b74:	881a      	ldrh	r2, [r3, #0]
 8019b76:	8bfb      	ldrh	r3, [r7, #30]
 8019b78:	1ad3      	subs	r3, r2, r3
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	4b08      	ldr	r3, [pc, #32]	; (8019ba0 <ip_reass_free_complete_datagram+0x140>)
 8019b7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b80:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3720      	adds	r7, #32
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
 8019b8a:	bf00      	nop
 8019b8c:	0801f420 	.word	0x0801f420
 8019b90:	0801f45c 	.word	0x0801f45c
 8019b94:	0801f468 	.word	0x0801f468
 8019b98:	0801f490 	.word	0x0801f490
 8019b9c:	0801f4a4 	.word	0x0801f4a4
 8019ba0:	24009ef4 	.word	0x24009ef4
 8019ba4:	0801f4c4 	.word	0x0801f4c4

08019ba8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b08a      	sub	sp, #40	; 0x28
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019bc6:	4b28      	ldr	r3, [pc, #160]	; (8019c68 <ip_reass_remove_oldest_datagram+0xc0>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bcc:	e030      	b.n	8019c30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd0:	695a      	ldr	r2, [r3, #20]
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d10c      	bne.n	8019bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8019bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bdc:	699a      	ldr	r2, [r3, #24]
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	691b      	ldr	r3, [r3, #16]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	d106      	bne.n	8019bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8019be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be8:	899a      	ldrh	r2, [r3, #12]
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	889b      	ldrh	r3, [r3, #4]
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	d014      	beq.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019bf4:	693b      	ldr	r3, [r7, #16]
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019bfa:	6a3b      	ldr	r3, [r7, #32]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d104      	bne.n	8019c0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	61bb      	str	r3, [r7, #24]
 8019c08:	e009      	b.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0c:	7fda      	ldrb	r2, [r3, #31]
 8019c0e:	6a3b      	ldr	r3, [r7, #32]
 8019c10:	7fdb      	ldrb	r3, [r3, #31]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d803      	bhi.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c1a:	69fb      	ldr	r3, [r7, #28]
 8019c1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d001      	beq.n	8019c2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d1cb      	bne.n	8019bce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c36:	6a3b      	ldr	r3, [r7, #32]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d008      	beq.n	8019c4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c3c:	69b9      	ldr	r1, [r7, #24]
 8019c3e:	6a38      	ldr	r0, [r7, #32]
 8019c40:	f7ff ff0e 	bl	8019a60 <ip_reass_free_complete_datagram>
 8019c44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c46:	697a      	ldr	r2, [r7, #20]
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	4413      	add	r3, r2
 8019c4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c4e:	697a      	ldr	r2, [r7, #20]
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	da02      	bge.n	8019c5c <ip_reass_remove_oldest_datagram+0xb4>
 8019c56:	693b      	ldr	r3, [r7, #16]
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	dcac      	bgt.n	8019bb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c5c:	697b      	ldr	r3, [r7, #20]
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3728      	adds	r7, #40	; 0x28
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	24009ef0 	.word	0x24009ef0

08019c6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c76:	2004      	movs	r0, #4
 8019c78:	f7f4 fbde 	bl	800e438 <memp_malloc>
 8019c7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d110      	bne.n	8019ca6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c84:	6839      	ldr	r1, [r7, #0]
 8019c86:	6878      	ldr	r0, [r7, #4]
 8019c88:	f7ff ff8e 	bl	8019ba8 <ip_reass_remove_oldest_datagram>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	4293      	cmp	r3, r2
 8019c92:	dc03      	bgt.n	8019c9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c94:	2004      	movs	r0, #4
 8019c96:	f7f4 fbcf 	bl	800e438 <memp_malloc>
 8019c9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d101      	bne.n	8019ca6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	e016      	b.n	8019cd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019ca6:	2220      	movs	r2, #32
 8019ca8:	2100      	movs	r1, #0
 8019caa:	68f8      	ldr	r0, [r7, #12]
 8019cac:	f001 f8d5 	bl	801ae5a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	220f      	movs	r2, #15
 8019cb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cb6:	4b09      	ldr	r3, [pc, #36]	; (8019cdc <ip_reass_enqueue_new_datagram+0x70>)
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cbe:	4a07      	ldr	r2, [pc, #28]	; (8019cdc <ip_reass_enqueue_new_datagram+0x70>)
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	3308      	adds	r3, #8
 8019cc8:	2214      	movs	r2, #20
 8019cca:	6879      	ldr	r1, [r7, #4]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f001 f8b6 	bl	801ae3e <memcpy>
  return ipr;
 8019cd2:	68fb      	ldr	r3, [r7, #12]
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	3710      	adds	r7, #16
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}
 8019cdc:	24009ef0 	.word	0x24009ef0

08019ce0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019cea:	4b10      	ldr	r3, [pc, #64]	; (8019d2c <ip_reass_dequeue_datagram+0x4c>)
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	687a      	ldr	r2, [r7, #4]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	d104      	bne.n	8019cfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	4a0c      	ldr	r2, [pc, #48]	; (8019d2c <ip_reass_dequeue_datagram+0x4c>)
 8019cfa:	6013      	str	r3, [r2, #0]
 8019cfc:	e00d      	b.n	8019d1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d106      	bne.n	8019d12 <ip_reass_dequeue_datagram+0x32>
 8019d04:	4b0a      	ldr	r3, [pc, #40]	; (8019d30 <ip_reass_dequeue_datagram+0x50>)
 8019d06:	f240 1245 	movw	r2, #325	; 0x145
 8019d0a:	490a      	ldr	r1, [pc, #40]	; (8019d34 <ip_reass_dequeue_datagram+0x54>)
 8019d0c:	480a      	ldr	r0, [pc, #40]	; (8019d38 <ip_reass_dequeue_datagram+0x58>)
 8019d0e:	f001 f907 	bl	801af20 <iprintf>
    prev->next = ipr->next;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681a      	ldr	r2, [r3, #0]
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d1a:	6879      	ldr	r1, [r7, #4]
 8019d1c:	2004      	movs	r0, #4
 8019d1e:	f7f4 fc01 	bl	800e524 <memp_free>
}
 8019d22:	bf00      	nop
 8019d24:	3708      	adds	r7, #8
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	24009ef0 	.word	0x24009ef0
 8019d30:	0801f420 	.word	0x0801f420
 8019d34:	0801f4e8 	.word	0x0801f4e8
 8019d38:	0801f468 	.word	0x0801f468

08019d3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b08c      	sub	sp, #48	; 0x30
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	60f8      	str	r0, [r7, #12]
 8019d44:	60b9      	str	r1, [r7, #8]
 8019d46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	685b      	ldr	r3, [r3, #4]
 8019d54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d56:	69fb      	ldr	r3, [r7, #28]
 8019d58:	885b      	ldrh	r3, [r3, #2]
 8019d5a:	b29b      	uxth	r3, r3
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	f7f3 fddb 	bl	800d918 <lwip_htons>
 8019d62:	4603      	mov	r3, r0
 8019d64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d66:	69fb      	ldr	r3, [r7, #28]
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	f003 030f 	and.w	r3, r3, #15
 8019d6e:	b2db      	uxtb	r3, r3
 8019d70:	009b      	lsls	r3, r3, #2
 8019d72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d74:	7e7b      	ldrb	r3, [r7, #25]
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	8b7a      	ldrh	r2, [r7, #26]
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	d202      	bcs.n	8019d84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d82:	e135      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d84:	7e7b      	ldrb	r3, [r7, #25]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	8b7a      	ldrh	r2, [r7, #26]
 8019d8a:	1ad3      	subs	r3, r2, r3
 8019d8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	88db      	ldrh	r3, [r3, #6]
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7f3 fdbf 	bl	800d918 <lwip_htons>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	00db      	lsls	r3, r3, #3
 8019da4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	685b      	ldr	r3, [r3, #4]
 8019daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dae:	2200      	movs	r2, #0
 8019db0:	701a      	strb	r2, [r3, #0]
 8019db2:	2200      	movs	r2, #0
 8019db4:	705a      	strb	r2, [r3, #1]
 8019db6:	2200      	movs	r2, #0
 8019db8:	709a      	strb	r2, [r3, #2]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc0:	8afa      	ldrh	r2, [r7, #22]
 8019dc2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019dc4:	8afa      	ldrh	r2, [r7, #22]
 8019dc6:	8b7b      	ldrh	r3, [r7, #26]
 8019dc8:	4413      	add	r3, r2
 8019dca:	b29a      	uxth	r2, r3
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd2:	88db      	ldrh	r3, [r3, #6]
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	8afa      	ldrh	r2, [r7, #22]
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	d902      	bls.n	8019de2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8019de0:	e106      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	685b      	ldr	r3, [r3, #4]
 8019de6:	627b      	str	r3, [r7, #36]	; 0x24
 8019de8:	e068      	b.n	8019ebc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df2:	889b      	ldrh	r3, [r3, #4]
 8019df4:	b29a      	uxth	r2, r3
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	889b      	ldrh	r3, [r3, #4]
 8019dfa:	b29b      	uxth	r3, r3
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d235      	bcs.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d020      	beq.n	8019e4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0e:	889b      	ldrh	r3, [r3, #4]
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e14:	88db      	ldrh	r3, [r3, #6]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	d307      	bcc.n	8019e2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1e:	88db      	ldrh	r3, [r3, #6]
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	693b      	ldr	r3, [r7, #16]
 8019e24:	889b      	ldrh	r3, [r3, #4]
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d902      	bls.n	8019e32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e30:	e0de      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e34:	68ba      	ldr	r2, [r7, #8]
 8019e36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e3a:	88db      	ldrh	r3, [r3, #6]
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e40:	889b      	ldrh	r3, [r3, #4]
 8019e42:	b29b      	uxth	r3, r3
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d03d      	beq.n	8019ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e4c:	e03a      	b.n	8019ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e50:	88db      	ldrh	r3, [r3, #6]
 8019e52:	b29a      	uxth	r2, r3
 8019e54:	693b      	ldr	r3, [r7, #16]
 8019e56:	889b      	ldrh	r3, [r3, #4]
 8019e58:	b29b      	uxth	r3, r3
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d902      	bls.n	8019e64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e62:	e0c5      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	68ba      	ldr	r2, [r7, #8]
 8019e68:	605a      	str	r2, [r3, #4]
      break;
 8019e6a:	e02b      	b.n	8019ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e6e:	889b      	ldrh	r3, [r3, #4]
 8019e70:	b29a      	uxth	r2, r3
 8019e72:	693b      	ldr	r3, [r7, #16]
 8019e74:	889b      	ldrh	r3, [r3, #4]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d102      	bne.n	8019e82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e80:	e0b6      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e84:	889b      	ldrh	r3, [r3, #4]
 8019e86:	b29a      	uxth	r2, r3
 8019e88:	693b      	ldr	r3, [r7, #16]
 8019e8a:	88db      	ldrh	r3, [r3, #6]
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	d202      	bcs.n	8019e98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e92:	f04f 33ff 	mov.w	r3, #4294967295
 8019e96:	e0ab      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d009      	beq.n	8019eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea0:	88db      	ldrh	r3, [r3, #6]
 8019ea2:	b29a      	uxth	r2, r3
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	889b      	ldrh	r3, [r3, #4]
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	d001      	beq.n	8019eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d193      	bne.n	8019dea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019ec2:	e000      	b.n	8019ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019ec4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d12d      	bne.n	8019f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d01c      	beq.n	8019f0c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed4:	88db      	ldrh	r3, [r3, #6]
 8019ed6:	b29a      	uxth	r2, r3
 8019ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eda:	889b      	ldrh	r3, [r3, #4]
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	d906      	bls.n	8019ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019ee2:	4b45      	ldr	r3, [pc, #276]	; (8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ee4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019ee8:	4944      	ldr	r1, [pc, #272]	; (8019ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019eea:	4845      	ldr	r0, [pc, #276]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019eec:	f001 f818 	bl	801af20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef2:	68ba      	ldr	r2, [r7, #8]
 8019ef4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef8:	88db      	ldrh	r3, [r3, #6]
 8019efa:	b29a      	uxth	r2, r3
 8019efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efe:	889b      	ldrh	r3, [r3, #4]
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	429a      	cmp	r2, r3
 8019f04:	d010      	beq.n	8019f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f06:	2300      	movs	r3, #0
 8019f08:	623b      	str	r3, [r7, #32]
 8019f0a:	e00d      	b.n	8019f28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	685b      	ldr	r3, [r3, #4]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d006      	beq.n	8019f22 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f14:	4b38      	ldr	r3, [pc, #224]	; (8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f16:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019f1a:	493a      	ldr	r1, [pc, #232]	; (801a004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019f1c:	4838      	ldr	r0, [pc, #224]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f1e:	f000 ffff 	bl	801af20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	68ba      	ldr	r2, [r7, #8]
 8019f26:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d105      	bne.n	8019f3a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	7f9b      	ldrb	r3, [r3, #30]
 8019f32:	f003 0301 	and.w	r3, r3, #1
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d059      	beq.n	8019fee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019f3a:	6a3b      	ldr	r3, [r7, #32]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d04f      	beq.n	8019fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	685b      	ldr	r3, [r3, #4]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d006      	beq.n	8019f56 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	889b      	ldrh	r3, [r3, #4]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d002      	beq.n	8019f5c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f56:	2300      	movs	r3, #0
 8019f58:	623b      	str	r3, [r7, #32]
 8019f5a:	e041      	b.n	8019fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f66:	e012      	b.n	8019f8e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f70:	88db      	ldrh	r3, [r3, #6]
 8019f72:	b29a      	uxth	r2, r3
 8019f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f76:	889b      	ldrh	r3, [r3, #4]
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	d002      	beq.n	8019f84 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	623b      	str	r3, [r7, #32]
            break;
 8019f82:	e007      	b.n	8019f94 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f86:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e9      	bne.n	8019f68 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019f94:	6a3b      	ldr	r3, [r7, #32]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d022      	beq.n	8019fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d106      	bne.n	8019fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019fa2:	4b15      	ldr	r3, [pc, #84]	; (8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fa4:	f240 12df 	movw	r2, #479	; 0x1df
 8019fa8:	4917      	ldr	r1, [pc, #92]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019faa:	4815      	ldr	r0, [pc, #84]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fac:	f000 ffb8 	bl	801af20 <iprintf>
          LWIP_ASSERT("sanity check",
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d106      	bne.n	8019fca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019fbc:	4b0e      	ldr	r3, [pc, #56]	; (8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019fc2:	4911      	ldr	r1, [pc, #68]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fc4:	480e      	ldr	r0, [pc, #56]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fc6:	f000 ffab 	bl	801af20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d006      	beq.n	8019fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019fd2:	4b09      	ldr	r3, [pc, #36]	; (8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fd4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019fd8:	490c      	ldr	r1, [pc, #48]	; (801a00c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019fda:	4809      	ldr	r0, [pc, #36]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fdc:	f000 ffa0 	bl	801af20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019fe0:	6a3b      	ldr	r3, [r7, #32]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	bf14      	ite	ne
 8019fe6:	2301      	movne	r3, #1
 8019fe8:	2300      	moveq	r3, #0
 8019fea:	b2db      	uxtb	r3, r3
 8019fec:	e000      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019fee:	2300      	movs	r3, #0
}
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3730      	adds	r7, #48	; 0x30
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}
 8019ff8:	0801f420 	.word	0x0801f420
 8019ffc:	0801f504 	.word	0x0801f504
 801a000:	0801f468 	.word	0x0801f468
 801a004:	0801f524 	.word	0x0801f524
 801a008:	0801f55c 	.word	0x0801f55c
 801a00c:	0801f56c 	.word	0x0801f56c

0801a010 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b08e      	sub	sp, #56	; 0x38
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	685b      	ldr	r3, [r3, #4]
 801a01c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a020:	781b      	ldrb	r3, [r3, #0]
 801a022:	f003 030f 	and.w	r3, r3, #15
 801a026:	b2db      	uxtb	r3, r3
 801a028:	009b      	lsls	r3, r3, #2
 801a02a:	b2db      	uxtb	r3, r3
 801a02c:	2b14      	cmp	r3, #20
 801a02e:	f040 8167 	bne.w	801a300 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a034:	88db      	ldrh	r3, [r3, #6]
 801a036:	b29b      	uxth	r3, r3
 801a038:	4618      	mov	r0, r3
 801a03a:	f7f3 fc6d 	bl	800d918 <lwip_htons>
 801a03e:	4603      	mov	r3, r0
 801a040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a044:	b29b      	uxth	r3, r3
 801a046:	00db      	lsls	r3, r3, #3
 801a048:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04c:	885b      	ldrh	r3, [r3, #2]
 801a04e:	b29b      	uxth	r3, r3
 801a050:	4618      	mov	r0, r3
 801a052:	f7f3 fc61 	bl	800d918 <lwip_htons>
 801a056:	4603      	mov	r3, r0
 801a058:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05c:	781b      	ldrb	r3, [r3, #0]
 801a05e:	f003 030f 	and.w	r3, r3, #15
 801a062:	b2db      	uxtb	r3, r3
 801a064:	009b      	lsls	r3, r3, #2
 801a066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a06a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a06e:	b29b      	uxth	r3, r3
 801a070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a072:	429a      	cmp	r2, r3
 801a074:	f0c0 8146 	bcc.w	801a304 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a080:	1ad3      	subs	r3, r2, r3
 801a082:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	f7f5 f98b 	bl	800f3a0 <pbuf_clen>
 801a08a:	4603      	mov	r3, r0
 801a08c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a08e:	4b9f      	ldr	r3, [pc, #636]	; (801a30c <ip4_reass+0x2fc>)
 801a090:	881b      	ldrh	r3, [r3, #0]
 801a092:	461a      	mov	r2, r3
 801a094:	8c3b      	ldrh	r3, [r7, #32]
 801a096:	4413      	add	r3, r2
 801a098:	2b0a      	cmp	r3, #10
 801a09a:	dd10      	ble.n	801a0be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a09c:	8c3b      	ldrh	r3, [r7, #32]
 801a09e:	4619      	mov	r1, r3
 801a0a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0a2:	f7ff fd81 	bl	8019ba8 <ip_reass_remove_oldest_datagram>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	f000 812d 	beq.w	801a308 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a0ae:	4b97      	ldr	r3, [pc, #604]	; (801a30c <ip4_reass+0x2fc>)
 801a0b0:	881b      	ldrh	r3, [r3, #0]
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	8c3b      	ldrh	r3, [r7, #32]
 801a0b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0b8:	2b0a      	cmp	r3, #10
 801a0ba:	f300 8125 	bgt.w	801a308 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0be:	4b94      	ldr	r3, [pc, #592]	; (801a310 <ip4_reass+0x300>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	633b      	str	r3, [r7, #48]	; 0x30
 801a0c4:	e015      	b.n	801a0f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0c8:	695a      	ldr	r2, [r3, #20]
 801a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	d10c      	bne.n	801a0ec <ip4_reass+0xdc>
 801a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d4:	699a      	ldr	r2, [r3, #24]
 801a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0d8:	691b      	ldr	r3, [r3, #16]
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d106      	bne.n	801a0ec <ip4_reass+0xdc>
 801a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e0:	899a      	ldrh	r2, [r3, #12]
 801a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e4:	889b      	ldrh	r3, [r3, #4]
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	429a      	cmp	r2, r3
 801a0ea:	d006      	beq.n	801a0fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	633b      	str	r3, [r7, #48]	; 0x30
 801a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d1e6      	bne.n	801a0c6 <ip4_reass+0xb6>
 801a0f8:	e000      	b.n	801a0fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a0fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d109      	bne.n	801a116 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a102:	8c3b      	ldrh	r3, [r7, #32]
 801a104:	4619      	mov	r1, r3
 801a106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a108:	f7ff fdb0 	bl	8019c6c <ip_reass_enqueue_new_datagram>
 801a10c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a110:	2b00      	cmp	r3, #0
 801a112:	d11c      	bne.n	801a14e <ip4_reass+0x13e>
      goto nullreturn;
 801a114:	e109      	b.n	801a32a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a118:	88db      	ldrh	r3, [r3, #6]
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7f3 fbfb 	bl	800d918 <lwip_htons>
 801a122:	4603      	mov	r3, r0
 801a124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d110      	bne.n	801a14e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a12e:	89db      	ldrh	r3, [r3, #14]
 801a130:	4618      	mov	r0, r3
 801a132:	f7f3 fbf1 	bl	800d918 <lwip_htons>
 801a136:	4603      	mov	r3, r0
 801a138:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d006      	beq.n	801a14e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a142:	3308      	adds	r3, #8
 801a144:	2214      	movs	r2, #20
 801a146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a148:	4618      	mov	r0, r3
 801a14a:	f000 fe78 	bl	801ae3e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a150:	88db      	ldrh	r3, [r3, #6]
 801a152:	b29b      	uxth	r3, r3
 801a154:	f003 0320 	and.w	r3, r3, #32
 801a158:	2b00      	cmp	r3, #0
 801a15a:	bf0c      	ite	eq
 801a15c:	2301      	moveq	r3, #1
 801a15e:	2300      	movne	r3, #0
 801a160:	b2db      	uxtb	r3, r3
 801a162:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a164:	69fb      	ldr	r3, [r7, #28]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d00e      	beq.n	801a188 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a16a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a16e:	4413      	add	r3, r2
 801a170:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a172:	8b7a      	ldrh	r2, [r7, #26]
 801a174:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a176:	429a      	cmp	r2, r3
 801a178:	f0c0 80a0 	bcc.w	801a2bc <ip4_reass+0x2ac>
 801a17c:	8b7b      	ldrh	r3, [r7, #26]
 801a17e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a182:	4293      	cmp	r3, r2
 801a184:	f200 809a 	bhi.w	801a2bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a188:	69fa      	ldr	r2, [r7, #28]
 801a18a:	6879      	ldr	r1, [r7, #4]
 801a18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a18e:	f7ff fdd5 	bl	8019d3c <ip_reass_chain_frag_into_datagram_and_validate>
 801a192:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a194:	697b      	ldr	r3, [r7, #20]
 801a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a19a:	f000 8091 	beq.w	801a2c0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a19e:	4b5b      	ldr	r3, [pc, #364]	; (801a30c <ip4_reass+0x2fc>)
 801a1a0:	881a      	ldrh	r2, [r3, #0]
 801a1a2:	8c3b      	ldrh	r3, [r7, #32]
 801a1a4:	4413      	add	r3, r2
 801a1a6:	b29a      	uxth	r2, r3
 801a1a8:	4b58      	ldr	r3, [pc, #352]	; (801a30c <ip4_reass+0x2fc>)
 801a1aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a1ac:	69fb      	ldr	r3, [r7, #28]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d00d      	beq.n	801a1ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1b6:	4413      	add	r3, r2
 801a1b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1bc:	8a7a      	ldrh	r2, [r7, #18]
 801a1be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1c2:	7f9b      	ldrb	r3, [r3, #30]
 801a1c4:	f043 0301 	orr.w	r3, r3, #1
 801a1c8:	b2da      	uxtb	r2, r3
 801a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	2b01      	cmp	r3, #1
 801a1d2:	d171      	bne.n	801a2b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d6:	8b9b      	ldrh	r3, [r3, #28]
 801a1d8:	3314      	adds	r3, #20
 801a1da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	685b      	ldr	r3, [r3, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f0:	3308      	adds	r3, #8
 801a1f2:	2214      	movs	r2, #20
 801a1f4:	4619      	mov	r1, r3
 801a1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1f8:	f000 fe21 	bl	801ae3e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a1fc:	8a3b      	ldrh	r3, [r7, #16]
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7f3 fb8a 	bl	800d918 <lwip_htons>
 801a204:	4603      	mov	r3, r0
 801a206:	461a      	mov	r2, r3
 801a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a20a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a20e:	2200      	movs	r2, #0
 801a210:	719a      	strb	r2, [r3, #6]
 801a212:	2200      	movs	r2, #0
 801a214:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a218:	2200      	movs	r2, #0
 801a21a:	729a      	strb	r2, [r3, #10]
 801a21c:	2200      	movs	r2, #0
 801a21e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a222:	685b      	ldr	r3, [r3, #4]
 801a224:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a226:	e00d      	b.n	801a244 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a22e:	2114      	movs	r1, #20
 801a230:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a232:	f7f4 ffa1 	bl	800f178 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a238:	6878      	ldr	r0, [r7, #4]
 801a23a:	f7f5 f8f1 	bl	800f420 <pbuf_cat>
      r = iprh->next_pbuf;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a246:	2b00      	cmp	r3, #0
 801a248:	d1ee      	bne.n	801a228 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a24a:	4b31      	ldr	r3, [pc, #196]	; (801a310 <ip4_reass+0x300>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a250:	429a      	cmp	r2, r3
 801a252:	d102      	bne.n	801a25a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a254:	2300      	movs	r3, #0
 801a256:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a258:	e010      	b.n	801a27c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a25a:	4b2d      	ldr	r3, [pc, #180]	; (801a310 <ip4_reass+0x300>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a260:	e007      	b.n	801a272 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a268:	429a      	cmp	r2, r3
 801a26a:	d006      	beq.n	801a27a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a274:	2b00      	cmp	r3, #0
 801a276:	d1f4      	bne.n	801a262 <ip4_reass+0x252>
 801a278:	e000      	b.n	801a27c <ip4_reass+0x26c>
          break;
 801a27a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a27c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a280:	f7ff fd2e 	bl	8019ce0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a284:	6878      	ldr	r0, [r7, #4]
 801a286:	f7f5 f88b 	bl	800f3a0 <pbuf_clen>
 801a28a:	4603      	mov	r3, r0
 801a28c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a28e:	4b1f      	ldr	r3, [pc, #124]	; (801a30c <ip4_reass+0x2fc>)
 801a290:	881b      	ldrh	r3, [r3, #0]
 801a292:	8c3a      	ldrh	r2, [r7, #32]
 801a294:	429a      	cmp	r2, r3
 801a296:	d906      	bls.n	801a2a6 <ip4_reass+0x296>
 801a298:	4b1e      	ldr	r3, [pc, #120]	; (801a314 <ip4_reass+0x304>)
 801a29a:	f240 229b 	movw	r2, #667	; 0x29b
 801a29e:	491e      	ldr	r1, [pc, #120]	; (801a318 <ip4_reass+0x308>)
 801a2a0:	481e      	ldr	r0, [pc, #120]	; (801a31c <ip4_reass+0x30c>)
 801a2a2:	f000 fe3d 	bl	801af20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a2a6:	4b19      	ldr	r3, [pc, #100]	; (801a30c <ip4_reass+0x2fc>)
 801a2a8:	881a      	ldrh	r2, [r3, #0]
 801a2aa:	8c3b      	ldrh	r3, [r7, #32]
 801a2ac:	1ad3      	subs	r3, r2, r3
 801a2ae:	b29a      	uxth	r2, r3
 801a2b0:	4b16      	ldr	r3, [pc, #88]	; (801a30c <ip4_reass+0x2fc>)
 801a2b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	e03c      	b.n	801a332 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	e03a      	b.n	801a332 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a2bc:	bf00      	nop
 801a2be:	e000      	b.n	801a2c2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a2c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d106      	bne.n	801a2d6 <ip4_reass+0x2c6>
 801a2c8:	4b12      	ldr	r3, [pc, #72]	; (801a314 <ip4_reass+0x304>)
 801a2ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a2ce:	4914      	ldr	r1, [pc, #80]	; (801a320 <ip4_reass+0x310>)
 801a2d0:	4812      	ldr	r0, [pc, #72]	; (801a31c <ip4_reass+0x30c>)
 801a2d2:	f000 fe25 	bl	801af20 <iprintf>
  if (ipr->p == NULL) {
 801a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d124      	bne.n	801a328 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a2de:	4b0c      	ldr	r3, [pc, #48]	; (801a310 <ip4_reass+0x300>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	d006      	beq.n	801a2f6 <ip4_reass+0x2e6>
 801a2e8:	4b0a      	ldr	r3, [pc, #40]	; (801a314 <ip4_reass+0x304>)
 801a2ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a2ee:	490d      	ldr	r1, [pc, #52]	; (801a324 <ip4_reass+0x314>)
 801a2f0:	480a      	ldr	r0, [pc, #40]	; (801a31c <ip4_reass+0x30c>)
 801a2f2:	f000 fe15 	bl	801af20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a2f6:	2100      	movs	r1, #0
 801a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2fa:	f7ff fcf1 	bl	8019ce0 <ip_reass_dequeue_datagram>
 801a2fe:	e014      	b.n	801a32a <ip4_reass+0x31a>
    goto nullreturn;
 801a300:	bf00      	nop
 801a302:	e012      	b.n	801a32a <ip4_reass+0x31a>
    goto nullreturn;
 801a304:	bf00      	nop
 801a306:	e010      	b.n	801a32a <ip4_reass+0x31a>
      goto nullreturn;
 801a308:	bf00      	nop
 801a30a:	e00e      	b.n	801a32a <ip4_reass+0x31a>
 801a30c:	24009ef4 	.word	0x24009ef4
 801a310:	24009ef0 	.word	0x24009ef0
 801a314:	0801f420 	.word	0x0801f420
 801a318:	0801f590 	.word	0x0801f590
 801a31c:	0801f468 	.word	0x0801f468
 801a320:	0801f5ac 	.word	0x0801f5ac
 801a324:	0801f5b8 	.word	0x0801f5b8
  }

nullreturn:
 801a328:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a32a:	6878      	ldr	r0, [r7, #4]
 801a32c:	f7f4 ffaa 	bl	800f284 <pbuf_free>
  return NULL;
 801a330:	2300      	movs	r3, #0
}
 801a332:	4618      	mov	r0, r3
 801a334:	3738      	adds	r7, #56	; 0x38
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}
 801a33a:	bf00      	nop

0801a33c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a340:	2005      	movs	r0, #5
 801a342:	f7f4 f879 	bl	800e438 <memp_malloc>
 801a346:	4603      	mov	r3, r0
}
 801a348:	4618      	mov	r0, r3
 801a34a:	bd80      	pop	{r7, pc}

0801a34c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d106      	bne.n	801a368 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a35a:	4b07      	ldr	r3, [pc, #28]	; (801a378 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a35c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a360:	4906      	ldr	r1, [pc, #24]	; (801a37c <ip_frag_free_pbuf_custom_ref+0x30>)
 801a362:	4807      	ldr	r0, [pc, #28]	; (801a380 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a364:	f000 fddc 	bl	801af20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a368:	6879      	ldr	r1, [r7, #4]
 801a36a:	2005      	movs	r0, #5
 801a36c:	f7f4 f8da 	bl	800e524 <memp_free>
}
 801a370:	bf00      	nop
 801a372:	3708      	adds	r7, #8
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}
 801a378:	0801f420 	.word	0x0801f420
 801a37c:	0801f5d8 	.word	0x0801f5d8
 801a380:	0801f468 	.word	0x0801f468

0801a384 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a384:	b580      	push	{r7, lr}
 801a386:	b084      	sub	sp, #16
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d106      	bne.n	801a3a4 <ipfrag_free_pbuf_custom+0x20>
 801a396:	4b11      	ldr	r3, [pc, #68]	; (801a3dc <ipfrag_free_pbuf_custom+0x58>)
 801a398:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a39c:	4910      	ldr	r1, [pc, #64]	; (801a3e0 <ipfrag_free_pbuf_custom+0x5c>)
 801a39e:	4811      	ldr	r0, [pc, #68]	; (801a3e4 <ipfrag_free_pbuf_custom+0x60>)
 801a3a0:	f000 fdbe 	bl	801af20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a3a4:	68fa      	ldr	r2, [r7, #12]
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	429a      	cmp	r2, r3
 801a3aa:	d006      	beq.n	801a3ba <ipfrag_free_pbuf_custom+0x36>
 801a3ac:	4b0b      	ldr	r3, [pc, #44]	; (801a3dc <ipfrag_free_pbuf_custom+0x58>)
 801a3ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a3b2:	490d      	ldr	r1, [pc, #52]	; (801a3e8 <ipfrag_free_pbuf_custom+0x64>)
 801a3b4:	480b      	ldr	r0, [pc, #44]	; (801a3e4 <ipfrag_free_pbuf_custom+0x60>)
 801a3b6:	f000 fdb3 	bl	801af20 <iprintf>
  if (pcr->original != NULL) {
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	695b      	ldr	r3, [r3, #20]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d004      	beq.n	801a3cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	695b      	ldr	r3, [r3, #20]
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f7f4 ff5c 	bl	800f284 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a3cc:	68f8      	ldr	r0, [r7, #12]
 801a3ce:	f7ff ffbd 	bl	801a34c <ip_frag_free_pbuf_custom_ref>
}
 801a3d2:	bf00      	nop
 801a3d4:	3710      	adds	r7, #16
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}
 801a3da:	bf00      	nop
 801a3dc:	0801f420 	.word	0x0801f420
 801a3e0:	0801f5e4 	.word	0x0801f5e4
 801a3e4:	0801f468 	.word	0x0801f468
 801a3e8:	0801f5f0 	.word	0x0801f5f0

0801a3ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b094      	sub	sp, #80	; 0x50
 801a3f0:	af02      	add	r7, sp, #8
 801a3f2:	60f8      	str	r0, [r7, #12]
 801a3f4:	60b9      	str	r1, [r7, #8]
 801a3f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a402:	3b14      	subs	r3, #20
 801a404:	2b00      	cmp	r3, #0
 801a406:	da00      	bge.n	801a40a <ip4_frag+0x1e>
 801a408:	3307      	adds	r3, #7
 801a40a:	10db      	asrs	r3, r3, #3
 801a40c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a40e:	2314      	movs	r3, #20
 801a410:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a41a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	f003 030f 	and.w	r3, r3, #15
 801a424:	b2db      	uxtb	r3, r3
 801a426:	009b      	lsls	r3, r3, #2
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	2b14      	cmp	r3, #20
 801a42c:	d002      	beq.n	801a434 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a42e:	f06f 0305 	mvn.w	r3, #5
 801a432:	e110      	b.n	801a656 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	895b      	ldrh	r3, [r3, #10]
 801a438:	2b13      	cmp	r3, #19
 801a43a:	d809      	bhi.n	801a450 <ip4_frag+0x64>
 801a43c:	4b88      	ldr	r3, [pc, #544]	; (801a660 <ip4_frag+0x274>)
 801a43e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a442:	4988      	ldr	r1, [pc, #544]	; (801a664 <ip4_frag+0x278>)
 801a444:	4888      	ldr	r0, [pc, #544]	; (801a668 <ip4_frag+0x27c>)
 801a446:	f000 fd6b 	bl	801af20 <iprintf>
 801a44a:	f06f 0305 	mvn.w	r3, #5
 801a44e:	e102      	b.n	801a656 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a452:	88db      	ldrh	r3, [r3, #6]
 801a454:	b29b      	uxth	r3, r3
 801a456:	4618      	mov	r0, r3
 801a458:	f7f3 fa5e 	bl	800d918 <lwip_htons>
 801a45c:	4603      	mov	r3, r0
 801a45e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a466:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a46a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a470:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	891b      	ldrh	r3, [r3, #8]
 801a476:	3b14      	subs	r3, #20
 801a478:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a47c:	e0e1      	b.n	801a642 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a47e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	b29b      	uxth	r3, r3
 801a484:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a488:	4293      	cmp	r3, r2
 801a48a:	bf28      	it	cs
 801a48c:	4613      	movcs	r3, r2
 801a48e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a490:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a494:	2114      	movs	r1, #20
 801a496:	200e      	movs	r0, #14
 801a498:	f7f4 fc10 	bl	800ecbc <pbuf_alloc>
 801a49c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	f000 80d5 	beq.w	801a650 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a8:	895b      	ldrh	r3, [r3, #10]
 801a4aa:	2b13      	cmp	r3, #19
 801a4ac:	d806      	bhi.n	801a4bc <ip4_frag+0xd0>
 801a4ae:	4b6c      	ldr	r3, [pc, #432]	; (801a660 <ip4_frag+0x274>)
 801a4b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a4b4:	496d      	ldr	r1, [pc, #436]	; (801a66c <ip4_frag+0x280>)
 801a4b6:	486c      	ldr	r0, [pc, #432]	; (801a668 <ip4_frag+0x27c>)
 801a4b8:	f000 fd32 	bl	801af20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	2214      	movs	r2, #20
 801a4c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f000 fcba 	bl	801ae3e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4cc:	685b      	ldr	r3, [r3, #4]
 801a4ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a4d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a4d6:	e064      	b.n	801a5a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	895a      	ldrh	r2, [r3, #10]
 801a4dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	895b      	ldrh	r3, [r3, #10]
 801a4e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a4e8:	429a      	cmp	r2, r3
 801a4ea:	d906      	bls.n	801a4fa <ip4_frag+0x10e>
 801a4ec:	4b5c      	ldr	r3, [pc, #368]	; (801a660 <ip4_frag+0x274>)
 801a4ee:	f240 322d 	movw	r2, #813	; 0x32d
 801a4f2:	495f      	ldr	r1, [pc, #380]	; (801a670 <ip4_frag+0x284>)
 801a4f4:	485c      	ldr	r0, [pc, #368]	; (801a668 <ip4_frag+0x27c>)
 801a4f6:	f000 fd13 	bl	801af20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a4fa:	8bfa      	ldrh	r2, [r7, #30]
 801a4fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a500:	4293      	cmp	r3, r2
 801a502:	bf28      	it	cs
 801a504:	4613      	movcs	r3, r2
 801a506:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a50a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d105      	bne.n	801a51e <ip4_frag+0x132>
        poff = 0;
 801a512:	2300      	movs	r3, #0
 801a514:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	60fb      	str	r3, [r7, #12]
        continue;
 801a51c:	e041      	b.n	801a5a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a51e:	f7ff ff0d 	bl	801a33c <ip_frag_alloc_pbuf_custom_ref>
 801a522:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a524:	69bb      	ldr	r3, [r7, #24]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d103      	bne.n	801a532 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a52c:	f7f4 feaa 	bl	800f284 <pbuf_free>
        goto memerr;
 801a530:	e08f      	b.n	801a652 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a532:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a538:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a53a:	4413      	add	r3, r2
 801a53c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a540:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a544:	9201      	str	r2, [sp, #4]
 801a546:	9300      	str	r3, [sp, #0]
 801a548:	4603      	mov	r3, r0
 801a54a:	2241      	movs	r2, #65	; 0x41
 801a54c:	2000      	movs	r0, #0
 801a54e:	f7f4 fcdf 	bl	800ef10 <pbuf_alloced_custom>
 801a552:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a554:	697b      	ldr	r3, [r7, #20]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d106      	bne.n	801a568 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a55a:	69b8      	ldr	r0, [r7, #24]
 801a55c:	f7ff fef6 	bl	801a34c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a562:	f7f4 fe8f 	bl	800f284 <pbuf_free>
        goto memerr;
 801a566:	e074      	b.n	801a652 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a568:	68f8      	ldr	r0, [r7, #12]
 801a56a:	f7f4 ff31 	bl	800f3d0 <pbuf_ref>
      pcr->original = p;
 801a56e:	69bb      	ldr	r3, [r7, #24]
 801a570:	68fa      	ldr	r2, [r7, #12]
 801a572:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a574:	69bb      	ldr	r3, [r7, #24]
 801a576:	4a3f      	ldr	r2, [pc, #252]	; (801a674 <ip4_frag+0x288>)
 801a578:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a57a:	6979      	ldr	r1, [r7, #20]
 801a57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a57e:	f7f4 ff4f 	bl	800f420 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a582:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a586:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a58a:	1ad3      	subs	r3, r2, r3
 801a58c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a594:	2b00      	cmp	r3, #0
 801a596:	d004      	beq.n	801a5a2 <ip4_frag+0x1b6>
        poff = 0;
 801a598:	2300      	movs	r3, #0
 801a59a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a5a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d196      	bne.n	801a4d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a5aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5b0:	4413      	add	r3, r2
 801a5b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5b8:	f1a3 0213 	sub.w	r2, r3, #19
 801a5bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	bfcc      	ite	gt
 801a5c4:	2301      	movgt	r3, #1
 801a5c6:	2300      	movle	r3, #0
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a5cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a5d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a5d6:	6a3b      	ldr	r3, [r7, #32]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d002      	beq.n	801a5e2 <ip4_frag+0x1f6>
 801a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d003      	beq.n	801a5ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a5e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a5e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a5ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f7f3 f993 	bl	800d918 <lwip_htons>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a5fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a5fc:	3314      	adds	r3, #20
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	4618      	mov	r0, r3
 801a602:	f7f3 f989 	bl	800d918 <lwip_htons>
 801a606:	4603      	mov	r3, r0
 801a608:	461a      	mov	r2, r3
 801a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a60c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a610:	2200      	movs	r2, #0
 801a612:	729a      	strb	r2, [r3, #10]
 801a614:	2200      	movs	r2, #0
 801a616:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a618:	68bb      	ldr	r3, [r7, #8]
 801a61a:	695b      	ldr	r3, [r3, #20]
 801a61c:	687a      	ldr	r2, [r7, #4]
 801a61e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a620:	68b8      	ldr	r0, [r7, #8]
 801a622:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a626:	f7f4 fe2d 	bl	800f284 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a62a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a62e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a630:	1ad3      	subs	r3, r2, r3
 801a632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a636:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a63a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a63c:	4413      	add	r3, r2
 801a63e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a642:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a646:	2b00      	cmp	r3, #0
 801a648:	f47f af19 	bne.w	801a47e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a64c:	2300      	movs	r3, #0
 801a64e:	e002      	b.n	801a656 <ip4_frag+0x26a>
      goto memerr;
 801a650:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a652:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a656:	4618      	mov	r0, r3
 801a658:	3748      	adds	r7, #72	; 0x48
 801a65a:	46bd      	mov	sp, r7
 801a65c:	bd80      	pop	{r7, pc}
 801a65e:	bf00      	nop
 801a660:	0801f420 	.word	0x0801f420
 801a664:	0801f5fc 	.word	0x0801f5fc
 801a668:	0801f468 	.word	0x0801f468
 801a66c:	0801f618 	.word	0x0801f618
 801a670:	0801f638 	.word	0x0801f638
 801a674:	0801a385 	.word	0x0801a385

0801a678 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b086      	sub	sp, #24
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a682:	230e      	movs	r3, #14
 801a684:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	895b      	ldrh	r3, [r3, #10]
 801a68a:	2b0e      	cmp	r3, #14
 801a68c:	d96e      	bls.n	801a76c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	7bdb      	ldrb	r3, [r3, #15]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d106      	bne.n	801a6a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a69c:	3301      	adds	r3, #1
 801a69e:	b2da      	uxtb	r2, r3
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	685b      	ldr	r3, [r3, #4]
 801a6a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a6aa:	693b      	ldr	r3, [r7, #16]
 801a6ac:	7b1a      	ldrb	r2, [r3, #12]
 801a6ae:	7b5b      	ldrb	r3, [r3, #13]
 801a6b0:	021b      	lsls	r3, r3, #8
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	f003 0301 	and.w	r3, r3, #1
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d023      	beq.n	801a70a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	2b01      	cmp	r3, #1
 801a6c8:	d10f      	bne.n	801a6ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	785b      	ldrb	r3, [r3, #1]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d11b      	bne.n	801a70a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6d6:	2b5e      	cmp	r3, #94	; 0x5e
 801a6d8:	d117      	bne.n	801a70a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	7b5b      	ldrb	r3, [r3, #13]
 801a6de:	f043 0310 	orr.w	r3, r3, #16
 801a6e2:	b2da      	uxtb	r2, r3
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	735a      	strb	r2, [r3, #13]
 801a6e8:	e00f      	b.n	801a70a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a6ea:	693b      	ldr	r3, [r7, #16]
 801a6ec:	2206      	movs	r2, #6
 801a6ee:	4928      	ldr	r1, [pc, #160]	; (801a790 <ethernet_input+0x118>)
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f000 fb96 	bl	801ae22 <memcmp>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d106      	bne.n	801a70a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	7b5b      	ldrb	r3, [r3, #13]
 801a700:	f043 0308 	orr.w	r3, r3, #8
 801a704:	b2da      	uxtb	r2, r3
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a70a:	89fb      	ldrh	r3, [r7, #14]
 801a70c:	2b08      	cmp	r3, #8
 801a70e:	d003      	beq.n	801a718 <ethernet_input+0xa0>
 801a710:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a714:	d014      	beq.n	801a740 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a716:	e032      	b.n	801a77e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a71e:	f003 0308 	and.w	r3, r3, #8
 801a722:	2b00      	cmp	r3, #0
 801a724:	d024      	beq.n	801a770 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a726:	8afb      	ldrh	r3, [r7, #22]
 801a728:	4619      	mov	r1, r3
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	f7f4 fd24 	bl	800f178 <pbuf_remove_header>
 801a730:	4603      	mov	r3, r0
 801a732:	2b00      	cmp	r3, #0
 801a734:	d11e      	bne.n	801a774 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a736:	6839      	ldr	r1, [r7, #0]
 801a738:	6878      	ldr	r0, [r7, #4]
 801a73a:	f7fe ff09 	bl	8019550 <ip4_input>
      break;
 801a73e:	e013      	b.n	801a768 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a746:	f003 0308 	and.w	r3, r3, #8
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d014      	beq.n	801a778 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a74e:	8afb      	ldrh	r3, [r7, #22]
 801a750:	4619      	mov	r1, r3
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f7f4 fd10 	bl	800f178 <pbuf_remove_header>
 801a758:	4603      	mov	r3, r0
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d10e      	bne.n	801a77c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a75e:	6839      	ldr	r1, [r7, #0]
 801a760:	6878      	ldr	r0, [r7, #4]
 801a762:	f7fe f87f 	bl	8018864 <etharp_input>
      break;
 801a766:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a768:	2300      	movs	r3, #0
 801a76a:	e00c      	b.n	801a786 <ethernet_input+0x10e>
    goto free_and_return;
 801a76c:	bf00      	nop
 801a76e:	e006      	b.n	801a77e <ethernet_input+0x106>
        goto free_and_return;
 801a770:	bf00      	nop
 801a772:	e004      	b.n	801a77e <ethernet_input+0x106>
        goto free_and_return;
 801a774:	bf00      	nop
 801a776:	e002      	b.n	801a77e <ethernet_input+0x106>
        goto free_and_return;
 801a778:	bf00      	nop
 801a77a:	e000      	b.n	801a77e <ethernet_input+0x106>
        goto free_and_return;
 801a77c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	f7f4 fd80 	bl	800f284 <pbuf_free>
  return ERR_OK;
 801a784:	2300      	movs	r3, #0
}
 801a786:	4618      	mov	r0, r3
 801a788:	3718      	adds	r7, #24
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}
 801a78e:	bf00      	nop
 801a790:	0801f84c 	.word	0x0801f84c

0801a794 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a794:	b580      	push	{r7, lr}
 801a796:	b086      	sub	sp, #24
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	607a      	str	r2, [r7, #4]
 801a7a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a7a2:	8c3b      	ldrh	r3, [r7, #32]
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f7f3 f8b7 	bl	800d918 <lwip_htons>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a7ae:	210e      	movs	r1, #14
 801a7b0:	68b8      	ldr	r0, [r7, #8]
 801a7b2:	f7f4 fcd1 	bl	800f158 <pbuf_add_header>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d125      	bne.n	801a808 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a7c2:	693b      	ldr	r3, [r7, #16]
 801a7c4:	8afa      	ldrh	r2, [r7, #22]
 801a7c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	2206      	movs	r2, #6
 801a7cc:	6839      	ldr	r1, [r7, #0]
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f000 fb35 	bl	801ae3e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a7d4:	693b      	ldr	r3, [r7, #16]
 801a7d6:	3306      	adds	r3, #6
 801a7d8:	2206      	movs	r2, #6
 801a7da:	6879      	ldr	r1, [r7, #4]
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f000 fb2e 	bl	801ae3e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a7e8:	2b06      	cmp	r3, #6
 801a7ea:	d006      	beq.n	801a7fa <ethernet_output+0x66>
 801a7ec:	4b0a      	ldr	r3, [pc, #40]	; (801a818 <ethernet_output+0x84>)
 801a7ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a7f2:	490a      	ldr	r1, [pc, #40]	; (801a81c <ethernet_output+0x88>)
 801a7f4:	480a      	ldr	r0, [pc, #40]	; (801a820 <ethernet_output+0x8c>)
 801a7f6:	f000 fb93 	bl	801af20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	699b      	ldr	r3, [r3, #24]
 801a7fe:	68b9      	ldr	r1, [r7, #8]
 801a800:	68f8      	ldr	r0, [r7, #12]
 801a802:	4798      	blx	r3
 801a804:	4603      	mov	r3, r0
 801a806:	e002      	b.n	801a80e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a808:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a80a:	f06f 0301 	mvn.w	r3, #1
}
 801a80e:	4618      	mov	r0, r3
 801a810:	3718      	adds	r7, #24
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}
 801a816:	bf00      	nop
 801a818:	0801f648 	.word	0x0801f648
 801a81c:	0801f680 	.word	0x0801f680
 801a820:	0801f6b4 	.word	0x0801f6b4

0801a824 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b086      	sub	sp, #24
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	60bb      	str	r3, [r7, #8]
 801a832:	2304      	movs	r3, #4
 801a834:	60fb      	str	r3, [r7, #12]
 801a836:	2300      	movs	r3, #0
 801a838:	613b      	str	r3, [r7, #16]
 801a83a:	2300      	movs	r3, #0
 801a83c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a83e:	f107 0308 	add.w	r3, r7, #8
 801a842:	2100      	movs	r1, #0
 801a844:	4618      	mov	r0, r3
 801a846:	f7ee fa34 	bl	8008cb2 <osMessageCreate>
 801a84a:	4602      	mov	r2, r0
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d102      	bne.n	801a85e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a858:	f04f 33ff 	mov.w	r3, #4294967295
 801a85c:	e000      	b.n	801a860 <sys_mbox_new+0x3c>

  return ERR_OK;
 801a85e:	2300      	movs	r3, #0
}
 801a860:	4618      	mov	r0, r3
 801a862:	3718      	adds	r7, #24
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}

0801a868 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b082      	sub	sp, #8
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	4618      	mov	r0, r3
 801a876:	f7ee faf9 	bl	8008e6c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	4618      	mov	r0, r3
 801a880:	f7ee fb0a 	bl	8008e98 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a884:	bf00      	nop
 801a886:	3708      	adds	r7, #8
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd80      	pop	{r7, pc}

0801a88c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b084      	sub	sp, #16
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
 801a894:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	6839      	ldr	r1, [r7, #0]
 801a89c:	2200      	movs	r2, #0
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ee fa30 	bl	8008d04 <osMessagePut>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d102      	bne.n	801a8b0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	73fb      	strb	r3, [r7, #15]
 801a8ae:	e001      	b.n	801a8b4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a8b0:	23ff      	movs	r3, #255	; 0xff
 801a8b2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3710      	adds	r7, #16
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b08c      	sub	sp, #48	; 0x30
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	61f8      	str	r0, [r7, #28]
 801a8c8:	61b9      	str	r1, [r7, #24]
 801a8ca:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a8cc:	f7ee f81b 	bl	8008906 <osKernelSysTick>
 801a8d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a8d2:	697b      	ldr	r3, [r7, #20]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d017      	beq.n	801a908 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a8d8:	69fb      	ldr	r3, [r7, #28]
 801a8da:	6819      	ldr	r1, [r3, #0]
 801a8dc:	f107 0320 	add.w	r3, r7, #32
 801a8e0:	697a      	ldr	r2, [r7, #20]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7ee fa4e 	bl	8008d84 <osMessageGet>

    if(event.status == osEventMessage)
 801a8e8:	6a3b      	ldr	r3, [r7, #32]
 801a8ea:	2b10      	cmp	r3, #16
 801a8ec:	d109      	bne.n	801a902 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f0:	461a      	mov	r2, r3
 801a8f2:	69bb      	ldr	r3, [r7, #24]
 801a8f4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a8f6:	f7ee f806 	bl	8008906 <osKernelSysTick>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fe:	1ad3      	subs	r3, r2, r3
 801a900:	e019      	b.n	801a936 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a902:	f04f 33ff 	mov.w	r3, #4294967295
 801a906:	e016      	b.n	801a936 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a908:	69fb      	ldr	r3, [r7, #28]
 801a90a:	6819      	ldr	r1, [r3, #0]
 801a90c:	463b      	mov	r3, r7
 801a90e:	f04f 32ff 	mov.w	r2, #4294967295
 801a912:	4618      	mov	r0, r3
 801a914:	f7ee fa36 	bl	8008d84 <osMessageGet>
 801a918:	f107 0320 	add.w	r3, r7, #32
 801a91c:	463a      	mov	r2, r7
 801a91e:	ca07      	ldmia	r2, {r0, r1, r2}
 801a920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a926:	461a      	mov	r2, r3
 801a928:	69bb      	ldr	r3, [r7, #24]
 801a92a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a92c:	f7ed ffeb 	bl	8008906 <osKernelSysTick>
 801a930:	4602      	mov	r2, r0
 801a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a934:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a936:	4618      	mov	r0, r3
 801a938:	3730      	adds	r7, #48	; 0x30
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}

0801a93e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a93e:	b580      	push	{r7, lr}
 801a940:	b086      	sub	sp, #24
 801a942:	af00      	add	r7, sp, #0
 801a944:	6078      	str	r0, [r7, #4]
 801a946:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	6819      	ldr	r1, [r3, #0]
 801a94c:	f107 030c 	add.w	r3, r7, #12
 801a950:	2200      	movs	r2, #0
 801a952:	4618      	mov	r0, r3
 801a954:	f7ee fa16 	bl	8008d84 <osMessageGet>

  if(event.status == osEventMessage)
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	2b10      	cmp	r3, #16
 801a95c:	d105      	bne.n	801a96a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a95e:	693b      	ldr	r3, [r7, #16]
 801a960:	461a      	mov	r2, r3
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a966:	2300      	movs	r3, #0
 801a968:	e001      	b.n	801a96e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a96a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a96e:	4618      	mov	r0, r3
 801a970:	3718      	adds	r7, #24
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}

0801a976 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a976:	b480      	push	{r7}
 801a978:	b083      	sub	sp, #12
 801a97a:	af00      	add	r7, sp, #0
 801a97c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d101      	bne.n	801a98a <sys_mbox_valid+0x14>
    return 0;
 801a986:	2300      	movs	r3, #0
 801a988:	e000      	b.n	801a98c <sys_mbox_valid+0x16>
  else
    return 1;
 801a98a:	2301      	movs	r3, #1
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	370c      	adds	r7, #12
 801a990:	46bd      	mov	sp, r7
 801a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a996:	4770      	bx	lr

0801a998 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a998:	b480      	push	{r7}
 801a99a:	b083      	sub	sp, #12
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	601a      	str	r2, [r3, #0]
}
 801a9a6:	bf00      	nop
 801a9a8:	370c      	adds	r7, #12
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b0:	4770      	bx	lr

0801a9b2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a9b2:	b580      	push	{r7, lr}
 801a9b4:	b084      	sub	sp, #16
 801a9b6:	af00      	add	r7, sp, #0
 801a9b8:	6078      	str	r0, [r7, #4]
 801a9ba:	460b      	mov	r3, r1
 801a9bc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a9be:	2300      	movs	r3, #0
 801a9c0:	60bb      	str	r3, [r7, #8]
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a9c6:	f107 0308 	add.w	r3, r7, #8
 801a9ca:	2101      	movs	r1, #1
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7ee f8a7 	bl	8008b20 <osSemaphoreCreate>
 801a9d2:	4602      	mov	r2, r0
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d102      	bne.n	801a9e6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a9e4:	e009      	b.n	801a9fa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a9e6:	78fb      	ldrb	r3, [r7, #3]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d105      	bne.n	801a9f8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	2100      	movs	r1, #0
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	f7ee f8c6 	bl	8008b84 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a9f8:	2300      	movs	r3, #0
}
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	3710      	adds	r7, #16
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b084      	sub	sp, #16
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
 801aa0a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801aa0c:	f7ed ff7b 	bl	8008906 <osKernelSysTick>
 801aa10:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d011      	beq.n	801aa3c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	6839      	ldr	r1, [r7, #0]
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7ee f8b0 	bl	8008b84 <osSemaphoreWait>
 801aa24:	4603      	mov	r3, r0
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d105      	bne.n	801aa36 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801aa2a:	f7ed ff6c 	bl	8008906 <osKernelSysTick>
 801aa2e:	4602      	mov	r2, r0
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	1ad3      	subs	r3, r2, r3
 801aa34:	e012      	b.n	801aa5c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801aa36:	f04f 33ff 	mov.w	r3, #4294967295
 801aa3a:	e00f      	b.n	801aa5c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801aa3c:	bf00      	nop
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	f04f 31ff 	mov.w	r1, #4294967295
 801aa46:	4618      	mov	r0, r3
 801aa48:	f7ee f89c 	bl	8008b84 <osSemaphoreWait>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d1f5      	bne.n	801aa3e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801aa52:	f7ed ff58 	bl	8008906 <osKernelSysTick>
 801aa56:	4602      	mov	r2, r0
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3710      	adds	r7, #16
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}

0801aa64 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b082      	sub	sp, #8
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	4618      	mov	r0, r3
 801aa72:	f7ee f8d5 	bl	8008c20 <osSemaphoreRelease>
}
 801aa76:	bf00      	nop
 801aa78:	3708      	adds	r7, #8
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bd80      	pop	{r7, pc}

0801aa7e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801aa7e:	b580      	push	{r7, lr}
 801aa80:	b082      	sub	sp, #8
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f7ee f8fe 	bl	8008c8c <osSemaphoreDelete>
}
 801aa90:	bf00      	nop
 801aa92:	3708      	adds	r7, #8
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd80      	pop	{r7, pc}

0801aa98 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801aa98:	b480      	push	{r7}
 801aa9a:	b083      	sub	sp, #12
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d101      	bne.n	801aaac <sys_sem_valid+0x14>
    return 0;
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	e000      	b.n	801aaae <sys_sem_valid+0x16>
  else
    return 1;
 801aaac:	2301      	movs	r3, #1
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	370c      	adds	r7, #12
 801aab2:	46bd      	mov	sp, r7
 801aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab8:	4770      	bx	lr

0801aaba <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801aaba:	b480      	push	{r7}
 801aabc:	b083      	sub	sp, #12
 801aabe:	af00      	add	r7, sp, #0
 801aac0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	2200      	movs	r2, #0
 801aac6:	601a      	str	r2, [r3, #0]
}
 801aac8:	bf00      	nop
 801aaca:	370c      	adds	r7, #12
 801aacc:	46bd      	mov	sp, r7
 801aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad2:	4770      	bx	lr

0801aad4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801aad8:	4803      	ldr	r0, [pc, #12]	; (801aae8 <sys_init+0x14>)
 801aada:	f7ed ff84 	bl	80089e6 <osMutexCreate>
 801aade:	4603      	mov	r3, r0
 801aae0:	4a02      	ldr	r2, [pc, #8]	; (801aaec <sys_init+0x18>)
 801aae2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801aae4:	bf00      	nop
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	0801f85c 	.word	0x0801f85c
 801aaec:	2400d75c 	.word	0x2400d75c

0801aaf0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801aaf8:	2300      	movs	r3, #0
 801aafa:	60bb      	str	r3, [r7, #8]
 801aafc:	2300      	movs	r3, #0
 801aafe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ab00:	f107 0308 	add.w	r3, r7, #8
 801ab04:	4618      	mov	r0, r3
 801ab06:	f7ed ff6e 	bl	80089e6 <osMutexCreate>
 801ab0a:	4602      	mov	r2, r0
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d102      	bne.n	801ab1e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ab18:	f04f 33ff 	mov.w	r3, #4294967295
 801ab1c:	e000      	b.n	801ab20 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ab1e:	2300      	movs	r3, #0
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	3710      	adds	r7, #16
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd80      	pop	{r7, pc}

0801ab28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f04f 31ff 	mov.w	r1, #4294967295
 801ab38:	4618      	mov	r0, r3
 801ab3a:	f7ed ff6d 	bl	8008a18 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801ab3e:	bf00      	nop
 801ab40:	3708      	adds	r7, #8
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}

0801ab46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ab46:	b580      	push	{r7, lr}
 801ab48:	b082      	sub	sp, #8
 801ab4a:	af00      	add	r7, sp, #0
 801ab4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	4618      	mov	r0, r3
 801ab54:	f7ed ffae 	bl	8008ab4 <osMutexRelease>
}
 801ab58:	bf00      	nop
 801ab5a:	3708      	adds	r7, #8
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b08c      	sub	sp, #48	; 0x30
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	60f8      	str	r0, [r7, #12]
 801ab68:	60b9      	str	r1, [r7, #8]
 801ab6a:	607a      	str	r2, [r7, #4]
 801ab6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ab6e:	f107 0314 	add.w	r3, r7, #20
 801ab72:	2200      	movs	r2, #0
 801ab74:	601a      	str	r2, [r3, #0]
 801ab76:	605a      	str	r2, [r3, #4]
 801ab78:	609a      	str	r2, [r3, #8]
 801ab7a:	60da      	str	r2, [r3, #12]
 801ab7c:	611a      	str	r2, [r3, #16]
 801ab7e:	615a      	str	r2, [r3, #20]
 801ab80:	619a      	str	r2, [r3, #24]
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	617b      	str	r3, [r7, #20]
 801ab86:	68bb      	ldr	r3, [r7, #8]
 801ab88:	61bb      	str	r3, [r7, #24]
 801ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab8c:	b21b      	sxth	r3, r3
 801ab8e:	83bb      	strh	r3, [r7, #28]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ab94:	f107 0314 	add.w	r3, r7, #20
 801ab98:	6879      	ldr	r1, [r7, #4]
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7ed fec3 	bl	8008926 <osThreadCreate>
 801aba0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	3730      	adds	r7, #48	; 0x30
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}
	...

0801abac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801abb0:	4b04      	ldr	r3, [pc, #16]	; (801abc4 <sys_arch_protect+0x18>)
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	f04f 31ff 	mov.w	r1, #4294967295
 801abb8:	4618      	mov	r0, r3
 801abba:	f7ed ff2d 	bl	8008a18 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801abbe:	2301      	movs	r3, #1
}
 801abc0:	4618      	mov	r0, r3
 801abc2:	bd80      	pop	{r7, pc}
 801abc4:	2400d75c 	.word	0x2400d75c

0801abc8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b082      	sub	sp, #8
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801abd0:	4b04      	ldr	r3, [pc, #16]	; (801abe4 <sys_arch_unprotect+0x1c>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7ed ff6d 	bl	8008ab4 <osMutexRelease>
}
 801abda:	bf00      	nop
 801abdc:	3708      	adds	r7, #8
 801abde:	46bd      	mov	sp, r7
 801abe0:	bd80      	pop	{r7, pc}
 801abe2:	bf00      	nop
 801abe4:	2400d75c 	.word	0x2400d75c

0801abe8 <std>:
 801abe8:	2300      	movs	r3, #0
 801abea:	b510      	push	{r4, lr}
 801abec:	4604      	mov	r4, r0
 801abee:	e9c0 3300 	strd	r3, r3, [r0]
 801abf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801abf6:	6083      	str	r3, [r0, #8]
 801abf8:	8181      	strh	r1, [r0, #12]
 801abfa:	6643      	str	r3, [r0, #100]	; 0x64
 801abfc:	81c2      	strh	r2, [r0, #14]
 801abfe:	6183      	str	r3, [r0, #24]
 801ac00:	4619      	mov	r1, r3
 801ac02:	2208      	movs	r2, #8
 801ac04:	305c      	adds	r0, #92	; 0x5c
 801ac06:	f000 f928 	bl	801ae5a <memset>
 801ac0a:	4b05      	ldr	r3, [pc, #20]	; (801ac20 <std+0x38>)
 801ac0c:	6263      	str	r3, [r4, #36]	; 0x24
 801ac0e:	4b05      	ldr	r3, [pc, #20]	; (801ac24 <std+0x3c>)
 801ac10:	62a3      	str	r3, [r4, #40]	; 0x28
 801ac12:	4b05      	ldr	r3, [pc, #20]	; (801ac28 <std+0x40>)
 801ac14:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ac16:	4b05      	ldr	r3, [pc, #20]	; (801ac2c <std+0x44>)
 801ac18:	6224      	str	r4, [r4, #32]
 801ac1a:	6323      	str	r3, [r4, #48]	; 0x30
 801ac1c:	bd10      	pop	{r4, pc}
 801ac1e:	bf00      	nop
 801ac20:	0801b0c5 	.word	0x0801b0c5
 801ac24:	0801b0e7 	.word	0x0801b0e7
 801ac28:	0801b11f 	.word	0x0801b11f
 801ac2c:	0801b143 	.word	0x0801b143

0801ac30 <_cleanup_r>:
 801ac30:	4901      	ldr	r1, [pc, #4]	; (801ac38 <_cleanup_r+0x8>)
 801ac32:	f000 b8af 	b.w	801ad94 <_fwalk_reent>
 801ac36:	bf00      	nop
 801ac38:	0801b2d9 	.word	0x0801b2d9

0801ac3c <__sfmoreglue>:
 801ac3c:	b570      	push	{r4, r5, r6, lr}
 801ac3e:	1e4a      	subs	r2, r1, #1
 801ac40:	2568      	movs	r5, #104	; 0x68
 801ac42:	4355      	muls	r5, r2
 801ac44:	460e      	mov	r6, r1
 801ac46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ac4a:	f000 f90f 	bl	801ae6c <_malloc_r>
 801ac4e:	4604      	mov	r4, r0
 801ac50:	b140      	cbz	r0, 801ac64 <__sfmoreglue+0x28>
 801ac52:	2100      	movs	r1, #0
 801ac54:	e9c0 1600 	strd	r1, r6, [r0]
 801ac58:	300c      	adds	r0, #12
 801ac5a:	60a0      	str	r0, [r4, #8]
 801ac5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ac60:	f000 f8fb 	bl	801ae5a <memset>
 801ac64:	4620      	mov	r0, r4
 801ac66:	bd70      	pop	{r4, r5, r6, pc}

0801ac68 <__sfp_lock_acquire>:
 801ac68:	4801      	ldr	r0, [pc, #4]	; (801ac70 <__sfp_lock_acquire+0x8>)
 801ac6a:	f000 b8d8 	b.w	801ae1e <__retarget_lock_acquire_recursive>
 801ac6e:	bf00      	nop
 801ac70:	2400d768 	.word	0x2400d768

0801ac74 <__sfp_lock_release>:
 801ac74:	4801      	ldr	r0, [pc, #4]	; (801ac7c <__sfp_lock_release+0x8>)
 801ac76:	f000 b8d3 	b.w	801ae20 <__retarget_lock_release_recursive>
 801ac7a:	bf00      	nop
 801ac7c:	2400d768 	.word	0x2400d768

0801ac80 <__sinit_lock_acquire>:
 801ac80:	4801      	ldr	r0, [pc, #4]	; (801ac88 <__sinit_lock_acquire+0x8>)
 801ac82:	f000 b8cc 	b.w	801ae1e <__retarget_lock_acquire_recursive>
 801ac86:	bf00      	nop
 801ac88:	2400d763 	.word	0x2400d763

0801ac8c <__sinit_lock_release>:
 801ac8c:	4801      	ldr	r0, [pc, #4]	; (801ac94 <__sinit_lock_release+0x8>)
 801ac8e:	f000 b8c7 	b.w	801ae20 <__retarget_lock_release_recursive>
 801ac92:	bf00      	nop
 801ac94:	2400d763 	.word	0x2400d763

0801ac98 <__sinit>:
 801ac98:	b510      	push	{r4, lr}
 801ac9a:	4604      	mov	r4, r0
 801ac9c:	f7ff fff0 	bl	801ac80 <__sinit_lock_acquire>
 801aca0:	69a3      	ldr	r3, [r4, #24]
 801aca2:	b11b      	cbz	r3, 801acac <__sinit+0x14>
 801aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aca8:	f7ff bff0 	b.w	801ac8c <__sinit_lock_release>
 801acac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801acb0:	6523      	str	r3, [r4, #80]	; 0x50
 801acb2:	4b13      	ldr	r3, [pc, #76]	; (801ad00 <__sinit+0x68>)
 801acb4:	4a13      	ldr	r2, [pc, #76]	; (801ad04 <__sinit+0x6c>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	62a2      	str	r2, [r4, #40]	; 0x28
 801acba:	42a3      	cmp	r3, r4
 801acbc:	bf04      	itt	eq
 801acbe:	2301      	moveq	r3, #1
 801acc0:	61a3      	streq	r3, [r4, #24]
 801acc2:	4620      	mov	r0, r4
 801acc4:	f000 f820 	bl	801ad08 <__sfp>
 801acc8:	6060      	str	r0, [r4, #4]
 801acca:	4620      	mov	r0, r4
 801accc:	f000 f81c 	bl	801ad08 <__sfp>
 801acd0:	60a0      	str	r0, [r4, #8]
 801acd2:	4620      	mov	r0, r4
 801acd4:	f000 f818 	bl	801ad08 <__sfp>
 801acd8:	2200      	movs	r2, #0
 801acda:	60e0      	str	r0, [r4, #12]
 801acdc:	2104      	movs	r1, #4
 801acde:	6860      	ldr	r0, [r4, #4]
 801ace0:	f7ff ff82 	bl	801abe8 <std>
 801ace4:	68a0      	ldr	r0, [r4, #8]
 801ace6:	2201      	movs	r2, #1
 801ace8:	2109      	movs	r1, #9
 801acea:	f7ff ff7d 	bl	801abe8 <std>
 801acee:	68e0      	ldr	r0, [r4, #12]
 801acf0:	2202      	movs	r2, #2
 801acf2:	2112      	movs	r1, #18
 801acf4:	f7ff ff78 	bl	801abe8 <std>
 801acf8:	2301      	movs	r3, #1
 801acfa:	61a3      	str	r3, [r4, #24]
 801acfc:	e7d2      	b.n	801aca4 <__sinit+0xc>
 801acfe:	bf00      	nop
 801ad00:	0801f8c4 	.word	0x0801f8c4
 801ad04:	0801ac31 	.word	0x0801ac31

0801ad08 <__sfp>:
 801ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad0a:	4607      	mov	r7, r0
 801ad0c:	f7ff ffac 	bl	801ac68 <__sfp_lock_acquire>
 801ad10:	4b1e      	ldr	r3, [pc, #120]	; (801ad8c <__sfp+0x84>)
 801ad12:	681e      	ldr	r6, [r3, #0]
 801ad14:	69b3      	ldr	r3, [r6, #24]
 801ad16:	b913      	cbnz	r3, 801ad1e <__sfp+0x16>
 801ad18:	4630      	mov	r0, r6
 801ad1a:	f7ff ffbd 	bl	801ac98 <__sinit>
 801ad1e:	3648      	adds	r6, #72	; 0x48
 801ad20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ad24:	3b01      	subs	r3, #1
 801ad26:	d503      	bpl.n	801ad30 <__sfp+0x28>
 801ad28:	6833      	ldr	r3, [r6, #0]
 801ad2a:	b30b      	cbz	r3, 801ad70 <__sfp+0x68>
 801ad2c:	6836      	ldr	r6, [r6, #0]
 801ad2e:	e7f7      	b.n	801ad20 <__sfp+0x18>
 801ad30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ad34:	b9d5      	cbnz	r5, 801ad6c <__sfp+0x64>
 801ad36:	4b16      	ldr	r3, [pc, #88]	; (801ad90 <__sfp+0x88>)
 801ad38:	60e3      	str	r3, [r4, #12]
 801ad3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ad3e:	6665      	str	r5, [r4, #100]	; 0x64
 801ad40:	f000 f86c 	bl	801ae1c <__retarget_lock_init_recursive>
 801ad44:	f7ff ff96 	bl	801ac74 <__sfp_lock_release>
 801ad48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ad4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ad50:	6025      	str	r5, [r4, #0]
 801ad52:	61a5      	str	r5, [r4, #24]
 801ad54:	2208      	movs	r2, #8
 801ad56:	4629      	mov	r1, r5
 801ad58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ad5c:	f000 f87d 	bl	801ae5a <memset>
 801ad60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ad64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ad68:	4620      	mov	r0, r4
 801ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad6c:	3468      	adds	r4, #104	; 0x68
 801ad6e:	e7d9      	b.n	801ad24 <__sfp+0x1c>
 801ad70:	2104      	movs	r1, #4
 801ad72:	4638      	mov	r0, r7
 801ad74:	f7ff ff62 	bl	801ac3c <__sfmoreglue>
 801ad78:	4604      	mov	r4, r0
 801ad7a:	6030      	str	r0, [r6, #0]
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	d1d5      	bne.n	801ad2c <__sfp+0x24>
 801ad80:	f7ff ff78 	bl	801ac74 <__sfp_lock_release>
 801ad84:	230c      	movs	r3, #12
 801ad86:	603b      	str	r3, [r7, #0]
 801ad88:	e7ee      	b.n	801ad68 <__sfp+0x60>
 801ad8a:	bf00      	nop
 801ad8c:	0801f8c4 	.word	0x0801f8c4
 801ad90:	ffff0001 	.word	0xffff0001

0801ad94 <_fwalk_reent>:
 801ad94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad98:	4606      	mov	r6, r0
 801ad9a:	4688      	mov	r8, r1
 801ad9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ada0:	2700      	movs	r7, #0
 801ada2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ada6:	f1b9 0901 	subs.w	r9, r9, #1
 801adaa:	d505      	bpl.n	801adb8 <_fwalk_reent+0x24>
 801adac:	6824      	ldr	r4, [r4, #0]
 801adae:	2c00      	cmp	r4, #0
 801adb0:	d1f7      	bne.n	801ada2 <_fwalk_reent+0xe>
 801adb2:	4638      	mov	r0, r7
 801adb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adb8:	89ab      	ldrh	r3, [r5, #12]
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d907      	bls.n	801adce <_fwalk_reent+0x3a>
 801adbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801adc2:	3301      	adds	r3, #1
 801adc4:	d003      	beq.n	801adce <_fwalk_reent+0x3a>
 801adc6:	4629      	mov	r1, r5
 801adc8:	4630      	mov	r0, r6
 801adca:	47c0      	blx	r8
 801adcc:	4307      	orrs	r7, r0
 801adce:	3568      	adds	r5, #104	; 0x68
 801add0:	e7e9      	b.n	801ada6 <_fwalk_reent+0x12>
	...

0801add4 <__libc_init_array>:
 801add4:	b570      	push	{r4, r5, r6, lr}
 801add6:	4d0d      	ldr	r5, [pc, #52]	; (801ae0c <__libc_init_array+0x38>)
 801add8:	4c0d      	ldr	r4, [pc, #52]	; (801ae10 <__libc_init_array+0x3c>)
 801adda:	1b64      	subs	r4, r4, r5
 801addc:	10a4      	asrs	r4, r4, #2
 801adde:	2600      	movs	r6, #0
 801ade0:	42a6      	cmp	r6, r4
 801ade2:	d109      	bne.n	801adf8 <__libc_init_array+0x24>
 801ade4:	4d0b      	ldr	r5, [pc, #44]	; (801ae14 <__libc_init_array+0x40>)
 801ade6:	4c0c      	ldr	r4, [pc, #48]	; (801ae18 <__libc_init_array+0x44>)
 801ade8:	f000 ffcc 	bl	801bd84 <_init>
 801adec:	1b64      	subs	r4, r4, r5
 801adee:	10a4      	asrs	r4, r4, #2
 801adf0:	2600      	movs	r6, #0
 801adf2:	42a6      	cmp	r6, r4
 801adf4:	d105      	bne.n	801ae02 <__libc_init_array+0x2e>
 801adf6:	bd70      	pop	{r4, r5, r6, pc}
 801adf8:	f855 3b04 	ldr.w	r3, [r5], #4
 801adfc:	4798      	blx	r3
 801adfe:	3601      	adds	r6, #1
 801ae00:	e7ee      	b.n	801ade0 <__libc_init_array+0xc>
 801ae02:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae06:	4798      	blx	r3
 801ae08:	3601      	adds	r6, #1
 801ae0a:	e7f2      	b.n	801adf2 <__libc_init_array+0x1e>
 801ae0c:	0801f9b8 	.word	0x0801f9b8
 801ae10:	0801f9b8 	.word	0x0801f9b8
 801ae14:	0801f9b8 	.word	0x0801f9b8
 801ae18:	0801f9bc 	.word	0x0801f9bc

0801ae1c <__retarget_lock_init_recursive>:
 801ae1c:	4770      	bx	lr

0801ae1e <__retarget_lock_acquire_recursive>:
 801ae1e:	4770      	bx	lr

0801ae20 <__retarget_lock_release_recursive>:
 801ae20:	4770      	bx	lr

0801ae22 <memcmp>:
 801ae22:	b530      	push	{r4, r5, lr}
 801ae24:	3901      	subs	r1, #1
 801ae26:	2400      	movs	r4, #0
 801ae28:	42a2      	cmp	r2, r4
 801ae2a:	d101      	bne.n	801ae30 <memcmp+0xe>
 801ae2c:	2000      	movs	r0, #0
 801ae2e:	e005      	b.n	801ae3c <memcmp+0x1a>
 801ae30:	5d03      	ldrb	r3, [r0, r4]
 801ae32:	3401      	adds	r4, #1
 801ae34:	5d0d      	ldrb	r5, [r1, r4]
 801ae36:	42ab      	cmp	r3, r5
 801ae38:	d0f6      	beq.n	801ae28 <memcmp+0x6>
 801ae3a:	1b58      	subs	r0, r3, r5
 801ae3c:	bd30      	pop	{r4, r5, pc}

0801ae3e <memcpy>:
 801ae3e:	440a      	add	r2, r1
 801ae40:	4291      	cmp	r1, r2
 801ae42:	f100 33ff 	add.w	r3, r0, #4294967295
 801ae46:	d100      	bne.n	801ae4a <memcpy+0xc>
 801ae48:	4770      	bx	lr
 801ae4a:	b510      	push	{r4, lr}
 801ae4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae54:	4291      	cmp	r1, r2
 801ae56:	d1f9      	bne.n	801ae4c <memcpy+0xe>
 801ae58:	bd10      	pop	{r4, pc}

0801ae5a <memset>:
 801ae5a:	4402      	add	r2, r0
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	d100      	bne.n	801ae64 <memset+0xa>
 801ae62:	4770      	bx	lr
 801ae64:	f803 1b01 	strb.w	r1, [r3], #1
 801ae68:	e7f9      	b.n	801ae5e <memset+0x4>
	...

0801ae6c <_malloc_r>:
 801ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6e:	1ccd      	adds	r5, r1, #3
 801ae70:	f025 0503 	bic.w	r5, r5, #3
 801ae74:	3508      	adds	r5, #8
 801ae76:	2d0c      	cmp	r5, #12
 801ae78:	bf38      	it	cc
 801ae7a:	250c      	movcc	r5, #12
 801ae7c:	2d00      	cmp	r5, #0
 801ae7e:	4606      	mov	r6, r0
 801ae80:	db01      	blt.n	801ae86 <_malloc_r+0x1a>
 801ae82:	42a9      	cmp	r1, r5
 801ae84:	d903      	bls.n	801ae8e <_malloc_r+0x22>
 801ae86:	230c      	movs	r3, #12
 801ae88:	6033      	str	r3, [r6, #0]
 801ae8a:	2000      	movs	r0, #0
 801ae8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae8e:	f000 fa8b 	bl	801b3a8 <__malloc_lock>
 801ae92:	4921      	ldr	r1, [pc, #132]	; (801af18 <_malloc_r+0xac>)
 801ae94:	680a      	ldr	r2, [r1, #0]
 801ae96:	4614      	mov	r4, r2
 801ae98:	b99c      	cbnz	r4, 801aec2 <_malloc_r+0x56>
 801ae9a:	4f20      	ldr	r7, [pc, #128]	; (801af1c <_malloc_r+0xb0>)
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	b923      	cbnz	r3, 801aeaa <_malloc_r+0x3e>
 801aea0:	4621      	mov	r1, r4
 801aea2:	4630      	mov	r0, r6
 801aea4:	f000 f8fe 	bl	801b0a4 <_sbrk_r>
 801aea8:	6038      	str	r0, [r7, #0]
 801aeaa:	4629      	mov	r1, r5
 801aeac:	4630      	mov	r0, r6
 801aeae:	f000 f8f9 	bl	801b0a4 <_sbrk_r>
 801aeb2:	1c43      	adds	r3, r0, #1
 801aeb4:	d123      	bne.n	801aefe <_malloc_r+0x92>
 801aeb6:	230c      	movs	r3, #12
 801aeb8:	6033      	str	r3, [r6, #0]
 801aeba:	4630      	mov	r0, r6
 801aebc:	f000 fa7a 	bl	801b3b4 <__malloc_unlock>
 801aec0:	e7e3      	b.n	801ae8a <_malloc_r+0x1e>
 801aec2:	6823      	ldr	r3, [r4, #0]
 801aec4:	1b5b      	subs	r3, r3, r5
 801aec6:	d417      	bmi.n	801aef8 <_malloc_r+0x8c>
 801aec8:	2b0b      	cmp	r3, #11
 801aeca:	d903      	bls.n	801aed4 <_malloc_r+0x68>
 801aecc:	6023      	str	r3, [r4, #0]
 801aece:	441c      	add	r4, r3
 801aed0:	6025      	str	r5, [r4, #0]
 801aed2:	e004      	b.n	801aede <_malloc_r+0x72>
 801aed4:	6863      	ldr	r3, [r4, #4]
 801aed6:	42a2      	cmp	r2, r4
 801aed8:	bf0c      	ite	eq
 801aeda:	600b      	streq	r3, [r1, #0]
 801aedc:	6053      	strne	r3, [r2, #4]
 801aede:	4630      	mov	r0, r6
 801aee0:	f000 fa68 	bl	801b3b4 <__malloc_unlock>
 801aee4:	f104 000b 	add.w	r0, r4, #11
 801aee8:	1d23      	adds	r3, r4, #4
 801aeea:	f020 0007 	bic.w	r0, r0, #7
 801aeee:	1ac2      	subs	r2, r0, r3
 801aef0:	d0cc      	beq.n	801ae8c <_malloc_r+0x20>
 801aef2:	1a1b      	subs	r3, r3, r0
 801aef4:	50a3      	str	r3, [r4, r2]
 801aef6:	e7c9      	b.n	801ae8c <_malloc_r+0x20>
 801aef8:	4622      	mov	r2, r4
 801aefa:	6864      	ldr	r4, [r4, #4]
 801aefc:	e7cc      	b.n	801ae98 <_malloc_r+0x2c>
 801aefe:	1cc4      	adds	r4, r0, #3
 801af00:	f024 0403 	bic.w	r4, r4, #3
 801af04:	42a0      	cmp	r0, r4
 801af06:	d0e3      	beq.n	801aed0 <_malloc_r+0x64>
 801af08:	1a21      	subs	r1, r4, r0
 801af0a:	4630      	mov	r0, r6
 801af0c:	f000 f8ca 	bl	801b0a4 <_sbrk_r>
 801af10:	3001      	adds	r0, #1
 801af12:	d1dd      	bne.n	801aed0 <_malloc_r+0x64>
 801af14:	e7cf      	b.n	801aeb6 <_malloc_r+0x4a>
 801af16:	bf00      	nop
 801af18:	24009ef8 	.word	0x24009ef8
 801af1c:	24009efc 	.word	0x24009efc

0801af20 <iprintf>:
 801af20:	b40f      	push	{r0, r1, r2, r3}
 801af22:	4b0a      	ldr	r3, [pc, #40]	; (801af4c <iprintf+0x2c>)
 801af24:	b513      	push	{r0, r1, r4, lr}
 801af26:	681c      	ldr	r4, [r3, #0]
 801af28:	b124      	cbz	r4, 801af34 <iprintf+0x14>
 801af2a:	69a3      	ldr	r3, [r4, #24]
 801af2c:	b913      	cbnz	r3, 801af34 <iprintf+0x14>
 801af2e:	4620      	mov	r0, r4
 801af30:	f7ff feb2 	bl	801ac98 <__sinit>
 801af34:	ab05      	add	r3, sp, #20
 801af36:	9a04      	ldr	r2, [sp, #16]
 801af38:	68a1      	ldr	r1, [r4, #8]
 801af3a:	9301      	str	r3, [sp, #4]
 801af3c:	4620      	mov	r0, r4
 801af3e:	f000 fab9 	bl	801b4b4 <_vfiprintf_r>
 801af42:	b002      	add	sp, #8
 801af44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af48:	b004      	add	sp, #16
 801af4a:	4770      	bx	lr
 801af4c:	24000038 	.word	0x24000038

0801af50 <rand>:
 801af50:	4b17      	ldr	r3, [pc, #92]	; (801afb0 <rand+0x60>)
 801af52:	b510      	push	{r4, lr}
 801af54:	681c      	ldr	r4, [r3, #0]
 801af56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801af58:	b9b3      	cbnz	r3, 801af88 <rand+0x38>
 801af5a:	2018      	movs	r0, #24
 801af5c:	f000 fa1c 	bl	801b398 <malloc>
 801af60:	63a0      	str	r0, [r4, #56]	; 0x38
 801af62:	b928      	cbnz	r0, 801af70 <rand+0x20>
 801af64:	4602      	mov	r2, r0
 801af66:	4b13      	ldr	r3, [pc, #76]	; (801afb4 <rand+0x64>)
 801af68:	4813      	ldr	r0, [pc, #76]	; (801afb8 <rand+0x68>)
 801af6a:	214e      	movs	r1, #78	; 0x4e
 801af6c:	f000 f900 	bl	801b170 <__assert_func>
 801af70:	4a12      	ldr	r2, [pc, #72]	; (801afbc <rand+0x6c>)
 801af72:	4b13      	ldr	r3, [pc, #76]	; (801afc0 <rand+0x70>)
 801af74:	e9c0 2300 	strd	r2, r3, [r0]
 801af78:	4b12      	ldr	r3, [pc, #72]	; (801afc4 <rand+0x74>)
 801af7a:	6083      	str	r3, [r0, #8]
 801af7c:	230b      	movs	r3, #11
 801af7e:	8183      	strh	r3, [r0, #12]
 801af80:	2201      	movs	r2, #1
 801af82:	2300      	movs	r3, #0
 801af84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801af88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801af8a:	480f      	ldr	r0, [pc, #60]	; (801afc8 <rand+0x78>)
 801af8c:	690a      	ldr	r2, [r1, #16]
 801af8e:	694b      	ldr	r3, [r1, #20]
 801af90:	4c0e      	ldr	r4, [pc, #56]	; (801afcc <rand+0x7c>)
 801af92:	4350      	muls	r0, r2
 801af94:	fb04 0003 	mla	r0, r4, r3, r0
 801af98:	fba2 3404 	umull	r3, r4, r2, r4
 801af9c:	1c5a      	adds	r2, r3, #1
 801af9e:	4404      	add	r4, r0
 801afa0:	f144 0000 	adc.w	r0, r4, #0
 801afa4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801afa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801afac:	bd10      	pop	{r4, pc}
 801afae:	bf00      	nop
 801afb0:	24000038 	.word	0x24000038
 801afb4:	0801f8c8 	.word	0x0801f8c8
 801afb8:	0801f8df 	.word	0x0801f8df
 801afbc:	abcd330e 	.word	0xabcd330e
 801afc0:	e66d1234 	.word	0xe66d1234
 801afc4:	0005deec 	.word	0x0005deec
 801afc8:	5851f42d 	.word	0x5851f42d
 801afcc:	4c957f2d 	.word	0x4c957f2d

0801afd0 <cleanup_glue>:
 801afd0:	b538      	push	{r3, r4, r5, lr}
 801afd2:	460c      	mov	r4, r1
 801afd4:	6809      	ldr	r1, [r1, #0]
 801afd6:	4605      	mov	r5, r0
 801afd8:	b109      	cbz	r1, 801afde <cleanup_glue+0xe>
 801afda:	f7ff fff9 	bl	801afd0 <cleanup_glue>
 801afde:	4621      	mov	r1, r4
 801afe0:	4628      	mov	r0, r5
 801afe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afe6:	f000 b9eb 	b.w	801b3c0 <_free_r>
	...

0801afec <_reclaim_reent>:
 801afec:	4b2c      	ldr	r3, [pc, #176]	; (801b0a0 <_reclaim_reent+0xb4>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	4283      	cmp	r3, r0
 801aff2:	b570      	push	{r4, r5, r6, lr}
 801aff4:	4604      	mov	r4, r0
 801aff6:	d051      	beq.n	801b09c <_reclaim_reent+0xb0>
 801aff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801affa:	b143      	cbz	r3, 801b00e <_reclaim_reent+0x22>
 801affc:	68db      	ldr	r3, [r3, #12]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d14a      	bne.n	801b098 <_reclaim_reent+0xac>
 801b002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b004:	6819      	ldr	r1, [r3, #0]
 801b006:	b111      	cbz	r1, 801b00e <_reclaim_reent+0x22>
 801b008:	4620      	mov	r0, r4
 801b00a:	f000 f9d9 	bl	801b3c0 <_free_r>
 801b00e:	6961      	ldr	r1, [r4, #20]
 801b010:	b111      	cbz	r1, 801b018 <_reclaim_reent+0x2c>
 801b012:	4620      	mov	r0, r4
 801b014:	f000 f9d4 	bl	801b3c0 <_free_r>
 801b018:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b01a:	b111      	cbz	r1, 801b022 <_reclaim_reent+0x36>
 801b01c:	4620      	mov	r0, r4
 801b01e:	f000 f9cf 	bl	801b3c0 <_free_r>
 801b022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b024:	b111      	cbz	r1, 801b02c <_reclaim_reent+0x40>
 801b026:	4620      	mov	r0, r4
 801b028:	f000 f9ca 	bl	801b3c0 <_free_r>
 801b02c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b02e:	b111      	cbz	r1, 801b036 <_reclaim_reent+0x4a>
 801b030:	4620      	mov	r0, r4
 801b032:	f000 f9c5 	bl	801b3c0 <_free_r>
 801b036:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b038:	b111      	cbz	r1, 801b040 <_reclaim_reent+0x54>
 801b03a:	4620      	mov	r0, r4
 801b03c:	f000 f9c0 	bl	801b3c0 <_free_r>
 801b040:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b042:	b111      	cbz	r1, 801b04a <_reclaim_reent+0x5e>
 801b044:	4620      	mov	r0, r4
 801b046:	f000 f9bb 	bl	801b3c0 <_free_r>
 801b04a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b04c:	b111      	cbz	r1, 801b054 <_reclaim_reent+0x68>
 801b04e:	4620      	mov	r0, r4
 801b050:	f000 f9b6 	bl	801b3c0 <_free_r>
 801b054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b056:	b111      	cbz	r1, 801b05e <_reclaim_reent+0x72>
 801b058:	4620      	mov	r0, r4
 801b05a:	f000 f9b1 	bl	801b3c0 <_free_r>
 801b05e:	69a3      	ldr	r3, [r4, #24]
 801b060:	b1e3      	cbz	r3, 801b09c <_reclaim_reent+0xb0>
 801b062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b064:	4620      	mov	r0, r4
 801b066:	4798      	blx	r3
 801b068:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b06a:	b1b9      	cbz	r1, 801b09c <_reclaim_reent+0xb0>
 801b06c:	4620      	mov	r0, r4
 801b06e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b072:	f7ff bfad 	b.w	801afd0 <cleanup_glue>
 801b076:	5949      	ldr	r1, [r1, r5]
 801b078:	b941      	cbnz	r1, 801b08c <_reclaim_reent+0xa0>
 801b07a:	3504      	adds	r5, #4
 801b07c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b07e:	2d80      	cmp	r5, #128	; 0x80
 801b080:	68d9      	ldr	r1, [r3, #12]
 801b082:	d1f8      	bne.n	801b076 <_reclaim_reent+0x8a>
 801b084:	4620      	mov	r0, r4
 801b086:	f000 f99b 	bl	801b3c0 <_free_r>
 801b08a:	e7ba      	b.n	801b002 <_reclaim_reent+0x16>
 801b08c:	680e      	ldr	r6, [r1, #0]
 801b08e:	4620      	mov	r0, r4
 801b090:	f000 f996 	bl	801b3c0 <_free_r>
 801b094:	4631      	mov	r1, r6
 801b096:	e7ef      	b.n	801b078 <_reclaim_reent+0x8c>
 801b098:	2500      	movs	r5, #0
 801b09a:	e7ef      	b.n	801b07c <_reclaim_reent+0x90>
 801b09c:	bd70      	pop	{r4, r5, r6, pc}
 801b09e:	bf00      	nop
 801b0a0:	24000038 	.word	0x24000038

0801b0a4 <_sbrk_r>:
 801b0a4:	b538      	push	{r3, r4, r5, lr}
 801b0a6:	4d06      	ldr	r5, [pc, #24]	; (801b0c0 <_sbrk_r+0x1c>)
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	4604      	mov	r4, r0
 801b0ac:	4608      	mov	r0, r1
 801b0ae:	602b      	str	r3, [r5, #0]
 801b0b0:	f7e5 feb0 	bl	8000e14 <_sbrk>
 801b0b4:	1c43      	adds	r3, r0, #1
 801b0b6:	d102      	bne.n	801b0be <_sbrk_r+0x1a>
 801b0b8:	682b      	ldr	r3, [r5, #0]
 801b0ba:	b103      	cbz	r3, 801b0be <_sbrk_r+0x1a>
 801b0bc:	6023      	str	r3, [r4, #0]
 801b0be:	bd38      	pop	{r3, r4, r5, pc}
 801b0c0:	2400d758 	.word	0x2400d758

0801b0c4 <__sread>:
 801b0c4:	b510      	push	{r4, lr}
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0cc:	f000 fcb6 	bl	801ba3c <_read_r>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	bfab      	itete	ge
 801b0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b0d6:	89a3      	ldrhlt	r3, [r4, #12]
 801b0d8:	181b      	addge	r3, r3, r0
 801b0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b0de:	bfac      	ite	ge
 801b0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b0e2:	81a3      	strhlt	r3, [r4, #12]
 801b0e4:	bd10      	pop	{r4, pc}

0801b0e6 <__swrite>:
 801b0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ea:	461f      	mov	r7, r3
 801b0ec:	898b      	ldrh	r3, [r1, #12]
 801b0ee:	05db      	lsls	r3, r3, #23
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	460c      	mov	r4, r1
 801b0f4:	4616      	mov	r6, r2
 801b0f6:	d505      	bpl.n	801b104 <__swrite+0x1e>
 801b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0fc:	2302      	movs	r3, #2
 801b0fe:	2200      	movs	r2, #0
 801b100:	f000 f938 	bl	801b374 <_lseek_r>
 801b104:	89a3      	ldrh	r3, [r4, #12]
 801b106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b10e:	81a3      	strh	r3, [r4, #12]
 801b110:	4632      	mov	r2, r6
 801b112:	463b      	mov	r3, r7
 801b114:	4628      	mov	r0, r5
 801b116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b11a:	f000 b817 	b.w	801b14c <_write_r>

0801b11e <__sseek>:
 801b11e:	b510      	push	{r4, lr}
 801b120:	460c      	mov	r4, r1
 801b122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b126:	f000 f925 	bl	801b374 <_lseek_r>
 801b12a:	1c43      	adds	r3, r0, #1
 801b12c:	89a3      	ldrh	r3, [r4, #12]
 801b12e:	bf15      	itete	ne
 801b130:	6560      	strne	r0, [r4, #84]	; 0x54
 801b132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b13a:	81a3      	strheq	r3, [r4, #12]
 801b13c:	bf18      	it	ne
 801b13e:	81a3      	strhne	r3, [r4, #12]
 801b140:	bd10      	pop	{r4, pc}

0801b142 <__sclose>:
 801b142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b146:	f000 b831 	b.w	801b1ac <_close_r>
	...

0801b14c <_write_r>:
 801b14c:	b538      	push	{r3, r4, r5, lr}
 801b14e:	4d07      	ldr	r5, [pc, #28]	; (801b16c <_write_r+0x20>)
 801b150:	4604      	mov	r4, r0
 801b152:	4608      	mov	r0, r1
 801b154:	4611      	mov	r1, r2
 801b156:	2200      	movs	r2, #0
 801b158:	602a      	str	r2, [r5, #0]
 801b15a:	461a      	mov	r2, r3
 801b15c:	f7e5 fe09 	bl	8000d72 <_write>
 801b160:	1c43      	adds	r3, r0, #1
 801b162:	d102      	bne.n	801b16a <_write_r+0x1e>
 801b164:	682b      	ldr	r3, [r5, #0]
 801b166:	b103      	cbz	r3, 801b16a <_write_r+0x1e>
 801b168:	6023      	str	r3, [r4, #0]
 801b16a:	bd38      	pop	{r3, r4, r5, pc}
 801b16c:	2400d758 	.word	0x2400d758

0801b170 <__assert_func>:
 801b170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b172:	4614      	mov	r4, r2
 801b174:	461a      	mov	r2, r3
 801b176:	4b09      	ldr	r3, [pc, #36]	; (801b19c <__assert_func+0x2c>)
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	4605      	mov	r5, r0
 801b17c:	68d8      	ldr	r0, [r3, #12]
 801b17e:	b14c      	cbz	r4, 801b194 <__assert_func+0x24>
 801b180:	4b07      	ldr	r3, [pc, #28]	; (801b1a0 <__assert_func+0x30>)
 801b182:	9100      	str	r1, [sp, #0]
 801b184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b188:	4906      	ldr	r1, [pc, #24]	; (801b1a4 <__assert_func+0x34>)
 801b18a:	462b      	mov	r3, r5
 801b18c:	f000 f8e0 	bl	801b350 <fiprintf>
 801b190:	f000 fd26 	bl	801bbe0 <abort>
 801b194:	4b04      	ldr	r3, [pc, #16]	; (801b1a8 <__assert_func+0x38>)
 801b196:	461c      	mov	r4, r3
 801b198:	e7f3      	b.n	801b182 <__assert_func+0x12>
 801b19a:	bf00      	nop
 801b19c:	24000038 	.word	0x24000038
 801b1a0:	0801f93e 	.word	0x0801f93e
 801b1a4:	0801f94b 	.word	0x0801f94b
 801b1a8:	0801f979 	.word	0x0801f979

0801b1ac <_close_r>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	4d06      	ldr	r5, [pc, #24]	; (801b1c8 <_close_r+0x1c>)
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	4604      	mov	r4, r0
 801b1b4:	4608      	mov	r0, r1
 801b1b6:	602b      	str	r3, [r5, #0]
 801b1b8:	f7e5 fdf7 	bl	8000daa <_close>
 801b1bc:	1c43      	adds	r3, r0, #1
 801b1be:	d102      	bne.n	801b1c6 <_close_r+0x1a>
 801b1c0:	682b      	ldr	r3, [r5, #0]
 801b1c2:	b103      	cbz	r3, 801b1c6 <_close_r+0x1a>
 801b1c4:	6023      	str	r3, [r4, #0]
 801b1c6:	bd38      	pop	{r3, r4, r5, pc}
 801b1c8:	2400d758 	.word	0x2400d758

0801b1cc <__sflush_r>:
 801b1cc:	898a      	ldrh	r2, [r1, #12]
 801b1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1d2:	4605      	mov	r5, r0
 801b1d4:	0710      	lsls	r0, r2, #28
 801b1d6:	460c      	mov	r4, r1
 801b1d8:	d458      	bmi.n	801b28c <__sflush_r+0xc0>
 801b1da:	684b      	ldr	r3, [r1, #4]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	dc05      	bgt.n	801b1ec <__sflush_r+0x20>
 801b1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	dc02      	bgt.n	801b1ec <__sflush_r+0x20>
 801b1e6:	2000      	movs	r0, #0
 801b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b1ee:	2e00      	cmp	r6, #0
 801b1f0:	d0f9      	beq.n	801b1e6 <__sflush_r+0x1a>
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b1f8:	682f      	ldr	r7, [r5, #0]
 801b1fa:	602b      	str	r3, [r5, #0]
 801b1fc:	d032      	beq.n	801b264 <__sflush_r+0x98>
 801b1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b200:	89a3      	ldrh	r3, [r4, #12]
 801b202:	075a      	lsls	r2, r3, #29
 801b204:	d505      	bpl.n	801b212 <__sflush_r+0x46>
 801b206:	6863      	ldr	r3, [r4, #4]
 801b208:	1ac0      	subs	r0, r0, r3
 801b20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b20c:	b10b      	cbz	r3, 801b212 <__sflush_r+0x46>
 801b20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b210:	1ac0      	subs	r0, r0, r3
 801b212:	2300      	movs	r3, #0
 801b214:	4602      	mov	r2, r0
 801b216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b218:	6a21      	ldr	r1, [r4, #32]
 801b21a:	4628      	mov	r0, r5
 801b21c:	47b0      	blx	r6
 801b21e:	1c43      	adds	r3, r0, #1
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	d106      	bne.n	801b232 <__sflush_r+0x66>
 801b224:	6829      	ldr	r1, [r5, #0]
 801b226:	291d      	cmp	r1, #29
 801b228:	d82c      	bhi.n	801b284 <__sflush_r+0xb8>
 801b22a:	4a2a      	ldr	r2, [pc, #168]	; (801b2d4 <__sflush_r+0x108>)
 801b22c:	40ca      	lsrs	r2, r1
 801b22e:	07d6      	lsls	r6, r2, #31
 801b230:	d528      	bpl.n	801b284 <__sflush_r+0xb8>
 801b232:	2200      	movs	r2, #0
 801b234:	6062      	str	r2, [r4, #4]
 801b236:	04d9      	lsls	r1, r3, #19
 801b238:	6922      	ldr	r2, [r4, #16]
 801b23a:	6022      	str	r2, [r4, #0]
 801b23c:	d504      	bpl.n	801b248 <__sflush_r+0x7c>
 801b23e:	1c42      	adds	r2, r0, #1
 801b240:	d101      	bne.n	801b246 <__sflush_r+0x7a>
 801b242:	682b      	ldr	r3, [r5, #0]
 801b244:	b903      	cbnz	r3, 801b248 <__sflush_r+0x7c>
 801b246:	6560      	str	r0, [r4, #84]	; 0x54
 801b248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b24a:	602f      	str	r7, [r5, #0]
 801b24c:	2900      	cmp	r1, #0
 801b24e:	d0ca      	beq.n	801b1e6 <__sflush_r+0x1a>
 801b250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b254:	4299      	cmp	r1, r3
 801b256:	d002      	beq.n	801b25e <__sflush_r+0x92>
 801b258:	4628      	mov	r0, r5
 801b25a:	f000 f8b1 	bl	801b3c0 <_free_r>
 801b25e:	2000      	movs	r0, #0
 801b260:	6360      	str	r0, [r4, #52]	; 0x34
 801b262:	e7c1      	b.n	801b1e8 <__sflush_r+0x1c>
 801b264:	6a21      	ldr	r1, [r4, #32]
 801b266:	2301      	movs	r3, #1
 801b268:	4628      	mov	r0, r5
 801b26a:	47b0      	blx	r6
 801b26c:	1c41      	adds	r1, r0, #1
 801b26e:	d1c7      	bne.n	801b200 <__sflush_r+0x34>
 801b270:	682b      	ldr	r3, [r5, #0]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d0c4      	beq.n	801b200 <__sflush_r+0x34>
 801b276:	2b1d      	cmp	r3, #29
 801b278:	d001      	beq.n	801b27e <__sflush_r+0xb2>
 801b27a:	2b16      	cmp	r3, #22
 801b27c:	d101      	bne.n	801b282 <__sflush_r+0xb6>
 801b27e:	602f      	str	r7, [r5, #0]
 801b280:	e7b1      	b.n	801b1e6 <__sflush_r+0x1a>
 801b282:	89a3      	ldrh	r3, [r4, #12]
 801b284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b288:	81a3      	strh	r3, [r4, #12]
 801b28a:	e7ad      	b.n	801b1e8 <__sflush_r+0x1c>
 801b28c:	690f      	ldr	r7, [r1, #16]
 801b28e:	2f00      	cmp	r7, #0
 801b290:	d0a9      	beq.n	801b1e6 <__sflush_r+0x1a>
 801b292:	0793      	lsls	r3, r2, #30
 801b294:	680e      	ldr	r6, [r1, #0]
 801b296:	bf08      	it	eq
 801b298:	694b      	ldreq	r3, [r1, #20]
 801b29a:	600f      	str	r7, [r1, #0]
 801b29c:	bf18      	it	ne
 801b29e:	2300      	movne	r3, #0
 801b2a0:	eba6 0807 	sub.w	r8, r6, r7
 801b2a4:	608b      	str	r3, [r1, #8]
 801b2a6:	f1b8 0f00 	cmp.w	r8, #0
 801b2aa:	dd9c      	ble.n	801b1e6 <__sflush_r+0x1a>
 801b2ac:	6a21      	ldr	r1, [r4, #32]
 801b2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b2b0:	4643      	mov	r3, r8
 801b2b2:	463a      	mov	r2, r7
 801b2b4:	4628      	mov	r0, r5
 801b2b6:	47b0      	blx	r6
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	dc06      	bgt.n	801b2ca <__sflush_r+0xfe>
 801b2bc:	89a3      	ldrh	r3, [r4, #12]
 801b2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2c8:	e78e      	b.n	801b1e8 <__sflush_r+0x1c>
 801b2ca:	4407      	add	r7, r0
 801b2cc:	eba8 0800 	sub.w	r8, r8, r0
 801b2d0:	e7e9      	b.n	801b2a6 <__sflush_r+0xda>
 801b2d2:	bf00      	nop
 801b2d4:	20400001 	.word	0x20400001

0801b2d8 <_fflush_r>:
 801b2d8:	b538      	push	{r3, r4, r5, lr}
 801b2da:	690b      	ldr	r3, [r1, #16]
 801b2dc:	4605      	mov	r5, r0
 801b2de:	460c      	mov	r4, r1
 801b2e0:	b913      	cbnz	r3, 801b2e8 <_fflush_r+0x10>
 801b2e2:	2500      	movs	r5, #0
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	bd38      	pop	{r3, r4, r5, pc}
 801b2e8:	b118      	cbz	r0, 801b2f2 <_fflush_r+0x1a>
 801b2ea:	6983      	ldr	r3, [r0, #24]
 801b2ec:	b90b      	cbnz	r3, 801b2f2 <_fflush_r+0x1a>
 801b2ee:	f7ff fcd3 	bl	801ac98 <__sinit>
 801b2f2:	4b14      	ldr	r3, [pc, #80]	; (801b344 <_fflush_r+0x6c>)
 801b2f4:	429c      	cmp	r4, r3
 801b2f6:	d11b      	bne.n	801b330 <_fflush_r+0x58>
 801b2f8:	686c      	ldr	r4, [r5, #4]
 801b2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d0ef      	beq.n	801b2e2 <_fflush_r+0xa>
 801b302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b304:	07d0      	lsls	r0, r2, #31
 801b306:	d404      	bmi.n	801b312 <_fflush_r+0x3a>
 801b308:	0599      	lsls	r1, r3, #22
 801b30a:	d402      	bmi.n	801b312 <_fflush_r+0x3a>
 801b30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b30e:	f7ff fd86 	bl	801ae1e <__retarget_lock_acquire_recursive>
 801b312:	4628      	mov	r0, r5
 801b314:	4621      	mov	r1, r4
 801b316:	f7ff ff59 	bl	801b1cc <__sflush_r>
 801b31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b31c:	07da      	lsls	r2, r3, #31
 801b31e:	4605      	mov	r5, r0
 801b320:	d4e0      	bmi.n	801b2e4 <_fflush_r+0xc>
 801b322:	89a3      	ldrh	r3, [r4, #12]
 801b324:	059b      	lsls	r3, r3, #22
 801b326:	d4dd      	bmi.n	801b2e4 <_fflush_r+0xc>
 801b328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b32a:	f7ff fd79 	bl	801ae20 <__retarget_lock_release_recursive>
 801b32e:	e7d9      	b.n	801b2e4 <_fflush_r+0xc>
 801b330:	4b05      	ldr	r3, [pc, #20]	; (801b348 <_fflush_r+0x70>)
 801b332:	429c      	cmp	r4, r3
 801b334:	d101      	bne.n	801b33a <_fflush_r+0x62>
 801b336:	68ac      	ldr	r4, [r5, #8]
 801b338:	e7df      	b.n	801b2fa <_fflush_r+0x22>
 801b33a:	4b04      	ldr	r3, [pc, #16]	; (801b34c <_fflush_r+0x74>)
 801b33c:	429c      	cmp	r4, r3
 801b33e:	bf08      	it	eq
 801b340:	68ec      	ldreq	r4, [r5, #12]
 801b342:	e7da      	b.n	801b2fa <_fflush_r+0x22>
 801b344:	0801f884 	.word	0x0801f884
 801b348:	0801f8a4 	.word	0x0801f8a4
 801b34c:	0801f864 	.word	0x0801f864

0801b350 <fiprintf>:
 801b350:	b40e      	push	{r1, r2, r3}
 801b352:	b503      	push	{r0, r1, lr}
 801b354:	4601      	mov	r1, r0
 801b356:	ab03      	add	r3, sp, #12
 801b358:	4805      	ldr	r0, [pc, #20]	; (801b370 <fiprintf+0x20>)
 801b35a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b35e:	6800      	ldr	r0, [r0, #0]
 801b360:	9301      	str	r3, [sp, #4]
 801b362:	f000 f8a7 	bl	801b4b4 <_vfiprintf_r>
 801b366:	b002      	add	sp, #8
 801b368:	f85d eb04 	ldr.w	lr, [sp], #4
 801b36c:	b003      	add	sp, #12
 801b36e:	4770      	bx	lr
 801b370:	24000038 	.word	0x24000038

0801b374 <_lseek_r>:
 801b374:	b538      	push	{r3, r4, r5, lr}
 801b376:	4d07      	ldr	r5, [pc, #28]	; (801b394 <_lseek_r+0x20>)
 801b378:	4604      	mov	r4, r0
 801b37a:	4608      	mov	r0, r1
 801b37c:	4611      	mov	r1, r2
 801b37e:	2200      	movs	r2, #0
 801b380:	602a      	str	r2, [r5, #0]
 801b382:	461a      	mov	r2, r3
 801b384:	f7e5 fd38 	bl	8000df8 <_lseek>
 801b388:	1c43      	adds	r3, r0, #1
 801b38a:	d102      	bne.n	801b392 <_lseek_r+0x1e>
 801b38c:	682b      	ldr	r3, [r5, #0]
 801b38e:	b103      	cbz	r3, 801b392 <_lseek_r+0x1e>
 801b390:	6023      	str	r3, [r4, #0]
 801b392:	bd38      	pop	{r3, r4, r5, pc}
 801b394:	2400d758 	.word	0x2400d758

0801b398 <malloc>:
 801b398:	4b02      	ldr	r3, [pc, #8]	; (801b3a4 <malloc+0xc>)
 801b39a:	4601      	mov	r1, r0
 801b39c:	6818      	ldr	r0, [r3, #0]
 801b39e:	f7ff bd65 	b.w	801ae6c <_malloc_r>
 801b3a2:	bf00      	nop
 801b3a4:	24000038 	.word	0x24000038

0801b3a8 <__malloc_lock>:
 801b3a8:	4801      	ldr	r0, [pc, #4]	; (801b3b0 <__malloc_lock+0x8>)
 801b3aa:	f7ff bd38 	b.w	801ae1e <__retarget_lock_acquire_recursive>
 801b3ae:	bf00      	nop
 801b3b0:	2400d764 	.word	0x2400d764

0801b3b4 <__malloc_unlock>:
 801b3b4:	4801      	ldr	r0, [pc, #4]	; (801b3bc <__malloc_unlock+0x8>)
 801b3b6:	f7ff bd33 	b.w	801ae20 <__retarget_lock_release_recursive>
 801b3ba:	bf00      	nop
 801b3bc:	2400d764 	.word	0x2400d764

0801b3c0 <_free_r>:
 801b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3c2:	2900      	cmp	r1, #0
 801b3c4:	d048      	beq.n	801b458 <_free_r+0x98>
 801b3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3ca:	9001      	str	r0, [sp, #4]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	f1a1 0404 	sub.w	r4, r1, #4
 801b3d2:	bfb8      	it	lt
 801b3d4:	18e4      	addlt	r4, r4, r3
 801b3d6:	f7ff ffe7 	bl	801b3a8 <__malloc_lock>
 801b3da:	4a20      	ldr	r2, [pc, #128]	; (801b45c <_free_r+0x9c>)
 801b3dc:	9801      	ldr	r0, [sp, #4]
 801b3de:	6813      	ldr	r3, [r2, #0]
 801b3e0:	4615      	mov	r5, r2
 801b3e2:	b933      	cbnz	r3, 801b3f2 <_free_r+0x32>
 801b3e4:	6063      	str	r3, [r4, #4]
 801b3e6:	6014      	str	r4, [r2, #0]
 801b3e8:	b003      	add	sp, #12
 801b3ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3ee:	f7ff bfe1 	b.w	801b3b4 <__malloc_unlock>
 801b3f2:	42a3      	cmp	r3, r4
 801b3f4:	d90b      	bls.n	801b40e <_free_r+0x4e>
 801b3f6:	6821      	ldr	r1, [r4, #0]
 801b3f8:	1862      	adds	r2, r4, r1
 801b3fa:	4293      	cmp	r3, r2
 801b3fc:	bf04      	itt	eq
 801b3fe:	681a      	ldreq	r2, [r3, #0]
 801b400:	685b      	ldreq	r3, [r3, #4]
 801b402:	6063      	str	r3, [r4, #4]
 801b404:	bf04      	itt	eq
 801b406:	1852      	addeq	r2, r2, r1
 801b408:	6022      	streq	r2, [r4, #0]
 801b40a:	602c      	str	r4, [r5, #0]
 801b40c:	e7ec      	b.n	801b3e8 <_free_r+0x28>
 801b40e:	461a      	mov	r2, r3
 801b410:	685b      	ldr	r3, [r3, #4]
 801b412:	b10b      	cbz	r3, 801b418 <_free_r+0x58>
 801b414:	42a3      	cmp	r3, r4
 801b416:	d9fa      	bls.n	801b40e <_free_r+0x4e>
 801b418:	6811      	ldr	r1, [r2, #0]
 801b41a:	1855      	adds	r5, r2, r1
 801b41c:	42a5      	cmp	r5, r4
 801b41e:	d10b      	bne.n	801b438 <_free_r+0x78>
 801b420:	6824      	ldr	r4, [r4, #0]
 801b422:	4421      	add	r1, r4
 801b424:	1854      	adds	r4, r2, r1
 801b426:	42a3      	cmp	r3, r4
 801b428:	6011      	str	r1, [r2, #0]
 801b42a:	d1dd      	bne.n	801b3e8 <_free_r+0x28>
 801b42c:	681c      	ldr	r4, [r3, #0]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	6053      	str	r3, [r2, #4]
 801b432:	4421      	add	r1, r4
 801b434:	6011      	str	r1, [r2, #0]
 801b436:	e7d7      	b.n	801b3e8 <_free_r+0x28>
 801b438:	d902      	bls.n	801b440 <_free_r+0x80>
 801b43a:	230c      	movs	r3, #12
 801b43c:	6003      	str	r3, [r0, #0]
 801b43e:	e7d3      	b.n	801b3e8 <_free_r+0x28>
 801b440:	6825      	ldr	r5, [r4, #0]
 801b442:	1961      	adds	r1, r4, r5
 801b444:	428b      	cmp	r3, r1
 801b446:	bf04      	itt	eq
 801b448:	6819      	ldreq	r1, [r3, #0]
 801b44a:	685b      	ldreq	r3, [r3, #4]
 801b44c:	6063      	str	r3, [r4, #4]
 801b44e:	bf04      	itt	eq
 801b450:	1949      	addeq	r1, r1, r5
 801b452:	6021      	streq	r1, [r4, #0]
 801b454:	6054      	str	r4, [r2, #4]
 801b456:	e7c7      	b.n	801b3e8 <_free_r+0x28>
 801b458:	b003      	add	sp, #12
 801b45a:	bd30      	pop	{r4, r5, pc}
 801b45c:	24009ef8 	.word	0x24009ef8

0801b460 <__sfputc_r>:
 801b460:	6893      	ldr	r3, [r2, #8]
 801b462:	3b01      	subs	r3, #1
 801b464:	2b00      	cmp	r3, #0
 801b466:	b410      	push	{r4}
 801b468:	6093      	str	r3, [r2, #8]
 801b46a:	da08      	bge.n	801b47e <__sfputc_r+0x1e>
 801b46c:	6994      	ldr	r4, [r2, #24]
 801b46e:	42a3      	cmp	r3, r4
 801b470:	db01      	blt.n	801b476 <__sfputc_r+0x16>
 801b472:	290a      	cmp	r1, #10
 801b474:	d103      	bne.n	801b47e <__sfputc_r+0x1e>
 801b476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b47a:	f000 baf1 	b.w	801ba60 <__swbuf_r>
 801b47e:	6813      	ldr	r3, [r2, #0]
 801b480:	1c58      	adds	r0, r3, #1
 801b482:	6010      	str	r0, [r2, #0]
 801b484:	7019      	strb	r1, [r3, #0]
 801b486:	4608      	mov	r0, r1
 801b488:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b48c:	4770      	bx	lr

0801b48e <__sfputs_r>:
 801b48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b490:	4606      	mov	r6, r0
 801b492:	460f      	mov	r7, r1
 801b494:	4614      	mov	r4, r2
 801b496:	18d5      	adds	r5, r2, r3
 801b498:	42ac      	cmp	r4, r5
 801b49a:	d101      	bne.n	801b4a0 <__sfputs_r+0x12>
 801b49c:	2000      	movs	r0, #0
 801b49e:	e007      	b.n	801b4b0 <__sfputs_r+0x22>
 801b4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4a4:	463a      	mov	r2, r7
 801b4a6:	4630      	mov	r0, r6
 801b4a8:	f7ff ffda 	bl	801b460 <__sfputc_r>
 801b4ac:	1c43      	adds	r3, r0, #1
 801b4ae:	d1f3      	bne.n	801b498 <__sfputs_r+0xa>
 801b4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4b4 <_vfiprintf_r>:
 801b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b8:	460d      	mov	r5, r1
 801b4ba:	b09d      	sub	sp, #116	; 0x74
 801b4bc:	4614      	mov	r4, r2
 801b4be:	4698      	mov	r8, r3
 801b4c0:	4606      	mov	r6, r0
 801b4c2:	b118      	cbz	r0, 801b4cc <_vfiprintf_r+0x18>
 801b4c4:	6983      	ldr	r3, [r0, #24]
 801b4c6:	b90b      	cbnz	r3, 801b4cc <_vfiprintf_r+0x18>
 801b4c8:	f7ff fbe6 	bl	801ac98 <__sinit>
 801b4cc:	4b89      	ldr	r3, [pc, #548]	; (801b6f4 <_vfiprintf_r+0x240>)
 801b4ce:	429d      	cmp	r5, r3
 801b4d0:	d11b      	bne.n	801b50a <_vfiprintf_r+0x56>
 801b4d2:	6875      	ldr	r5, [r6, #4]
 801b4d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4d6:	07d9      	lsls	r1, r3, #31
 801b4d8:	d405      	bmi.n	801b4e6 <_vfiprintf_r+0x32>
 801b4da:	89ab      	ldrh	r3, [r5, #12]
 801b4dc:	059a      	lsls	r2, r3, #22
 801b4de:	d402      	bmi.n	801b4e6 <_vfiprintf_r+0x32>
 801b4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4e2:	f7ff fc9c 	bl	801ae1e <__retarget_lock_acquire_recursive>
 801b4e6:	89ab      	ldrh	r3, [r5, #12]
 801b4e8:	071b      	lsls	r3, r3, #28
 801b4ea:	d501      	bpl.n	801b4f0 <_vfiprintf_r+0x3c>
 801b4ec:	692b      	ldr	r3, [r5, #16]
 801b4ee:	b9eb      	cbnz	r3, 801b52c <_vfiprintf_r+0x78>
 801b4f0:	4629      	mov	r1, r5
 801b4f2:	4630      	mov	r0, r6
 801b4f4:	f000 fb06 	bl	801bb04 <__swsetup_r>
 801b4f8:	b1c0      	cbz	r0, 801b52c <_vfiprintf_r+0x78>
 801b4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4fc:	07dc      	lsls	r4, r3, #31
 801b4fe:	d50e      	bpl.n	801b51e <_vfiprintf_r+0x6a>
 801b500:	f04f 30ff 	mov.w	r0, #4294967295
 801b504:	b01d      	add	sp, #116	; 0x74
 801b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50a:	4b7b      	ldr	r3, [pc, #492]	; (801b6f8 <_vfiprintf_r+0x244>)
 801b50c:	429d      	cmp	r5, r3
 801b50e:	d101      	bne.n	801b514 <_vfiprintf_r+0x60>
 801b510:	68b5      	ldr	r5, [r6, #8]
 801b512:	e7df      	b.n	801b4d4 <_vfiprintf_r+0x20>
 801b514:	4b79      	ldr	r3, [pc, #484]	; (801b6fc <_vfiprintf_r+0x248>)
 801b516:	429d      	cmp	r5, r3
 801b518:	bf08      	it	eq
 801b51a:	68f5      	ldreq	r5, [r6, #12]
 801b51c:	e7da      	b.n	801b4d4 <_vfiprintf_r+0x20>
 801b51e:	89ab      	ldrh	r3, [r5, #12]
 801b520:	0598      	lsls	r0, r3, #22
 801b522:	d4ed      	bmi.n	801b500 <_vfiprintf_r+0x4c>
 801b524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b526:	f7ff fc7b 	bl	801ae20 <__retarget_lock_release_recursive>
 801b52a:	e7e9      	b.n	801b500 <_vfiprintf_r+0x4c>
 801b52c:	2300      	movs	r3, #0
 801b52e:	9309      	str	r3, [sp, #36]	; 0x24
 801b530:	2320      	movs	r3, #32
 801b532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b536:	f8cd 800c 	str.w	r8, [sp, #12]
 801b53a:	2330      	movs	r3, #48	; 0x30
 801b53c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b700 <_vfiprintf_r+0x24c>
 801b540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b544:	f04f 0901 	mov.w	r9, #1
 801b548:	4623      	mov	r3, r4
 801b54a:	469a      	mov	sl, r3
 801b54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b550:	b10a      	cbz	r2, 801b556 <_vfiprintf_r+0xa2>
 801b552:	2a25      	cmp	r2, #37	; 0x25
 801b554:	d1f9      	bne.n	801b54a <_vfiprintf_r+0x96>
 801b556:	ebba 0b04 	subs.w	fp, sl, r4
 801b55a:	d00b      	beq.n	801b574 <_vfiprintf_r+0xc0>
 801b55c:	465b      	mov	r3, fp
 801b55e:	4622      	mov	r2, r4
 801b560:	4629      	mov	r1, r5
 801b562:	4630      	mov	r0, r6
 801b564:	f7ff ff93 	bl	801b48e <__sfputs_r>
 801b568:	3001      	adds	r0, #1
 801b56a:	f000 80aa 	beq.w	801b6c2 <_vfiprintf_r+0x20e>
 801b56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b570:	445a      	add	r2, fp
 801b572:	9209      	str	r2, [sp, #36]	; 0x24
 801b574:	f89a 3000 	ldrb.w	r3, [sl]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	f000 80a2 	beq.w	801b6c2 <_vfiprintf_r+0x20e>
 801b57e:	2300      	movs	r3, #0
 801b580:	f04f 32ff 	mov.w	r2, #4294967295
 801b584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b588:	f10a 0a01 	add.w	sl, sl, #1
 801b58c:	9304      	str	r3, [sp, #16]
 801b58e:	9307      	str	r3, [sp, #28]
 801b590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b594:	931a      	str	r3, [sp, #104]	; 0x68
 801b596:	4654      	mov	r4, sl
 801b598:	2205      	movs	r2, #5
 801b59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b59e:	4858      	ldr	r0, [pc, #352]	; (801b700 <_vfiprintf_r+0x24c>)
 801b5a0:	f7e4 fe9e 	bl	80002e0 <memchr>
 801b5a4:	9a04      	ldr	r2, [sp, #16]
 801b5a6:	b9d8      	cbnz	r0, 801b5e0 <_vfiprintf_r+0x12c>
 801b5a8:	06d1      	lsls	r1, r2, #27
 801b5aa:	bf44      	itt	mi
 801b5ac:	2320      	movmi	r3, #32
 801b5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5b2:	0713      	lsls	r3, r2, #28
 801b5b4:	bf44      	itt	mi
 801b5b6:	232b      	movmi	r3, #43	; 0x2b
 801b5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b5c0:	2b2a      	cmp	r3, #42	; 0x2a
 801b5c2:	d015      	beq.n	801b5f0 <_vfiprintf_r+0x13c>
 801b5c4:	9a07      	ldr	r2, [sp, #28]
 801b5c6:	4654      	mov	r4, sl
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	f04f 0c0a 	mov.w	ip, #10
 801b5ce:	4621      	mov	r1, r4
 801b5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5d4:	3b30      	subs	r3, #48	; 0x30
 801b5d6:	2b09      	cmp	r3, #9
 801b5d8:	d94e      	bls.n	801b678 <_vfiprintf_r+0x1c4>
 801b5da:	b1b0      	cbz	r0, 801b60a <_vfiprintf_r+0x156>
 801b5dc:	9207      	str	r2, [sp, #28]
 801b5de:	e014      	b.n	801b60a <_vfiprintf_r+0x156>
 801b5e0:	eba0 0308 	sub.w	r3, r0, r8
 801b5e4:	fa09 f303 	lsl.w	r3, r9, r3
 801b5e8:	4313      	orrs	r3, r2
 801b5ea:	9304      	str	r3, [sp, #16]
 801b5ec:	46a2      	mov	sl, r4
 801b5ee:	e7d2      	b.n	801b596 <_vfiprintf_r+0xe2>
 801b5f0:	9b03      	ldr	r3, [sp, #12]
 801b5f2:	1d19      	adds	r1, r3, #4
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	9103      	str	r1, [sp, #12]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	bfbb      	ittet	lt
 801b5fc:	425b      	neglt	r3, r3
 801b5fe:	f042 0202 	orrlt.w	r2, r2, #2
 801b602:	9307      	strge	r3, [sp, #28]
 801b604:	9307      	strlt	r3, [sp, #28]
 801b606:	bfb8      	it	lt
 801b608:	9204      	strlt	r2, [sp, #16]
 801b60a:	7823      	ldrb	r3, [r4, #0]
 801b60c:	2b2e      	cmp	r3, #46	; 0x2e
 801b60e:	d10c      	bne.n	801b62a <_vfiprintf_r+0x176>
 801b610:	7863      	ldrb	r3, [r4, #1]
 801b612:	2b2a      	cmp	r3, #42	; 0x2a
 801b614:	d135      	bne.n	801b682 <_vfiprintf_r+0x1ce>
 801b616:	9b03      	ldr	r3, [sp, #12]
 801b618:	1d1a      	adds	r2, r3, #4
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	9203      	str	r2, [sp, #12]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	bfb8      	it	lt
 801b622:	f04f 33ff 	movlt.w	r3, #4294967295
 801b626:	3402      	adds	r4, #2
 801b628:	9305      	str	r3, [sp, #20]
 801b62a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b710 <_vfiprintf_r+0x25c>
 801b62e:	7821      	ldrb	r1, [r4, #0]
 801b630:	2203      	movs	r2, #3
 801b632:	4650      	mov	r0, sl
 801b634:	f7e4 fe54 	bl	80002e0 <memchr>
 801b638:	b140      	cbz	r0, 801b64c <_vfiprintf_r+0x198>
 801b63a:	2340      	movs	r3, #64	; 0x40
 801b63c:	eba0 000a 	sub.w	r0, r0, sl
 801b640:	fa03 f000 	lsl.w	r0, r3, r0
 801b644:	9b04      	ldr	r3, [sp, #16]
 801b646:	4303      	orrs	r3, r0
 801b648:	3401      	adds	r4, #1
 801b64a:	9304      	str	r3, [sp, #16]
 801b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b650:	482c      	ldr	r0, [pc, #176]	; (801b704 <_vfiprintf_r+0x250>)
 801b652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b656:	2206      	movs	r2, #6
 801b658:	f7e4 fe42 	bl	80002e0 <memchr>
 801b65c:	2800      	cmp	r0, #0
 801b65e:	d03f      	beq.n	801b6e0 <_vfiprintf_r+0x22c>
 801b660:	4b29      	ldr	r3, [pc, #164]	; (801b708 <_vfiprintf_r+0x254>)
 801b662:	bb1b      	cbnz	r3, 801b6ac <_vfiprintf_r+0x1f8>
 801b664:	9b03      	ldr	r3, [sp, #12]
 801b666:	3307      	adds	r3, #7
 801b668:	f023 0307 	bic.w	r3, r3, #7
 801b66c:	3308      	adds	r3, #8
 801b66e:	9303      	str	r3, [sp, #12]
 801b670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b672:	443b      	add	r3, r7
 801b674:	9309      	str	r3, [sp, #36]	; 0x24
 801b676:	e767      	b.n	801b548 <_vfiprintf_r+0x94>
 801b678:	fb0c 3202 	mla	r2, ip, r2, r3
 801b67c:	460c      	mov	r4, r1
 801b67e:	2001      	movs	r0, #1
 801b680:	e7a5      	b.n	801b5ce <_vfiprintf_r+0x11a>
 801b682:	2300      	movs	r3, #0
 801b684:	3401      	adds	r4, #1
 801b686:	9305      	str	r3, [sp, #20]
 801b688:	4619      	mov	r1, r3
 801b68a:	f04f 0c0a 	mov.w	ip, #10
 801b68e:	4620      	mov	r0, r4
 801b690:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b694:	3a30      	subs	r2, #48	; 0x30
 801b696:	2a09      	cmp	r2, #9
 801b698:	d903      	bls.n	801b6a2 <_vfiprintf_r+0x1ee>
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d0c5      	beq.n	801b62a <_vfiprintf_r+0x176>
 801b69e:	9105      	str	r1, [sp, #20]
 801b6a0:	e7c3      	b.n	801b62a <_vfiprintf_r+0x176>
 801b6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b6a6:	4604      	mov	r4, r0
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	e7f0      	b.n	801b68e <_vfiprintf_r+0x1da>
 801b6ac:	ab03      	add	r3, sp, #12
 801b6ae:	9300      	str	r3, [sp, #0]
 801b6b0:	462a      	mov	r2, r5
 801b6b2:	4b16      	ldr	r3, [pc, #88]	; (801b70c <_vfiprintf_r+0x258>)
 801b6b4:	a904      	add	r1, sp, #16
 801b6b6:	4630      	mov	r0, r6
 801b6b8:	f3af 8000 	nop.w
 801b6bc:	4607      	mov	r7, r0
 801b6be:	1c78      	adds	r0, r7, #1
 801b6c0:	d1d6      	bne.n	801b670 <_vfiprintf_r+0x1bc>
 801b6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6c4:	07d9      	lsls	r1, r3, #31
 801b6c6:	d405      	bmi.n	801b6d4 <_vfiprintf_r+0x220>
 801b6c8:	89ab      	ldrh	r3, [r5, #12]
 801b6ca:	059a      	lsls	r2, r3, #22
 801b6cc:	d402      	bmi.n	801b6d4 <_vfiprintf_r+0x220>
 801b6ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6d0:	f7ff fba6 	bl	801ae20 <__retarget_lock_release_recursive>
 801b6d4:	89ab      	ldrh	r3, [r5, #12]
 801b6d6:	065b      	lsls	r3, r3, #25
 801b6d8:	f53f af12 	bmi.w	801b500 <_vfiprintf_r+0x4c>
 801b6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6de:	e711      	b.n	801b504 <_vfiprintf_r+0x50>
 801b6e0:	ab03      	add	r3, sp, #12
 801b6e2:	9300      	str	r3, [sp, #0]
 801b6e4:	462a      	mov	r2, r5
 801b6e6:	4b09      	ldr	r3, [pc, #36]	; (801b70c <_vfiprintf_r+0x258>)
 801b6e8:	a904      	add	r1, sp, #16
 801b6ea:	4630      	mov	r0, r6
 801b6ec:	f000 f880 	bl	801b7f0 <_printf_i>
 801b6f0:	e7e4      	b.n	801b6bc <_vfiprintf_r+0x208>
 801b6f2:	bf00      	nop
 801b6f4:	0801f884 	.word	0x0801f884
 801b6f8:	0801f8a4 	.word	0x0801f8a4
 801b6fc:	0801f864 	.word	0x0801f864
 801b700:	0801f97a 	.word	0x0801f97a
 801b704:	0801f984 	.word	0x0801f984
 801b708:	00000000 	.word	0x00000000
 801b70c:	0801b48f 	.word	0x0801b48f
 801b710:	0801f980 	.word	0x0801f980

0801b714 <_printf_common>:
 801b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b718:	4616      	mov	r6, r2
 801b71a:	4699      	mov	r9, r3
 801b71c:	688a      	ldr	r2, [r1, #8]
 801b71e:	690b      	ldr	r3, [r1, #16]
 801b720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b724:	4293      	cmp	r3, r2
 801b726:	bfb8      	it	lt
 801b728:	4613      	movlt	r3, r2
 801b72a:	6033      	str	r3, [r6, #0]
 801b72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b730:	4607      	mov	r7, r0
 801b732:	460c      	mov	r4, r1
 801b734:	b10a      	cbz	r2, 801b73a <_printf_common+0x26>
 801b736:	3301      	adds	r3, #1
 801b738:	6033      	str	r3, [r6, #0]
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	0699      	lsls	r1, r3, #26
 801b73e:	bf42      	ittt	mi
 801b740:	6833      	ldrmi	r3, [r6, #0]
 801b742:	3302      	addmi	r3, #2
 801b744:	6033      	strmi	r3, [r6, #0]
 801b746:	6825      	ldr	r5, [r4, #0]
 801b748:	f015 0506 	ands.w	r5, r5, #6
 801b74c:	d106      	bne.n	801b75c <_printf_common+0x48>
 801b74e:	f104 0a19 	add.w	sl, r4, #25
 801b752:	68e3      	ldr	r3, [r4, #12]
 801b754:	6832      	ldr	r2, [r6, #0]
 801b756:	1a9b      	subs	r3, r3, r2
 801b758:	42ab      	cmp	r3, r5
 801b75a:	dc26      	bgt.n	801b7aa <_printf_common+0x96>
 801b75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b760:	1e13      	subs	r3, r2, #0
 801b762:	6822      	ldr	r2, [r4, #0]
 801b764:	bf18      	it	ne
 801b766:	2301      	movne	r3, #1
 801b768:	0692      	lsls	r2, r2, #26
 801b76a:	d42b      	bmi.n	801b7c4 <_printf_common+0xb0>
 801b76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b770:	4649      	mov	r1, r9
 801b772:	4638      	mov	r0, r7
 801b774:	47c0      	blx	r8
 801b776:	3001      	adds	r0, #1
 801b778:	d01e      	beq.n	801b7b8 <_printf_common+0xa4>
 801b77a:	6823      	ldr	r3, [r4, #0]
 801b77c:	68e5      	ldr	r5, [r4, #12]
 801b77e:	6832      	ldr	r2, [r6, #0]
 801b780:	f003 0306 	and.w	r3, r3, #6
 801b784:	2b04      	cmp	r3, #4
 801b786:	bf08      	it	eq
 801b788:	1aad      	subeq	r5, r5, r2
 801b78a:	68a3      	ldr	r3, [r4, #8]
 801b78c:	6922      	ldr	r2, [r4, #16]
 801b78e:	bf0c      	ite	eq
 801b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b794:	2500      	movne	r5, #0
 801b796:	4293      	cmp	r3, r2
 801b798:	bfc4      	itt	gt
 801b79a:	1a9b      	subgt	r3, r3, r2
 801b79c:	18ed      	addgt	r5, r5, r3
 801b79e:	2600      	movs	r6, #0
 801b7a0:	341a      	adds	r4, #26
 801b7a2:	42b5      	cmp	r5, r6
 801b7a4:	d11a      	bne.n	801b7dc <_printf_common+0xc8>
 801b7a6:	2000      	movs	r0, #0
 801b7a8:	e008      	b.n	801b7bc <_printf_common+0xa8>
 801b7aa:	2301      	movs	r3, #1
 801b7ac:	4652      	mov	r2, sl
 801b7ae:	4649      	mov	r1, r9
 801b7b0:	4638      	mov	r0, r7
 801b7b2:	47c0      	blx	r8
 801b7b4:	3001      	adds	r0, #1
 801b7b6:	d103      	bne.n	801b7c0 <_printf_common+0xac>
 801b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c0:	3501      	adds	r5, #1
 801b7c2:	e7c6      	b.n	801b752 <_printf_common+0x3e>
 801b7c4:	18e1      	adds	r1, r4, r3
 801b7c6:	1c5a      	adds	r2, r3, #1
 801b7c8:	2030      	movs	r0, #48	; 0x30
 801b7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b7ce:	4422      	add	r2, r4
 801b7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b7d8:	3302      	adds	r3, #2
 801b7da:	e7c7      	b.n	801b76c <_printf_common+0x58>
 801b7dc:	2301      	movs	r3, #1
 801b7de:	4622      	mov	r2, r4
 801b7e0:	4649      	mov	r1, r9
 801b7e2:	4638      	mov	r0, r7
 801b7e4:	47c0      	blx	r8
 801b7e6:	3001      	adds	r0, #1
 801b7e8:	d0e6      	beq.n	801b7b8 <_printf_common+0xa4>
 801b7ea:	3601      	adds	r6, #1
 801b7ec:	e7d9      	b.n	801b7a2 <_printf_common+0x8e>
	...

0801b7f0 <_printf_i>:
 801b7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f4:	460c      	mov	r4, r1
 801b7f6:	4691      	mov	r9, r2
 801b7f8:	7e27      	ldrb	r7, [r4, #24]
 801b7fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b7fc:	2f78      	cmp	r7, #120	; 0x78
 801b7fe:	4680      	mov	r8, r0
 801b800:	469a      	mov	sl, r3
 801b802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b806:	d807      	bhi.n	801b818 <_printf_i+0x28>
 801b808:	2f62      	cmp	r7, #98	; 0x62
 801b80a:	d80a      	bhi.n	801b822 <_printf_i+0x32>
 801b80c:	2f00      	cmp	r7, #0
 801b80e:	f000 80d8 	beq.w	801b9c2 <_printf_i+0x1d2>
 801b812:	2f58      	cmp	r7, #88	; 0x58
 801b814:	f000 80a3 	beq.w	801b95e <_printf_i+0x16e>
 801b818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b820:	e03a      	b.n	801b898 <_printf_i+0xa8>
 801b822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b826:	2b15      	cmp	r3, #21
 801b828:	d8f6      	bhi.n	801b818 <_printf_i+0x28>
 801b82a:	a001      	add	r0, pc, #4	; (adr r0, 801b830 <_printf_i+0x40>)
 801b82c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b830:	0801b889 	.word	0x0801b889
 801b834:	0801b89d 	.word	0x0801b89d
 801b838:	0801b819 	.word	0x0801b819
 801b83c:	0801b819 	.word	0x0801b819
 801b840:	0801b819 	.word	0x0801b819
 801b844:	0801b819 	.word	0x0801b819
 801b848:	0801b89d 	.word	0x0801b89d
 801b84c:	0801b819 	.word	0x0801b819
 801b850:	0801b819 	.word	0x0801b819
 801b854:	0801b819 	.word	0x0801b819
 801b858:	0801b819 	.word	0x0801b819
 801b85c:	0801b9a9 	.word	0x0801b9a9
 801b860:	0801b8cd 	.word	0x0801b8cd
 801b864:	0801b98b 	.word	0x0801b98b
 801b868:	0801b819 	.word	0x0801b819
 801b86c:	0801b819 	.word	0x0801b819
 801b870:	0801b9cb 	.word	0x0801b9cb
 801b874:	0801b819 	.word	0x0801b819
 801b878:	0801b8cd 	.word	0x0801b8cd
 801b87c:	0801b819 	.word	0x0801b819
 801b880:	0801b819 	.word	0x0801b819
 801b884:	0801b993 	.word	0x0801b993
 801b888:	680b      	ldr	r3, [r1, #0]
 801b88a:	1d1a      	adds	r2, r3, #4
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	600a      	str	r2, [r1, #0]
 801b890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b898:	2301      	movs	r3, #1
 801b89a:	e0a3      	b.n	801b9e4 <_printf_i+0x1f4>
 801b89c:	6825      	ldr	r5, [r4, #0]
 801b89e:	6808      	ldr	r0, [r1, #0]
 801b8a0:	062e      	lsls	r6, r5, #24
 801b8a2:	f100 0304 	add.w	r3, r0, #4
 801b8a6:	d50a      	bpl.n	801b8be <_printf_i+0xce>
 801b8a8:	6805      	ldr	r5, [r0, #0]
 801b8aa:	600b      	str	r3, [r1, #0]
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	da03      	bge.n	801b8b8 <_printf_i+0xc8>
 801b8b0:	232d      	movs	r3, #45	; 0x2d
 801b8b2:	426d      	negs	r5, r5
 801b8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8b8:	485e      	ldr	r0, [pc, #376]	; (801ba34 <_printf_i+0x244>)
 801b8ba:	230a      	movs	r3, #10
 801b8bc:	e019      	b.n	801b8f2 <_printf_i+0x102>
 801b8be:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b8c2:	6805      	ldr	r5, [r0, #0]
 801b8c4:	600b      	str	r3, [r1, #0]
 801b8c6:	bf18      	it	ne
 801b8c8:	b22d      	sxthne	r5, r5
 801b8ca:	e7ef      	b.n	801b8ac <_printf_i+0xbc>
 801b8cc:	680b      	ldr	r3, [r1, #0]
 801b8ce:	6825      	ldr	r5, [r4, #0]
 801b8d0:	1d18      	adds	r0, r3, #4
 801b8d2:	6008      	str	r0, [r1, #0]
 801b8d4:	0628      	lsls	r0, r5, #24
 801b8d6:	d501      	bpl.n	801b8dc <_printf_i+0xec>
 801b8d8:	681d      	ldr	r5, [r3, #0]
 801b8da:	e002      	b.n	801b8e2 <_printf_i+0xf2>
 801b8dc:	0669      	lsls	r1, r5, #25
 801b8de:	d5fb      	bpl.n	801b8d8 <_printf_i+0xe8>
 801b8e0:	881d      	ldrh	r5, [r3, #0]
 801b8e2:	4854      	ldr	r0, [pc, #336]	; (801ba34 <_printf_i+0x244>)
 801b8e4:	2f6f      	cmp	r7, #111	; 0x6f
 801b8e6:	bf0c      	ite	eq
 801b8e8:	2308      	moveq	r3, #8
 801b8ea:	230a      	movne	r3, #10
 801b8ec:	2100      	movs	r1, #0
 801b8ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b8f2:	6866      	ldr	r6, [r4, #4]
 801b8f4:	60a6      	str	r6, [r4, #8]
 801b8f6:	2e00      	cmp	r6, #0
 801b8f8:	bfa2      	ittt	ge
 801b8fa:	6821      	ldrge	r1, [r4, #0]
 801b8fc:	f021 0104 	bicge.w	r1, r1, #4
 801b900:	6021      	strge	r1, [r4, #0]
 801b902:	b90d      	cbnz	r5, 801b908 <_printf_i+0x118>
 801b904:	2e00      	cmp	r6, #0
 801b906:	d04d      	beq.n	801b9a4 <_printf_i+0x1b4>
 801b908:	4616      	mov	r6, r2
 801b90a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b90e:	fb03 5711 	mls	r7, r3, r1, r5
 801b912:	5dc7      	ldrb	r7, [r0, r7]
 801b914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b918:	462f      	mov	r7, r5
 801b91a:	42bb      	cmp	r3, r7
 801b91c:	460d      	mov	r5, r1
 801b91e:	d9f4      	bls.n	801b90a <_printf_i+0x11a>
 801b920:	2b08      	cmp	r3, #8
 801b922:	d10b      	bne.n	801b93c <_printf_i+0x14c>
 801b924:	6823      	ldr	r3, [r4, #0]
 801b926:	07df      	lsls	r7, r3, #31
 801b928:	d508      	bpl.n	801b93c <_printf_i+0x14c>
 801b92a:	6923      	ldr	r3, [r4, #16]
 801b92c:	6861      	ldr	r1, [r4, #4]
 801b92e:	4299      	cmp	r1, r3
 801b930:	bfde      	ittt	le
 801b932:	2330      	movle	r3, #48	; 0x30
 801b934:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b938:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b93c:	1b92      	subs	r2, r2, r6
 801b93e:	6122      	str	r2, [r4, #16]
 801b940:	f8cd a000 	str.w	sl, [sp]
 801b944:	464b      	mov	r3, r9
 801b946:	aa03      	add	r2, sp, #12
 801b948:	4621      	mov	r1, r4
 801b94a:	4640      	mov	r0, r8
 801b94c:	f7ff fee2 	bl	801b714 <_printf_common>
 801b950:	3001      	adds	r0, #1
 801b952:	d14c      	bne.n	801b9ee <_printf_i+0x1fe>
 801b954:	f04f 30ff 	mov.w	r0, #4294967295
 801b958:	b004      	add	sp, #16
 801b95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b95e:	4835      	ldr	r0, [pc, #212]	; (801ba34 <_printf_i+0x244>)
 801b960:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b964:	6823      	ldr	r3, [r4, #0]
 801b966:	680e      	ldr	r6, [r1, #0]
 801b968:	061f      	lsls	r7, r3, #24
 801b96a:	f856 5b04 	ldr.w	r5, [r6], #4
 801b96e:	600e      	str	r6, [r1, #0]
 801b970:	d514      	bpl.n	801b99c <_printf_i+0x1ac>
 801b972:	07d9      	lsls	r1, r3, #31
 801b974:	bf44      	itt	mi
 801b976:	f043 0320 	orrmi.w	r3, r3, #32
 801b97a:	6023      	strmi	r3, [r4, #0]
 801b97c:	b91d      	cbnz	r5, 801b986 <_printf_i+0x196>
 801b97e:	6823      	ldr	r3, [r4, #0]
 801b980:	f023 0320 	bic.w	r3, r3, #32
 801b984:	6023      	str	r3, [r4, #0]
 801b986:	2310      	movs	r3, #16
 801b988:	e7b0      	b.n	801b8ec <_printf_i+0xfc>
 801b98a:	6823      	ldr	r3, [r4, #0]
 801b98c:	f043 0320 	orr.w	r3, r3, #32
 801b990:	6023      	str	r3, [r4, #0]
 801b992:	2378      	movs	r3, #120	; 0x78
 801b994:	4828      	ldr	r0, [pc, #160]	; (801ba38 <_printf_i+0x248>)
 801b996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b99a:	e7e3      	b.n	801b964 <_printf_i+0x174>
 801b99c:	065e      	lsls	r6, r3, #25
 801b99e:	bf48      	it	mi
 801b9a0:	b2ad      	uxthmi	r5, r5
 801b9a2:	e7e6      	b.n	801b972 <_printf_i+0x182>
 801b9a4:	4616      	mov	r6, r2
 801b9a6:	e7bb      	b.n	801b920 <_printf_i+0x130>
 801b9a8:	680b      	ldr	r3, [r1, #0]
 801b9aa:	6826      	ldr	r6, [r4, #0]
 801b9ac:	6960      	ldr	r0, [r4, #20]
 801b9ae:	1d1d      	adds	r5, r3, #4
 801b9b0:	600d      	str	r5, [r1, #0]
 801b9b2:	0635      	lsls	r5, r6, #24
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	d501      	bpl.n	801b9bc <_printf_i+0x1cc>
 801b9b8:	6018      	str	r0, [r3, #0]
 801b9ba:	e002      	b.n	801b9c2 <_printf_i+0x1d2>
 801b9bc:	0671      	lsls	r1, r6, #25
 801b9be:	d5fb      	bpl.n	801b9b8 <_printf_i+0x1c8>
 801b9c0:	8018      	strh	r0, [r3, #0]
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	6123      	str	r3, [r4, #16]
 801b9c6:	4616      	mov	r6, r2
 801b9c8:	e7ba      	b.n	801b940 <_printf_i+0x150>
 801b9ca:	680b      	ldr	r3, [r1, #0]
 801b9cc:	1d1a      	adds	r2, r3, #4
 801b9ce:	600a      	str	r2, [r1, #0]
 801b9d0:	681e      	ldr	r6, [r3, #0]
 801b9d2:	6862      	ldr	r2, [r4, #4]
 801b9d4:	2100      	movs	r1, #0
 801b9d6:	4630      	mov	r0, r6
 801b9d8:	f7e4 fc82 	bl	80002e0 <memchr>
 801b9dc:	b108      	cbz	r0, 801b9e2 <_printf_i+0x1f2>
 801b9de:	1b80      	subs	r0, r0, r6
 801b9e0:	6060      	str	r0, [r4, #4]
 801b9e2:	6863      	ldr	r3, [r4, #4]
 801b9e4:	6123      	str	r3, [r4, #16]
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9ec:	e7a8      	b.n	801b940 <_printf_i+0x150>
 801b9ee:	6923      	ldr	r3, [r4, #16]
 801b9f0:	4632      	mov	r2, r6
 801b9f2:	4649      	mov	r1, r9
 801b9f4:	4640      	mov	r0, r8
 801b9f6:	47d0      	blx	sl
 801b9f8:	3001      	adds	r0, #1
 801b9fa:	d0ab      	beq.n	801b954 <_printf_i+0x164>
 801b9fc:	6823      	ldr	r3, [r4, #0]
 801b9fe:	079b      	lsls	r3, r3, #30
 801ba00:	d413      	bmi.n	801ba2a <_printf_i+0x23a>
 801ba02:	68e0      	ldr	r0, [r4, #12]
 801ba04:	9b03      	ldr	r3, [sp, #12]
 801ba06:	4298      	cmp	r0, r3
 801ba08:	bfb8      	it	lt
 801ba0a:	4618      	movlt	r0, r3
 801ba0c:	e7a4      	b.n	801b958 <_printf_i+0x168>
 801ba0e:	2301      	movs	r3, #1
 801ba10:	4632      	mov	r2, r6
 801ba12:	4649      	mov	r1, r9
 801ba14:	4640      	mov	r0, r8
 801ba16:	47d0      	blx	sl
 801ba18:	3001      	adds	r0, #1
 801ba1a:	d09b      	beq.n	801b954 <_printf_i+0x164>
 801ba1c:	3501      	adds	r5, #1
 801ba1e:	68e3      	ldr	r3, [r4, #12]
 801ba20:	9903      	ldr	r1, [sp, #12]
 801ba22:	1a5b      	subs	r3, r3, r1
 801ba24:	42ab      	cmp	r3, r5
 801ba26:	dcf2      	bgt.n	801ba0e <_printf_i+0x21e>
 801ba28:	e7eb      	b.n	801ba02 <_printf_i+0x212>
 801ba2a:	2500      	movs	r5, #0
 801ba2c:	f104 0619 	add.w	r6, r4, #25
 801ba30:	e7f5      	b.n	801ba1e <_printf_i+0x22e>
 801ba32:	bf00      	nop
 801ba34:	0801f98b 	.word	0x0801f98b
 801ba38:	0801f99c 	.word	0x0801f99c

0801ba3c <_read_r>:
 801ba3c:	b538      	push	{r3, r4, r5, lr}
 801ba3e:	4d07      	ldr	r5, [pc, #28]	; (801ba5c <_read_r+0x20>)
 801ba40:	4604      	mov	r4, r0
 801ba42:	4608      	mov	r0, r1
 801ba44:	4611      	mov	r1, r2
 801ba46:	2200      	movs	r2, #0
 801ba48:	602a      	str	r2, [r5, #0]
 801ba4a:	461a      	mov	r2, r3
 801ba4c:	f7e5 f974 	bl	8000d38 <_read>
 801ba50:	1c43      	adds	r3, r0, #1
 801ba52:	d102      	bne.n	801ba5a <_read_r+0x1e>
 801ba54:	682b      	ldr	r3, [r5, #0]
 801ba56:	b103      	cbz	r3, 801ba5a <_read_r+0x1e>
 801ba58:	6023      	str	r3, [r4, #0]
 801ba5a:	bd38      	pop	{r3, r4, r5, pc}
 801ba5c:	2400d758 	.word	0x2400d758

0801ba60 <__swbuf_r>:
 801ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba62:	460e      	mov	r6, r1
 801ba64:	4614      	mov	r4, r2
 801ba66:	4605      	mov	r5, r0
 801ba68:	b118      	cbz	r0, 801ba72 <__swbuf_r+0x12>
 801ba6a:	6983      	ldr	r3, [r0, #24]
 801ba6c:	b90b      	cbnz	r3, 801ba72 <__swbuf_r+0x12>
 801ba6e:	f7ff f913 	bl	801ac98 <__sinit>
 801ba72:	4b21      	ldr	r3, [pc, #132]	; (801baf8 <__swbuf_r+0x98>)
 801ba74:	429c      	cmp	r4, r3
 801ba76:	d12b      	bne.n	801bad0 <__swbuf_r+0x70>
 801ba78:	686c      	ldr	r4, [r5, #4]
 801ba7a:	69a3      	ldr	r3, [r4, #24]
 801ba7c:	60a3      	str	r3, [r4, #8]
 801ba7e:	89a3      	ldrh	r3, [r4, #12]
 801ba80:	071a      	lsls	r2, r3, #28
 801ba82:	d52f      	bpl.n	801bae4 <__swbuf_r+0x84>
 801ba84:	6923      	ldr	r3, [r4, #16]
 801ba86:	b36b      	cbz	r3, 801bae4 <__swbuf_r+0x84>
 801ba88:	6923      	ldr	r3, [r4, #16]
 801ba8a:	6820      	ldr	r0, [r4, #0]
 801ba8c:	1ac0      	subs	r0, r0, r3
 801ba8e:	6963      	ldr	r3, [r4, #20]
 801ba90:	b2f6      	uxtb	r6, r6
 801ba92:	4283      	cmp	r3, r0
 801ba94:	4637      	mov	r7, r6
 801ba96:	dc04      	bgt.n	801baa2 <__swbuf_r+0x42>
 801ba98:	4621      	mov	r1, r4
 801ba9a:	4628      	mov	r0, r5
 801ba9c:	f7ff fc1c 	bl	801b2d8 <_fflush_r>
 801baa0:	bb30      	cbnz	r0, 801baf0 <__swbuf_r+0x90>
 801baa2:	68a3      	ldr	r3, [r4, #8]
 801baa4:	3b01      	subs	r3, #1
 801baa6:	60a3      	str	r3, [r4, #8]
 801baa8:	6823      	ldr	r3, [r4, #0]
 801baaa:	1c5a      	adds	r2, r3, #1
 801baac:	6022      	str	r2, [r4, #0]
 801baae:	701e      	strb	r6, [r3, #0]
 801bab0:	6963      	ldr	r3, [r4, #20]
 801bab2:	3001      	adds	r0, #1
 801bab4:	4283      	cmp	r3, r0
 801bab6:	d004      	beq.n	801bac2 <__swbuf_r+0x62>
 801bab8:	89a3      	ldrh	r3, [r4, #12]
 801baba:	07db      	lsls	r3, r3, #31
 801babc:	d506      	bpl.n	801bacc <__swbuf_r+0x6c>
 801babe:	2e0a      	cmp	r6, #10
 801bac0:	d104      	bne.n	801bacc <__swbuf_r+0x6c>
 801bac2:	4621      	mov	r1, r4
 801bac4:	4628      	mov	r0, r5
 801bac6:	f7ff fc07 	bl	801b2d8 <_fflush_r>
 801baca:	b988      	cbnz	r0, 801baf0 <__swbuf_r+0x90>
 801bacc:	4638      	mov	r0, r7
 801bace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bad0:	4b0a      	ldr	r3, [pc, #40]	; (801bafc <__swbuf_r+0x9c>)
 801bad2:	429c      	cmp	r4, r3
 801bad4:	d101      	bne.n	801bada <__swbuf_r+0x7a>
 801bad6:	68ac      	ldr	r4, [r5, #8]
 801bad8:	e7cf      	b.n	801ba7a <__swbuf_r+0x1a>
 801bada:	4b09      	ldr	r3, [pc, #36]	; (801bb00 <__swbuf_r+0xa0>)
 801badc:	429c      	cmp	r4, r3
 801bade:	bf08      	it	eq
 801bae0:	68ec      	ldreq	r4, [r5, #12]
 801bae2:	e7ca      	b.n	801ba7a <__swbuf_r+0x1a>
 801bae4:	4621      	mov	r1, r4
 801bae6:	4628      	mov	r0, r5
 801bae8:	f000 f80c 	bl	801bb04 <__swsetup_r>
 801baec:	2800      	cmp	r0, #0
 801baee:	d0cb      	beq.n	801ba88 <__swbuf_r+0x28>
 801baf0:	f04f 37ff 	mov.w	r7, #4294967295
 801baf4:	e7ea      	b.n	801bacc <__swbuf_r+0x6c>
 801baf6:	bf00      	nop
 801baf8:	0801f884 	.word	0x0801f884
 801bafc:	0801f8a4 	.word	0x0801f8a4
 801bb00:	0801f864 	.word	0x0801f864

0801bb04 <__swsetup_r>:
 801bb04:	4b32      	ldr	r3, [pc, #200]	; (801bbd0 <__swsetup_r+0xcc>)
 801bb06:	b570      	push	{r4, r5, r6, lr}
 801bb08:	681d      	ldr	r5, [r3, #0]
 801bb0a:	4606      	mov	r6, r0
 801bb0c:	460c      	mov	r4, r1
 801bb0e:	b125      	cbz	r5, 801bb1a <__swsetup_r+0x16>
 801bb10:	69ab      	ldr	r3, [r5, #24]
 801bb12:	b913      	cbnz	r3, 801bb1a <__swsetup_r+0x16>
 801bb14:	4628      	mov	r0, r5
 801bb16:	f7ff f8bf 	bl	801ac98 <__sinit>
 801bb1a:	4b2e      	ldr	r3, [pc, #184]	; (801bbd4 <__swsetup_r+0xd0>)
 801bb1c:	429c      	cmp	r4, r3
 801bb1e:	d10f      	bne.n	801bb40 <__swsetup_r+0x3c>
 801bb20:	686c      	ldr	r4, [r5, #4]
 801bb22:	89a3      	ldrh	r3, [r4, #12]
 801bb24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb28:	0719      	lsls	r1, r3, #28
 801bb2a:	d42c      	bmi.n	801bb86 <__swsetup_r+0x82>
 801bb2c:	06dd      	lsls	r5, r3, #27
 801bb2e:	d411      	bmi.n	801bb54 <__swsetup_r+0x50>
 801bb30:	2309      	movs	r3, #9
 801bb32:	6033      	str	r3, [r6, #0]
 801bb34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb38:	81a3      	strh	r3, [r4, #12]
 801bb3a:	f04f 30ff 	mov.w	r0, #4294967295
 801bb3e:	e03e      	b.n	801bbbe <__swsetup_r+0xba>
 801bb40:	4b25      	ldr	r3, [pc, #148]	; (801bbd8 <__swsetup_r+0xd4>)
 801bb42:	429c      	cmp	r4, r3
 801bb44:	d101      	bne.n	801bb4a <__swsetup_r+0x46>
 801bb46:	68ac      	ldr	r4, [r5, #8]
 801bb48:	e7eb      	b.n	801bb22 <__swsetup_r+0x1e>
 801bb4a:	4b24      	ldr	r3, [pc, #144]	; (801bbdc <__swsetup_r+0xd8>)
 801bb4c:	429c      	cmp	r4, r3
 801bb4e:	bf08      	it	eq
 801bb50:	68ec      	ldreq	r4, [r5, #12]
 801bb52:	e7e6      	b.n	801bb22 <__swsetup_r+0x1e>
 801bb54:	0758      	lsls	r0, r3, #29
 801bb56:	d512      	bpl.n	801bb7e <__swsetup_r+0x7a>
 801bb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb5a:	b141      	cbz	r1, 801bb6e <__swsetup_r+0x6a>
 801bb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb60:	4299      	cmp	r1, r3
 801bb62:	d002      	beq.n	801bb6a <__swsetup_r+0x66>
 801bb64:	4630      	mov	r0, r6
 801bb66:	f7ff fc2b 	bl	801b3c0 <_free_r>
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	6363      	str	r3, [r4, #52]	; 0x34
 801bb6e:	89a3      	ldrh	r3, [r4, #12]
 801bb70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb74:	81a3      	strh	r3, [r4, #12]
 801bb76:	2300      	movs	r3, #0
 801bb78:	6063      	str	r3, [r4, #4]
 801bb7a:	6923      	ldr	r3, [r4, #16]
 801bb7c:	6023      	str	r3, [r4, #0]
 801bb7e:	89a3      	ldrh	r3, [r4, #12]
 801bb80:	f043 0308 	orr.w	r3, r3, #8
 801bb84:	81a3      	strh	r3, [r4, #12]
 801bb86:	6923      	ldr	r3, [r4, #16]
 801bb88:	b94b      	cbnz	r3, 801bb9e <__swsetup_r+0x9a>
 801bb8a:	89a3      	ldrh	r3, [r4, #12]
 801bb8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb94:	d003      	beq.n	801bb9e <__swsetup_r+0x9a>
 801bb96:	4621      	mov	r1, r4
 801bb98:	4630      	mov	r0, r6
 801bb9a:	f000 f84d 	bl	801bc38 <__smakebuf_r>
 801bb9e:	89a0      	ldrh	r0, [r4, #12]
 801bba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bba4:	f010 0301 	ands.w	r3, r0, #1
 801bba8:	d00a      	beq.n	801bbc0 <__swsetup_r+0xbc>
 801bbaa:	2300      	movs	r3, #0
 801bbac:	60a3      	str	r3, [r4, #8]
 801bbae:	6963      	ldr	r3, [r4, #20]
 801bbb0:	425b      	negs	r3, r3
 801bbb2:	61a3      	str	r3, [r4, #24]
 801bbb4:	6923      	ldr	r3, [r4, #16]
 801bbb6:	b943      	cbnz	r3, 801bbca <__swsetup_r+0xc6>
 801bbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bbbc:	d1ba      	bne.n	801bb34 <__swsetup_r+0x30>
 801bbbe:	bd70      	pop	{r4, r5, r6, pc}
 801bbc0:	0781      	lsls	r1, r0, #30
 801bbc2:	bf58      	it	pl
 801bbc4:	6963      	ldrpl	r3, [r4, #20]
 801bbc6:	60a3      	str	r3, [r4, #8]
 801bbc8:	e7f4      	b.n	801bbb4 <__swsetup_r+0xb0>
 801bbca:	2000      	movs	r0, #0
 801bbcc:	e7f7      	b.n	801bbbe <__swsetup_r+0xba>
 801bbce:	bf00      	nop
 801bbd0:	24000038 	.word	0x24000038
 801bbd4:	0801f884 	.word	0x0801f884
 801bbd8:	0801f8a4 	.word	0x0801f8a4
 801bbdc:	0801f864 	.word	0x0801f864

0801bbe0 <abort>:
 801bbe0:	b508      	push	{r3, lr}
 801bbe2:	2006      	movs	r0, #6
 801bbe4:	f000 f890 	bl	801bd08 <raise>
 801bbe8:	2001      	movs	r0, #1
 801bbea:	f7e5 f89b 	bl	8000d24 <_exit>

0801bbee <__swhatbuf_r>:
 801bbee:	b570      	push	{r4, r5, r6, lr}
 801bbf0:	460e      	mov	r6, r1
 801bbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbf6:	2900      	cmp	r1, #0
 801bbf8:	b096      	sub	sp, #88	; 0x58
 801bbfa:	4614      	mov	r4, r2
 801bbfc:	461d      	mov	r5, r3
 801bbfe:	da07      	bge.n	801bc10 <__swhatbuf_r+0x22>
 801bc00:	2300      	movs	r3, #0
 801bc02:	602b      	str	r3, [r5, #0]
 801bc04:	89b3      	ldrh	r3, [r6, #12]
 801bc06:	061a      	lsls	r2, r3, #24
 801bc08:	d410      	bmi.n	801bc2c <__swhatbuf_r+0x3e>
 801bc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc0e:	e00e      	b.n	801bc2e <__swhatbuf_r+0x40>
 801bc10:	466a      	mov	r2, sp
 801bc12:	f000 f895 	bl	801bd40 <_fstat_r>
 801bc16:	2800      	cmp	r0, #0
 801bc18:	dbf2      	blt.n	801bc00 <__swhatbuf_r+0x12>
 801bc1a:	9a01      	ldr	r2, [sp, #4]
 801bc1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc24:	425a      	negs	r2, r3
 801bc26:	415a      	adcs	r2, r3
 801bc28:	602a      	str	r2, [r5, #0]
 801bc2a:	e7ee      	b.n	801bc0a <__swhatbuf_r+0x1c>
 801bc2c:	2340      	movs	r3, #64	; 0x40
 801bc2e:	2000      	movs	r0, #0
 801bc30:	6023      	str	r3, [r4, #0]
 801bc32:	b016      	add	sp, #88	; 0x58
 801bc34:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bc38 <__smakebuf_r>:
 801bc38:	898b      	ldrh	r3, [r1, #12]
 801bc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc3c:	079d      	lsls	r5, r3, #30
 801bc3e:	4606      	mov	r6, r0
 801bc40:	460c      	mov	r4, r1
 801bc42:	d507      	bpl.n	801bc54 <__smakebuf_r+0x1c>
 801bc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc48:	6023      	str	r3, [r4, #0]
 801bc4a:	6123      	str	r3, [r4, #16]
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	6163      	str	r3, [r4, #20]
 801bc50:	b002      	add	sp, #8
 801bc52:	bd70      	pop	{r4, r5, r6, pc}
 801bc54:	ab01      	add	r3, sp, #4
 801bc56:	466a      	mov	r2, sp
 801bc58:	f7ff ffc9 	bl	801bbee <__swhatbuf_r>
 801bc5c:	9900      	ldr	r1, [sp, #0]
 801bc5e:	4605      	mov	r5, r0
 801bc60:	4630      	mov	r0, r6
 801bc62:	f7ff f903 	bl	801ae6c <_malloc_r>
 801bc66:	b948      	cbnz	r0, 801bc7c <__smakebuf_r+0x44>
 801bc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc6c:	059a      	lsls	r2, r3, #22
 801bc6e:	d4ef      	bmi.n	801bc50 <__smakebuf_r+0x18>
 801bc70:	f023 0303 	bic.w	r3, r3, #3
 801bc74:	f043 0302 	orr.w	r3, r3, #2
 801bc78:	81a3      	strh	r3, [r4, #12]
 801bc7a:	e7e3      	b.n	801bc44 <__smakebuf_r+0xc>
 801bc7c:	4b0d      	ldr	r3, [pc, #52]	; (801bcb4 <__smakebuf_r+0x7c>)
 801bc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 801bc80:	89a3      	ldrh	r3, [r4, #12]
 801bc82:	6020      	str	r0, [r4, #0]
 801bc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc88:	81a3      	strh	r3, [r4, #12]
 801bc8a:	9b00      	ldr	r3, [sp, #0]
 801bc8c:	6163      	str	r3, [r4, #20]
 801bc8e:	9b01      	ldr	r3, [sp, #4]
 801bc90:	6120      	str	r0, [r4, #16]
 801bc92:	b15b      	cbz	r3, 801bcac <__smakebuf_r+0x74>
 801bc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc98:	4630      	mov	r0, r6
 801bc9a:	f000 f863 	bl	801bd64 <_isatty_r>
 801bc9e:	b128      	cbz	r0, 801bcac <__smakebuf_r+0x74>
 801bca0:	89a3      	ldrh	r3, [r4, #12]
 801bca2:	f023 0303 	bic.w	r3, r3, #3
 801bca6:	f043 0301 	orr.w	r3, r3, #1
 801bcaa:	81a3      	strh	r3, [r4, #12]
 801bcac:	89a0      	ldrh	r0, [r4, #12]
 801bcae:	4305      	orrs	r5, r0
 801bcb0:	81a5      	strh	r5, [r4, #12]
 801bcb2:	e7cd      	b.n	801bc50 <__smakebuf_r+0x18>
 801bcb4:	0801ac31 	.word	0x0801ac31

0801bcb8 <_raise_r>:
 801bcb8:	291f      	cmp	r1, #31
 801bcba:	b538      	push	{r3, r4, r5, lr}
 801bcbc:	4604      	mov	r4, r0
 801bcbe:	460d      	mov	r5, r1
 801bcc0:	d904      	bls.n	801bccc <_raise_r+0x14>
 801bcc2:	2316      	movs	r3, #22
 801bcc4:	6003      	str	r3, [r0, #0]
 801bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 801bcca:	bd38      	pop	{r3, r4, r5, pc}
 801bccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bcce:	b112      	cbz	r2, 801bcd6 <_raise_r+0x1e>
 801bcd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bcd4:	b94b      	cbnz	r3, 801bcea <_raise_r+0x32>
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f000 f830 	bl	801bd3c <_getpid_r>
 801bcdc:	462a      	mov	r2, r5
 801bcde:	4601      	mov	r1, r0
 801bce0:	4620      	mov	r0, r4
 801bce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bce6:	f000 b817 	b.w	801bd18 <_kill_r>
 801bcea:	2b01      	cmp	r3, #1
 801bcec:	d00a      	beq.n	801bd04 <_raise_r+0x4c>
 801bcee:	1c59      	adds	r1, r3, #1
 801bcf0:	d103      	bne.n	801bcfa <_raise_r+0x42>
 801bcf2:	2316      	movs	r3, #22
 801bcf4:	6003      	str	r3, [r0, #0]
 801bcf6:	2001      	movs	r0, #1
 801bcf8:	e7e7      	b.n	801bcca <_raise_r+0x12>
 801bcfa:	2400      	movs	r4, #0
 801bcfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bd00:	4628      	mov	r0, r5
 801bd02:	4798      	blx	r3
 801bd04:	2000      	movs	r0, #0
 801bd06:	e7e0      	b.n	801bcca <_raise_r+0x12>

0801bd08 <raise>:
 801bd08:	4b02      	ldr	r3, [pc, #8]	; (801bd14 <raise+0xc>)
 801bd0a:	4601      	mov	r1, r0
 801bd0c:	6818      	ldr	r0, [r3, #0]
 801bd0e:	f7ff bfd3 	b.w	801bcb8 <_raise_r>
 801bd12:	bf00      	nop
 801bd14:	24000038 	.word	0x24000038

0801bd18 <_kill_r>:
 801bd18:	b538      	push	{r3, r4, r5, lr}
 801bd1a:	4d07      	ldr	r5, [pc, #28]	; (801bd38 <_kill_r+0x20>)
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	4604      	mov	r4, r0
 801bd20:	4608      	mov	r0, r1
 801bd22:	4611      	mov	r1, r2
 801bd24:	602b      	str	r3, [r5, #0]
 801bd26:	f7e4 ffeb 	bl	8000d00 <_kill>
 801bd2a:	1c43      	adds	r3, r0, #1
 801bd2c:	d102      	bne.n	801bd34 <_kill_r+0x1c>
 801bd2e:	682b      	ldr	r3, [r5, #0]
 801bd30:	b103      	cbz	r3, 801bd34 <_kill_r+0x1c>
 801bd32:	6023      	str	r3, [r4, #0]
 801bd34:	bd38      	pop	{r3, r4, r5, pc}
 801bd36:	bf00      	nop
 801bd38:	2400d758 	.word	0x2400d758

0801bd3c <_getpid_r>:
 801bd3c:	f7e4 bfd8 	b.w	8000cf0 <_getpid>

0801bd40 <_fstat_r>:
 801bd40:	b538      	push	{r3, r4, r5, lr}
 801bd42:	4d07      	ldr	r5, [pc, #28]	; (801bd60 <_fstat_r+0x20>)
 801bd44:	2300      	movs	r3, #0
 801bd46:	4604      	mov	r4, r0
 801bd48:	4608      	mov	r0, r1
 801bd4a:	4611      	mov	r1, r2
 801bd4c:	602b      	str	r3, [r5, #0]
 801bd4e:	f7e5 f838 	bl	8000dc2 <_fstat>
 801bd52:	1c43      	adds	r3, r0, #1
 801bd54:	d102      	bne.n	801bd5c <_fstat_r+0x1c>
 801bd56:	682b      	ldr	r3, [r5, #0]
 801bd58:	b103      	cbz	r3, 801bd5c <_fstat_r+0x1c>
 801bd5a:	6023      	str	r3, [r4, #0]
 801bd5c:	bd38      	pop	{r3, r4, r5, pc}
 801bd5e:	bf00      	nop
 801bd60:	2400d758 	.word	0x2400d758

0801bd64 <_isatty_r>:
 801bd64:	b538      	push	{r3, r4, r5, lr}
 801bd66:	4d06      	ldr	r5, [pc, #24]	; (801bd80 <_isatty_r+0x1c>)
 801bd68:	2300      	movs	r3, #0
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	602b      	str	r3, [r5, #0]
 801bd70:	f7e5 f837 	bl	8000de2 <_isatty>
 801bd74:	1c43      	adds	r3, r0, #1
 801bd76:	d102      	bne.n	801bd7e <_isatty_r+0x1a>
 801bd78:	682b      	ldr	r3, [r5, #0]
 801bd7a:	b103      	cbz	r3, 801bd7e <_isatty_r+0x1a>
 801bd7c:	6023      	str	r3, [r4, #0]
 801bd7e:	bd38      	pop	{r3, r4, r5, pc}
 801bd80:	2400d758 	.word	0x2400d758

0801bd84 <_init>:
 801bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd86:	bf00      	nop
 801bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd8a:	bc08      	pop	{r3}
 801bd8c:	469e      	mov	lr, r3
 801bd8e:	4770      	bx	lr

0801bd90 <_fini>:
 801bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd92:	bf00      	nop
 801bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd96:	bc08      	pop	{r3}
 801bd98:	469e      	mov	lr, r3
 801bd9a:	4770      	bx	lr
